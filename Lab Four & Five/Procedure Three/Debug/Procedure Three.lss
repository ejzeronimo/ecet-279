
Procedure Three.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800200  00000b36  00000bca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800280  00800280  00000c4a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019a7  00000000  00000000  00000dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fef  00000000  00000000  00002753  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf6  00000000  00000000  00003742  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  00004438  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f7  00000000  00000000  000046e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b96  00000000  00000000  00004edf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00005a75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	5f c1       	rjmp	.+702    	; 0x388 <__vector_50>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e3       	ldi	r30, 0x36	; 54
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 38       	cpi	r26, 0x80	; 128
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e8       	ldi	r26, 0x80	; 128
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 38       	cpi	r26, 0x82	; 130
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	be d2       	rcall	.+1404   	; 0x69c <main>
 120:	08 c5       	rjmp	.+2576   	; 0xb32 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initDebugTimer>:
	Uses Timer5 with a prescaler of 256, and enables overflow interrupt
*/
void initDebugTimer()
{
	//Prescaler 256
	TCCR5B |= (1<<CS52) | (1<<CS50);
 124:	e1 e2       	ldi	r30, 0x21	; 33
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	80 81       	ld	r24, Z
 12a:	85 60       	ori	r24, 0x05	; 5
 12c:	80 83       	st	Z, r24
	
	//15625 TOP Value for UPDATE_FREQUENCY
	TCNT5 = 65535 - (F_CPU / (1024*UPDATE_FREQUENCY));
 12e:	85 ee       	ldi	r24, 0xE5	; 229
 130:	99 ef       	ldi	r25, 0xF9	; 249
 132:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
 136:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
	
	//Enable Timer Overflow Interrupt
	TIMSK5 = (1<<TOIE5);
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7c0073>
 140:	08 95       	ret

00000142 <initDebugUSART>:
	8-bits, 25000 Baud Rate
*/
void initDebugUSART()
{
	//Enable RX and TX
	UCSR0B = (1<<TXEN0) | (1<<RXEN0);
 142:	88 e1       	ldi	r24, 0x18	; 24
 144:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	
	//Set Communication Modes
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);	//8 Data bits
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
	UBRR0 = 3;							//250000 Baud Rate	
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 156:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 15a:	08 95       	ret

0000015c <initDebug>:
	Configures the USART registers for data transmission, Configures the
	Timer registers, and enables interrupts.
*/
void initDebug()
{
	initDebugUSART();
 15c:	f2 df       	rcall	.-28     	; 0x142 <initDebugUSART>
	initDebugTimer();
 15e:	e2 df       	rcall	.-60     	; 0x124 <initDebugTimer>
 160:	78 94       	sei
	sei();
 162:	08 95       	ret

00000164 <UART0Out>:
 164:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	Sends 8-bit unsigned integer out UART0
*/
void UART0Out(uint8_t data) 
{
	//Wait for previous transmission to be done
	while(!(UCSR0A & (1<<UDRE0)));
 168:	95 ff       	sbrs	r25, 5
 16a:	fc cf       	rjmp	.-8      	; 0x164 <UART0Out>
	
	//Set register for next transmission
	UDR0 = data;	
 16c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 170:	08 95       	ret

00000172 <sendStopBit>:
	Sends 0x0A to signify stop
*/
void sendStopBit()
{
	//Wait for previous transmission to be done
	while(!(UCSR0A & (1<<UDRE0)));
 172:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 176:	85 ff       	sbrs	r24, 5
 178:	fc cf       	rjmp	.-8      	; 0x172 <sendStopBit>
	
	//Set register for next transmission
	UDR0 = 0x0A;
 17a:	8a e0       	ldi	r24, 0x0A	; 10
 17c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 180:	08 95       	ret

00000182 <UART0PrintString>:

Description:
	Continues to send data until reaching null character
*/
void UART0PrintString(char *strPtr)
{
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	ec 01       	movw	r28, r24
	while(*strPtr != 0x00) 
 188:	02 c0       	rjmp	.+4      	; 0x18e <UART0PrintString+0xc>
	{
		UART0Out(*strPtr);
 18a:	ec df       	rcall	.-40     	; 0x164 <UART0Out>
		strPtr ++;
 18c:	21 96       	adiw	r28, 0x01	; 1
Description:
	Continues to send data until reaching null character
*/
void UART0PrintString(char *strPtr)
{
	while(*strPtr != 0x00) 
 18e:	88 81       	ld	r24, Y
 190:	81 11       	cpse	r24, r1
 192:	fb cf       	rjmp	.-10     	; 0x18a <UART0PrintString+0x8>
	{
		UART0Out(*strPtr);
		strPtr ++;
	}
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <sendPortData>:
Description:
	Loops through portAddr array and sends
	out data at each address
*/
void sendPortData()
{	
 19a:	cf 93       	push	r28
	for (uint8_t i=0; i<18; i++)
 19c:	c0 e0       	ldi	r28, 0x00	; 0
 19e:	0c c0       	rjmp	.+24     	; 0x1b8 <sendPortData+0x1e>
	{
		UART0Out(*portAddr[i]);
 1a0:	ec 2f       	mov	r30, r28
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	ec 5b       	subi	r30, 0xBC	; 188
 1aa:	fd 4f       	sbci	r31, 0xFD	; 253
 1ac:	01 90       	ld	r0, Z+
 1ae:	f0 81       	ld	r31, Z
 1b0:	e0 2d       	mov	r30, r0
 1b2:	80 81       	ld	r24, Z
 1b4:	d7 df       	rcall	.-82     	; 0x164 <UART0Out>
	Loops through portAddr array and sends
	out data at each address
*/
void sendPortData()
{	
	for (uint8_t i=0; i<18; i++)
 1b6:	cf 5f       	subi	r28, 0xFF	; 255
 1b8:	c2 31       	cpi	r28, 0x12	; 18
 1ba:	90 f3       	brcs	.-28     	; 0x1a0 <sendPortData+0x6>
	{
		UART0Out(*portAddr[i]);
	}
}
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <sendTimerData>:
Description:
	Loops though timerAddr array and sends
	out data at each address
*/
void sendTimerData()
{
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
	//Timer 0
	for (uint8_t i=0; i<3; i++) 
 1c4:	c0 e0       	ldi	r28, 0x00	; 0
 1c6:	0c c0       	rjmp	.+24     	; 0x1e0 <sendTimerData+0x20>
	{
		UART0Out(*timerAddr[i]);
 1c8:	ec 2f       	mov	r30, r28
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	ee 0f       	add	r30, r30
 1ce:	ff 1f       	adc	r31, r31
 1d0:	e8 5e       	subi	r30, 0xE8	; 232
 1d2:	fd 4f       	sbci	r31, 0xFD	; 253
 1d4:	01 90       	ld	r0, Z+
 1d6:	f0 81       	ld	r31, Z
 1d8:	e0 2d       	mov	r30, r0
 1da:	80 81       	ld	r24, Z
 1dc:	c3 df       	rcall	.-122    	; 0x164 <UART0Out>
	out data at each address
*/
void sendTimerData()
{
	//Timer 0
	for (uint8_t i=0; i<3; i++) 
 1de:	cf 5f       	subi	r28, 0xFF	; 255
 1e0:	c3 30       	cpi	r28, 0x03	; 3
 1e2:	90 f3       	brcs	.-28     	; 0x1c8 <sendTimerData+0x8>
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR0A
	UART0Out(*timerAddr[3]);
 1e4:	c8 e1       	ldi	r28, 0x18	; 24
 1e6:	d2 e0       	ldi	r29, 0x02	; 2
 1e8:	ee 81       	ldd	r30, Y+6	; 0x06
 1ea:	ff 81       	ldd	r31, Y+7	; 0x07
 1ec:	80 81       	ld	r24, Z
 1ee:	ba df       	rcall	.-140    	; 0x164 <UART0Out>
	UART0Out(*(timerAddr[3]+1));
 1f0:	ee 81       	ldd	r30, Y+6	; 0x06
 1f2:	ff 81       	ldd	r31, Y+7	; 0x07
 1f4:	81 81       	ldd	r24, Z+1	; 0x01
 1f6:	b6 df       	rcall	.-148    	; 0x164 <UART0Out>
	
	//OCR0B
	UART0Out(*timerAddr[4]);
 1f8:	e8 85       	ldd	r30, Y+8	; 0x08
 1fa:	f9 85       	ldd	r31, Y+9	; 0x09
 1fc:	80 81       	ld	r24, Z
 1fe:	b2 df       	rcall	.-156    	; 0x164 <UART0Out>
	UART0Out(*(timerAddr[4]+1));
 200:	e8 85       	ldd	r30, Y+8	; 0x08
 202:	f9 85       	ldd	r31, Y+9	; 0x09
 204:	81 81       	ldd	r24, Z+1	; 0x01
 206:	ae df       	rcall	.-164    	; 0x164 <UART0Out>
 208:	c5 e0       	ldi	r28, 0x05	; 5
	
	//Timer 1
	for (uint8_t i=5; i<8; i++)
 20a:	0c c0       	rjmp	.+24     	; 0x224 <sendTimerData+0x64>
 20c:	ec 2f       	mov	r30, r28
	{
		UART0Out(*timerAddr[i]);
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	ee 0f       	add	r30, r30
 212:	ff 1f       	adc	r31, r31
 214:	e8 5e       	subi	r30, 0xE8	; 232
 216:	fd 4f       	sbci	r31, 0xFD	; 253
 218:	01 90       	ld	r0, Z+
 21a:	f0 81       	ld	r31, Z
 21c:	e0 2d       	mov	r30, r0
 21e:	80 81       	ld	r24, Z
 220:	a1 df       	rcall	.-190    	; 0x164 <UART0Out>
 222:	cf 5f       	subi	r28, 0xFF	; 255
	//OCR0B
	UART0Out(*timerAddr[4]);
	UART0Out(*(timerAddr[4]+1));
	
	//Timer 1
	for (uint8_t i=5; i<8; i++)
 224:	c8 30       	cpi	r28, 0x08	; 8
 226:	90 f3       	brcs	.-28     	; 0x20c <sendTimerData+0x4c>
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR1A
	UART0Out(*timerAddr[8]);
 228:	c8 e1       	ldi	r28, 0x18	; 24
 22a:	d2 e0       	ldi	r29, 0x02	; 2
 22c:	e8 89       	ldd	r30, Y+16	; 0x10
 22e:	f9 89       	ldd	r31, Y+17	; 0x11
 230:	80 81       	ld	r24, Z
 232:	98 df       	rcall	.-208    	; 0x164 <UART0Out>
	UART0Out(*(timerAddr[8]+1));
 234:	e8 89       	ldd	r30, Y+16	; 0x10
 236:	f9 89       	ldd	r31, Y+17	; 0x11
 238:	81 81       	ldd	r24, Z+1	; 0x01
 23a:	94 df       	rcall	.-216    	; 0x164 <UART0Out>
	
	//OCR1B
	UART0Out(*timerAddr[9]);
 23c:	ea 89       	ldd	r30, Y+18	; 0x12
 23e:	fb 89       	ldd	r31, Y+19	; 0x13
 240:	80 81       	ld	r24, Z
 242:	90 df       	rcall	.-224    	; 0x164 <UART0Out>
	UART0Out(*(timerAddr[9]+1));
 244:	ea 89       	ldd	r30, Y+18	; 0x12
 246:	fb 89       	ldd	r31, Y+19	; 0x13
 248:	81 81       	ldd	r24, Z+1	; 0x01
 24a:	8c df       	rcall	.-232    	; 0x164 <UART0Out>
	
	//OCR1C
	UART0Out(*timerAddr[10]);
 24c:	ec 89       	ldd	r30, Y+20	; 0x14
 24e:	fd 89       	ldd	r31, Y+21	; 0x15
 250:	80 81       	ld	r24, Z
 252:	88 df       	rcall	.-240    	; 0x164 <UART0Out>
 254:	ec 89       	ldd	r30, Y+20	; 0x14
	UART0Out(*(timerAddr[10]+1));
 256:	fd 89       	ldd	r31, Y+21	; 0x15
 258:	81 81       	ldd	r24, Z+1	; 0x01
 25a:	84 df       	rcall	.-248    	; 0x164 <UART0Out>
 25c:	cb e0       	ldi	r28, 0x0B	; 11
 25e:	0c c0       	rjmp	.+24     	; 0x278 <sendTimerData+0xb8>
	
	//Timer 2
	for (uint8_t i=11; i<14; i++)
 260:	ec 2f       	mov	r30, r28
	{
		UART0Out(*timerAddr[i]);
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	ee 0f       	add	r30, r30
 266:	ff 1f       	adc	r31, r31
 268:	e8 5e       	subi	r30, 0xE8	; 232
 26a:	fd 4f       	sbci	r31, 0xFD	; 253
 26c:	01 90       	ld	r0, Z+
 26e:	f0 81       	ld	r31, Z
 270:	e0 2d       	mov	r30, r0
 272:	80 81       	ld	r24, Z
 274:	77 df       	rcall	.-274    	; 0x164 <UART0Out>
 276:	cf 5f       	subi	r28, 0xFF	; 255
	//OCR1C
	UART0Out(*timerAddr[10]);
	UART0Out(*(timerAddr[10]+1));
	
	//Timer 2
	for (uint8_t i=11; i<14; i++)
 278:	ce 30       	cpi	r28, 0x0E	; 14
 27a:	90 f3       	brcs	.-28     	; 0x260 <sendTimerData+0xa0>
 27c:	c8 e1       	ldi	r28, 0x18	; 24
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR2A
	UART0Out(*timerAddr[14]);
 27e:	d2 e0       	ldi	r29, 0x02	; 2
 280:	ec 8d       	ldd	r30, Y+28	; 0x1c
 282:	fd 8d       	ldd	r31, Y+29	; 0x1d
 284:	80 81       	ld	r24, Z
 286:	6e df       	rcall	.-292    	; 0x164 <UART0Out>
	UART0Out(*(timerAddr[14]+1));
 288:	ec 8d       	ldd	r30, Y+28	; 0x1c
 28a:	fd 8d       	ldd	r31, Y+29	; 0x1d
 28c:	81 81       	ldd	r24, Z+1	; 0x01
 28e:	6a df       	rcall	.-300    	; 0x164 <UART0Out>
 290:	ee 8d       	ldd	r30, Y+30	; 0x1e
	
	//OCR2B
	UART0Out(*timerAddr[15]);
 292:	ff 8d       	ldd	r31, Y+31	; 0x1f
 294:	80 81       	ld	r24, Z
 296:	66 df       	rcall	.-308    	; 0x164 <UART0Out>
 298:	ee 8d       	ldd	r30, Y+30	; 0x1e
 29a:	ff 8d       	ldd	r31, Y+31	; 0x1f
	UART0Out(*(timerAddr[15]+1));
 29c:	81 81       	ldd	r24, Z+1	; 0x01
 29e:	62 df       	rcall	.-316    	; 0x164 <UART0Out>
 2a0:	c0 e1       	ldi	r28, 0x10	; 16
 2a2:	0c c0       	rjmp	.+24     	; 0x2bc <sendTimerData+0xfc>
	
	//Timer 3
	for (uint8_t i=16; i<19; i++)
 2a4:	ec 2f       	mov	r30, r28
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
	{
		UART0Out(*timerAddr[i]);
 2a8:	ee 0f       	add	r30, r30
 2aa:	ff 1f       	adc	r31, r31
 2ac:	e8 5e       	subi	r30, 0xE8	; 232
 2ae:	fd 4f       	sbci	r31, 0xFD	; 253
 2b0:	01 90       	ld	r0, Z+
 2b2:	f0 81       	ld	r31, Z
 2b4:	e0 2d       	mov	r30, r0
 2b6:	80 81       	ld	r24, Z
 2b8:	55 df       	rcall	.-342    	; 0x164 <UART0Out>
 2ba:	cf 5f       	subi	r28, 0xFF	; 255
	//OCR2B
	UART0Out(*timerAddr[15]);
	UART0Out(*(timerAddr[15]+1));
	
	//Timer 3
	for (uint8_t i=16; i<19; i++)
 2bc:	c3 31       	cpi	r28, 0x13	; 19
 2be:	90 f3       	brcs	.-28     	; 0x2a4 <sendTimerData+0xe4>
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR3A
	UART0Out(*timerAddr[19]);
 2c0:	c8 e1       	ldi	r28, 0x18	; 24
 2c2:	d2 e0       	ldi	r29, 0x02	; 2
 2c4:	ee a1       	ldd	r30, Y+38	; 0x26
 2c6:	ff a1       	ldd	r31, Y+39	; 0x27
 2c8:	80 81       	ld	r24, Z
 2ca:	4c df       	rcall	.-360    	; 0x164 <UART0Out>
	UART0Out(*(timerAddr[19]+1));
 2cc:	ee a1       	ldd	r30, Y+38	; 0x26
 2ce:	ff a1       	ldd	r31, Y+39	; 0x27
 2d0:	81 81       	ldd	r24, Z+1	; 0x01
 2d2:	48 df       	rcall	.-368    	; 0x164 <UART0Out>
	
	//OCR3B
	UART0Out(*timerAddr[20]);
 2d4:	e8 a5       	ldd	r30, Y+40	; 0x28
 2d6:	f9 a5       	ldd	r31, Y+41	; 0x29
 2d8:	80 81       	ld	r24, Z
 2da:	44 df       	rcall	.-376    	; 0x164 <UART0Out>
 2dc:	e8 a5       	ldd	r30, Y+40	; 0x28
	UART0Out(*(timerAddr[20]+1));
 2de:	f9 a5       	ldd	r31, Y+41	; 0x29
 2e0:	81 81       	ldd	r24, Z+1	; 0x01
 2e2:	40 df       	rcall	.-384    	; 0x164 <UART0Out>
 2e4:	ea a5       	ldd	r30, Y+42	; 0x2a
 2e6:	fb a5       	ldd	r31, Y+43	; 0x2b
	
	//OCR3C
	UART0Out(*timerAddr[21]);
 2e8:	80 81       	ld	r24, Z
 2ea:	3c df       	rcall	.-392    	; 0x164 <UART0Out>
 2ec:	ea a5       	ldd	r30, Y+42	; 0x2a
 2ee:	fb a5       	ldd	r31, Y+43	; 0x2b
 2f0:	81 81       	ldd	r24, Z+1	; 0x01
	UART0Out(*(timerAddr[21]+1));
 2f2:	38 df       	rcall	.-400    	; 0x164 <UART0Out>
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <sendUSARTData>:
 2fa:	cf 93       	push	r28
}
 2fc:	c0 e0       	ldi	r28, 0x00	; 0
 2fe:	0c c0       	rjmp	.+24     	; 0x318 <sendUSARTData+0x1e>
 300:	ec 2f       	mov	r30, r28
*/
void sendUSARTData()
{
	for (uint8_t i=0; i<6; i++)
	{
		UART0Out(*USARTAddr[i]);
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	ee 0f       	add	r30, r30
 306:	ff 1f       	adc	r31, r31
 308:	e4 5f       	subi	r30, 0xF4	; 244
 30a:	fd 4f       	sbci	r31, 0xFD	; 253
 30c:	01 90       	ld	r0, Z+
 30e:	f0 81       	ld	r31, Z
 310:	e0 2d       	mov	r30, r0
 312:	80 81       	ld	r24, Z
 314:	27 df       	rcall	.-434    	; 0x164 <UART0Out>
	Loops though USARTAddr array and sends
	out data at each address
*/
void sendUSARTData()
{
	for (uint8_t i=0; i<6; i++)
 316:	cf 5f       	subi	r28, 0xFF	; 255
 318:	c6 30       	cpi	r28, 0x06	; 6
 31a:	90 f3       	brcs	.-28     	; 0x300 <sendUSARTData+0x6>
	{
		UART0Out(*USARTAddr[i]);
	}
}
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <sendADCData>:
Description:
	Loops though ADCAddr array and sends
	out data at each address
*/
void sendADCData()
{
 320:	cf 93       	push	r28
	for (uint8_t i=0; i<3; i++)
 322:	c0 e0       	ldi	r28, 0x00	; 0
 324:	0c c0       	rjmp	.+24     	; 0x33e <sendADCData+0x1e>
	{
		UART0Out(*ADCAddr[i]);
 326:	ec 2f       	mov	r30, r28
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	ee 0f       	add	r30, r30
 32c:	ff 1f       	adc	r31, r31
 32e:	ea 5f       	subi	r30, 0xFA	; 250
 330:	fd 4f       	sbci	r31, 0xFD	; 253
 332:	01 90       	ld	r0, Z+
 334:	f0 81       	ld	r31, Z
 336:	e0 2d       	mov	r30, r0
 338:	80 81       	ld	r24, Z
 33a:	14 df       	rcall	.-472    	; 0x164 <UART0Out>
	Loops though ADCAddr array and sends
	out data at each address
*/
void sendADCData()
{
	for (uint8_t i=0; i<3; i++)
 33c:	cf 5f       	subi	r28, 0xFF	; 255
 33e:	c3 30       	cpi	r28, 0x03	; 3
 340:	90 f3       	brcs	.-28     	; 0x326 <sendADCData+0x6>
	{
		UART0Out(*ADCAddr[i]);
	}
}
 342:	cf 91       	pop	r28
 344:	08 95       	ret

00000346 <sendINTData>:
Description:
	Loops though intAddr array and sends
	out data at each address
*/
void sendINTData()
{
 346:	cf 93       	push	r28
	for (uint8_t i=0; i<3; i++)
 348:	c0 e0       	ldi	r28, 0x00	; 0
 34a:	0c c0       	rjmp	.+24     	; 0x364 <sendINTData+0x1e>
	{
		UART0Out(*intAddr[i]);
 34c:	ec 2f       	mov	r30, r28
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	ee 0f       	add	r30, r30
 352:	ff 1f       	adc	r31, r31
 354:	e0 50       	subi	r30, 0x00	; 0
 356:	fe 4f       	sbci	r31, 0xFE	; 254
 358:	01 90       	ld	r0, Z+
 35a:	f0 81       	ld	r31, Z
 35c:	e0 2d       	mov	r30, r0
 35e:	80 81       	ld	r24, Z
 360:	01 df       	rcall	.-510    	; 0x164 <UART0Out>
	Loops though intAddr array and sends
	out data at each address
*/
void sendINTData()
{
	for (uint8_t i=0; i<3; i++)
 362:	cf 5f       	subi	r28, 0xFF	; 255
 364:	c3 30       	cpi	r28, 0x03	; 3
 366:	90 f3       	brcs	.-28     	; 0x34c <sendINTData+0x6>
	{
		UART0Out(*intAddr[i]);
	}
}
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <sendRegisterData>:
Description:
	Calls each send___Data() function
*/
void sendRegisterData() 
{
	UART0PrintString(st);
 36c:	8c e6       	ldi	r24, 0x6C	; 108
 36e:	92 e0       	ldi	r25, 0x02	; 2
 370:	08 df       	rcall	.-496    	; 0x182 <UART0PrintString>
	sendStopBit();
 372:	ff de       	rcall	.-514    	; 0x172 <sendStopBit>
	
	sendPortData();
 374:	12 df       	rcall	.-476    	; 0x19a <sendPortData>
	sendTimerData();
 376:	24 df       	rcall	.-440    	; 0x1c0 <sendTimerData>
	sendUSARTData();
 378:	c0 df       	rcall	.-128    	; 0x2fa <sendUSARTData>
	sendADCData();
 37a:	d2 df       	rcall	.-92     	; 0x320 <sendADCData>
	sendINTData();
 37c:	e4 df       	rcall	.-56     	; 0x346 <sendINTData>
 37e:	88 e6       	ldi	r24, 0x68	; 104
	
	UART0PrintString(en);
 380:	92 e0       	ldi	r25, 0x02	; 2
 382:	ff de       	rcall	.-514    	; 0x182 <UART0PrintString>
 384:	f6 ce       	rjmp	.-532    	; 0x172 <sendStopBit>
 386:	08 95       	ret

00000388 <__vector_50>:
	sendStopBit();
 388:	1f 92       	push	r1
 38a:	0f 92       	push	r0
 38c:	0f b6       	in	r0, 0x3f	; 63

Description:
	Resets counter value then sends register data
*/
ISR(TIMER5_OVF_vect) 
{
 38e:	0f 92       	push	r0
 390:	11 24       	eor	r1, r1
 392:	0b b6       	in	r0, 0x3b	; 59
 394:	0f 92       	push	r0
 396:	2f 93       	push	r18
 398:	3f 93       	push	r19
 39a:	4f 93       	push	r20
 39c:	5f 93       	push	r21
 39e:	6f 93       	push	r22
 3a0:	7f 93       	push	r23
 3a2:	8f 93       	push	r24
 3a4:	9f 93       	push	r25
 3a6:	af 93       	push	r26
 3a8:	bf 93       	push	r27
 3aa:	ef 93       	push	r30
 3ac:	ff 93       	push	r31
	TCNT5 = 65535 - (F_CPU / (1024*UPDATE_FREQUENCY));
 3ae:	85 ee       	ldi	r24, 0xE5	; 229
 3b0:	99 ef       	ldi	r25, 0xF9	; 249
 3b2:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
 3b6:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
	sendRegisterData();
 3ba:	d8 df       	rcall	.-80     	; 0x36c <sendRegisterData>
}
 3bc:	ff 91       	pop	r31
 3be:	ef 91       	pop	r30
 3c0:	bf 91       	pop	r27
 3c2:	af 91       	pop	r26
 3c4:	9f 91       	pop	r25
 3c6:	8f 91       	pop	r24
 3c8:	7f 91       	pop	r23
 3ca:	6f 91       	pop	r22
 3cc:	5f 91       	pop	r21
 3ce:	4f 91       	pop	r20
 3d0:	3f 91       	pop	r19
 3d2:	2f 91       	pop	r18
 3d4:	0f 90       	pop	r0
 3d6:	0b be       	out	0x3b, r0	; 59
 3d8:	0f 90       	pop	r0
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	0f 90       	pop	r0
 3de:	1f 90       	pop	r1
 3e0:	18 95       	reti

000003e2 <SM_init>:
}

void SM_movePosition(StepperMotorRunMode_t mode, uint16_t distance)
{
    SM_move(mode, ((double)distance / 360));
}
 3e2:	fc 01       	movw	r30, r24
 3e4:	90 81       	ld	r25, Z
 3e6:	9f 60       	ori	r25, 0x0F	; 15
 3e8:	90 83       	st	Z, r25
 3ea:	fb 01       	movw	r30, r22
 3ec:	80 81       	ld	r24, Z
 3ee:	80 7f       	andi	r24, 0xF0	; 240
 3f0:	80 83       	st	Z, r24
 3f2:	70 93 81 02 	sts	0x0281, r23	; 0x800281 <__data_end+0x1>
 3f6:	60 93 80 02 	sts	0x0280, r22	; 0x800280 <__data_end>
 3fa:	08 95       	ret

000003fc <getModeAndSteps>:
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	cd b7       	in	r28, 0x3d	; 61
 402:	de b7       	in	r29, 0x3e	; 62
 404:	28 97       	sbiw	r28, 0x08	; 8
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	f8 94       	cli
 40a:	de bf       	out	0x3e, r29	; 62
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	cd bf       	out	0x3d, r28	; 61
 410:	28 2f       	mov	r18, r24
 412:	cb 01       	movw	r24, r22
 414:	ba 01       	movw	r22, r20
 416:	21 30       	cpi	r18, 0x01	; 1
 418:	71 f0       	breq	.+28     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 41a:	18 f0       	brcs	.+6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41c:	22 30       	cpi	r18, 0x02	; 2
 41e:	a9 f0       	breq	.+42     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 420:	1e c0       	rjmp	.+60     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 422:	20 e0       	ldi	r18, 0x00	; 0
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	40 e0       	ldi	r20, 0x00	; 0
 428:	55 e4       	ldi	r21, 0x45	; 69
 42a:	20 d3       	rcall	.+1600   	; 0xa6c <__mulsf3>
 42c:	3d d2       	rcall	.+1146   	; 0x8a8 <__fixunssfsi>
 42e:	24 e0       	ldi	r18, 0x04	; 4
 430:	4b e7       	ldi	r20, 0x7B	; 123
 432:	52 e0       	ldi	r21, 0x02	; 2
 434:	1b c0       	rjmp	.+54     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 436:	20 e0       	ldi	r18, 0x00	; 0
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	40 e0       	ldi	r20, 0x00	; 0
 43c:	55 e4       	ldi	r21, 0x45	; 69
 43e:	16 d3       	rcall	.+1580   	; 0xa6c <__mulsf3>
 440:	33 d2       	rcall	.+1126   	; 0x8a8 <__fixunssfsi>
 442:	24 e0       	ldi	r18, 0x04	; 4
 444:	47 e7       	ldi	r20, 0x77	; 119
 446:	52 e0       	ldi	r21, 0x02	; 2
 448:	11 c0       	rjmp	.+34     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 44a:	20 e0       	ldi	r18, 0x00	; 0
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	40 e8       	ldi	r20, 0x80	; 128
 450:	55 e4       	ldi	r21, 0x45	; 69
 452:	0c d3       	rcall	.+1560   	; 0xa6c <__mulsf3>
 454:	29 d2       	rcall	.+1106   	; 0x8a8 <__fixunssfsi>
 456:	28 e0       	ldi	r18, 0x08	; 8
 458:	4f e6       	ldi	r20, 0x6F	; 111
 45a:	52 e0       	ldi	r21, 0x02	; 2
 45c:	07 c0       	rjmp	.+14     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	20 e0       	ldi	r18, 0x00	; 0
 468:	40 e0       	ldi	r20, 0x00	; 0
 46a:	50 e0       	ldi	r21, 0x00	; 0
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	3a 83       	std	Y+2, r19	; 0x02
 470:	29 83       	std	Y+1, r18	; 0x01
 472:	5c 83       	std	Y+4, r21	; 0x04
 474:	4b 83       	std	Y+3, r20	; 0x03
 476:	3a 81       	ldd	r19, Y+2	; 0x02
 478:	5c 81       	ldd	r21, Y+4	; 0x04
 47a:	28 96       	adiw	r28, 0x08	; 8
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	f8 94       	cli
 480:	de bf       	out	0x3e, r29	; 62
 482:	0f be       	out	0x3f, r0	; 63
 484:	cd bf       	out	0x3d, r28	; 61
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	08 95       	ret

0000048c <SM_moveTime>:

void SM_moveTime(StepperMotorRunMode_t mode, bool direction, double time, double stepTime)
{
 48c:	3f 92       	push	r3
 48e:	4f 92       	push	r4
 490:	5f 92       	push	r5
 492:	6f 92       	push	r6
 494:	7f 92       	push	r7
 496:	8f 92       	push	r8
 498:	9f 92       	push	r9
 49a:	af 92       	push	r10
 49c:	bf 92       	push	r11
 49e:	cf 92       	push	r12
 4a0:	df 92       	push	r13
 4a2:	ef 92       	push	r14
 4a4:	ff 92       	push	r15
 4a6:	0f 93       	push	r16
 4a8:	1f 93       	push	r17
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
 4b2:	60 97       	sbiw	r28, 0x10	; 16
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	f8 94       	cli
 4b8:	de bf       	out	0x3e, r29	; 62
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	cd bf       	out	0x3d, r28	; 61
 4be:	36 2e       	mov	r3, r22
 4c0:	2d 87       	std	Y+13, r18	; 0x0d
 4c2:	3e 87       	std	Y+14, r19	; 0x0e
 4c4:	4f 87       	std	Y+15, r20	; 0x0f
 4c6:	58 8b       	std	Y+16, r21	; 0x10
 4c8:	e9 86       	std	Y+9, r14	; 0x09
 4ca:	fa 86       	std	Y+10, r15	; 0x0a
 4cc:	0b 87       	std	Y+11, r16	; 0x0b
 4ce:	1c 87       	std	Y+12, r17	; 0x0c
    StepperMotorModeData_t data = getModeAndSteps(mode, 0);
 4d0:	40 e0       	ldi	r20, 0x00	; 0
 4d2:	50 e0       	ldi	r21, 0x00	; 0
 4d4:	ba 01       	movw	r22, r20
 4d6:	92 df       	rcall	.-220    	; 0x3fc <getModeAndSteps>
 4d8:	29 83       	std	Y+1, r18	; 0x01
 4da:	3a 83       	std	Y+2, r19	; 0x02
 4dc:	4b 83       	std	Y+3, r20	; 0x03
 4de:	5c 83       	std	Y+4, r21	; 0x04
 4e0:	6d 83       	std	Y+5, r22	; 0x05
 4e2:	7e 83       	std	Y+6, r23	; 0x06
 4e4:	8f 83       	std	Y+7, r24	; 0x07
 4e6:	98 87       	std	Y+8, r25	; 0x08

    for(uint32_t i = 0, j = (direction ? data.arraySize : 0); i < (time / stepTime); i++)
 4e8:	33 20       	and	r3, r3
 4ea:	29 f0       	breq	.+10     	; 0x4f6 <SM_moveTime+0x6a>
 4ec:	c9 80       	ldd	r12, Y+1	; 0x01
 4ee:	da 80       	ldd	r13, Y+2	; 0x02
 4f0:	e1 2c       	mov	r14, r1
 4f2:	f1 2c       	mov	r15, r1
 4f4:	03 c0       	rjmp	.+6      	; 0x4fc <SM_moveTime+0x70>
 4f6:	c1 2c       	mov	r12, r1
 4f8:	d1 2c       	mov	r13, r1
 4fa:	76 01       	movw	r14, r12

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 4fc:	81 2c       	mov	r8, r1
 4fe:	91 2c       	mov	r9, r1
 500:	54 01       	movw	r10, r8
 502:	71 c0       	rjmp	.+226    	; 0x5e6 <SM_moveTime+0x15a>
    {
        *sMotorPort = (*sMotorPort & 0xf0) | data.pArray[(direction ? j-- : j++)];
 504:	e0 91 80 02 	lds	r30, 0x0280	; 0x800280 <__data_end>
 508:	f0 91 81 02 	lds	r31, 0x0281	; 0x800281 <__data_end+0x1>
 50c:	80 81       	ld	r24, Z
 50e:	80 7f       	andi	r24, 0xF0	; 240
 510:	2b 81       	ldd	r18, Y+3	; 0x03
 512:	3c 81       	ldd	r19, Y+4	; 0x04
 514:	33 20       	and	r3, r3
 516:	39 f0       	breq	.+14     	; 0x526 <SM_moveTime+0x9a>
 518:	b7 01       	movw	r22, r14
 51a:	a6 01       	movw	r20, r12
 51c:	41 50       	subi	r20, 0x01	; 1
 51e:	51 09       	sbc	r21, r1
 520:	61 09       	sbc	r22, r1
 522:	71 09       	sbc	r23, r1
 524:	06 c0       	rjmp	.+12     	; 0x532 <SM_moveTime+0xa6>
 526:	b7 01       	movw	r22, r14
 528:	a6 01       	movw	r20, r12
 52a:	4f 5f       	subi	r20, 0xFF	; 255
 52c:	5f 4f       	sbci	r21, 0xFF	; 255
 52e:	6f 4f       	sbci	r22, 0xFF	; 255
 530:	7f 4f       	sbci	r23, 0xFF	; 255
 532:	d9 01       	movw	r26, r18
 534:	ac 0d       	add	r26, r12
 536:	bd 1d       	adc	r27, r13
 538:	9c 91       	ld	r25, X
 53a:	89 2b       	or	r24, r25
 53c:	80 83       	st	Z, r24

        if(j >= data.arraySize || j <= 0)
 53e:	c9 80       	ldd	r12, Y+1	; 0x01
 540:	da 80       	ldd	r13, Y+2	; 0x02
 542:	e1 2c       	mov	r14, r1
 544:	f1 2c       	mov	r15, r1
 546:	4c 15       	cp	r20, r12
 548:	5d 05       	cpc	r21, r13
 54a:	6e 05       	cpc	r22, r14
 54c:	7f 05       	cpc	r23, r15
 54e:	28 f4       	brcc	.+10     	; 0x55a <SM_moveTime+0xce>
 550:	41 15       	cp	r20, r1
 552:	51 05       	cpc	r21, r1
 554:	61 05       	cpc	r22, r1
 556:	71 05       	cpc	r23, r1
 558:	31 f4       	brne	.+12     	; 0x566 <SM_moveTime+0xda>
        {
            j = (direction ? data.arraySize : 0);
 55a:	31 10       	cpse	r3, r1
 55c:	06 c0       	rjmp	.+12     	; 0x56a <SM_moveTime+0xde>
 55e:	c1 2c       	mov	r12, r1
 560:	d1 2c       	mov	r13, r1
 562:	76 01       	movw	r14, r12
 564:	02 c0       	rjmp	.+4      	; 0x56a <SM_moveTime+0xde>
 566:	6a 01       	movw	r12, r20
 568:	7b 01       	movw	r14, r22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 56a:	20 e0       	ldi	r18, 0x00	; 0
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	4a e7       	ldi	r20, 0x7A	; 122
 570:	55 e4       	ldi	r21, 0x45	; 69
 572:	69 85       	ldd	r22, Y+9	; 0x09
 574:	7a 85       	ldd	r23, Y+10	; 0x0a
 576:	8b 85       	ldd	r24, Y+11	; 0x0b
 578:	9c 85       	ldd	r25, Y+12	; 0x0c
 57a:	78 d2       	rcall	.+1264   	; 0xa6c <__mulsf3>
 57c:	2b 01       	movw	r4, r22
 57e:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
 580:	20 e0       	ldi	r18, 0x00	; 0
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	40 e8       	ldi	r20, 0x80	; 128
 586:	5f e3       	ldi	r21, 0x3F	; 63
 588:	23 d1       	rcall	.+582    	; 0x7d0 <__cmpsf2>
 58a:	88 23       	and	r24, r24
 58c:	14 f1       	brlt	.+68     	; 0x5d2 <SM_moveTime+0x146>
		__ticks = 1;
	else if (__tmp > 65535)
 58e:	20 e0       	ldi	r18, 0x00	; 0
 590:	3f ef       	ldi	r19, 0xFF	; 255
 592:	4f e7       	ldi	r20, 0x7F	; 127
 594:	57 e4       	ldi	r21, 0x47	; 71
 596:	c3 01       	movw	r24, r6
 598:	b2 01       	movw	r22, r4
 59a:	64 d2       	rcall	.+1224   	; 0xa64 <__gesf2>
 59c:	18 16       	cp	r1, r24
 59e:	ac f4       	brge	.+42     	; 0x5ca <SM_moveTime+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 5a0:	20 e0       	ldi	r18, 0x00	; 0
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	40 e2       	ldi	r20, 0x20	; 32
 5a6:	51 e4       	ldi	r21, 0x41	; 65
 5a8:	69 85       	ldd	r22, Y+9	; 0x09
 5aa:	7a 85       	ldd	r23, Y+10	; 0x0a
 5ac:	8b 85       	ldd	r24, Y+11	; 0x0b
 5ae:	9c 85       	ldd	r25, Y+12	; 0x0c
 5b0:	5d d2       	rcall	.+1210   	; 0xa6c <__mulsf3>
 5b2:	7a d1       	rcall	.+756    	; 0x8a8 <__fixunssfsi>
 5b4:	06 c0       	rjmp	.+12     	; 0x5c2 <SM_moveTime+0x136>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5b6:	80 e9       	ldi	r24, 0x90	; 144
 5b8:	91 e0       	ldi	r25, 0x01	; 1
 5ba:	01 97       	sbiw	r24, 0x01	; 1
 5bc:	f1 f7       	brne	.-4      	; 0x5ba <SM_moveTime+0x12e>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5be:	61 50       	subi	r22, 0x01	; 1
 5c0:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5c2:	61 15       	cp	r22, r1
 5c4:	71 05       	cpc	r23, r1
 5c6:	b9 f7       	brne	.-18     	; 0x5b6 <SM_moveTime+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5c8:	09 c0       	rjmp	.+18     	; 0x5dc <SM_moveTime+0x150>
 5ca:	c3 01       	movw	r24, r6
 5cc:	b2 01       	movw	r22, r4
 5ce:	6c d1       	rcall	.+728    	; 0x8a8 <__fixunssfsi>
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <SM_moveTime+0x14a>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 5d2:	61 e0       	ldi	r22, 0x01	; 1
 5d4:	70 e0       	ldi	r23, 0x00	; 0
 5d6:	cb 01       	movw	r24, r22
 5d8:	01 97       	sbiw	r24, 0x01	; 1
 5da:	f1 f7       	brne	.-4      	; 0x5d8 <SM_moveTime+0x14c>

void SM_moveTime(StepperMotorRunMode_t mode, bool direction, double time, double stepTime)
{
    StepperMotorModeData_t data = getModeAndSteps(mode, 0);

    for(uint32_t i = 0, j = (direction ? data.arraySize : 0); i < (time / stepTime); i++)
 5dc:	8f ef       	ldi	r24, 0xFF	; 255
 5de:	88 1a       	sub	r8, r24
 5e0:	98 0a       	sbc	r9, r24
 5e2:	a8 0a       	sbc	r10, r24
 5e4:	b8 0a       	sbc	r11, r24
 5e6:	c5 01       	movw	r24, r10
 5e8:	b4 01       	movw	r22, r8
 5ea:	8a d1       	rcall	.+788    	; 0x900 <__floatunsisf>
 5ec:	2b 01       	movw	r4, r22
 5ee:	3c 01       	movw	r6, r24
 5f0:	29 85       	ldd	r18, Y+9	; 0x09
 5f2:	3a 85       	ldd	r19, Y+10	; 0x0a
 5f4:	4b 85       	ldd	r20, Y+11	; 0x0b
 5f6:	5c 85       	ldd	r21, Y+12	; 0x0c
 5f8:	6d 85       	ldd	r22, Y+13	; 0x0d
 5fa:	7e 85       	ldd	r23, Y+14	; 0x0e
 5fc:	8f 85       	ldd	r24, Y+15	; 0x0f
 5fe:	98 89       	ldd	r25, Y+16	; 0x10
 600:	eb d0       	rcall	.+470    	; 0x7d8 <__divsf3>
 602:	9b 01       	movw	r18, r22
 604:	ac 01       	movw	r20, r24
 606:	c3 01       	movw	r24, r6
 608:	b2 01       	movw	r22, r4
 60a:	e2 d0       	rcall	.+452    	; 0x7d0 <__cmpsf2>
 60c:	88 23       	and	r24, r24
 60e:	0c f4       	brge	.+2      	; 0x612 <SM_moveTime+0x186>
 610:	79 cf       	rjmp	.-270    	; 0x504 <SM_moveTime+0x78>
        }

        _delay_ms(stepTime);
    }

    *sMotorPort = *sMotorPort & 0xf0;
 612:	e0 91 80 02 	lds	r30, 0x0280	; 0x800280 <__data_end>
 616:	f0 91 81 02 	lds	r31, 0x0281	; 0x800281 <__data_end+0x1>
 61a:	80 81       	ld	r24, Z
 61c:	80 7f       	andi	r24, 0xF0	; 240
 61e:	80 83       	st	Z, r24
}
 620:	60 96       	adiw	r28, 0x10	; 16
 622:	0f b6       	in	r0, 0x3f	; 63
 624:	f8 94       	cli
 626:	de bf       	out	0x3e, r29	; 62
 628:	0f be       	out	0x3f, r0	; 63
 62a:	cd bf       	out	0x3d, r28	; 61
 62c:	df 91       	pop	r29
 62e:	cf 91       	pop	r28
 630:	1f 91       	pop	r17
 632:	0f 91       	pop	r16
 634:	ff 90       	pop	r15
 636:	ef 90       	pop	r14
 638:	df 90       	pop	r13
 63a:	cf 90       	pop	r12
 63c:	bf 90       	pop	r11
 63e:	af 90       	pop	r10
 640:	9f 90       	pop	r9
 642:	8f 90       	pop	r8
 644:	7f 90       	pop	r7
 646:	6f 90       	pop	r6
 648:	5f 90       	pop	r5
 64a:	4f 90       	pop	r4
 64c:	3f 90       	pop	r3
 64e:	08 95       	ret

00000650 <IO_init>:

/* NOTE: Function implementations */
void IO_init(void)
{
    // bottom nibble is motor and top is input switches
    DDRA  = 0x0f;
 650:	8f e0       	ldi	r24, 0x0F	; 15
 652:	81 b9       	out	0x01, r24	; 1
    // turn on switch pullup resistors
    PORTA = 0xf0;
 654:	80 ef       	ldi	r24, 0xF0	; 240
 656:	82 b9       	out	0x02, r24	; 2

    // the start button
    DDRK  = 0x00;
 658:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
    PORTK = 0x01;
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>

    // the led output port
    DDRC  = 0xff;
 662:	8f ef       	ldi	r24, 0xFF	; 255
 664:	87 b9       	out	0x07, r24	; 7
    PORTC = 0x00;
 666:	18 b8       	out	0x08, r1	; 8
 668:	08 95       	ret

0000066a <WASH_setValvesToInput>:
}

void WASH_setValvesToInput(void)
{
    if(hotButton != 0x00)
 66a:	04 9b       	sbis	0x00, 4	; 0
 66c:	06 c0       	rjmp	.+12     	; 0x67a <WASH_setValvesToInput+0x10>
    {
        // hot on, cold off
        outPort = hotValve(1);
 66e:	88 b1       	in	r24, 0x08	; 8
 670:	80 62       	ori	r24, 0x20	; 32
 672:	88 b9       	out	0x08, r24	; 8
        outPort = coldValve(0);
 674:	88 b1       	in	r24, 0x08	; 8
 676:	8f 7b       	andi	r24, 0xBF	; 191
 678:	88 b9       	out	0x08, r24	; 8
    }

    if(warmButton != 0x00)
 67a:	05 9b       	sbis	0x00, 5	; 0
 67c:	06 c0       	rjmp	.+12     	; 0x68a <WASH_setValvesToInput+0x20>
    {
        // hot on, cold on
        outPort = hotValve(1);
 67e:	88 b1       	in	r24, 0x08	; 8
 680:	80 62       	ori	r24, 0x20	; 32
 682:	88 b9       	out	0x08, r24	; 8
        outPort = coldValve(1);
 684:	88 b1       	in	r24, 0x08	; 8
 686:	80 64       	ori	r24, 0x40	; 64
 688:	88 b9       	out	0x08, r24	; 8
    }

    if(coldButton != 0x00)
 68a:	06 9b       	sbis	0x00, 6	; 0
 68c:	06 c0       	rjmp	.+12     	; 0x69a <WASH_setValvesToInput+0x30>
    {
        // hot off, cold on
        outPort = hotValve(0);
 68e:	88 b1       	in	r24, 0x08	; 8
 690:	8f 7d       	andi	r24, 0xDF	; 223
 692:	88 b9       	out	0x08, r24	; 8
        outPort = coldValve(1);
 694:	88 b1       	in	r24, 0x08	; 8
 696:	80 64       	ori	r24, 0x40	; 64
 698:	88 b9       	out	0x08, r24	; 8
 69a:	08 95       	ret

0000069c <main>:

/* NOTE: Application implementation */
// the main loop of the function, provided to us
int main(void)
{
    initDebug();
 69c:	5f dd       	rcall	.-1346   	; 0x15c <initDebug>

    IO_init();
 69e:	d8 df       	rcall	.-80     	; 0x650 <IO_init>
 6a0:	62 e2       	ldi	r22, 0x22	; 34
    SM_init(&DDRA, &PORTA);
 6a2:	70 e0       	ldi	r23, 0x00	; 0
 6a4:	81 e2       	ldi	r24, 0x21	; 33
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	9c de       	rcall	.-712    	; 0x3e2 <SM_init>
 6aa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>

    while(1)
    {
        // while we have not started the washing machine
        // and the door is open
        while(!((startButton == 0x01) && (doorSwitch == 0x00)))
 6ae:	80 ff       	sbrs	r24, 0
 6b0:	fc cf       	rjmp	.-8      	; 0x6aa <main+0xe>
 6b2:	07 99       	sbic	0x00, 7	; 0
 6b4:	fa cf       	rjmp	.-12     	; 0x6aa <main+0xe>
        {
            // do nothing
        }

        // NOTE: fill cycle
        WASH_setValvesToInput();
 6b6:	d9 df       	rcall	.-78     	; 0x66a <WASH_setValvesToInput>
 6b8:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ba:	8f e4       	ldi	r24, 0x4F	; 79
 6bc:	93 ec       	ldi	r25, 0xC3	; 195
 6be:	21 50       	subi	r18, 0x01	; 1
 6c0:	80 40       	sbci	r24, 0x00	; 0
 6c2:	90 40       	sbci	r25, 0x00	; 0
 6c4:	e1 f7       	brne	.-8      	; 0x6be <main+0x22>
 6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <main+0x2c>
 6c8:	00 00       	nop
 6ca:	88 b1       	in	r24, 0x08	; 8

        _delay_ms(4000);

        outPort = hotValve(0);
 6cc:	8f 7d       	andi	r24, 0xDF	; 223
 6ce:	88 b9       	out	0x08, r24	; 8
 6d0:	88 b1       	in	r24, 0x08	; 8
        outPort = coldValve(0);
 6d2:	8f 7b       	andi	r24, 0xBF	; 191
 6d4:	88 b9       	out	0x08, r24	; 8
 6d6:	88 b1       	in	r24, 0x08	; 8

        // NOTE: wash cycle
        outPort = agitateLed(1);
 6d8:	82 60       	ori	r24, 0x02	; 2
 6da:	88 b9       	out	0x08, r24	; 8
 6dc:	c0 e0       	ldi	r28, 0x00	; 0

        for(size_t i = 0; i < 2; i++)
 6de:	d0 e0       	ldi	r29, 0x00	; 0
 6e0:	13 c0       	rjmp	.+38     	; 0x708 <main+0x6c>
 6e2:	e1 2c       	mov	r14, r1
        {
            // move cw for 2 seconds
            SM_moveTime((StepperMotorRunMode_t)2, true, 2000, 5);
 6e4:	f1 2c       	mov	r15, r1
 6e6:	00 ea       	ldi	r16, 0xA0	; 160
 6e8:	10 e4       	ldi	r17, 0x40	; 64
 6ea:	20 e0       	ldi	r18, 0x00	; 0
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	4a ef       	ldi	r20, 0xFA	; 250
 6f0:	54 e4       	ldi	r21, 0x44	; 68
 6f2:	61 e0       	ldi	r22, 0x01	; 1
 6f4:	82 e0       	ldi	r24, 0x02	; 2
 6f6:	ca de       	rcall	.-620    	; 0x48c <SM_moveTime>
 6f8:	20 e0       	ldi	r18, 0x00	; 0

            // move ccw for 2 seconds
            SM_moveTime((StepperMotorRunMode_t)2, false, 2000, 5);
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	4a ef       	ldi	r20, 0xFA	; 250
 6fe:	54 e4       	ldi	r21, 0x44	; 68
 700:	60 e0       	ldi	r22, 0x00	; 0
 702:	82 e0       	ldi	r24, 0x02	; 2
 704:	c3 de       	rcall	.-634    	; 0x48c <SM_moveTime>
 706:	21 96       	adiw	r28, 0x01	; 1
        outPort = coldValve(0);

        // NOTE: wash cycle
        outPort = agitateLed(1);

        for(size_t i = 0; i < 2; i++)
 708:	c2 30       	cpi	r28, 0x02	; 2
 70a:	d1 05       	cpc	r29, r1
 70c:	50 f3       	brcs	.-44     	; 0x6e2 <main+0x46>
 70e:	88 b1       	in	r24, 0x08	; 8

            // move ccw for 2 seconds
            SM_moveTime((StepperMotorRunMode_t)2, false, 2000, 5);
        }

        outPort = agitateLed(0);
 710:	8d 7f       	andi	r24, 0xFD	; 253
 712:	88 b9       	out	0x08, r24	; 8
 714:	88 b1       	in	r24, 0x08	; 8

        // NOTE: drain cycle
        outPort = drainValve(1);
 716:	80 61       	ori	r24, 0x10	; 16
 718:	88 b9       	out	0x08, r24	; 8
 71a:	2f ef       	ldi	r18, 0xFF	; 255
 71c:	8f e4       	ldi	r24, 0x4F	; 79
 71e:	93 ec       	ldi	r25, 0xC3	; 195
 720:	21 50       	subi	r18, 0x01	; 1
 722:	80 40       	sbci	r24, 0x00	; 0
 724:	90 40       	sbci	r25, 0x00	; 0
 726:	e1 f7       	brne	.-8      	; 0x720 <main+0x84>
 728:	00 c0       	rjmp	.+0      	; 0x72a <main+0x8e>
 72a:	00 00       	nop

        _delay_ms(4000);

        outPort = drainValve(0);
 72c:	88 b1       	in	r24, 0x08	; 8
 72e:	8f 7e       	andi	r24, 0xEF	; 239
 730:	88 b9       	out	0x08, r24	; 8

        // NOTE: fill again cycle
        WASH_setValvesToInput();
 732:	9b df       	rcall	.-202    	; 0x66a <WASH_setValvesToInput>
 734:	2f ef       	ldi	r18, 0xFF	; 255
 736:	8f e4       	ldi	r24, 0x4F	; 79
 738:	93 ec       	ldi	r25, 0xC3	; 195
 73a:	21 50       	subi	r18, 0x01	; 1
 73c:	80 40       	sbci	r24, 0x00	; 0
 73e:	90 40       	sbci	r25, 0x00	; 0
 740:	e1 f7       	brne	.-8      	; 0x73a <main+0x9e>
 742:	00 c0       	rjmp	.+0      	; 0x744 <main+0xa8>
 744:	00 00       	nop
 746:	88 b1       	in	r24, 0x08	; 8

        _delay_ms(4000);

        outPort = hotValve(0);
 748:	8f 7d       	andi	r24, 0xDF	; 223
 74a:	88 b9       	out	0x08, r24	; 8
 74c:	88 b1       	in	r24, 0x08	; 8
        outPort = coldValve(0);
 74e:	8f 7b       	andi	r24, 0xBF	; 191
 750:	88 b9       	out	0x08, r24	; 8
 752:	88 b1       	in	r24, 0x08	; 8

        // NOTE: rinse cycle
        outPort = agitateLed(1);
 754:	82 60       	ori	r24, 0x02	; 2
 756:	88 b9       	out	0x08, r24	; 8
 758:	c0 e0       	ldi	r28, 0x00	; 0

        for(size_t i = 0; i < 3; i++)
 75a:	d0 e0       	ldi	r29, 0x00	; 0
 75c:	13 c0       	rjmp	.+38     	; 0x784 <main+0xe8>
 75e:	e1 2c       	mov	r14, r1
        {
            // move cw for 2 seconds
            SM_moveTime((StepperMotorRunMode_t)2, true, 2000, 5);
 760:	f1 2c       	mov	r15, r1
 762:	00 ea       	ldi	r16, 0xA0	; 160
 764:	10 e4       	ldi	r17, 0x40	; 64
 766:	20 e0       	ldi	r18, 0x00	; 0
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	4a ef       	ldi	r20, 0xFA	; 250
 76c:	54 e4       	ldi	r21, 0x44	; 68
 76e:	61 e0       	ldi	r22, 0x01	; 1
 770:	82 e0       	ldi	r24, 0x02	; 2
 772:	8c de       	rcall	.-744    	; 0x48c <SM_moveTime>

            // move ccw for 2 seconds
            SM_moveTime((StepperMotorRunMode_t)2, false, 2000, 5);
 774:	20 e0       	ldi	r18, 0x00	; 0
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	4a ef       	ldi	r20, 0xFA	; 250
 77a:	54 e4       	ldi	r21, 0x44	; 68
 77c:	60 e0       	ldi	r22, 0x00	; 0
 77e:	82 e0       	ldi	r24, 0x02	; 2
 780:	85 de       	rcall	.-758    	; 0x48c <SM_moveTime>
 782:	21 96       	adiw	r28, 0x01	; 1
        outPort = coldValve(0);

        // NOTE: rinse cycle
        outPort = agitateLed(1);

        for(size_t i = 0; i < 3; i++)
 784:	c3 30       	cpi	r28, 0x03	; 3
 786:	d1 05       	cpc	r29, r1
 788:	50 f3       	brcs	.-44     	; 0x75e <main+0xc2>
 78a:	88 b1       	in	r24, 0x08	; 8

            // move ccw for 2 seconds
            SM_moveTime((StepperMotorRunMode_t)2, false, 2000, 5);
        }

        outPort = agitateLed(0);
 78c:	8d 7f       	andi	r24, 0xFD	; 253
 78e:	88 b9       	out	0x08, r24	; 8
 790:	88 b1       	in	r24, 0x08	; 8

        // NOTE: spin cycle
        outPort = drainValve(1);
 792:	80 61       	ori	r24, 0x10	; 16
 794:	88 b9       	out	0x08, r24	; 8
 796:	88 b1       	in	r24, 0x08	; 8
        outPort = spinLed(1);
 798:	84 60       	ori	r24, 0x04	; 4
 79a:	88 b9       	out	0x08, r24	; 8
 79c:	e1 2c       	mov	r14, r1

        // spin for 9s
        SM_moveTime((StepperMotorRunMode_t)1, true, 9000, 3);
 79e:	f1 2c       	mov	r15, r1
 7a0:	00 e4       	ldi	r16, 0x40	; 64
 7a2:	10 e4       	ldi	r17, 0x40	; 64
 7a4:	20 e0       	ldi	r18, 0x00	; 0
 7a6:	30 ea       	ldi	r19, 0xA0	; 160
 7a8:	4c e0       	ldi	r20, 0x0C	; 12
 7aa:	56 e4       	ldi	r21, 0x46	; 70
 7ac:	61 e0       	ldi	r22, 0x01	; 1
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	6d de       	rcall	.-806    	; 0x48c <SM_moveTime>
 7b2:	88 b1       	in	r24, 0x08	; 8

        outPort = drainValve(0);
 7b4:	8f 7e       	andi	r24, 0xEF	; 239
 7b6:	88 b9       	out	0x08, r24	; 8
 7b8:	88 b1       	in	r24, 0x08	; 8
        outPort = spinLed(0);
 7ba:	8b 7f       	andi	r24, 0xFB	; 251
 7bc:	88 b9       	out	0x08, r24	; 8
 7be:	88 b1       	in	r24, 0x08	; 8


        // NOTE: done with the wash
        outPort = doneLed(1);
 7c0:	81 60       	ori	r24, 0x01	; 1
 7c2:	88 b9       	out	0x08, r24	; 8
 7c4:	07 9b       	sbis	0x00, 7	; 0

        while(doorSwitch != 0x80)
 7c6:	fe cf       	rjmp	.-4      	; 0x7c4 <main+0x128>
 7c8:	88 b1       	in	r24, 0x08	; 8
        {
            // do nothing
        }

        outPort = doneLed(0);
 7ca:	8e 7f       	andi	r24, 0xFE	; 254
 7cc:	88 b9       	out	0x08, r24	; 8
 7ce:	6d cf       	rjmp	.-294    	; 0x6aa <main+0xe>

000007d0 <__cmpsf2>:
    }
 7d0:	d4 d0       	rcall	.+424    	; 0x97a <__fp_cmp>
 7d2:	08 f4       	brcc	.+2      	; 0x7d6 <__cmpsf2+0x6>
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	08 95       	ret

000007d8 <__divsf3>:
 7d8:	0c d0       	rcall	.+24     	; 0x7f2 <__divsf3x>
 7da:	0a c1       	rjmp	.+532    	; 0x9f0 <__fp_round>
 7dc:	02 d1       	rcall	.+516    	; 0x9e2 <__fp_pscB>
 7de:	40 f0       	brcs	.+16     	; 0x7f0 <__divsf3+0x18>
 7e0:	f9 d0       	rcall	.+498    	; 0x9d4 <__fp_pscA>
 7e2:	30 f0       	brcs	.+12     	; 0x7f0 <__divsf3+0x18>
 7e4:	21 f4       	brne	.+8      	; 0x7ee <__divsf3+0x16>
 7e6:	5f 3f       	cpi	r21, 0xFF	; 255
 7e8:	19 f0       	breq	.+6      	; 0x7f0 <__divsf3+0x18>
 7ea:	eb c0       	rjmp	.+470    	; 0x9c2 <__fp_inf>
 7ec:	51 11       	cpse	r21, r1
 7ee:	34 c1       	rjmp	.+616    	; 0xa58 <__fp_szero>
 7f0:	ee c0       	rjmp	.+476    	; 0x9ce <__fp_nan>

000007f2 <__divsf3x>:
 7f2:	0f d1       	rcall	.+542    	; 0xa12 <__fp_split3>
 7f4:	98 f3       	brcs	.-26     	; 0x7dc <__divsf3+0x4>

000007f6 <__divsf3_pse>:
 7f6:	99 23       	and	r25, r25
 7f8:	c9 f3       	breq	.-14     	; 0x7ec <__divsf3+0x14>
 7fa:	55 23       	and	r21, r21
 7fc:	b1 f3       	breq	.-20     	; 0x7ea <__divsf3+0x12>
 7fe:	95 1b       	sub	r25, r21
 800:	55 0b       	sbc	r21, r21
 802:	bb 27       	eor	r27, r27
 804:	aa 27       	eor	r26, r26
 806:	62 17       	cp	r22, r18
 808:	73 07       	cpc	r23, r19
 80a:	84 07       	cpc	r24, r20
 80c:	38 f0       	brcs	.+14     	; 0x81c <__divsf3_pse+0x26>
 80e:	9f 5f       	subi	r25, 0xFF	; 255
 810:	5f 4f       	sbci	r21, 0xFF	; 255
 812:	22 0f       	add	r18, r18
 814:	33 1f       	adc	r19, r19
 816:	44 1f       	adc	r20, r20
 818:	aa 1f       	adc	r26, r26
 81a:	a9 f3       	breq	.-22     	; 0x806 <__divsf3_pse+0x10>
 81c:	33 d0       	rcall	.+102    	; 0x884 <__divsf3_pse+0x8e>
 81e:	0e 2e       	mov	r0, r30
 820:	3a f0       	brmi	.+14     	; 0x830 <__divsf3_pse+0x3a>
 822:	e0 e8       	ldi	r30, 0x80	; 128
 824:	30 d0       	rcall	.+96     	; 0x886 <__divsf3_pse+0x90>
 826:	91 50       	subi	r25, 0x01	; 1
 828:	50 40       	sbci	r21, 0x00	; 0
 82a:	e6 95       	lsr	r30
 82c:	00 1c       	adc	r0, r0
 82e:	ca f7       	brpl	.-14     	; 0x822 <__divsf3_pse+0x2c>
 830:	29 d0       	rcall	.+82     	; 0x884 <__divsf3_pse+0x8e>
 832:	fe 2f       	mov	r31, r30
 834:	27 d0       	rcall	.+78     	; 0x884 <__divsf3_pse+0x8e>
 836:	66 0f       	add	r22, r22
 838:	77 1f       	adc	r23, r23
 83a:	88 1f       	adc	r24, r24
 83c:	bb 1f       	adc	r27, r27
 83e:	26 17       	cp	r18, r22
 840:	37 07       	cpc	r19, r23
 842:	48 07       	cpc	r20, r24
 844:	ab 07       	cpc	r26, r27
 846:	b0 e8       	ldi	r27, 0x80	; 128
 848:	09 f0       	breq	.+2      	; 0x84c <__divsf3_pse+0x56>
 84a:	bb 0b       	sbc	r27, r27
 84c:	80 2d       	mov	r24, r0
 84e:	bf 01       	movw	r22, r30
 850:	ff 27       	eor	r31, r31
 852:	93 58       	subi	r25, 0x83	; 131
 854:	5f 4f       	sbci	r21, 0xFF	; 255
 856:	2a f0       	brmi	.+10     	; 0x862 <__divsf3_pse+0x6c>
 858:	9e 3f       	cpi	r25, 0xFE	; 254
 85a:	51 05       	cpc	r21, r1
 85c:	68 f0       	brcs	.+26     	; 0x878 <__divsf3_pse+0x82>
 85e:	b1 c0       	rjmp	.+354    	; 0x9c2 <__fp_inf>
 860:	fb c0       	rjmp	.+502    	; 0xa58 <__fp_szero>
 862:	5f 3f       	cpi	r21, 0xFF	; 255
 864:	ec f3       	brlt	.-6      	; 0x860 <__divsf3_pse+0x6a>
 866:	98 3e       	cpi	r25, 0xE8	; 232
 868:	dc f3       	brlt	.-10     	; 0x860 <__divsf3_pse+0x6a>
 86a:	86 95       	lsr	r24
 86c:	77 95       	ror	r23
 86e:	67 95       	ror	r22
 870:	b7 95       	ror	r27
 872:	f7 95       	ror	r31
 874:	9f 5f       	subi	r25, 0xFF	; 255
 876:	c9 f7       	brne	.-14     	; 0x86a <__divsf3_pse+0x74>
 878:	88 0f       	add	r24, r24
 87a:	91 1d       	adc	r25, r1
 87c:	96 95       	lsr	r25
 87e:	87 95       	ror	r24
 880:	97 f9       	bld	r25, 7
 882:	08 95       	ret
 884:	e1 e0       	ldi	r30, 0x01	; 1
 886:	66 0f       	add	r22, r22
 888:	77 1f       	adc	r23, r23
 88a:	88 1f       	adc	r24, r24
 88c:	bb 1f       	adc	r27, r27
 88e:	62 17       	cp	r22, r18
 890:	73 07       	cpc	r23, r19
 892:	84 07       	cpc	r24, r20
 894:	ba 07       	cpc	r27, r26
 896:	20 f0       	brcs	.+8      	; 0x8a0 <__divsf3_pse+0xaa>
 898:	62 1b       	sub	r22, r18
 89a:	73 0b       	sbc	r23, r19
 89c:	84 0b       	sbc	r24, r20
 89e:	ba 0b       	sbc	r27, r26
 8a0:	ee 1f       	adc	r30, r30
 8a2:	88 f7       	brcc	.-30     	; 0x886 <__divsf3_pse+0x90>
 8a4:	e0 95       	com	r30
 8a6:	08 95       	ret

000008a8 <__fixunssfsi>:
 8a8:	bc d0       	rcall	.+376    	; 0xa22 <__fp_splitA>
 8aa:	88 f0       	brcs	.+34     	; 0x8ce <__fixunssfsi+0x26>
 8ac:	9f 57       	subi	r25, 0x7F	; 127
 8ae:	90 f0       	brcs	.+36     	; 0x8d4 <__fixunssfsi+0x2c>
 8b0:	b9 2f       	mov	r27, r25
 8b2:	99 27       	eor	r25, r25
 8b4:	b7 51       	subi	r27, 0x17	; 23
 8b6:	a0 f0       	brcs	.+40     	; 0x8e0 <__fixunssfsi+0x38>
 8b8:	d1 f0       	breq	.+52     	; 0x8ee <__fixunssfsi+0x46>
 8ba:	66 0f       	add	r22, r22
 8bc:	77 1f       	adc	r23, r23
 8be:	88 1f       	adc	r24, r24
 8c0:	99 1f       	adc	r25, r25
 8c2:	1a f0       	brmi	.+6      	; 0x8ca <__fixunssfsi+0x22>
 8c4:	ba 95       	dec	r27
 8c6:	c9 f7       	brne	.-14     	; 0x8ba <__fixunssfsi+0x12>
 8c8:	12 c0       	rjmp	.+36     	; 0x8ee <__fixunssfsi+0x46>
 8ca:	b1 30       	cpi	r27, 0x01	; 1
 8cc:	81 f0       	breq	.+32     	; 0x8ee <__fixunssfsi+0x46>
 8ce:	c3 d0       	rcall	.+390    	; 0xa56 <__fp_zero>
 8d0:	b1 e0       	ldi	r27, 0x01	; 1
 8d2:	08 95       	ret
 8d4:	c0 c0       	rjmp	.+384    	; 0xa56 <__fp_zero>
 8d6:	67 2f       	mov	r22, r23
 8d8:	78 2f       	mov	r23, r24
 8da:	88 27       	eor	r24, r24
 8dc:	b8 5f       	subi	r27, 0xF8	; 248
 8de:	39 f0       	breq	.+14     	; 0x8ee <__fixunssfsi+0x46>
 8e0:	b9 3f       	cpi	r27, 0xF9	; 249
 8e2:	cc f3       	brlt	.-14     	; 0x8d6 <__fixunssfsi+0x2e>
 8e4:	86 95       	lsr	r24
 8e6:	77 95       	ror	r23
 8e8:	67 95       	ror	r22
 8ea:	b3 95       	inc	r27
 8ec:	d9 f7       	brne	.-10     	; 0x8e4 <__fixunssfsi+0x3c>
 8ee:	3e f4       	brtc	.+14     	; 0x8fe <__fixunssfsi+0x56>
 8f0:	90 95       	com	r25
 8f2:	80 95       	com	r24
 8f4:	70 95       	com	r23
 8f6:	61 95       	neg	r22
 8f8:	7f 4f       	sbci	r23, 0xFF	; 255
 8fa:	8f 4f       	sbci	r24, 0xFF	; 255
 8fc:	9f 4f       	sbci	r25, 0xFF	; 255
 8fe:	08 95       	ret

00000900 <__floatunsisf>:
 900:	e8 94       	clt
 902:	09 c0       	rjmp	.+18     	; 0x916 <__floatsisf+0x12>

00000904 <__floatsisf>:
 904:	97 fb       	bst	r25, 7
 906:	3e f4       	brtc	.+14     	; 0x916 <__floatsisf+0x12>
 908:	90 95       	com	r25
 90a:	80 95       	com	r24
 90c:	70 95       	com	r23
 90e:	61 95       	neg	r22
 910:	7f 4f       	sbci	r23, 0xFF	; 255
 912:	8f 4f       	sbci	r24, 0xFF	; 255
 914:	9f 4f       	sbci	r25, 0xFF	; 255
 916:	99 23       	and	r25, r25
 918:	a9 f0       	breq	.+42     	; 0x944 <__floatsisf+0x40>
 91a:	f9 2f       	mov	r31, r25
 91c:	96 e9       	ldi	r25, 0x96	; 150
 91e:	bb 27       	eor	r27, r27
 920:	93 95       	inc	r25
 922:	f6 95       	lsr	r31
 924:	87 95       	ror	r24
 926:	77 95       	ror	r23
 928:	67 95       	ror	r22
 92a:	b7 95       	ror	r27
 92c:	f1 11       	cpse	r31, r1
 92e:	f8 cf       	rjmp	.-16     	; 0x920 <__floatsisf+0x1c>
 930:	fa f4       	brpl	.+62     	; 0x970 <__floatsisf+0x6c>
 932:	bb 0f       	add	r27, r27
 934:	11 f4       	brne	.+4      	; 0x93a <__floatsisf+0x36>
 936:	60 ff       	sbrs	r22, 0
 938:	1b c0       	rjmp	.+54     	; 0x970 <__floatsisf+0x6c>
 93a:	6f 5f       	subi	r22, 0xFF	; 255
 93c:	7f 4f       	sbci	r23, 0xFF	; 255
 93e:	8f 4f       	sbci	r24, 0xFF	; 255
 940:	9f 4f       	sbci	r25, 0xFF	; 255
 942:	16 c0       	rjmp	.+44     	; 0x970 <__floatsisf+0x6c>
 944:	88 23       	and	r24, r24
 946:	11 f0       	breq	.+4      	; 0x94c <__floatsisf+0x48>
 948:	96 e9       	ldi	r25, 0x96	; 150
 94a:	11 c0       	rjmp	.+34     	; 0x96e <__floatsisf+0x6a>
 94c:	77 23       	and	r23, r23
 94e:	21 f0       	breq	.+8      	; 0x958 <__floatsisf+0x54>
 950:	9e e8       	ldi	r25, 0x8E	; 142
 952:	87 2f       	mov	r24, r23
 954:	76 2f       	mov	r23, r22
 956:	05 c0       	rjmp	.+10     	; 0x962 <__floatsisf+0x5e>
 958:	66 23       	and	r22, r22
 95a:	71 f0       	breq	.+28     	; 0x978 <__floatsisf+0x74>
 95c:	96 e8       	ldi	r25, 0x86	; 134
 95e:	86 2f       	mov	r24, r22
 960:	70 e0       	ldi	r23, 0x00	; 0
 962:	60 e0       	ldi	r22, 0x00	; 0
 964:	2a f0       	brmi	.+10     	; 0x970 <__floatsisf+0x6c>
 966:	9a 95       	dec	r25
 968:	66 0f       	add	r22, r22
 96a:	77 1f       	adc	r23, r23
 96c:	88 1f       	adc	r24, r24
 96e:	da f7       	brpl	.-10     	; 0x966 <__floatsisf+0x62>
 970:	88 0f       	add	r24, r24
 972:	96 95       	lsr	r25
 974:	87 95       	ror	r24
 976:	97 f9       	bld	r25, 7
 978:	08 95       	ret

0000097a <__fp_cmp>:
 97a:	99 0f       	add	r25, r25
 97c:	00 08       	sbc	r0, r0
 97e:	55 0f       	add	r21, r21
 980:	aa 0b       	sbc	r26, r26
 982:	e0 e8       	ldi	r30, 0x80	; 128
 984:	fe ef       	ldi	r31, 0xFE	; 254
 986:	16 16       	cp	r1, r22
 988:	17 06       	cpc	r1, r23
 98a:	e8 07       	cpc	r30, r24
 98c:	f9 07       	cpc	r31, r25
 98e:	c0 f0       	brcs	.+48     	; 0x9c0 <__fp_cmp+0x46>
 990:	12 16       	cp	r1, r18
 992:	13 06       	cpc	r1, r19
 994:	e4 07       	cpc	r30, r20
 996:	f5 07       	cpc	r31, r21
 998:	98 f0       	brcs	.+38     	; 0x9c0 <__fp_cmp+0x46>
 99a:	62 1b       	sub	r22, r18
 99c:	73 0b       	sbc	r23, r19
 99e:	84 0b       	sbc	r24, r20
 9a0:	95 0b       	sbc	r25, r21
 9a2:	39 f4       	brne	.+14     	; 0x9b2 <__fp_cmp+0x38>
 9a4:	0a 26       	eor	r0, r26
 9a6:	61 f0       	breq	.+24     	; 0x9c0 <__fp_cmp+0x46>
 9a8:	23 2b       	or	r18, r19
 9aa:	24 2b       	or	r18, r20
 9ac:	25 2b       	or	r18, r21
 9ae:	21 f4       	brne	.+8      	; 0x9b8 <__fp_cmp+0x3e>
 9b0:	08 95       	ret
 9b2:	0a 26       	eor	r0, r26
 9b4:	09 f4       	brne	.+2      	; 0x9b8 <__fp_cmp+0x3e>
 9b6:	a1 40       	sbci	r26, 0x01	; 1
 9b8:	a6 95       	lsr	r26
 9ba:	8f ef       	ldi	r24, 0xFF	; 255
 9bc:	81 1d       	adc	r24, r1
 9be:	81 1d       	adc	r24, r1
 9c0:	08 95       	ret

000009c2 <__fp_inf>:
 9c2:	97 f9       	bld	r25, 7
 9c4:	9f 67       	ori	r25, 0x7F	; 127
 9c6:	80 e8       	ldi	r24, 0x80	; 128
 9c8:	70 e0       	ldi	r23, 0x00	; 0
 9ca:	60 e0       	ldi	r22, 0x00	; 0
 9cc:	08 95       	ret

000009ce <__fp_nan>:
 9ce:	9f ef       	ldi	r25, 0xFF	; 255
 9d0:	80 ec       	ldi	r24, 0xC0	; 192
 9d2:	08 95       	ret

000009d4 <__fp_pscA>:
 9d4:	00 24       	eor	r0, r0
 9d6:	0a 94       	dec	r0
 9d8:	16 16       	cp	r1, r22
 9da:	17 06       	cpc	r1, r23
 9dc:	18 06       	cpc	r1, r24
 9de:	09 06       	cpc	r0, r25
 9e0:	08 95       	ret

000009e2 <__fp_pscB>:
 9e2:	00 24       	eor	r0, r0
 9e4:	0a 94       	dec	r0
 9e6:	12 16       	cp	r1, r18
 9e8:	13 06       	cpc	r1, r19
 9ea:	14 06       	cpc	r1, r20
 9ec:	05 06       	cpc	r0, r21
 9ee:	08 95       	ret

000009f0 <__fp_round>:
 9f0:	09 2e       	mov	r0, r25
 9f2:	03 94       	inc	r0
 9f4:	00 0c       	add	r0, r0
 9f6:	11 f4       	brne	.+4      	; 0x9fc <__fp_round+0xc>
 9f8:	88 23       	and	r24, r24
 9fa:	52 f0       	brmi	.+20     	; 0xa10 <__fp_round+0x20>
 9fc:	bb 0f       	add	r27, r27
 9fe:	40 f4       	brcc	.+16     	; 0xa10 <__fp_round+0x20>
 a00:	bf 2b       	or	r27, r31
 a02:	11 f4       	brne	.+4      	; 0xa08 <__fp_round+0x18>
 a04:	60 ff       	sbrs	r22, 0
 a06:	04 c0       	rjmp	.+8      	; 0xa10 <__fp_round+0x20>
 a08:	6f 5f       	subi	r22, 0xFF	; 255
 a0a:	7f 4f       	sbci	r23, 0xFF	; 255
 a0c:	8f 4f       	sbci	r24, 0xFF	; 255
 a0e:	9f 4f       	sbci	r25, 0xFF	; 255
 a10:	08 95       	ret

00000a12 <__fp_split3>:
 a12:	57 fd       	sbrc	r21, 7
 a14:	90 58       	subi	r25, 0x80	; 128
 a16:	44 0f       	add	r20, r20
 a18:	55 1f       	adc	r21, r21
 a1a:	59 f0       	breq	.+22     	; 0xa32 <__fp_splitA+0x10>
 a1c:	5f 3f       	cpi	r21, 0xFF	; 255
 a1e:	71 f0       	breq	.+28     	; 0xa3c <__fp_splitA+0x1a>
 a20:	47 95       	ror	r20

00000a22 <__fp_splitA>:
 a22:	88 0f       	add	r24, r24
 a24:	97 fb       	bst	r25, 7
 a26:	99 1f       	adc	r25, r25
 a28:	61 f0       	breq	.+24     	; 0xa42 <__fp_splitA+0x20>
 a2a:	9f 3f       	cpi	r25, 0xFF	; 255
 a2c:	79 f0       	breq	.+30     	; 0xa4c <__fp_splitA+0x2a>
 a2e:	87 95       	ror	r24
 a30:	08 95       	ret
 a32:	12 16       	cp	r1, r18
 a34:	13 06       	cpc	r1, r19
 a36:	14 06       	cpc	r1, r20
 a38:	55 1f       	adc	r21, r21
 a3a:	f2 cf       	rjmp	.-28     	; 0xa20 <__fp_split3+0xe>
 a3c:	46 95       	lsr	r20
 a3e:	f1 df       	rcall	.-30     	; 0xa22 <__fp_splitA>
 a40:	08 c0       	rjmp	.+16     	; 0xa52 <__fp_splitA+0x30>
 a42:	16 16       	cp	r1, r22
 a44:	17 06       	cpc	r1, r23
 a46:	18 06       	cpc	r1, r24
 a48:	99 1f       	adc	r25, r25
 a4a:	f1 cf       	rjmp	.-30     	; 0xa2e <__fp_splitA+0xc>
 a4c:	86 95       	lsr	r24
 a4e:	71 05       	cpc	r23, r1
 a50:	61 05       	cpc	r22, r1
 a52:	08 94       	sec
 a54:	08 95       	ret

00000a56 <__fp_zero>:
 a56:	e8 94       	clt

00000a58 <__fp_szero>:
 a58:	bb 27       	eor	r27, r27
 a5a:	66 27       	eor	r22, r22
 a5c:	77 27       	eor	r23, r23
 a5e:	cb 01       	movw	r24, r22
 a60:	97 f9       	bld	r25, 7
 a62:	08 95       	ret

00000a64 <__gesf2>:
 a64:	8a df       	rcall	.-236    	; 0x97a <__fp_cmp>
 a66:	08 f4       	brcc	.+2      	; 0xa6a <__gesf2+0x6>
 a68:	8f ef       	ldi	r24, 0xFF	; 255
 a6a:	08 95       	ret

00000a6c <__mulsf3>:
 a6c:	0b d0       	rcall	.+22     	; 0xa84 <__mulsf3x>
 a6e:	c0 cf       	rjmp	.-128    	; 0x9f0 <__fp_round>
 a70:	b1 df       	rcall	.-158    	; 0x9d4 <__fp_pscA>
 a72:	28 f0       	brcs	.+10     	; 0xa7e <__mulsf3+0x12>
 a74:	b6 df       	rcall	.-148    	; 0x9e2 <__fp_pscB>
 a76:	18 f0       	brcs	.+6      	; 0xa7e <__mulsf3+0x12>
 a78:	95 23       	and	r25, r21
 a7a:	09 f0       	breq	.+2      	; 0xa7e <__mulsf3+0x12>
 a7c:	a2 cf       	rjmp	.-188    	; 0x9c2 <__fp_inf>
 a7e:	a7 cf       	rjmp	.-178    	; 0x9ce <__fp_nan>
 a80:	11 24       	eor	r1, r1
 a82:	ea cf       	rjmp	.-44     	; 0xa58 <__fp_szero>

00000a84 <__mulsf3x>:
 a84:	c6 df       	rcall	.-116    	; 0xa12 <__fp_split3>
 a86:	a0 f3       	brcs	.-24     	; 0xa70 <__mulsf3+0x4>

00000a88 <__mulsf3_pse>:
 a88:	95 9f       	mul	r25, r21
 a8a:	d1 f3       	breq	.-12     	; 0xa80 <__mulsf3+0x14>
 a8c:	95 0f       	add	r25, r21
 a8e:	50 e0       	ldi	r21, 0x00	; 0
 a90:	55 1f       	adc	r21, r21
 a92:	62 9f       	mul	r22, r18
 a94:	f0 01       	movw	r30, r0
 a96:	72 9f       	mul	r23, r18
 a98:	bb 27       	eor	r27, r27
 a9a:	f0 0d       	add	r31, r0
 a9c:	b1 1d       	adc	r27, r1
 a9e:	63 9f       	mul	r22, r19
 aa0:	aa 27       	eor	r26, r26
 aa2:	f0 0d       	add	r31, r0
 aa4:	b1 1d       	adc	r27, r1
 aa6:	aa 1f       	adc	r26, r26
 aa8:	64 9f       	mul	r22, r20
 aaa:	66 27       	eor	r22, r22
 aac:	b0 0d       	add	r27, r0
 aae:	a1 1d       	adc	r26, r1
 ab0:	66 1f       	adc	r22, r22
 ab2:	82 9f       	mul	r24, r18
 ab4:	22 27       	eor	r18, r18
 ab6:	b0 0d       	add	r27, r0
 ab8:	a1 1d       	adc	r26, r1
 aba:	62 1f       	adc	r22, r18
 abc:	73 9f       	mul	r23, r19
 abe:	b0 0d       	add	r27, r0
 ac0:	a1 1d       	adc	r26, r1
 ac2:	62 1f       	adc	r22, r18
 ac4:	83 9f       	mul	r24, r19
 ac6:	a0 0d       	add	r26, r0
 ac8:	61 1d       	adc	r22, r1
 aca:	22 1f       	adc	r18, r18
 acc:	74 9f       	mul	r23, r20
 ace:	33 27       	eor	r19, r19
 ad0:	a0 0d       	add	r26, r0
 ad2:	61 1d       	adc	r22, r1
 ad4:	23 1f       	adc	r18, r19
 ad6:	84 9f       	mul	r24, r20
 ad8:	60 0d       	add	r22, r0
 ada:	21 1d       	adc	r18, r1
 adc:	82 2f       	mov	r24, r18
 ade:	76 2f       	mov	r23, r22
 ae0:	6a 2f       	mov	r22, r26
 ae2:	11 24       	eor	r1, r1
 ae4:	9f 57       	subi	r25, 0x7F	; 127
 ae6:	50 40       	sbci	r21, 0x00	; 0
 ae8:	8a f0       	brmi	.+34     	; 0xb0c <__mulsf3_pse+0x84>
 aea:	e1 f0       	breq	.+56     	; 0xb24 <__mulsf3_pse+0x9c>
 aec:	88 23       	and	r24, r24
 aee:	4a f0       	brmi	.+18     	; 0xb02 <__mulsf3_pse+0x7a>
 af0:	ee 0f       	add	r30, r30
 af2:	ff 1f       	adc	r31, r31
 af4:	bb 1f       	adc	r27, r27
 af6:	66 1f       	adc	r22, r22
 af8:	77 1f       	adc	r23, r23
 afa:	88 1f       	adc	r24, r24
 afc:	91 50       	subi	r25, 0x01	; 1
 afe:	50 40       	sbci	r21, 0x00	; 0
 b00:	a9 f7       	brne	.-22     	; 0xaec <__mulsf3_pse+0x64>
 b02:	9e 3f       	cpi	r25, 0xFE	; 254
 b04:	51 05       	cpc	r21, r1
 b06:	70 f0       	brcs	.+28     	; 0xb24 <__mulsf3_pse+0x9c>
 b08:	5c cf       	rjmp	.-328    	; 0x9c2 <__fp_inf>
 b0a:	a6 cf       	rjmp	.-180    	; 0xa58 <__fp_szero>
 b0c:	5f 3f       	cpi	r21, 0xFF	; 255
 b0e:	ec f3       	brlt	.-6      	; 0xb0a <__mulsf3_pse+0x82>
 b10:	98 3e       	cpi	r25, 0xE8	; 232
 b12:	dc f3       	brlt	.-10     	; 0xb0a <__mulsf3_pse+0x82>
 b14:	86 95       	lsr	r24
 b16:	77 95       	ror	r23
 b18:	67 95       	ror	r22
 b1a:	b7 95       	ror	r27
 b1c:	f7 95       	ror	r31
 b1e:	e7 95       	ror	r30
 b20:	9f 5f       	subi	r25, 0xFF	; 255
 b22:	c1 f7       	brne	.-16     	; 0xb14 <__mulsf3_pse+0x8c>
 b24:	fe 2b       	or	r31, r30
 b26:	88 0f       	add	r24, r24
 b28:	91 1d       	adc	r25, r1
 b2a:	96 95       	lsr	r25
 b2c:	87 95       	ror	r24
 b2e:	97 f9       	bld	r25, 7
 b30:	08 95       	ret

00000b32 <_exit>:
 b32:	f8 94       	cli

00000b34 <__stop_program>:
 b34:	ff cf       	rjmp	.-2      	; 0xb34 <__stop_program>
