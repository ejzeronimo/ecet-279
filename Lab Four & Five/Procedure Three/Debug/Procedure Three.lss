
Procedure Three.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800200  00000b28  00000bbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800280  00800280  00000c3c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019a5  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fef  00000000  00000000  00002741  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf6  00000000  00000000  00003730  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  00004428  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f7  00000000  00000000  000046d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b63  00000000  00000000  00004ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00005a2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	5f c1       	rjmp	.+702    	; 0x388 <__vector_50>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e2       	ldi	r30, 0x28	; 40
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 38       	cpi	r26, 0x80	; 128
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e8       	ldi	r26, 0x80	; 128
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 38       	cpi	r26, 0x82	; 130
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	b7 d2       	rcall	.+1390   	; 0x68e <main>
 120:	01 c5       	rjmp	.+2562   	; 0xb24 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initDebugTimer>:
	Uses Timer5 with a prescaler of 256, and enables overflow interrupt
*/
void initDebugTimer()
{
	//Prescaler 256
	TCCR5B |= (1<<CS52) | (1<<CS50);
 124:	e1 e2       	ldi	r30, 0x21	; 33
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	80 81       	ld	r24, Z
 12a:	85 60       	ori	r24, 0x05	; 5
 12c:	80 83       	st	Z, r24
	
	//15625 TOP Value for UPDATE_FREQUENCY
	TCNT5 = 65535 - (F_CPU / (1024*UPDATE_FREQUENCY));
 12e:	85 ee       	ldi	r24, 0xE5	; 229
 130:	99 ef       	ldi	r25, 0xF9	; 249
 132:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
 136:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
	
	//Enable Timer Overflow Interrupt
	TIMSK5 = (1<<TOIE5);
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7c0073>
 140:	08 95       	ret

00000142 <initDebugUSART>:
	8-bits, 25000 Baud Rate
*/
void initDebugUSART()
{
	//Enable RX and TX
	UCSR0B = (1<<TXEN0) | (1<<RXEN0);
 142:	88 e1       	ldi	r24, 0x18	; 24
 144:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	
	//Set Communication Modes
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);	//8 Data bits
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
	UBRR0 = 3;							//250000 Baud Rate	
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 156:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 15a:	08 95       	ret

0000015c <initDebug>:
	Configures the USART registers for data transmission, Configures the
	Timer registers, and enables interrupts.
*/
void initDebug()
{
	initDebugUSART();
 15c:	f2 df       	rcall	.-28     	; 0x142 <initDebugUSART>
	initDebugTimer();
 15e:	e2 df       	rcall	.-60     	; 0x124 <initDebugTimer>
 160:	78 94       	sei
	sei();
 162:	08 95       	ret

00000164 <UART0Out>:
 164:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	Sends 8-bit unsigned integer out UART0
*/
void UART0Out(uint8_t data) 
{
	//Wait for previous transmission to be done
	while(!(UCSR0A & (1<<UDRE0)));
 168:	95 ff       	sbrs	r25, 5
 16a:	fc cf       	rjmp	.-8      	; 0x164 <UART0Out>
	
	//Set register for next transmission
	UDR0 = data;	
 16c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 170:	08 95       	ret

00000172 <sendStopBit>:
	Sends 0x0A to signify stop
*/
void sendStopBit()
{
	//Wait for previous transmission to be done
	while(!(UCSR0A & (1<<UDRE0)));
 172:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 176:	85 ff       	sbrs	r24, 5
 178:	fc cf       	rjmp	.-8      	; 0x172 <sendStopBit>
	
	//Set register for next transmission
	UDR0 = 0x0A;
 17a:	8a e0       	ldi	r24, 0x0A	; 10
 17c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 180:	08 95       	ret

00000182 <UART0PrintString>:

Description:
	Continues to send data until reaching null character
*/
void UART0PrintString(char *strPtr)
{
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	ec 01       	movw	r28, r24
	while(*strPtr != 0x00) 
 188:	02 c0       	rjmp	.+4      	; 0x18e <UART0PrintString+0xc>
	{
		UART0Out(*strPtr);
 18a:	ec df       	rcall	.-40     	; 0x164 <UART0Out>
		strPtr ++;
 18c:	21 96       	adiw	r28, 0x01	; 1
Description:
	Continues to send data until reaching null character
*/
void UART0PrintString(char *strPtr)
{
	while(*strPtr != 0x00) 
 18e:	88 81       	ld	r24, Y
 190:	81 11       	cpse	r24, r1
 192:	fb cf       	rjmp	.-10     	; 0x18a <UART0PrintString+0x8>
	{
		UART0Out(*strPtr);
		strPtr ++;
	}
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <sendPortData>:
Description:
	Loops through portAddr array and sends
	out data at each address
*/
void sendPortData()
{	
 19a:	cf 93       	push	r28
	for (uint8_t i=0; i<18; i++)
 19c:	c0 e0       	ldi	r28, 0x00	; 0
 19e:	0c c0       	rjmp	.+24     	; 0x1b8 <sendPortData+0x1e>
	{
		UART0Out(*portAddr[i]);
 1a0:	ec 2f       	mov	r30, r28
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	ec 5b       	subi	r30, 0xBC	; 188
 1aa:	fd 4f       	sbci	r31, 0xFD	; 253
 1ac:	01 90       	ld	r0, Z+
 1ae:	f0 81       	ld	r31, Z
 1b0:	e0 2d       	mov	r30, r0
 1b2:	80 81       	ld	r24, Z
 1b4:	d7 df       	rcall	.-82     	; 0x164 <UART0Out>
	Loops through portAddr array and sends
	out data at each address
*/
void sendPortData()
{	
	for (uint8_t i=0; i<18; i++)
 1b6:	cf 5f       	subi	r28, 0xFF	; 255
 1b8:	c2 31       	cpi	r28, 0x12	; 18
 1ba:	90 f3       	brcs	.-28     	; 0x1a0 <sendPortData+0x6>
	{
		UART0Out(*portAddr[i]);
	}
}
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <sendTimerData>:
Description:
	Loops though timerAddr array and sends
	out data at each address
*/
void sendTimerData()
{
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
	//Timer 0
	for (uint8_t i=0; i<3; i++) 
 1c4:	c0 e0       	ldi	r28, 0x00	; 0
 1c6:	0c c0       	rjmp	.+24     	; 0x1e0 <sendTimerData+0x20>
	{
		UART0Out(*timerAddr[i]);
 1c8:	ec 2f       	mov	r30, r28
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	ee 0f       	add	r30, r30
 1ce:	ff 1f       	adc	r31, r31
 1d0:	e8 5e       	subi	r30, 0xE8	; 232
 1d2:	fd 4f       	sbci	r31, 0xFD	; 253
 1d4:	01 90       	ld	r0, Z+
 1d6:	f0 81       	ld	r31, Z
 1d8:	e0 2d       	mov	r30, r0
 1da:	80 81       	ld	r24, Z
 1dc:	c3 df       	rcall	.-122    	; 0x164 <UART0Out>
	out data at each address
*/
void sendTimerData()
{
	//Timer 0
	for (uint8_t i=0; i<3; i++) 
 1de:	cf 5f       	subi	r28, 0xFF	; 255
 1e0:	c3 30       	cpi	r28, 0x03	; 3
 1e2:	90 f3       	brcs	.-28     	; 0x1c8 <sendTimerData+0x8>
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR0A
	UART0Out(*timerAddr[3]);
 1e4:	c8 e1       	ldi	r28, 0x18	; 24
 1e6:	d2 e0       	ldi	r29, 0x02	; 2
 1e8:	ee 81       	ldd	r30, Y+6	; 0x06
 1ea:	ff 81       	ldd	r31, Y+7	; 0x07
 1ec:	80 81       	ld	r24, Z
 1ee:	ba df       	rcall	.-140    	; 0x164 <UART0Out>
	UART0Out(*(timerAddr[3]+1));
 1f0:	ee 81       	ldd	r30, Y+6	; 0x06
 1f2:	ff 81       	ldd	r31, Y+7	; 0x07
 1f4:	81 81       	ldd	r24, Z+1	; 0x01
 1f6:	b6 df       	rcall	.-148    	; 0x164 <UART0Out>
	
	//OCR0B
	UART0Out(*timerAddr[4]);
 1f8:	e8 85       	ldd	r30, Y+8	; 0x08
 1fa:	f9 85       	ldd	r31, Y+9	; 0x09
 1fc:	80 81       	ld	r24, Z
 1fe:	b2 df       	rcall	.-156    	; 0x164 <UART0Out>
	UART0Out(*(timerAddr[4]+1));
 200:	e8 85       	ldd	r30, Y+8	; 0x08
 202:	f9 85       	ldd	r31, Y+9	; 0x09
 204:	81 81       	ldd	r24, Z+1	; 0x01
 206:	ae df       	rcall	.-164    	; 0x164 <UART0Out>
 208:	c5 e0       	ldi	r28, 0x05	; 5
	
	//Timer 1
	for (uint8_t i=5; i<8; i++)
 20a:	0c c0       	rjmp	.+24     	; 0x224 <sendTimerData+0x64>
 20c:	ec 2f       	mov	r30, r28
	{
		UART0Out(*timerAddr[i]);
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	ee 0f       	add	r30, r30
 212:	ff 1f       	adc	r31, r31
 214:	e8 5e       	subi	r30, 0xE8	; 232
 216:	fd 4f       	sbci	r31, 0xFD	; 253
 218:	01 90       	ld	r0, Z+
 21a:	f0 81       	ld	r31, Z
 21c:	e0 2d       	mov	r30, r0
 21e:	80 81       	ld	r24, Z
 220:	a1 df       	rcall	.-190    	; 0x164 <UART0Out>
 222:	cf 5f       	subi	r28, 0xFF	; 255
	//OCR0B
	UART0Out(*timerAddr[4]);
	UART0Out(*(timerAddr[4]+1));
	
	//Timer 1
	for (uint8_t i=5; i<8; i++)
 224:	c8 30       	cpi	r28, 0x08	; 8
 226:	90 f3       	brcs	.-28     	; 0x20c <sendTimerData+0x4c>
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR1A
	UART0Out(*timerAddr[8]);
 228:	c8 e1       	ldi	r28, 0x18	; 24
 22a:	d2 e0       	ldi	r29, 0x02	; 2
 22c:	e8 89       	ldd	r30, Y+16	; 0x10
 22e:	f9 89       	ldd	r31, Y+17	; 0x11
 230:	80 81       	ld	r24, Z
 232:	98 df       	rcall	.-208    	; 0x164 <UART0Out>
	UART0Out(*(timerAddr[8]+1));
 234:	e8 89       	ldd	r30, Y+16	; 0x10
 236:	f9 89       	ldd	r31, Y+17	; 0x11
 238:	81 81       	ldd	r24, Z+1	; 0x01
 23a:	94 df       	rcall	.-216    	; 0x164 <UART0Out>
	
	//OCR1B
	UART0Out(*timerAddr[9]);
 23c:	ea 89       	ldd	r30, Y+18	; 0x12
 23e:	fb 89       	ldd	r31, Y+19	; 0x13
 240:	80 81       	ld	r24, Z
 242:	90 df       	rcall	.-224    	; 0x164 <UART0Out>
	UART0Out(*(timerAddr[9]+1));
 244:	ea 89       	ldd	r30, Y+18	; 0x12
 246:	fb 89       	ldd	r31, Y+19	; 0x13
 248:	81 81       	ldd	r24, Z+1	; 0x01
 24a:	8c df       	rcall	.-232    	; 0x164 <UART0Out>
	
	//OCR1C
	UART0Out(*timerAddr[10]);
 24c:	ec 89       	ldd	r30, Y+20	; 0x14
 24e:	fd 89       	ldd	r31, Y+21	; 0x15
 250:	80 81       	ld	r24, Z
 252:	88 df       	rcall	.-240    	; 0x164 <UART0Out>
 254:	ec 89       	ldd	r30, Y+20	; 0x14
	UART0Out(*(timerAddr[10]+1));
 256:	fd 89       	ldd	r31, Y+21	; 0x15
 258:	81 81       	ldd	r24, Z+1	; 0x01
 25a:	84 df       	rcall	.-248    	; 0x164 <UART0Out>
 25c:	cb e0       	ldi	r28, 0x0B	; 11
 25e:	0c c0       	rjmp	.+24     	; 0x278 <sendTimerData+0xb8>
	
	//Timer 2
	for (uint8_t i=11; i<14; i++)
 260:	ec 2f       	mov	r30, r28
	{
		UART0Out(*timerAddr[i]);
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	ee 0f       	add	r30, r30
 266:	ff 1f       	adc	r31, r31
 268:	e8 5e       	subi	r30, 0xE8	; 232
 26a:	fd 4f       	sbci	r31, 0xFD	; 253
 26c:	01 90       	ld	r0, Z+
 26e:	f0 81       	ld	r31, Z
 270:	e0 2d       	mov	r30, r0
 272:	80 81       	ld	r24, Z
 274:	77 df       	rcall	.-274    	; 0x164 <UART0Out>
 276:	cf 5f       	subi	r28, 0xFF	; 255
	//OCR1C
	UART0Out(*timerAddr[10]);
	UART0Out(*(timerAddr[10]+1));
	
	//Timer 2
	for (uint8_t i=11; i<14; i++)
 278:	ce 30       	cpi	r28, 0x0E	; 14
 27a:	90 f3       	brcs	.-28     	; 0x260 <sendTimerData+0xa0>
 27c:	c8 e1       	ldi	r28, 0x18	; 24
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR2A
	UART0Out(*timerAddr[14]);
 27e:	d2 e0       	ldi	r29, 0x02	; 2
 280:	ec 8d       	ldd	r30, Y+28	; 0x1c
 282:	fd 8d       	ldd	r31, Y+29	; 0x1d
 284:	80 81       	ld	r24, Z
 286:	6e df       	rcall	.-292    	; 0x164 <UART0Out>
	UART0Out(*(timerAddr[14]+1));
 288:	ec 8d       	ldd	r30, Y+28	; 0x1c
 28a:	fd 8d       	ldd	r31, Y+29	; 0x1d
 28c:	81 81       	ldd	r24, Z+1	; 0x01
 28e:	6a df       	rcall	.-300    	; 0x164 <UART0Out>
 290:	ee 8d       	ldd	r30, Y+30	; 0x1e
	
	//OCR2B
	UART0Out(*timerAddr[15]);
 292:	ff 8d       	ldd	r31, Y+31	; 0x1f
 294:	80 81       	ld	r24, Z
 296:	66 df       	rcall	.-308    	; 0x164 <UART0Out>
 298:	ee 8d       	ldd	r30, Y+30	; 0x1e
 29a:	ff 8d       	ldd	r31, Y+31	; 0x1f
	UART0Out(*(timerAddr[15]+1));
 29c:	81 81       	ldd	r24, Z+1	; 0x01
 29e:	62 df       	rcall	.-316    	; 0x164 <UART0Out>
 2a0:	c0 e1       	ldi	r28, 0x10	; 16
 2a2:	0c c0       	rjmp	.+24     	; 0x2bc <sendTimerData+0xfc>
	
	//Timer 3
	for (uint8_t i=16; i<19; i++)
 2a4:	ec 2f       	mov	r30, r28
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
	{
		UART0Out(*timerAddr[i]);
 2a8:	ee 0f       	add	r30, r30
 2aa:	ff 1f       	adc	r31, r31
 2ac:	e8 5e       	subi	r30, 0xE8	; 232
 2ae:	fd 4f       	sbci	r31, 0xFD	; 253
 2b0:	01 90       	ld	r0, Z+
 2b2:	f0 81       	ld	r31, Z
 2b4:	e0 2d       	mov	r30, r0
 2b6:	80 81       	ld	r24, Z
 2b8:	55 df       	rcall	.-342    	; 0x164 <UART0Out>
 2ba:	cf 5f       	subi	r28, 0xFF	; 255
	//OCR2B
	UART0Out(*timerAddr[15]);
	UART0Out(*(timerAddr[15]+1));
	
	//Timer 3
	for (uint8_t i=16; i<19; i++)
 2bc:	c3 31       	cpi	r28, 0x13	; 19
 2be:	90 f3       	brcs	.-28     	; 0x2a4 <sendTimerData+0xe4>
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR3A
	UART0Out(*timerAddr[19]);
 2c0:	c8 e1       	ldi	r28, 0x18	; 24
 2c2:	d2 e0       	ldi	r29, 0x02	; 2
 2c4:	ee a1       	ldd	r30, Y+38	; 0x26
 2c6:	ff a1       	ldd	r31, Y+39	; 0x27
 2c8:	80 81       	ld	r24, Z
 2ca:	4c df       	rcall	.-360    	; 0x164 <UART0Out>
	UART0Out(*(timerAddr[19]+1));
 2cc:	ee a1       	ldd	r30, Y+38	; 0x26
 2ce:	ff a1       	ldd	r31, Y+39	; 0x27
 2d0:	81 81       	ldd	r24, Z+1	; 0x01
 2d2:	48 df       	rcall	.-368    	; 0x164 <UART0Out>
	
	//OCR3B
	UART0Out(*timerAddr[20]);
 2d4:	e8 a5       	ldd	r30, Y+40	; 0x28
 2d6:	f9 a5       	ldd	r31, Y+41	; 0x29
 2d8:	80 81       	ld	r24, Z
 2da:	44 df       	rcall	.-376    	; 0x164 <UART0Out>
 2dc:	e8 a5       	ldd	r30, Y+40	; 0x28
	UART0Out(*(timerAddr[20]+1));
 2de:	f9 a5       	ldd	r31, Y+41	; 0x29
 2e0:	81 81       	ldd	r24, Z+1	; 0x01
 2e2:	40 df       	rcall	.-384    	; 0x164 <UART0Out>
 2e4:	ea a5       	ldd	r30, Y+42	; 0x2a
 2e6:	fb a5       	ldd	r31, Y+43	; 0x2b
	
	//OCR3C
	UART0Out(*timerAddr[21]);
 2e8:	80 81       	ld	r24, Z
 2ea:	3c df       	rcall	.-392    	; 0x164 <UART0Out>
 2ec:	ea a5       	ldd	r30, Y+42	; 0x2a
 2ee:	fb a5       	ldd	r31, Y+43	; 0x2b
 2f0:	81 81       	ldd	r24, Z+1	; 0x01
	UART0Out(*(timerAddr[21]+1));
 2f2:	38 df       	rcall	.-400    	; 0x164 <UART0Out>
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <sendUSARTData>:
 2fa:	cf 93       	push	r28
}
 2fc:	c0 e0       	ldi	r28, 0x00	; 0
 2fe:	0c c0       	rjmp	.+24     	; 0x318 <sendUSARTData+0x1e>
 300:	ec 2f       	mov	r30, r28
*/
void sendUSARTData()
{
	for (uint8_t i=0; i<6; i++)
	{
		UART0Out(*USARTAddr[i]);
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	ee 0f       	add	r30, r30
 306:	ff 1f       	adc	r31, r31
 308:	e4 5f       	subi	r30, 0xF4	; 244
 30a:	fd 4f       	sbci	r31, 0xFD	; 253
 30c:	01 90       	ld	r0, Z+
 30e:	f0 81       	ld	r31, Z
 310:	e0 2d       	mov	r30, r0
 312:	80 81       	ld	r24, Z
 314:	27 df       	rcall	.-434    	; 0x164 <UART0Out>
	Loops though USARTAddr array and sends
	out data at each address
*/
void sendUSARTData()
{
	for (uint8_t i=0; i<6; i++)
 316:	cf 5f       	subi	r28, 0xFF	; 255
 318:	c6 30       	cpi	r28, 0x06	; 6
 31a:	90 f3       	brcs	.-28     	; 0x300 <sendUSARTData+0x6>
	{
		UART0Out(*USARTAddr[i]);
	}
}
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <sendADCData>:
Description:
	Loops though ADCAddr array and sends
	out data at each address
*/
void sendADCData()
{
 320:	cf 93       	push	r28
	for (uint8_t i=0; i<3; i++)
 322:	c0 e0       	ldi	r28, 0x00	; 0
 324:	0c c0       	rjmp	.+24     	; 0x33e <sendADCData+0x1e>
	{
		UART0Out(*ADCAddr[i]);
 326:	ec 2f       	mov	r30, r28
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	ee 0f       	add	r30, r30
 32c:	ff 1f       	adc	r31, r31
 32e:	ea 5f       	subi	r30, 0xFA	; 250
 330:	fd 4f       	sbci	r31, 0xFD	; 253
 332:	01 90       	ld	r0, Z+
 334:	f0 81       	ld	r31, Z
 336:	e0 2d       	mov	r30, r0
 338:	80 81       	ld	r24, Z
 33a:	14 df       	rcall	.-472    	; 0x164 <UART0Out>
	Loops though ADCAddr array and sends
	out data at each address
*/
void sendADCData()
{
	for (uint8_t i=0; i<3; i++)
 33c:	cf 5f       	subi	r28, 0xFF	; 255
 33e:	c3 30       	cpi	r28, 0x03	; 3
 340:	90 f3       	brcs	.-28     	; 0x326 <sendADCData+0x6>
	{
		UART0Out(*ADCAddr[i]);
	}
}
 342:	cf 91       	pop	r28
 344:	08 95       	ret

00000346 <sendINTData>:
Description:
	Loops though intAddr array and sends
	out data at each address
*/
void sendINTData()
{
 346:	cf 93       	push	r28
	for (uint8_t i=0; i<3; i++)
 348:	c0 e0       	ldi	r28, 0x00	; 0
 34a:	0c c0       	rjmp	.+24     	; 0x364 <sendINTData+0x1e>
	{
		UART0Out(*intAddr[i]);
 34c:	ec 2f       	mov	r30, r28
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	ee 0f       	add	r30, r30
 352:	ff 1f       	adc	r31, r31
 354:	e0 50       	subi	r30, 0x00	; 0
 356:	fe 4f       	sbci	r31, 0xFE	; 254
 358:	01 90       	ld	r0, Z+
 35a:	f0 81       	ld	r31, Z
 35c:	e0 2d       	mov	r30, r0
 35e:	80 81       	ld	r24, Z
 360:	01 df       	rcall	.-510    	; 0x164 <UART0Out>
	Loops though intAddr array and sends
	out data at each address
*/
void sendINTData()
{
	for (uint8_t i=0; i<3; i++)
 362:	cf 5f       	subi	r28, 0xFF	; 255
 364:	c3 30       	cpi	r28, 0x03	; 3
 366:	90 f3       	brcs	.-28     	; 0x34c <sendINTData+0x6>
	{
		UART0Out(*intAddr[i]);
	}
}
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <sendRegisterData>:
Description:
	Calls each send___Data() function
*/
void sendRegisterData() 
{
	UART0PrintString(st);
 36c:	8c e6       	ldi	r24, 0x6C	; 108
 36e:	92 e0       	ldi	r25, 0x02	; 2
 370:	08 df       	rcall	.-496    	; 0x182 <UART0PrintString>
	sendStopBit();
 372:	ff de       	rcall	.-514    	; 0x172 <sendStopBit>
	
	sendPortData();
 374:	12 df       	rcall	.-476    	; 0x19a <sendPortData>
	sendTimerData();
 376:	24 df       	rcall	.-440    	; 0x1c0 <sendTimerData>
	sendUSARTData();
 378:	c0 df       	rcall	.-128    	; 0x2fa <sendUSARTData>
	sendADCData();
 37a:	d2 df       	rcall	.-92     	; 0x320 <sendADCData>
	sendINTData();
 37c:	e4 df       	rcall	.-56     	; 0x346 <sendINTData>
 37e:	88 e6       	ldi	r24, 0x68	; 104
	
	UART0PrintString(en);
 380:	92 e0       	ldi	r25, 0x02	; 2
 382:	ff de       	rcall	.-514    	; 0x182 <UART0PrintString>
 384:	f6 ce       	rjmp	.-532    	; 0x172 <sendStopBit>
 386:	08 95       	ret

00000388 <__vector_50>:
	sendStopBit();
 388:	1f 92       	push	r1
 38a:	0f 92       	push	r0
 38c:	0f b6       	in	r0, 0x3f	; 63

Description:
	Resets counter value then sends register data
*/
ISR(TIMER5_OVF_vect) 
{
 38e:	0f 92       	push	r0
 390:	11 24       	eor	r1, r1
 392:	0b b6       	in	r0, 0x3b	; 59
 394:	0f 92       	push	r0
 396:	2f 93       	push	r18
 398:	3f 93       	push	r19
 39a:	4f 93       	push	r20
 39c:	5f 93       	push	r21
 39e:	6f 93       	push	r22
 3a0:	7f 93       	push	r23
 3a2:	8f 93       	push	r24
 3a4:	9f 93       	push	r25
 3a6:	af 93       	push	r26
 3a8:	bf 93       	push	r27
 3aa:	ef 93       	push	r30
 3ac:	ff 93       	push	r31
	TCNT5 = 65535 - (F_CPU / (1024*UPDATE_FREQUENCY));
 3ae:	85 ee       	ldi	r24, 0xE5	; 229
 3b0:	99 ef       	ldi	r25, 0xF9	; 249
 3b2:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
 3b6:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
	sendRegisterData();
 3ba:	d8 df       	rcall	.-80     	; 0x36c <sendRegisterData>
}
 3bc:	ff 91       	pop	r31
 3be:	ef 91       	pop	r30
 3c0:	bf 91       	pop	r27
 3c2:	af 91       	pop	r26
 3c4:	9f 91       	pop	r25
 3c6:	8f 91       	pop	r24
 3c8:	7f 91       	pop	r23
 3ca:	6f 91       	pop	r22
 3cc:	5f 91       	pop	r21
 3ce:	4f 91       	pop	r20
 3d0:	3f 91       	pop	r19
 3d2:	2f 91       	pop	r18
 3d4:	0f 90       	pop	r0
 3d6:	0b be       	out	0x3b, r0	; 59
 3d8:	0f 90       	pop	r0
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	0f 90       	pop	r0
 3de:	1f 90       	pop	r1
 3e0:	18 95       	reti

000003e2 <SM_init>:
}

void SM_movePosition(StepperMotorRunMode_t mode, uint16_t distance)
{
    SM_move(mode, ((double)distance / 360));
}
 3e2:	fc 01       	movw	r30, r24
 3e4:	90 81       	ld	r25, Z
 3e6:	9f 60       	ori	r25, 0x0F	; 15
 3e8:	90 83       	st	Z, r25
 3ea:	fb 01       	movw	r30, r22
 3ec:	10 82       	st	Z, r1
 3ee:	70 93 81 02 	sts	0x0281, r23	; 0x800281 <__data_end+0x1>
 3f2:	60 93 80 02 	sts	0x0280, r22	; 0x800280 <__data_end>
 3f6:	08 95       	ret

000003f8 <getModeAndSteps>:
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	cd b7       	in	r28, 0x3d	; 61
 3fe:	de b7       	in	r29, 0x3e	; 62
 400:	28 97       	sbiw	r28, 0x08	; 8
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	f8 94       	cli
 406:	de bf       	out	0x3e, r29	; 62
 408:	0f be       	out	0x3f, r0	; 63
 40a:	cd bf       	out	0x3d, r28	; 61
 40c:	28 2f       	mov	r18, r24
 40e:	cb 01       	movw	r24, r22
 410:	ba 01       	movw	r22, r20
 412:	21 30       	cpi	r18, 0x01	; 1
 414:	71 f0       	breq	.+28     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 416:	18 f0       	brcs	.+6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 418:	22 30       	cpi	r18, 0x02	; 2
 41a:	a9 f0       	breq	.+42     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 41c:	1e c0       	rjmp	.+60     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 41e:	20 e0       	ldi	r18, 0x00	; 0
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	40 e0       	ldi	r20, 0x00	; 0
 424:	55 e4       	ldi	r21, 0x45	; 69
 426:	1b d3       	rcall	.+1590   	; 0xa5e <__mulsf3>
 428:	38 d2       	rcall	.+1136   	; 0x89a <__fixunssfsi>
 42a:	24 e0       	ldi	r18, 0x04	; 4
 42c:	4b e7       	ldi	r20, 0x7B	; 123
 42e:	52 e0       	ldi	r21, 0x02	; 2
 430:	1b c0       	rjmp	.+54     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 432:	20 e0       	ldi	r18, 0x00	; 0
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	40 e0       	ldi	r20, 0x00	; 0
 438:	55 e4       	ldi	r21, 0x45	; 69
 43a:	11 d3       	rcall	.+1570   	; 0xa5e <__mulsf3>
 43c:	2e d2       	rcall	.+1116   	; 0x89a <__fixunssfsi>
 43e:	24 e0       	ldi	r18, 0x04	; 4
 440:	47 e7       	ldi	r20, 0x77	; 119
 442:	52 e0       	ldi	r21, 0x02	; 2
 444:	11 c0       	rjmp	.+34     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 446:	20 e0       	ldi	r18, 0x00	; 0
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	40 e8       	ldi	r20, 0x80	; 128
 44c:	55 e4       	ldi	r21, 0x45	; 69
 44e:	07 d3       	rcall	.+1550   	; 0xa5e <__mulsf3>
 450:	24 d2       	rcall	.+1096   	; 0x89a <__fixunssfsi>
 452:	28 e0       	ldi	r18, 0x08	; 8
 454:	4f e6       	ldi	r20, 0x6F	; 111
 456:	52 e0       	ldi	r21, 0x02	; 2
 458:	07 c0       	rjmp	.+14     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	70 e0       	ldi	r23, 0x00	; 0
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	20 e0       	ldi	r18, 0x00	; 0
 464:	40 e0       	ldi	r20, 0x00	; 0
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	3a 83       	std	Y+2, r19	; 0x02
 46c:	29 83       	std	Y+1, r18	; 0x01
 46e:	5c 83       	std	Y+4, r21	; 0x04
 470:	4b 83       	std	Y+3, r20	; 0x03
 472:	3a 81       	ldd	r19, Y+2	; 0x02
 474:	5c 81       	ldd	r21, Y+4	; 0x04
 476:	28 96       	adiw	r28, 0x08	; 8
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	f8 94       	cli
 47c:	de bf       	out	0x3e, r29	; 62
 47e:	0f be       	out	0x3f, r0	; 63
 480:	cd bf       	out	0x3d, r28	; 61
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	08 95       	ret

00000488 <SM_moveTime>:

void SM_moveTime(StepperMotorRunMode_t mode, bool direction, double time, double stepTime)
{
 488:	3f 92       	push	r3
 48a:	4f 92       	push	r4
 48c:	5f 92       	push	r5
 48e:	6f 92       	push	r6
 490:	7f 92       	push	r7
 492:	8f 92       	push	r8
 494:	9f 92       	push	r9
 496:	af 92       	push	r10
 498:	bf 92       	push	r11
 49a:	cf 92       	push	r12
 49c:	df 92       	push	r13
 49e:	ef 92       	push	r14
 4a0:	ff 92       	push	r15
 4a2:	0f 93       	push	r16
 4a4:	1f 93       	push	r17
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	cd b7       	in	r28, 0x3d	; 61
 4ac:	de b7       	in	r29, 0x3e	; 62
 4ae:	60 97       	sbiw	r28, 0x10	; 16
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	f8 94       	cli
 4b4:	de bf       	out	0x3e, r29	; 62
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	cd bf       	out	0x3d, r28	; 61
 4ba:	36 2e       	mov	r3, r22
 4bc:	2d 87       	std	Y+13, r18	; 0x0d
 4be:	3e 87       	std	Y+14, r19	; 0x0e
 4c0:	4f 87       	std	Y+15, r20	; 0x0f
 4c2:	58 8b       	std	Y+16, r21	; 0x10
 4c4:	e9 86       	std	Y+9, r14	; 0x09
 4c6:	fa 86       	std	Y+10, r15	; 0x0a
 4c8:	0b 87       	std	Y+11, r16	; 0x0b
 4ca:	1c 87       	std	Y+12, r17	; 0x0c
    StepperMotorModeData_t data = getModeAndSteps(mode, 0);
 4cc:	40 e0       	ldi	r20, 0x00	; 0
 4ce:	50 e0       	ldi	r21, 0x00	; 0
 4d0:	ba 01       	movw	r22, r20
 4d2:	92 df       	rcall	.-220    	; 0x3f8 <getModeAndSteps>
 4d4:	29 83       	std	Y+1, r18	; 0x01
 4d6:	3a 83       	std	Y+2, r19	; 0x02
 4d8:	4b 83       	std	Y+3, r20	; 0x03
 4da:	5c 83       	std	Y+4, r21	; 0x04
 4dc:	6d 83       	std	Y+5, r22	; 0x05
 4de:	7e 83       	std	Y+6, r23	; 0x06
 4e0:	8f 83       	std	Y+7, r24	; 0x07
 4e2:	98 87       	std	Y+8, r25	; 0x08

    for(uint32_t i = 0, j = (direction ? data.arraySize : 0); i < (time / stepTime); i++)
 4e4:	33 20       	and	r3, r3
 4e6:	29 f0       	breq	.+10     	; 0x4f2 <SM_moveTime+0x6a>
 4e8:	c9 80       	ldd	r12, Y+1	; 0x01
 4ea:	da 80       	ldd	r13, Y+2	; 0x02
 4ec:	e1 2c       	mov	r14, r1
 4ee:	f1 2c       	mov	r15, r1
 4f0:	03 c0       	rjmp	.+6      	; 0x4f8 <SM_moveTime+0x70>
 4f2:	c1 2c       	mov	r12, r1
 4f4:	d1 2c       	mov	r13, r1
 4f6:	76 01       	movw	r14, r12

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 4f8:	81 2c       	mov	r8, r1
 4fa:	91 2c       	mov	r9, r1
 4fc:	54 01       	movw	r10, r8
 4fe:	6e c0       	rjmp	.+220    	; 0x5dc <SM_moveTime+0x154>
    {
        *sMotorPort = data.pArray[(direction ? j-- : j++)];
 500:	e0 91 80 02 	lds	r30, 0x0280	; 0x800280 <__data_end>
 504:	f0 91 81 02 	lds	r31, 0x0281	; 0x800281 <__data_end+0x1>
 508:	8b 81       	ldd	r24, Y+3	; 0x03
 50a:	9c 81       	ldd	r25, Y+4	; 0x04
 50c:	33 20       	and	r3, r3
 50e:	39 f0       	breq	.+14     	; 0x51e <SM_moveTime+0x96>
 510:	b7 01       	movw	r22, r14
 512:	a6 01       	movw	r20, r12
 514:	41 50       	subi	r20, 0x01	; 1
 516:	51 09       	sbc	r21, r1
 518:	61 09       	sbc	r22, r1
 51a:	71 09       	sbc	r23, r1
 51c:	06 c0       	rjmp	.+12     	; 0x52a <SM_moveTime+0xa2>
 51e:	b7 01       	movw	r22, r14
 520:	a6 01       	movw	r20, r12
 522:	4f 5f       	subi	r20, 0xFF	; 255
 524:	5f 4f       	sbci	r21, 0xFF	; 255
 526:	6f 4f       	sbci	r22, 0xFF	; 255
 528:	7f 4f       	sbci	r23, 0xFF	; 255
 52a:	dc 01       	movw	r26, r24
 52c:	ac 0d       	add	r26, r12
 52e:	bd 1d       	adc	r27, r13
 530:	8c 91       	ld	r24, X
 532:	80 83       	st	Z, r24

        if(j >= data.arraySize || j <= 0)
 534:	c9 80       	ldd	r12, Y+1	; 0x01
 536:	da 80       	ldd	r13, Y+2	; 0x02
 538:	e1 2c       	mov	r14, r1
 53a:	f1 2c       	mov	r15, r1
 53c:	4c 15       	cp	r20, r12
 53e:	5d 05       	cpc	r21, r13
 540:	6e 05       	cpc	r22, r14
 542:	7f 05       	cpc	r23, r15
 544:	28 f4       	brcc	.+10     	; 0x550 <SM_moveTime+0xc8>
 546:	41 15       	cp	r20, r1
 548:	51 05       	cpc	r21, r1
 54a:	61 05       	cpc	r22, r1
 54c:	71 05       	cpc	r23, r1
 54e:	31 f4       	brne	.+12     	; 0x55c <SM_moveTime+0xd4>
        {
            j = (direction ? data.arraySize : 0);
 550:	31 10       	cpse	r3, r1
 552:	06 c0       	rjmp	.+12     	; 0x560 <SM_moveTime+0xd8>
 554:	c1 2c       	mov	r12, r1
 556:	d1 2c       	mov	r13, r1
 558:	76 01       	movw	r14, r12
 55a:	02 c0       	rjmp	.+4      	; 0x560 <SM_moveTime+0xd8>
 55c:	6a 01       	movw	r12, r20
 55e:	7b 01       	movw	r14, r22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 560:	20 e0       	ldi	r18, 0x00	; 0
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	4a e7       	ldi	r20, 0x7A	; 122
 566:	55 e4       	ldi	r21, 0x45	; 69
 568:	69 85       	ldd	r22, Y+9	; 0x09
 56a:	7a 85       	ldd	r23, Y+10	; 0x0a
 56c:	8b 85       	ldd	r24, Y+11	; 0x0b
 56e:	9c 85       	ldd	r25, Y+12	; 0x0c
 570:	76 d2       	rcall	.+1260   	; 0xa5e <__mulsf3>
 572:	2b 01       	movw	r4, r22
 574:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
 576:	20 e0       	ldi	r18, 0x00	; 0
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	40 e8       	ldi	r20, 0x80	; 128
 57c:	5f e3       	ldi	r21, 0x3F	; 63
 57e:	21 d1       	rcall	.+578    	; 0x7c2 <__cmpsf2>
 580:	88 23       	and	r24, r24
 582:	14 f1       	brlt	.+68     	; 0x5c8 <SM_moveTime+0x140>
		__ticks = 1;
	else if (__tmp > 65535)
 584:	20 e0       	ldi	r18, 0x00	; 0
 586:	3f ef       	ldi	r19, 0xFF	; 255
 588:	4f e7       	ldi	r20, 0x7F	; 127
 58a:	57 e4       	ldi	r21, 0x47	; 71
 58c:	c3 01       	movw	r24, r6
 58e:	b2 01       	movw	r22, r4
 590:	62 d2       	rcall	.+1220   	; 0xa56 <__gesf2>
 592:	18 16       	cp	r1, r24
 594:	ac f4       	brge	.+42     	; 0x5c0 <SM_moveTime+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 596:	20 e0       	ldi	r18, 0x00	; 0
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	40 e2       	ldi	r20, 0x20	; 32
 59c:	51 e4       	ldi	r21, 0x41	; 65
 59e:	69 85       	ldd	r22, Y+9	; 0x09
 5a0:	7a 85       	ldd	r23, Y+10	; 0x0a
 5a2:	8b 85       	ldd	r24, Y+11	; 0x0b
 5a4:	9c 85       	ldd	r25, Y+12	; 0x0c
 5a6:	5b d2       	rcall	.+1206   	; 0xa5e <__mulsf3>
 5a8:	78 d1       	rcall	.+752    	; 0x89a <__fixunssfsi>
 5aa:	06 c0       	rjmp	.+12     	; 0x5b8 <SM_moveTime+0x130>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5ac:	80 e9       	ldi	r24, 0x90	; 144
 5ae:	91 e0       	ldi	r25, 0x01	; 1
 5b0:	01 97       	sbiw	r24, 0x01	; 1
 5b2:	f1 f7       	brne	.-4      	; 0x5b0 <SM_moveTime+0x128>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5b4:	61 50       	subi	r22, 0x01	; 1
 5b6:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5b8:	61 15       	cp	r22, r1
 5ba:	71 05       	cpc	r23, r1
 5bc:	b9 f7       	brne	.-18     	; 0x5ac <SM_moveTime+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5be:	09 c0       	rjmp	.+18     	; 0x5d2 <SM_moveTime+0x14a>
 5c0:	c3 01       	movw	r24, r6
 5c2:	b2 01       	movw	r22, r4
 5c4:	6a d1       	rcall	.+724    	; 0x89a <__fixunssfsi>
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <SM_moveTime+0x144>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 5c8:	61 e0       	ldi	r22, 0x01	; 1
 5ca:	70 e0       	ldi	r23, 0x00	; 0
 5cc:	cb 01       	movw	r24, r22
 5ce:	01 97       	sbiw	r24, 0x01	; 1
 5d0:	f1 f7       	brne	.-4      	; 0x5ce <SM_moveTime+0x146>

void SM_moveTime(StepperMotorRunMode_t mode, bool direction, double time, double stepTime)
{
    StepperMotorModeData_t data = getModeAndSteps(mode, 0);

    for(uint32_t i = 0, j = (direction ? data.arraySize : 0); i < (time / stepTime); i++)
 5d2:	8f ef       	ldi	r24, 0xFF	; 255
 5d4:	88 1a       	sub	r8, r24
 5d6:	98 0a       	sbc	r9, r24
 5d8:	a8 0a       	sbc	r10, r24
 5da:	b8 0a       	sbc	r11, r24
 5dc:	c5 01       	movw	r24, r10
 5de:	b4 01       	movw	r22, r8
 5e0:	88 d1       	rcall	.+784    	; 0x8f2 <__floatunsisf>
 5e2:	2b 01       	movw	r4, r22
 5e4:	3c 01       	movw	r6, r24
 5e6:	29 85       	ldd	r18, Y+9	; 0x09
 5e8:	3a 85       	ldd	r19, Y+10	; 0x0a
 5ea:	4b 85       	ldd	r20, Y+11	; 0x0b
 5ec:	5c 85       	ldd	r21, Y+12	; 0x0c
 5ee:	6d 85       	ldd	r22, Y+13	; 0x0d
 5f0:	7e 85       	ldd	r23, Y+14	; 0x0e
 5f2:	8f 85       	ldd	r24, Y+15	; 0x0f
 5f4:	98 89       	ldd	r25, Y+16	; 0x10
 5f6:	e9 d0       	rcall	.+466    	; 0x7ca <__divsf3>
 5f8:	9b 01       	movw	r18, r22
 5fa:	ac 01       	movw	r20, r24
 5fc:	c3 01       	movw	r24, r6
 5fe:	b2 01       	movw	r22, r4
 600:	e0 d0       	rcall	.+448    	; 0x7c2 <__cmpsf2>
 602:	88 23       	and	r24, r24
 604:	0c f4       	brge	.+2      	; 0x608 <SM_moveTime+0x180>
 606:	7c cf       	rjmp	.-264    	; 0x500 <SM_moveTime+0x78>
        }

        _delay_ms(stepTime);
    }

    *sMotorPort = 0x00;
 608:	e0 91 80 02 	lds	r30, 0x0280	; 0x800280 <__data_end>
 60c:	f0 91 81 02 	lds	r31, 0x0281	; 0x800281 <__data_end+0x1>
 610:	10 82       	st	Z, r1
}
 612:	60 96       	adiw	r28, 0x10	; 16
 614:	0f b6       	in	r0, 0x3f	; 63
 616:	f8 94       	cli
 618:	de bf       	out	0x3e, r29	; 62
 61a:	0f be       	out	0x3f, r0	; 63
 61c:	cd bf       	out	0x3d, r28	; 61
 61e:	df 91       	pop	r29
 620:	cf 91       	pop	r28
 622:	1f 91       	pop	r17
 624:	0f 91       	pop	r16
 626:	ff 90       	pop	r15
 628:	ef 90       	pop	r14
 62a:	df 90       	pop	r13
 62c:	cf 90       	pop	r12
 62e:	bf 90       	pop	r11
 630:	af 90       	pop	r10
 632:	9f 90       	pop	r9
 634:	8f 90       	pop	r8
 636:	7f 90       	pop	r7
 638:	6f 90       	pop	r6
 63a:	5f 90       	pop	r5
 63c:	4f 90       	pop	r4
 63e:	3f 90       	pop	r3
 640:	08 95       	ret

00000642 <IO_init>:

/* NOTE: Function implementations */
void IO_init(void)
{
    // bottom nibble is motor and top is input switches
    DDRA  = 0x0f;
 642:	8f e0       	ldi	r24, 0x0F	; 15
 644:	81 b9       	out	0x01, r24	; 1
    // turn on switch pullup resistors
    PORTA = 0xf0;
 646:	80 ef       	ldi	r24, 0xF0	; 240
 648:	82 b9       	out	0x02, r24	; 2

    // the start button
    DDRK  = 0x00;
 64a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
    PORTK = 0x01;
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>

    // the led output port
    DDRC  = 0xff;
 654:	8f ef       	ldi	r24, 0xFF	; 255
 656:	87 b9       	out	0x07, r24	; 7
    PORTC = 0x00;
 658:	18 b8       	out	0x08, r1	; 8
 65a:	08 95       	ret

0000065c <WASH_setValvesToInput>:
}

void WASH_setValvesToInput(void)
{
    if(hotButton != 0x00)
 65c:	04 9b       	sbis	0x00, 4	; 0
 65e:	06 c0       	rjmp	.+12     	; 0x66c <WASH_setValvesToInput+0x10>
    {
        // hot on, cold off
        outPort = hotValve(1);
 660:	88 b1       	in	r24, 0x08	; 8
 662:	80 62       	ori	r24, 0x20	; 32
 664:	88 b9       	out	0x08, r24	; 8
        outPort = coldValve(0);
 666:	88 b1       	in	r24, 0x08	; 8
 668:	8f 7b       	andi	r24, 0xBF	; 191
 66a:	88 b9       	out	0x08, r24	; 8
    }

    if(warmButton != 0x00)
 66c:	05 9b       	sbis	0x00, 5	; 0
 66e:	06 c0       	rjmp	.+12     	; 0x67c <WASH_setValvesToInput+0x20>
    {
        // hot on, cold on
        outPort = hotValve(1);
 670:	88 b1       	in	r24, 0x08	; 8
 672:	80 62       	ori	r24, 0x20	; 32
 674:	88 b9       	out	0x08, r24	; 8
        outPort = coldValve(1);
 676:	88 b1       	in	r24, 0x08	; 8
 678:	80 64       	ori	r24, 0x40	; 64
 67a:	88 b9       	out	0x08, r24	; 8
    }

    if(coldButton != 0x00)
 67c:	06 9b       	sbis	0x00, 6	; 0
 67e:	06 c0       	rjmp	.+12     	; 0x68c <WASH_setValvesToInput+0x30>
    {
        // hot off, cold on
        outPort = hotValve(0);
 680:	88 b1       	in	r24, 0x08	; 8
 682:	8f 7d       	andi	r24, 0xDF	; 223
 684:	88 b9       	out	0x08, r24	; 8
        outPort = coldValve(1);
 686:	88 b1       	in	r24, 0x08	; 8
 688:	80 64       	ori	r24, 0x40	; 64
 68a:	88 b9       	out	0x08, r24	; 8
 68c:	08 95       	ret

0000068e <main>:

/* NOTE: Application implementation */
// the main loop of the function, provided to us
int main(void)
{
    initDebug();
 68e:	66 dd       	rcall	.-1332   	; 0x15c <initDebug>

    IO_init();
 690:	d8 df       	rcall	.-80     	; 0x642 <IO_init>
 692:	62 e2       	ldi	r22, 0x22	; 34
    SM_init(&DDRA, &PORTA);
 694:	70 e0       	ldi	r23, 0x00	; 0
 696:	81 e2       	ldi	r24, 0x21	; 33
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	a3 de       	rcall	.-698    	; 0x3e2 <SM_init>
 69c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>

    while(1)
    {
        // while we have not started the washing machine
        // and the door is open
        while(!((startButton == 0x01) && (doorSwitch == 0x00)))
 6a0:	80 ff       	sbrs	r24, 0
 6a2:	fc cf       	rjmp	.-8      	; 0x69c <main+0xe>
 6a4:	07 99       	sbic	0x00, 7	; 0
 6a6:	fa cf       	rjmp	.-12     	; 0x69c <main+0xe>
        {
            // do nothing
        }

        // NOTE: fill cycle
        WASH_setValvesToInput();
 6a8:	d9 df       	rcall	.-78     	; 0x65c <WASH_setValvesToInput>
 6aa:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ac:	8f e4       	ldi	r24, 0x4F	; 79
 6ae:	93 ec       	ldi	r25, 0xC3	; 195
 6b0:	21 50       	subi	r18, 0x01	; 1
 6b2:	80 40       	sbci	r24, 0x00	; 0
 6b4:	90 40       	sbci	r25, 0x00	; 0
 6b6:	e1 f7       	brne	.-8      	; 0x6b0 <main+0x22>
 6b8:	00 c0       	rjmp	.+0      	; 0x6ba <main+0x2c>
 6ba:	00 00       	nop
 6bc:	88 b1       	in	r24, 0x08	; 8

        _delay_ms(4000);

        outPort = hotValve(0);
 6be:	8f 7d       	andi	r24, 0xDF	; 223
 6c0:	88 b9       	out	0x08, r24	; 8
 6c2:	88 b1       	in	r24, 0x08	; 8
        outPort = coldValve(0);
 6c4:	8f 7b       	andi	r24, 0xBF	; 191
 6c6:	88 b9       	out	0x08, r24	; 8
 6c8:	88 b1       	in	r24, 0x08	; 8

        // NOTE: wash cycle
        outPort = agitateLed(1);
 6ca:	82 60       	ori	r24, 0x02	; 2
 6cc:	88 b9       	out	0x08, r24	; 8
 6ce:	c0 e0       	ldi	r28, 0x00	; 0

        for(size_t i = 0; i < 2; i++)
 6d0:	d0 e0       	ldi	r29, 0x00	; 0
 6d2:	13 c0       	rjmp	.+38     	; 0x6fa <main+0x6c>
 6d4:	e1 2c       	mov	r14, r1
        {
            // move cw for 2 seconds
            SM_moveTime((StepperMotorRunMode_t)2, true, 2000, 5);
 6d6:	f1 2c       	mov	r15, r1
 6d8:	00 ea       	ldi	r16, 0xA0	; 160
 6da:	10 e4       	ldi	r17, 0x40	; 64
 6dc:	20 e0       	ldi	r18, 0x00	; 0
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	4a ef       	ldi	r20, 0xFA	; 250
 6e2:	54 e4       	ldi	r21, 0x44	; 68
 6e4:	61 e0       	ldi	r22, 0x01	; 1
 6e6:	82 e0       	ldi	r24, 0x02	; 2
 6e8:	cf de       	rcall	.-610    	; 0x488 <SM_moveTime>
 6ea:	20 e0       	ldi	r18, 0x00	; 0

            // move ccw for 2 seconds
            SM_moveTime((StepperMotorRunMode_t)2, false, 2000, 5);
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	4a ef       	ldi	r20, 0xFA	; 250
 6f0:	54 e4       	ldi	r21, 0x44	; 68
 6f2:	60 e0       	ldi	r22, 0x00	; 0
 6f4:	82 e0       	ldi	r24, 0x02	; 2
 6f6:	c8 de       	rcall	.-624    	; 0x488 <SM_moveTime>
 6f8:	21 96       	adiw	r28, 0x01	; 1
        outPort = coldValve(0);

        // NOTE: wash cycle
        outPort = agitateLed(1);

        for(size_t i = 0; i < 2; i++)
 6fa:	c2 30       	cpi	r28, 0x02	; 2
 6fc:	d1 05       	cpc	r29, r1
 6fe:	50 f3       	brcs	.-44     	; 0x6d4 <main+0x46>
 700:	88 b1       	in	r24, 0x08	; 8

            // move ccw for 2 seconds
            SM_moveTime((StepperMotorRunMode_t)2, false, 2000, 5);
        }

        outPort = agitateLed(0);
 702:	8d 7f       	andi	r24, 0xFD	; 253
 704:	88 b9       	out	0x08, r24	; 8
 706:	88 b1       	in	r24, 0x08	; 8

        // NOTE: drain cycle
        outPort = drainValve(1);
 708:	80 61       	ori	r24, 0x10	; 16
 70a:	88 b9       	out	0x08, r24	; 8
 70c:	2f ef       	ldi	r18, 0xFF	; 255
 70e:	8f e4       	ldi	r24, 0x4F	; 79
 710:	93 ec       	ldi	r25, 0xC3	; 195
 712:	21 50       	subi	r18, 0x01	; 1
 714:	80 40       	sbci	r24, 0x00	; 0
 716:	90 40       	sbci	r25, 0x00	; 0
 718:	e1 f7       	brne	.-8      	; 0x712 <main+0x84>
 71a:	00 c0       	rjmp	.+0      	; 0x71c <main+0x8e>
 71c:	00 00       	nop

        _delay_ms(4000);

        outPort = drainValve(0);
 71e:	88 b1       	in	r24, 0x08	; 8
 720:	8f 7e       	andi	r24, 0xEF	; 239
 722:	88 b9       	out	0x08, r24	; 8

        // NOTE: fill again cycle
        WASH_setValvesToInput();
 724:	9b df       	rcall	.-202    	; 0x65c <WASH_setValvesToInput>
 726:	2f ef       	ldi	r18, 0xFF	; 255
 728:	8f e4       	ldi	r24, 0x4F	; 79
 72a:	93 ec       	ldi	r25, 0xC3	; 195
 72c:	21 50       	subi	r18, 0x01	; 1
 72e:	80 40       	sbci	r24, 0x00	; 0
 730:	90 40       	sbci	r25, 0x00	; 0
 732:	e1 f7       	brne	.-8      	; 0x72c <main+0x9e>
 734:	00 c0       	rjmp	.+0      	; 0x736 <main+0xa8>
 736:	00 00       	nop
 738:	88 b1       	in	r24, 0x08	; 8

        _delay_ms(4000);

        outPort = hotValve(0);
 73a:	8f 7d       	andi	r24, 0xDF	; 223
 73c:	88 b9       	out	0x08, r24	; 8
 73e:	88 b1       	in	r24, 0x08	; 8
        outPort = coldValve(0);
 740:	8f 7b       	andi	r24, 0xBF	; 191
 742:	88 b9       	out	0x08, r24	; 8
 744:	88 b1       	in	r24, 0x08	; 8

        // NOTE: rinse cycle
        outPort = agitateLed(1);
 746:	82 60       	ori	r24, 0x02	; 2
 748:	88 b9       	out	0x08, r24	; 8
 74a:	c0 e0       	ldi	r28, 0x00	; 0

        for(size_t i = 0; i < 3; i++)
 74c:	d0 e0       	ldi	r29, 0x00	; 0
 74e:	13 c0       	rjmp	.+38     	; 0x776 <main+0xe8>
 750:	e1 2c       	mov	r14, r1
        {
            // move cw for 2 seconds
            SM_moveTime((StepperMotorRunMode_t)2, true, 2000, 5);
 752:	f1 2c       	mov	r15, r1
 754:	00 ea       	ldi	r16, 0xA0	; 160
 756:	10 e4       	ldi	r17, 0x40	; 64
 758:	20 e0       	ldi	r18, 0x00	; 0
 75a:	30 e0       	ldi	r19, 0x00	; 0
 75c:	4a ef       	ldi	r20, 0xFA	; 250
 75e:	54 e4       	ldi	r21, 0x44	; 68
 760:	61 e0       	ldi	r22, 0x01	; 1
 762:	82 e0       	ldi	r24, 0x02	; 2
 764:	91 de       	rcall	.-734    	; 0x488 <SM_moveTime>

            // move ccw for 2 seconds
            SM_moveTime((StepperMotorRunMode_t)2, false, 2000, 5);
 766:	20 e0       	ldi	r18, 0x00	; 0
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	4a ef       	ldi	r20, 0xFA	; 250
 76c:	54 e4       	ldi	r21, 0x44	; 68
 76e:	60 e0       	ldi	r22, 0x00	; 0
 770:	82 e0       	ldi	r24, 0x02	; 2
 772:	8a de       	rcall	.-748    	; 0x488 <SM_moveTime>
 774:	21 96       	adiw	r28, 0x01	; 1
        outPort = coldValve(0);

        // NOTE: rinse cycle
        outPort = agitateLed(1);

        for(size_t i = 0; i < 3; i++)
 776:	c3 30       	cpi	r28, 0x03	; 3
 778:	d1 05       	cpc	r29, r1
 77a:	50 f3       	brcs	.-44     	; 0x750 <main+0xc2>
 77c:	88 b1       	in	r24, 0x08	; 8

            // move ccw for 2 seconds
            SM_moveTime((StepperMotorRunMode_t)2, false, 2000, 5);
        }

        outPort = agitateLed(0);
 77e:	8d 7f       	andi	r24, 0xFD	; 253
 780:	88 b9       	out	0x08, r24	; 8
 782:	88 b1       	in	r24, 0x08	; 8

        // NOTE: spin cycle
        outPort = drainValve(1);
 784:	80 61       	ori	r24, 0x10	; 16
 786:	88 b9       	out	0x08, r24	; 8
 788:	88 b1       	in	r24, 0x08	; 8
        outPort = spinLed(1);
 78a:	84 60       	ori	r24, 0x04	; 4
 78c:	88 b9       	out	0x08, r24	; 8
 78e:	e1 2c       	mov	r14, r1

        // spin for 9s
        SM_moveTime((StepperMotorRunMode_t)1, true, 9000, 3);
 790:	f1 2c       	mov	r15, r1
 792:	00 e4       	ldi	r16, 0x40	; 64
 794:	10 e4       	ldi	r17, 0x40	; 64
 796:	20 e0       	ldi	r18, 0x00	; 0
 798:	30 ea       	ldi	r19, 0xA0	; 160
 79a:	4c e0       	ldi	r20, 0x0C	; 12
 79c:	56 e4       	ldi	r21, 0x46	; 70
 79e:	61 e0       	ldi	r22, 0x01	; 1
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	72 de       	rcall	.-796    	; 0x488 <SM_moveTime>
 7a4:	88 b1       	in	r24, 0x08	; 8

        outPort = drainValve(0);
 7a6:	8f 7e       	andi	r24, 0xEF	; 239
 7a8:	88 b9       	out	0x08, r24	; 8
 7aa:	88 b1       	in	r24, 0x08	; 8
        outPort = spinLed(0);
 7ac:	8b 7f       	andi	r24, 0xFB	; 251
 7ae:	88 b9       	out	0x08, r24	; 8
 7b0:	88 b1       	in	r24, 0x08	; 8


        // NOTE: done with the wash
        outPort = doneLed(1);
 7b2:	81 60       	ori	r24, 0x01	; 1
 7b4:	88 b9       	out	0x08, r24	; 8
 7b6:	07 9b       	sbis	0x00, 7	; 0

        while(doorSwitch != 0x80)
 7b8:	fe cf       	rjmp	.-4      	; 0x7b6 <main+0x128>
 7ba:	88 b1       	in	r24, 0x08	; 8
        {
            // do nothing
        }

        outPort = doneLed(0);
 7bc:	8e 7f       	andi	r24, 0xFE	; 254
 7be:	88 b9       	out	0x08, r24	; 8
 7c0:	6d cf       	rjmp	.-294    	; 0x69c <main+0xe>

000007c2 <__cmpsf2>:
    }
 7c2:	d4 d0       	rcall	.+424    	; 0x96c <__fp_cmp>
 7c4:	08 f4       	brcc	.+2      	; 0x7c8 <__cmpsf2+0x6>
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	08 95       	ret

000007ca <__divsf3>:
 7ca:	0c d0       	rcall	.+24     	; 0x7e4 <__divsf3x>
 7cc:	0a c1       	rjmp	.+532    	; 0x9e2 <__fp_round>
 7ce:	02 d1       	rcall	.+516    	; 0x9d4 <__fp_pscB>
 7d0:	40 f0       	brcs	.+16     	; 0x7e2 <__divsf3+0x18>
 7d2:	f9 d0       	rcall	.+498    	; 0x9c6 <__fp_pscA>
 7d4:	30 f0       	brcs	.+12     	; 0x7e2 <__divsf3+0x18>
 7d6:	21 f4       	brne	.+8      	; 0x7e0 <__divsf3+0x16>
 7d8:	5f 3f       	cpi	r21, 0xFF	; 255
 7da:	19 f0       	breq	.+6      	; 0x7e2 <__divsf3+0x18>
 7dc:	eb c0       	rjmp	.+470    	; 0x9b4 <__fp_inf>
 7de:	51 11       	cpse	r21, r1
 7e0:	34 c1       	rjmp	.+616    	; 0xa4a <__fp_szero>
 7e2:	ee c0       	rjmp	.+476    	; 0x9c0 <__fp_nan>

000007e4 <__divsf3x>:
 7e4:	0f d1       	rcall	.+542    	; 0xa04 <__fp_split3>
 7e6:	98 f3       	brcs	.-26     	; 0x7ce <__divsf3+0x4>

000007e8 <__divsf3_pse>:
 7e8:	99 23       	and	r25, r25
 7ea:	c9 f3       	breq	.-14     	; 0x7de <__divsf3+0x14>
 7ec:	55 23       	and	r21, r21
 7ee:	b1 f3       	breq	.-20     	; 0x7dc <__divsf3+0x12>
 7f0:	95 1b       	sub	r25, r21
 7f2:	55 0b       	sbc	r21, r21
 7f4:	bb 27       	eor	r27, r27
 7f6:	aa 27       	eor	r26, r26
 7f8:	62 17       	cp	r22, r18
 7fa:	73 07       	cpc	r23, r19
 7fc:	84 07       	cpc	r24, r20
 7fe:	38 f0       	brcs	.+14     	; 0x80e <__divsf3_pse+0x26>
 800:	9f 5f       	subi	r25, 0xFF	; 255
 802:	5f 4f       	sbci	r21, 0xFF	; 255
 804:	22 0f       	add	r18, r18
 806:	33 1f       	adc	r19, r19
 808:	44 1f       	adc	r20, r20
 80a:	aa 1f       	adc	r26, r26
 80c:	a9 f3       	breq	.-22     	; 0x7f8 <__divsf3_pse+0x10>
 80e:	33 d0       	rcall	.+102    	; 0x876 <__divsf3_pse+0x8e>
 810:	0e 2e       	mov	r0, r30
 812:	3a f0       	brmi	.+14     	; 0x822 <__divsf3_pse+0x3a>
 814:	e0 e8       	ldi	r30, 0x80	; 128
 816:	30 d0       	rcall	.+96     	; 0x878 <__divsf3_pse+0x90>
 818:	91 50       	subi	r25, 0x01	; 1
 81a:	50 40       	sbci	r21, 0x00	; 0
 81c:	e6 95       	lsr	r30
 81e:	00 1c       	adc	r0, r0
 820:	ca f7       	brpl	.-14     	; 0x814 <__divsf3_pse+0x2c>
 822:	29 d0       	rcall	.+82     	; 0x876 <__divsf3_pse+0x8e>
 824:	fe 2f       	mov	r31, r30
 826:	27 d0       	rcall	.+78     	; 0x876 <__divsf3_pse+0x8e>
 828:	66 0f       	add	r22, r22
 82a:	77 1f       	adc	r23, r23
 82c:	88 1f       	adc	r24, r24
 82e:	bb 1f       	adc	r27, r27
 830:	26 17       	cp	r18, r22
 832:	37 07       	cpc	r19, r23
 834:	48 07       	cpc	r20, r24
 836:	ab 07       	cpc	r26, r27
 838:	b0 e8       	ldi	r27, 0x80	; 128
 83a:	09 f0       	breq	.+2      	; 0x83e <__divsf3_pse+0x56>
 83c:	bb 0b       	sbc	r27, r27
 83e:	80 2d       	mov	r24, r0
 840:	bf 01       	movw	r22, r30
 842:	ff 27       	eor	r31, r31
 844:	93 58       	subi	r25, 0x83	; 131
 846:	5f 4f       	sbci	r21, 0xFF	; 255
 848:	2a f0       	brmi	.+10     	; 0x854 <__divsf3_pse+0x6c>
 84a:	9e 3f       	cpi	r25, 0xFE	; 254
 84c:	51 05       	cpc	r21, r1
 84e:	68 f0       	brcs	.+26     	; 0x86a <__divsf3_pse+0x82>
 850:	b1 c0       	rjmp	.+354    	; 0x9b4 <__fp_inf>
 852:	fb c0       	rjmp	.+502    	; 0xa4a <__fp_szero>
 854:	5f 3f       	cpi	r21, 0xFF	; 255
 856:	ec f3       	brlt	.-6      	; 0x852 <__divsf3_pse+0x6a>
 858:	98 3e       	cpi	r25, 0xE8	; 232
 85a:	dc f3       	brlt	.-10     	; 0x852 <__divsf3_pse+0x6a>
 85c:	86 95       	lsr	r24
 85e:	77 95       	ror	r23
 860:	67 95       	ror	r22
 862:	b7 95       	ror	r27
 864:	f7 95       	ror	r31
 866:	9f 5f       	subi	r25, 0xFF	; 255
 868:	c9 f7       	brne	.-14     	; 0x85c <__divsf3_pse+0x74>
 86a:	88 0f       	add	r24, r24
 86c:	91 1d       	adc	r25, r1
 86e:	96 95       	lsr	r25
 870:	87 95       	ror	r24
 872:	97 f9       	bld	r25, 7
 874:	08 95       	ret
 876:	e1 e0       	ldi	r30, 0x01	; 1
 878:	66 0f       	add	r22, r22
 87a:	77 1f       	adc	r23, r23
 87c:	88 1f       	adc	r24, r24
 87e:	bb 1f       	adc	r27, r27
 880:	62 17       	cp	r22, r18
 882:	73 07       	cpc	r23, r19
 884:	84 07       	cpc	r24, r20
 886:	ba 07       	cpc	r27, r26
 888:	20 f0       	brcs	.+8      	; 0x892 <__divsf3_pse+0xaa>
 88a:	62 1b       	sub	r22, r18
 88c:	73 0b       	sbc	r23, r19
 88e:	84 0b       	sbc	r24, r20
 890:	ba 0b       	sbc	r27, r26
 892:	ee 1f       	adc	r30, r30
 894:	88 f7       	brcc	.-30     	; 0x878 <__divsf3_pse+0x90>
 896:	e0 95       	com	r30
 898:	08 95       	ret

0000089a <__fixunssfsi>:
 89a:	bc d0       	rcall	.+376    	; 0xa14 <__fp_splitA>
 89c:	88 f0       	brcs	.+34     	; 0x8c0 <__fixunssfsi+0x26>
 89e:	9f 57       	subi	r25, 0x7F	; 127
 8a0:	90 f0       	brcs	.+36     	; 0x8c6 <__fixunssfsi+0x2c>
 8a2:	b9 2f       	mov	r27, r25
 8a4:	99 27       	eor	r25, r25
 8a6:	b7 51       	subi	r27, 0x17	; 23
 8a8:	a0 f0       	brcs	.+40     	; 0x8d2 <__fixunssfsi+0x38>
 8aa:	d1 f0       	breq	.+52     	; 0x8e0 <__fixunssfsi+0x46>
 8ac:	66 0f       	add	r22, r22
 8ae:	77 1f       	adc	r23, r23
 8b0:	88 1f       	adc	r24, r24
 8b2:	99 1f       	adc	r25, r25
 8b4:	1a f0       	brmi	.+6      	; 0x8bc <__fixunssfsi+0x22>
 8b6:	ba 95       	dec	r27
 8b8:	c9 f7       	brne	.-14     	; 0x8ac <__fixunssfsi+0x12>
 8ba:	12 c0       	rjmp	.+36     	; 0x8e0 <__fixunssfsi+0x46>
 8bc:	b1 30       	cpi	r27, 0x01	; 1
 8be:	81 f0       	breq	.+32     	; 0x8e0 <__fixunssfsi+0x46>
 8c0:	c3 d0       	rcall	.+390    	; 0xa48 <__fp_zero>
 8c2:	b1 e0       	ldi	r27, 0x01	; 1
 8c4:	08 95       	ret
 8c6:	c0 c0       	rjmp	.+384    	; 0xa48 <__fp_zero>
 8c8:	67 2f       	mov	r22, r23
 8ca:	78 2f       	mov	r23, r24
 8cc:	88 27       	eor	r24, r24
 8ce:	b8 5f       	subi	r27, 0xF8	; 248
 8d0:	39 f0       	breq	.+14     	; 0x8e0 <__fixunssfsi+0x46>
 8d2:	b9 3f       	cpi	r27, 0xF9	; 249
 8d4:	cc f3       	brlt	.-14     	; 0x8c8 <__fixunssfsi+0x2e>
 8d6:	86 95       	lsr	r24
 8d8:	77 95       	ror	r23
 8da:	67 95       	ror	r22
 8dc:	b3 95       	inc	r27
 8de:	d9 f7       	brne	.-10     	; 0x8d6 <__fixunssfsi+0x3c>
 8e0:	3e f4       	brtc	.+14     	; 0x8f0 <__fixunssfsi+0x56>
 8e2:	90 95       	com	r25
 8e4:	80 95       	com	r24
 8e6:	70 95       	com	r23
 8e8:	61 95       	neg	r22
 8ea:	7f 4f       	sbci	r23, 0xFF	; 255
 8ec:	8f 4f       	sbci	r24, 0xFF	; 255
 8ee:	9f 4f       	sbci	r25, 0xFF	; 255
 8f0:	08 95       	ret

000008f2 <__floatunsisf>:
 8f2:	e8 94       	clt
 8f4:	09 c0       	rjmp	.+18     	; 0x908 <__floatsisf+0x12>

000008f6 <__floatsisf>:
 8f6:	97 fb       	bst	r25, 7
 8f8:	3e f4       	brtc	.+14     	; 0x908 <__floatsisf+0x12>
 8fa:	90 95       	com	r25
 8fc:	80 95       	com	r24
 8fe:	70 95       	com	r23
 900:	61 95       	neg	r22
 902:	7f 4f       	sbci	r23, 0xFF	; 255
 904:	8f 4f       	sbci	r24, 0xFF	; 255
 906:	9f 4f       	sbci	r25, 0xFF	; 255
 908:	99 23       	and	r25, r25
 90a:	a9 f0       	breq	.+42     	; 0x936 <__floatsisf+0x40>
 90c:	f9 2f       	mov	r31, r25
 90e:	96 e9       	ldi	r25, 0x96	; 150
 910:	bb 27       	eor	r27, r27
 912:	93 95       	inc	r25
 914:	f6 95       	lsr	r31
 916:	87 95       	ror	r24
 918:	77 95       	ror	r23
 91a:	67 95       	ror	r22
 91c:	b7 95       	ror	r27
 91e:	f1 11       	cpse	r31, r1
 920:	f8 cf       	rjmp	.-16     	; 0x912 <__floatsisf+0x1c>
 922:	fa f4       	brpl	.+62     	; 0x962 <__floatsisf+0x6c>
 924:	bb 0f       	add	r27, r27
 926:	11 f4       	brne	.+4      	; 0x92c <__floatsisf+0x36>
 928:	60 ff       	sbrs	r22, 0
 92a:	1b c0       	rjmp	.+54     	; 0x962 <__floatsisf+0x6c>
 92c:	6f 5f       	subi	r22, 0xFF	; 255
 92e:	7f 4f       	sbci	r23, 0xFF	; 255
 930:	8f 4f       	sbci	r24, 0xFF	; 255
 932:	9f 4f       	sbci	r25, 0xFF	; 255
 934:	16 c0       	rjmp	.+44     	; 0x962 <__floatsisf+0x6c>
 936:	88 23       	and	r24, r24
 938:	11 f0       	breq	.+4      	; 0x93e <__floatsisf+0x48>
 93a:	96 e9       	ldi	r25, 0x96	; 150
 93c:	11 c0       	rjmp	.+34     	; 0x960 <__floatsisf+0x6a>
 93e:	77 23       	and	r23, r23
 940:	21 f0       	breq	.+8      	; 0x94a <__floatsisf+0x54>
 942:	9e e8       	ldi	r25, 0x8E	; 142
 944:	87 2f       	mov	r24, r23
 946:	76 2f       	mov	r23, r22
 948:	05 c0       	rjmp	.+10     	; 0x954 <__floatsisf+0x5e>
 94a:	66 23       	and	r22, r22
 94c:	71 f0       	breq	.+28     	; 0x96a <__floatsisf+0x74>
 94e:	96 e8       	ldi	r25, 0x86	; 134
 950:	86 2f       	mov	r24, r22
 952:	70 e0       	ldi	r23, 0x00	; 0
 954:	60 e0       	ldi	r22, 0x00	; 0
 956:	2a f0       	brmi	.+10     	; 0x962 <__floatsisf+0x6c>
 958:	9a 95       	dec	r25
 95a:	66 0f       	add	r22, r22
 95c:	77 1f       	adc	r23, r23
 95e:	88 1f       	adc	r24, r24
 960:	da f7       	brpl	.-10     	; 0x958 <__floatsisf+0x62>
 962:	88 0f       	add	r24, r24
 964:	96 95       	lsr	r25
 966:	87 95       	ror	r24
 968:	97 f9       	bld	r25, 7
 96a:	08 95       	ret

0000096c <__fp_cmp>:
 96c:	99 0f       	add	r25, r25
 96e:	00 08       	sbc	r0, r0
 970:	55 0f       	add	r21, r21
 972:	aa 0b       	sbc	r26, r26
 974:	e0 e8       	ldi	r30, 0x80	; 128
 976:	fe ef       	ldi	r31, 0xFE	; 254
 978:	16 16       	cp	r1, r22
 97a:	17 06       	cpc	r1, r23
 97c:	e8 07       	cpc	r30, r24
 97e:	f9 07       	cpc	r31, r25
 980:	c0 f0       	brcs	.+48     	; 0x9b2 <__fp_cmp+0x46>
 982:	12 16       	cp	r1, r18
 984:	13 06       	cpc	r1, r19
 986:	e4 07       	cpc	r30, r20
 988:	f5 07       	cpc	r31, r21
 98a:	98 f0       	brcs	.+38     	; 0x9b2 <__fp_cmp+0x46>
 98c:	62 1b       	sub	r22, r18
 98e:	73 0b       	sbc	r23, r19
 990:	84 0b       	sbc	r24, r20
 992:	95 0b       	sbc	r25, r21
 994:	39 f4       	brne	.+14     	; 0x9a4 <__fp_cmp+0x38>
 996:	0a 26       	eor	r0, r26
 998:	61 f0       	breq	.+24     	; 0x9b2 <__fp_cmp+0x46>
 99a:	23 2b       	or	r18, r19
 99c:	24 2b       	or	r18, r20
 99e:	25 2b       	or	r18, r21
 9a0:	21 f4       	brne	.+8      	; 0x9aa <__fp_cmp+0x3e>
 9a2:	08 95       	ret
 9a4:	0a 26       	eor	r0, r26
 9a6:	09 f4       	brne	.+2      	; 0x9aa <__fp_cmp+0x3e>
 9a8:	a1 40       	sbci	r26, 0x01	; 1
 9aa:	a6 95       	lsr	r26
 9ac:	8f ef       	ldi	r24, 0xFF	; 255
 9ae:	81 1d       	adc	r24, r1
 9b0:	81 1d       	adc	r24, r1
 9b2:	08 95       	ret

000009b4 <__fp_inf>:
 9b4:	97 f9       	bld	r25, 7
 9b6:	9f 67       	ori	r25, 0x7F	; 127
 9b8:	80 e8       	ldi	r24, 0x80	; 128
 9ba:	70 e0       	ldi	r23, 0x00	; 0
 9bc:	60 e0       	ldi	r22, 0x00	; 0
 9be:	08 95       	ret

000009c0 <__fp_nan>:
 9c0:	9f ef       	ldi	r25, 0xFF	; 255
 9c2:	80 ec       	ldi	r24, 0xC0	; 192
 9c4:	08 95       	ret

000009c6 <__fp_pscA>:
 9c6:	00 24       	eor	r0, r0
 9c8:	0a 94       	dec	r0
 9ca:	16 16       	cp	r1, r22
 9cc:	17 06       	cpc	r1, r23
 9ce:	18 06       	cpc	r1, r24
 9d0:	09 06       	cpc	r0, r25
 9d2:	08 95       	ret

000009d4 <__fp_pscB>:
 9d4:	00 24       	eor	r0, r0
 9d6:	0a 94       	dec	r0
 9d8:	12 16       	cp	r1, r18
 9da:	13 06       	cpc	r1, r19
 9dc:	14 06       	cpc	r1, r20
 9de:	05 06       	cpc	r0, r21
 9e0:	08 95       	ret

000009e2 <__fp_round>:
 9e2:	09 2e       	mov	r0, r25
 9e4:	03 94       	inc	r0
 9e6:	00 0c       	add	r0, r0
 9e8:	11 f4       	brne	.+4      	; 0x9ee <__fp_round+0xc>
 9ea:	88 23       	and	r24, r24
 9ec:	52 f0       	brmi	.+20     	; 0xa02 <__fp_round+0x20>
 9ee:	bb 0f       	add	r27, r27
 9f0:	40 f4       	brcc	.+16     	; 0xa02 <__fp_round+0x20>
 9f2:	bf 2b       	or	r27, r31
 9f4:	11 f4       	brne	.+4      	; 0x9fa <__fp_round+0x18>
 9f6:	60 ff       	sbrs	r22, 0
 9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fp_round+0x20>
 9fa:	6f 5f       	subi	r22, 0xFF	; 255
 9fc:	7f 4f       	sbci	r23, 0xFF	; 255
 9fe:	8f 4f       	sbci	r24, 0xFF	; 255
 a00:	9f 4f       	sbci	r25, 0xFF	; 255
 a02:	08 95       	ret

00000a04 <__fp_split3>:
 a04:	57 fd       	sbrc	r21, 7
 a06:	90 58       	subi	r25, 0x80	; 128
 a08:	44 0f       	add	r20, r20
 a0a:	55 1f       	adc	r21, r21
 a0c:	59 f0       	breq	.+22     	; 0xa24 <__fp_splitA+0x10>
 a0e:	5f 3f       	cpi	r21, 0xFF	; 255
 a10:	71 f0       	breq	.+28     	; 0xa2e <__fp_splitA+0x1a>
 a12:	47 95       	ror	r20

00000a14 <__fp_splitA>:
 a14:	88 0f       	add	r24, r24
 a16:	97 fb       	bst	r25, 7
 a18:	99 1f       	adc	r25, r25
 a1a:	61 f0       	breq	.+24     	; 0xa34 <__fp_splitA+0x20>
 a1c:	9f 3f       	cpi	r25, 0xFF	; 255
 a1e:	79 f0       	breq	.+30     	; 0xa3e <__fp_splitA+0x2a>
 a20:	87 95       	ror	r24
 a22:	08 95       	ret
 a24:	12 16       	cp	r1, r18
 a26:	13 06       	cpc	r1, r19
 a28:	14 06       	cpc	r1, r20
 a2a:	55 1f       	adc	r21, r21
 a2c:	f2 cf       	rjmp	.-28     	; 0xa12 <__fp_split3+0xe>
 a2e:	46 95       	lsr	r20
 a30:	f1 df       	rcall	.-30     	; 0xa14 <__fp_splitA>
 a32:	08 c0       	rjmp	.+16     	; 0xa44 <__fp_splitA+0x30>
 a34:	16 16       	cp	r1, r22
 a36:	17 06       	cpc	r1, r23
 a38:	18 06       	cpc	r1, r24
 a3a:	99 1f       	adc	r25, r25
 a3c:	f1 cf       	rjmp	.-30     	; 0xa20 <__fp_splitA+0xc>
 a3e:	86 95       	lsr	r24
 a40:	71 05       	cpc	r23, r1
 a42:	61 05       	cpc	r22, r1
 a44:	08 94       	sec
 a46:	08 95       	ret

00000a48 <__fp_zero>:
 a48:	e8 94       	clt

00000a4a <__fp_szero>:
 a4a:	bb 27       	eor	r27, r27
 a4c:	66 27       	eor	r22, r22
 a4e:	77 27       	eor	r23, r23
 a50:	cb 01       	movw	r24, r22
 a52:	97 f9       	bld	r25, 7
 a54:	08 95       	ret

00000a56 <__gesf2>:
 a56:	8a df       	rcall	.-236    	; 0x96c <__fp_cmp>
 a58:	08 f4       	brcc	.+2      	; 0xa5c <__gesf2+0x6>
 a5a:	8f ef       	ldi	r24, 0xFF	; 255
 a5c:	08 95       	ret

00000a5e <__mulsf3>:
 a5e:	0b d0       	rcall	.+22     	; 0xa76 <__mulsf3x>
 a60:	c0 cf       	rjmp	.-128    	; 0x9e2 <__fp_round>
 a62:	b1 df       	rcall	.-158    	; 0x9c6 <__fp_pscA>
 a64:	28 f0       	brcs	.+10     	; 0xa70 <__mulsf3+0x12>
 a66:	b6 df       	rcall	.-148    	; 0x9d4 <__fp_pscB>
 a68:	18 f0       	brcs	.+6      	; 0xa70 <__mulsf3+0x12>
 a6a:	95 23       	and	r25, r21
 a6c:	09 f0       	breq	.+2      	; 0xa70 <__mulsf3+0x12>
 a6e:	a2 cf       	rjmp	.-188    	; 0x9b4 <__fp_inf>
 a70:	a7 cf       	rjmp	.-178    	; 0x9c0 <__fp_nan>
 a72:	11 24       	eor	r1, r1
 a74:	ea cf       	rjmp	.-44     	; 0xa4a <__fp_szero>

00000a76 <__mulsf3x>:
 a76:	c6 df       	rcall	.-116    	; 0xa04 <__fp_split3>
 a78:	a0 f3       	brcs	.-24     	; 0xa62 <__mulsf3+0x4>

00000a7a <__mulsf3_pse>:
 a7a:	95 9f       	mul	r25, r21
 a7c:	d1 f3       	breq	.-12     	; 0xa72 <__mulsf3+0x14>
 a7e:	95 0f       	add	r25, r21
 a80:	50 e0       	ldi	r21, 0x00	; 0
 a82:	55 1f       	adc	r21, r21
 a84:	62 9f       	mul	r22, r18
 a86:	f0 01       	movw	r30, r0
 a88:	72 9f       	mul	r23, r18
 a8a:	bb 27       	eor	r27, r27
 a8c:	f0 0d       	add	r31, r0
 a8e:	b1 1d       	adc	r27, r1
 a90:	63 9f       	mul	r22, r19
 a92:	aa 27       	eor	r26, r26
 a94:	f0 0d       	add	r31, r0
 a96:	b1 1d       	adc	r27, r1
 a98:	aa 1f       	adc	r26, r26
 a9a:	64 9f       	mul	r22, r20
 a9c:	66 27       	eor	r22, r22
 a9e:	b0 0d       	add	r27, r0
 aa0:	a1 1d       	adc	r26, r1
 aa2:	66 1f       	adc	r22, r22
 aa4:	82 9f       	mul	r24, r18
 aa6:	22 27       	eor	r18, r18
 aa8:	b0 0d       	add	r27, r0
 aaa:	a1 1d       	adc	r26, r1
 aac:	62 1f       	adc	r22, r18
 aae:	73 9f       	mul	r23, r19
 ab0:	b0 0d       	add	r27, r0
 ab2:	a1 1d       	adc	r26, r1
 ab4:	62 1f       	adc	r22, r18
 ab6:	83 9f       	mul	r24, r19
 ab8:	a0 0d       	add	r26, r0
 aba:	61 1d       	adc	r22, r1
 abc:	22 1f       	adc	r18, r18
 abe:	74 9f       	mul	r23, r20
 ac0:	33 27       	eor	r19, r19
 ac2:	a0 0d       	add	r26, r0
 ac4:	61 1d       	adc	r22, r1
 ac6:	23 1f       	adc	r18, r19
 ac8:	84 9f       	mul	r24, r20
 aca:	60 0d       	add	r22, r0
 acc:	21 1d       	adc	r18, r1
 ace:	82 2f       	mov	r24, r18
 ad0:	76 2f       	mov	r23, r22
 ad2:	6a 2f       	mov	r22, r26
 ad4:	11 24       	eor	r1, r1
 ad6:	9f 57       	subi	r25, 0x7F	; 127
 ad8:	50 40       	sbci	r21, 0x00	; 0
 ada:	8a f0       	brmi	.+34     	; 0xafe <__mulsf3_pse+0x84>
 adc:	e1 f0       	breq	.+56     	; 0xb16 <__mulsf3_pse+0x9c>
 ade:	88 23       	and	r24, r24
 ae0:	4a f0       	brmi	.+18     	; 0xaf4 <__mulsf3_pse+0x7a>
 ae2:	ee 0f       	add	r30, r30
 ae4:	ff 1f       	adc	r31, r31
 ae6:	bb 1f       	adc	r27, r27
 ae8:	66 1f       	adc	r22, r22
 aea:	77 1f       	adc	r23, r23
 aec:	88 1f       	adc	r24, r24
 aee:	91 50       	subi	r25, 0x01	; 1
 af0:	50 40       	sbci	r21, 0x00	; 0
 af2:	a9 f7       	brne	.-22     	; 0xade <__mulsf3_pse+0x64>
 af4:	9e 3f       	cpi	r25, 0xFE	; 254
 af6:	51 05       	cpc	r21, r1
 af8:	70 f0       	brcs	.+28     	; 0xb16 <__mulsf3_pse+0x9c>
 afa:	5c cf       	rjmp	.-328    	; 0x9b4 <__fp_inf>
 afc:	a6 cf       	rjmp	.-180    	; 0xa4a <__fp_szero>
 afe:	5f 3f       	cpi	r21, 0xFF	; 255
 b00:	ec f3       	brlt	.-6      	; 0xafc <__mulsf3_pse+0x82>
 b02:	98 3e       	cpi	r25, 0xE8	; 232
 b04:	dc f3       	brlt	.-10     	; 0xafc <__mulsf3_pse+0x82>
 b06:	86 95       	lsr	r24
 b08:	77 95       	ror	r23
 b0a:	67 95       	ror	r22
 b0c:	b7 95       	ror	r27
 b0e:	f7 95       	ror	r31
 b10:	e7 95       	ror	r30
 b12:	9f 5f       	subi	r25, 0xFF	; 255
 b14:	c1 f7       	brne	.-16     	; 0xb06 <__mulsf3_pse+0x8c>
 b16:	fe 2b       	or	r31, r30
 b18:	88 0f       	add	r24, r24
 b1a:	91 1d       	adc	r25, r1
 b1c:	96 95       	lsr	r25
 b1e:	87 95       	ror	r24
 b20:	97 f9       	bld	r25, 7
 b22:	08 95       	ret

00000b24 <_exit>:
 b24:	f8 94       	cli

00000b26 <__stop_program>:
 b26:	ff cf       	rjmp	.-2      	; 0xb26 <__stop_program>
