
Procedure Five.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000198  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800200  00800200  0000020c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d61  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c6b  00000000  00000000  0000100d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b9  00000000  00000000  00001c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00002034  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000598  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000096  00000000  00000000  00002610  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000026a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a1 30       	cpi	r26, 0x01	; 1
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	26 d0       	rcall	.+76     	; 0x152 <main>
 106:	46 c0       	rjmp	.+140    	; 0x194 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <IO_init>:

/* NOTE: Function implementations */
void IO_init(void)
{
    // set port b as input because it has buttons on it
    DDRB  = 0x00;
 10a:	14 b8       	out	0x04, r1	; 4
    // turn on pullup resisitors
    PORTB = 0xFF;
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	85 b9       	out	0x05, r24	; 5

    // set all 8 leds as outputs
    DDRA  = 0xFF;
 110:	81 b9       	out	0x01, r24	; 1
    // turn off all leds
    PORTA = 0x00;
 112:	12 b8       	out	0x02, r1	; 2
 114:	08 95       	ret

00000116 <LED_sweep>:
}

void LED_sweep(volatile uint8_t * port)
{
 116:	fc 01       	movw	r30, r24
    // moving up the line
    if(sweepFlag == 1)
 118:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	61 f4       	brne	.+24     	; 0x138 <LED_sweep+0x22>
    {
        // if the last led is on
        if(*port & 0x80)
 120:	80 81       	ld	r24, Z
 122:	88 23       	and	r24, r24
 124:	1c f4       	brge	.+6      	; 0x12c <LED_sweep+0x16>
        {
            sweepFlag = -1;
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
        }

        // move over leds by one
        *port = *port << 1;
 12c:	80 81       	ld	r24, Z
 12e:	88 0f       	add	r24, r24
 130:	80 83       	st	Z, r24
        // then add a new led light at LSB
        *port = *port | 0x01;
 132:	80 81       	ld	r24, Z
 134:	81 60       	ori	r24, 0x01	; 1
 136:	80 83       	st	Z, r24
    }

    // moving down the line
    if(sweepFlag == -1)
 138:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 13c:	8f 3f       	cpi	r24, 0xFF	; 255
 13e:	41 f4       	brne	.+16     	; 0x150 <LED_sweep+0x3a>
    {
        // if all the leds are off
        if(*port == 0x00)
 140:	80 81       	ld	r24, Z
 142:	81 11       	cpse	r24, r1
 144:	02 c0       	rjmp	.+4      	; 0x14a <LED_sweep+0x34>
        {
            sweepFlag = 0;
 146:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
        }

        // move over leds by one
        *port = *port >> 1;
 14a:	80 81       	ld	r24, Z
 14c:	86 95       	lsr	r24
 14e:	80 83       	st	Z, r24
 150:	08 95       	ret

00000152 <main>:
// the main loop of the function, provided to us
int main(void)
{
    uint8_t inputSwitches;

    IO_init();
 152:	db df       	rcall	.-74     	; 0x10a <IO_init>

    while(1)
    {
        inputSwitches = Buttons;
 154:	83 b1       	in	r24, 0x03	; 3

        // play button was pressed
        if(!(inputSwitches & (1 << Start)))
 156:	80 fd       	sbrc	r24, 0
 158:	04 c0       	rjmp	.+8      	; 0x162 <main+0x10>
        {
            // set the flag so that the sweep function has a direction
            sweepFlag = 1;
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 160:	f9 cf       	rjmp	.-14     	; 0x154 <main+0x2>
        }
        // reset button was pressed
        else if(!(inputSwitches & (1 << Reset)))
 162:	82 fd       	sbrc	r24, 2
 164:	04 c0       	rjmp	.+8      	; 0x16e <main+0x1c>
        {
            // turn off the leds and reset the sweep direction
            sweepFlag = 0;
 166:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
            PORTA     = 0x00;
 16a:	12 b8       	out	0x02, r1	; 2
 16c:	f3 cf       	rjmp	.-26     	; 0x154 <main+0x2>
        }
        // if no pause button and the sweep has a direction
        else if((inputSwitches & (1 << Pause)) && sweepFlag)
 16e:	81 ff       	sbrs	r24, 1
 170:	f1 cf       	rjmp	.-30     	; 0x154 <main+0x2>
 172:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 176:	88 23       	and	r24, r24
 178:	69 f3       	breq	.-38     	; 0x154 <main+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	83 ec       	ldi	r24, 0xC3	; 195
 17e:	99 e0       	ldi	r25, 0x09	; 9
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0x2e>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x38>
 18a:	00 00       	nop
        {
            // DEBUG: comment this line out when using simulator
            _delay_ms(200);

            LED_sweep(&PORTA);
 18c:	82 e2       	ldi	r24, 0x22	; 34
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	c2 df       	rcall	.-124    	; 0x116 <LED_sweep>
 192:	e0 cf       	rjmp	.-64     	; 0x154 <main+0x2>

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>
