
Procedure Two.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800200  00000778  0000080c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000778  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800280  00800280  0000088c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001786  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f6d  00000000  00000000  0000216a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ace  00000000  00000000  000030d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  00003ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b3  00000000  00000000  00003e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a76  00000000  00000000  000045fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00005071  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	5f c1       	rjmp	.+702    	; 0x388 <__vector_50>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e7       	ldi	r30, 0x78	; 120
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 38       	cpi	r26, 0x80	; 128
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e8       	ldi	r26, 0x80	; 128
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 38       	cpi	r26, 0x82	; 130
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	26 d2       	rcall	.+1100   	; 0x56c <main>
 120:	29 c3       	rjmp	.+1618   	; 0x774 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initDebugTimer>:
	Uses Timer5 with a prescaler of 256, and enables overflow interrupt
*/
void initDebugTimer()
{
	//Prescaler 256
	TCCR5B |= (1<<CS52) | (1<<CS50);
 124:	e1 e2       	ldi	r30, 0x21	; 33
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	80 81       	ld	r24, Z
 12a:	85 60       	ori	r24, 0x05	; 5
 12c:	80 83       	st	Z, r24
	
	//15625 TOP Value for UPDATE_FREQUENCY
	TCNT5 = 65535 - (F_CPU / (1024*UPDATE_FREQUENCY));
 12e:	85 ee       	ldi	r24, 0xE5	; 229
 130:	99 ef       	ldi	r25, 0xF9	; 249
 132:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
 136:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
	
	//Enable Timer Overflow Interrupt
	TIMSK5 = (1<<TOIE5);
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7c0073>
 140:	08 95       	ret

00000142 <initDebugUSART>:
	8-bits, 25000 Baud Rate
*/
void initDebugUSART()
{
	//Enable RX and TX
	UCSR0B = (1<<TXEN0) | (1<<RXEN0);
 142:	88 e1       	ldi	r24, 0x18	; 24
 144:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	
	//Set Communication Modes
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);	//8 Data bits
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
	UBRR0 = 3;							//250000 Baud Rate	
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 156:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 15a:	08 95       	ret

0000015c <initDebug>:
	Configures the USART registers for data transmission, Configures the
	Timer registers, and enables interrupts.
*/
void initDebug()
{
	initDebugUSART();
 15c:	f2 df       	rcall	.-28     	; 0x142 <initDebugUSART>
	initDebugTimer();
 15e:	e2 df       	rcall	.-60     	; 0x124 <initDebugTimer>
 160:	78 94       	sei
	sei();
 162:	08 95       	ret

00000164 <UART0Out>:
 164:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	Sends 8-bit unsigned integer out UART0
*/
void UART0Out(uint8_t data) 
{
	//Wait for previous transmission to be done
	while(!(UCSR0A & (1<<UDRE0)));
 168:	95 ff       	sbrs	r25, 5
 16a:	fc cf       	rjmp	.-8      	; 0x164 <UART0Out>
	
	//Set register for next transmission
	UDR0 = data;	
 16c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 170:	08 95       	ret

00000172 <sendStopBit>:
	Sends 0x0A to signify stop
*/
void sendStopBit()
{
	//Wait for previous transmission to be done
	while(!(UCSR0A & (1<<UDRE0)));
 172:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 176:	85 ff       	sbrs	r24, 5
 178:	fc cf       	rjmp	.-8      	; 0x172 <sendStopBit>
	
	//Set register for next transmission
	UDR0 = 0x0A;
 17a:	8a e0       	ldi	r24, 0x0A	; 10
 17c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 180:	08 95       	ret

00000182 <UART0PrintString>:

Description:
	Continues to send data until reaching null character
*/
void UART0PrintString(char *strPtr)
{
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	ec 01       	movw	r28, r24
	while(*strPtr != 0x00) 
 188:	02 c0       	rjmp	.+4      	; 0x18e <UART0PrintString+0xc>
	{
		UART0Out(*strPtr);
 18a:	ec df       	rcall	.-40     	; 0x164 <UART0Out>
		strPtr ++;
 18c:	21 96       	adiw	r28, 0x01	; 1
Description:
	Continues to send data until reaching null character
*/
void UART0PrintString(char *strPtr)
{
	while(*strPtr != 0x00) 
 18e:	88 81       	ld	r24, Y
 190:	81 11       	cpse	r24, r1
 192:	fb cf       	rjmp	.-10     	; 0x18a <UART0PrintString+0x8>
	{
		UART0Out(*strPtr);
		strPtr ++;
	}
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <sendPortData>:
Description:
	Loops through portAddr array and sends
	out data at each address
*/
void sendPortData()
{	
 19a:	cf 93       	push	r28
	for (uint8_t i=0; i<18; i++)
 19c:	c0 e0       	ldi	r28, 0x00	; 0
 19e:	0c c0       	rjmp	.+24     	; 0x1b8 <sendPortData+0x1e>
	{
		UART0Out(*portAddr[i]);
 1a0:	ec 2f       	mov	r30, r28
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	ec 5b       	subi	r30, 0xBC	; 188
 1aa:	fd 4f       	sbci	r31, 0xFD	; 253
 1ac:	01 90       	ld	r0, Z+
 1ae:	f0 81       	ld	r31, Z
 1b0:	e0 2d       	mov	r30, r0
 1b2:	80 81       	ld	r24, Z
 1b4:	d7 df       	rcall	.-82     	; 0x164 <UART0Out>
	Loops through portAddr array and sends
	out data at each address
*/
void sendPortData()
{	
	for (uint8_t i=0; i<18; i++)
 1b6:	cf 5f       	subi	r28, 0xFF	; 255
 1b8:	c2 31       	cpi	r28, 0x12	; 18
 1ba:	90 f3       	brcs	.-28     	; 0x1a0 <sendPortData+0x6>
	{
		UART0Out(*portAddr[i]);
	}
}
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <sendTimerData>:
Description:
	Loops though timerAddr array and sends
	out data at each address
*/
void sendTimerData()
{
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
	//Timer 0
	for (uint8_t i=0; i<3; i++) 
 1c4:	c0 e0       	ldi	r28, 0x00	; 0
 1c6:	0c c0       	rjmp	.+24     	; 0x1e0 <sendTimerData+0x20>
	{
		UART0Out(*timerAddr[i]);
 1c8:	ec 2f       	mov	r30, r28
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	ee 0f       	add	r30, r30
 1ce:	ff 1f       	adc	r31, r31
 1d0:	e8 5e       	subi	r30, 0xE8	; 232
 1d2:	fd 4f       	sbci	r31, 0xFD	; 253
 1d4:	01 90       	ld	r0, Z+
 1d6:	f0 81       	ld	r31, Z
 1d8:	e0 2d       	mov	r30, r0
 1da:	80 81       	ld	r24, Z
 1dc:	c3 df       	rcall	.-122    	; 0x164 <UART0Out>
	out data at each address
*/
void sendTimerData()
{
	//Timer 0
	for (uint8_t i=0; i<3; i++) 
 1de:	cf 5f       	subi	r28, 0xFF	; 255
 1e0:	c3 30       	cpi	r28, 0x03	; 3
 1e2:	90 f3       	brcs	.-28     	; 0x1c8 <sendTimerData+0x8>
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR0A
	UART0Out(*timerAddr[3]);
 1e4:	c8 e1       	ldi	r28, 0x18	; 24
 1e6:	d2 e0       	ldi	r29, 0x02	; 2
 1e8:	ee 81       	ldd	r30, Y+6	; 0x06
 1ea:	ff 81       	ldd	r31, Y+7	; 0x07
 1ec:	80 81       	ld	r24, Z
 1ee:	ba df       	rcall	.-140    	; 0x164 <UART0Out>
	UART0Out(*(timerAddr[3]+1));
 1f0:	ee 81       	ldd	r30, Y+6	; 0x06
 1f2:	ff 81       	ldd	r31, Y+7	; 0x07
 1f4:	81 81       	ldd	r24, Z+1	; 0x01
 1f6:	b6 df       	rcall	.-148    	; 0x164 <UART0Out>
	
	//OCR0B
	UART0Out(*timerAddr[4]);
 1f8:	e8 85       	ldd	r30, Y+8	; 0x08
 1fa:	f9 85       	ldd	r31, Y+9	; 0x09
 1fc:	80 81       	ld	r24, Z
 1fe:	b2 df       	rcall	.-156    	; 0x164 <UART0Out>
	UART0Out(*(timerAddr[4]+1));
 200:	e8 85       	ldd	r30, Y+8	; 0x08
 202:	f9 85       	ldd	r31, Y+9	; 0x09
 204:	81 81       	ldd	r24, Z+1	; 0x01
 206:	ae df       	rcall	.-164    	; 0x164 <UART0Out>
 208:	c5 e0       	ldi	r28, 0x05	; 5
	
	//Timer 1
	for (uint8_t i=5; i<8; i++)
 20a:	0c c0       	rjmp	.+24     	; 0x224 <sendTimerData+0x64>
 20c:	ec 2f       	mov	r30, r28
	{
		UART0Out(*timerAddr[i]);
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	ee 0f       	add	r30, r30
 212:	ff 1f       	adc	r31, r31
 214:	e8 5e       	subi	r30, 0xE8	; 232
 216:	fd 4f       	sbci	r31, 0xFD	; 253
 218:	01 90       	ld	r0, Z+
 21a:	f0 81       	ld	r31, Z
 21c:	e0 2d       	mov	r30, r0
 21e:	80 81       	ld	r24, Z
 220:	a1 df       	rcall	.-190    	; 0x164 <UART0Out>
 222:	cf 5f       	subi	r28, 0xFF	; 255
	//OCR0B
	UART0Out(*timerAddr[4]);
	UART0Out(*(timerAddr[4]+1));
	
	//Timer 1
	for (uint8_t i=5; i<8; i++)
 224:	c8 30       	cpi	r28, 0x08	; 8
 226:	90 f3       	brcs	.-28     	; 0x20c <sendTimerData+0x4c>
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR1A
	UART0Out(*timerAddr[8]);
 228:	c8 e1       	ldi	r28, 0x18	; 24
 22a:	d2 e0       	ldi	r29, 0x02	; 2
 22c:	e8 89       	ldd	r30, Y+16	; 0x10
 22e:	f9 89       	ldd	r31, Y+17	; 0x11
 230:	80 81       	ld	r24, Z
 232:	98 df       	rcall	.-208    	; 0x164 <UART0Out>
	UART0Out(*(timerAddr[8]+1));
 234:	e8 89       	ldd	r30, Y+16	; 0x10
 236:	f9 89       	ldd	r31, Y+17	; 0x11
 238:	81 81       	ldd	r24, Z+1	; 0x01
 23a:	94 df       	rcall	.-216    	; 0x164 <UART0Out>
	
	//OCR1B
	UART0Out(*timerAddr[9]);
 23c:	ea 89       	ldd	r30, Y+18	; 0x12
 23e:	fb 89       	ldd	r31, Y+19	; 0x13
 240:	80 81       	ld	r24, Z
 242:	90 df       	rcall	.-224    	; 0x164 <UART0Out>
	UART0Out(*(timerAddr[9]+1));
 244:	ea 89       	ldd	r30, Y+18	; 0x12
 246:	fb 89       	ldd	r31, Y+19	; 0x13
 248:	81 81       	ldd	r24, Z+1	; 0x01
 24a:	8c df       	rcall	.-232    	; 0x164 <UART0Out>
	
	//OCR1C
	UART0Out(*timerAddr[10]);
 24c:	ec 89       	ldd	r30, Y+20	; 0x14
 24e:	fd 89       	ldd	r31, Y+21	; 0x15
 250:	80 81       	ld	r24, Z
 252:	88 df       	rcall	.-240    	; 0x164 <UART0Out>
 254:	ec 89       	ldd	r30, Y+20	; 0x14
	UART0Out(*(timerAddr[10]+1));
 256:	fd 89       	ldd	r31, Y+21	; 0x15
 258:	81 81       	ldd	r24, Z+1	; 0x01
 25a:	84 df       	rcall	.-248    	; 0x164 <UART0Out>
 25c:	cb e0       	ldi	r28, 0x0B	; 11
 25e:	0c c0       	rjmp	.+24     	; 0x278 <sendTimerData+0xb8>
	
	//Timer 2
	for (uint8_t i=11; i<14; i++)
 260:	ec 2f       	mov	r30, r28
	{
		UART0Out(*timerAddr[i]);
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	ee 0f       	add	r30, r30
 266:	ff 1f       	adc	r31, r31
 268:	e8 5e       	subi	r30, 0xE8	; 232
 26a:	fd 4f       	sbci	r31, 0xFD	; 253
 26c:	01 90       	ld	r0, Z+
 26e:	f0 81       	ld	r31, Z
 270:	e0 2d       	mov	r30, r0
 272:	80 81       	ld	r24, Z
 274:	77 df       	rcall	.-274    	; 0x164 <UART0Out>
 276:	cf 5f       	subi	r28, 0xFF	; 255
	//OCR1C
	UART0Out(*timerAddr[10]);
	UART0Out(*(timerAddr[10]+1));
	
	//Timer 2
	for (uint8_t i=11; i<14; i++)
 278:	ce 30       	cpi	r28, 0x0E	; 14
 27a:	90 f3       	brcs	.-28     	; 0x260 <sendTimerData+0xa0>
 27c:	c8 e1       	ldi	r28, 0x18	; 24
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR2A
	UART0Out(*timerAddr[14]);
 27e:	d2 e0       	ldi	r29, 0x02	; 2
 280:	ec 8d       	ldd	r30, Y+28	; 0x1c
 282:	fd 8d       	ldd	r31, Y+29	; 0x1d
 284:	80 81       	ld	r24, Z
 286:	6e df       	rcall	.-292    	; 0x164 <UART0Out>
	UART0Out(*(timerAddr[14]+1));
 288:	ec 8d       	ldd	r30, Y+28	; 0x1c
 28a:	fd 8d       	ldd	r31, Y+29	; 0x1d
 28c:	81 81       	ldd	r24, Z+1	; 0x01
 28e:	6a df       	rcall	.-300    	; 0x164 <UART0Out>
 290:	ee 8d       	ldd	r30, Y+30	; 0x1e
	
	//OCR2B
	UART0Out(*timerAddr[15]);
 292:	ff 8d       	ldd	r31, Y+31	; 0x1f
 294:	80 81       	ld	r24, Z
 296:	66 df       	rcall	.-308    	; 0x164 <UART0Out>
 298:	ee 8d       	ldd	r30, Y+30	; 0x1e
 29a:	ff 8d       	ldd	r31, Y+31	; 0x1f
	UART0Out(*(timerAddr[15]+1));
 29c:	81 81       	ldd	r24, Z+1	; 0x01
 29e:	62 df       	rcall	.-316    	; 0x164 <UART0Out>
 2a0:	c0 e1       	ldi	r28, 0x10	; 16
 2a2:	0c c0       	rjmp	.+24     	; 0x2bc <sendTimerData+0xfc>
	
	//Timer 3
	for (uint8_t i=16; i<19; i++)
 2a4:	ec 2f       	mov	r30, r28
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
	{
		UART0Out(*timerAddr[i]);
 2a8:	ee 0f       	add	r30, r30
 2aa:	ff 1f       	adc	r31, r31
 2ac:	e8 5e       	subi	r30, 0xE8	; 232
 2ae:	fd 4f       	sbci	r31, 0xFD	; 253
 2b0:	01 90       	ld	r0, Z+
 2b2:	f0 81       	ld	r31, Z
 2b4:	e0 2d       	mov	r30, r0
 2b6:	80 81       	ld	r24, Z
 2b8:	55 df       	rcall	.-342    	; 0x164 <UART0Out>
 2ba:	cf 5f       	subi	r28, 0xFF	; 255
	//OCR2B
	UART0Out(*timerAddr[15]);
	UART0Out(*(timerAddr[15]+1));
	
	//Timer 3
	for (uint8_t i=16; i<19; i++)
 2bc:	c3 31       	cpi	r28, 0x13	; 19
 2be:	90 f3       	brcs	.-28     	; 0x2a4 <sendTimerData+0xe4>
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR3A
	UART0Out(*timerAddr[19]);
 2c0:	c8 e1       	ldi	r28, 0x18	; 24
 2c2:	d2 e0       	ldi	r29, 0x02	; 2
 2c4:	ee a1       	ldd	r30, Y+38	; 0x26
 2c6:	ff a1       	ldd	r31, Y+39	; 0x27
 2c8:	80 81       	ld	r24, Z
 2ca:	4c df       	rcall	.-360    	; 0x164 <UART0Out>
	UART0Out(*(timerAddr[19]+1));
 2cc:	ee a1       	ldd	r30, Y+38	; 0x26
 2ce:	ff a1       	ldd	r31, Y+39	; 0x27
 2d0:	81 81       	ldd	r24, Z+1	; 0x01
 2d2:	48 df       	rcall	.-368    	; 0x164 <UART0Out>
	
	//OCR3B
	UART0Out(*timerAddr[20]);
 2d4:	e8 a5       	ldd	r30, Y+40	; 0x28
 2d6:	f9 a5       	ldd	r31, Y+41	; 0x29
 2d8:	80 81       	ld	r24, Z
 2da:	44 df       	rcall	.-376    	; 0x164 <UART0Out>
 2dc:	e8 a5       	ldd	r30, Y+40	; 0x28
	UART0Out(*(timerAddr[20]+1));
 2de:	f9 a5       	ldd	r31, Y+41	; 0x29
 2e0:	81 81       	ldd	r24, Z+1	; 0x01
 2e2:	40 df       	rcall	.-384    	; 0x164 <UART0Out>
 2e4:	ea a5       	ldd	r30, Y+42	; 0x2a
 2e6:	fb a5       	ldd	r31, Y+43	; 0x2b
	
	//OCR3C
	UART0Out(*timerAddr[21]);
 2e8:	80 81       	ld	r24, Z
 2ea:	3c df       	rcall	.-392    	; 0x164 <UART0Out>
 2ec:	ea a5       	ldd	r30, Y+42	; 0x2a
 2ee:	fb a5       	ldd	r31, Y+43	; 0x2b
 2f0:	81 81       	ldd	r24, Z+1	; 0x01
	UART0Out(*(timerAddr[21]+1));
 2f2:	38 df       	rcall	.-400    	; 0x164 <UART0Out>
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <sendUSARTData>:
 2fa:	cf 93       	push	r28
}
 2fc:	c0 e0       	ldi	r28, 0x00	; 0
 2fe:	0c c0       	rjmp	.+24     	; 0x318 <sendUSARTData+0x1e>
 300:	ec 2f       	mov	r30, r28
*/
void sendUSARTData()
{
	for (uint8_t i=0; i<6; i++)
	{
		UART0Out(*USARTAddr[i]);
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	ee 0f       	add	r30, r30
 306:	ff 1f       	adc	r31, r31
 308:	e4 5f       	subi	r30, 0xF4	; 244
 30a:	fd 4f       	sbci	r31, 0xFD	; 253
 30c:	01 90       	ld	r0, Z+
 30e:	f0 81       	ld	r31, Z
 310:	e0 2d       	mov	r30, r0
 312:	80 81       	ld	r24, Z
 314:	27 df       	rcall	.-434    	; 0x164 <UART0Out>
	Loops though USARTAddr array and sends
	out data at each address
*/
void sendUSARTData()
{
	for (uint8_t i=0; i<6; i++)
 316:	cf 5f       	subi	r28, 0xFF	; 255
 318:	c6 30       	cpi	r28, 0x06	; 6
 31a:	90 f3       	brcs	.-28     	; 0x300 <sendUSARTData+0x6>
	{
		UART0Out(*USARTAddr[i]);
	}
}
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <sendADCData>:
Description:
	Loops though ADCAddr array and sends
	out data at each address
*/
void sendADCData()
{
 320:	cf 93       	push	r28
	for (uint8_t i=0; i<3; i++)
 322:	c0 e0       	ldi	r28, 0x00	; 0
 324:	0c c0       	rjmp	.+24     	; 0x33e <sendADCData+0x1e>
	{
		UART0Out(*ADCAddr[i]);
 326:	ec 2f       	mov	r30, r28
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	ee 0f       	add	r30, r30
 32c:	ff 1f       	adc	r31, r31
 32e:	ea 5f       	subi	r30, 0xFA	; 250
 330:	fd 4f       	sbci	r31, 0xFD	; 253
 332:	01 90       	ld	r0, Z+
 334:	f0 81       	ld	r31, Z
 336:	e0 2d       	mov	r30, r0
 338:	80 81       	ld	r24, Z
 33a:	14 df       	rcall	.-472    	; 0x164 <UART0Out>
	Loops though ADCAddr array and sends
	out data at each address
*/
void sendADCData()
{
	for (uint8_t i=0; i<3; i++)
 33c:	cf 5f       	subi	r28, 0xFF	; 255
 33e:	c3 30       	cpi	r28, 0x03	; 3
 340:	90 f3       	brcs	.-28     	; 0x326 <sendADCData+0x6>
	{
		UART0Out(*ADCAddr[i]);
	}
}
 342:	cf 91       	pop	r28
 344:	08 95       	ret

00000346 <sendINTData>:
Description:
	Loops though intAddr array and sends
	out data at each address
*/
void sendINTData()
{
 346:	cf 93       	push	r28
	for (uint8_t i=0; i<3; i++)
 348:	c0 e0       	ldi	r28, 0x00	; 0
 34a:	0c c0       	rjmp	.+24     	; 0x364 <sendINTData+0x1e>
	{
		UART0Out(*intAddr[i]);
 34c:	ec 2f       	mov	r30, r28
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	ee 0f       	add	r30, r30
 352:	ff 1f       	adc	r31, r31
 354:	e0 50       	subi	r30, 0x00	; 0
 356:	fe 4f       	sbci	r31, 0xFE	; 254
 358:	01 90       	ld	r0, Z+
 35a:	f0 81       	ld	r31, Z
 35c:	e0 2d       	mov	r30, r0
 35e:	80 81       	ld	r24, Z
 360:	01 df       	rcall	.-510    	; 0x164 <UART0Out>
	Loops though intAddr array and sends
	out data at each address
*/
void sendINTData()
{
	for (uint8_t i=0; i<3; i++)
 362:	cf 5f       	subi	r28, 0xFF	; 255
 364:	c3 30       	cpi	r28, 0x03	; 3
 366:	90 f3       	brcs	.-28     	; 0x34c <sendINTData+0x6>
	{
		UART0Out(*intAddr[i]);
	}
}
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <sendRegisterData>:
Description:
	Calls each send___Data() function
*/
void sendRegisterData() 
{
	UART0PrintString(st);
 36c:	8c e6       	ldi	r24, 0x6C	; 108
 36e:	92 e0       	ldi	r25, 0x02	; 2
 370:	08 df       	rcall	.-496    	; 0x182 <UART0PrintString>
	sendStopBit();
 372:	ff de       	rcall	.-514    	; 0x172 <sendStopBit>
	
	sendPortData();
 374:	12 df       	rcall	.-476    	; 0x19a <sendPortData>
	sendTimerData();
 376:	24 df       	rcall	.-440    	; 0x1c0 <sendTimerData>
	sendUSARTData();
 378:	c0 df       	rcall	.-128    	; 0x2fa <sendUSARTData>
	sendADCData();
 37a:	d2 df       	rcall	.-92     	; 0x320 <sendADCData>
	sendINTData();
 37c:	e4 df       	rcall	.-56     	; 0x346 <sendINTData>
 37e:	88 e6       	ldi	r24, 0x68	; 104
	
	UART0PrintString(en);
 380:	92 e0       	ldi	r25, 0x02	; 2
 382:	ff de       	rcall	.-514    	; 0x182 <UART0PrintString>
 384:	f6 ce       	rjmp	.-532    	; 0x172 <sendStopBit>
 386:	08 95       	ret

00000388 <__vector_50>:
	sendStopBit();
 388:	1f 92       	push	r1
 38a:	0f 92       	push	r0
 38c:	0f b6       	in	r0, 0x3f	; 63

Description:
	Resets counter value then sends register data
*/
ISR(TIMER5_OVF_vect) 
{
 38e:	0f 92       	push	r0
 390:	11 24       	eor	r1, r1
 392:	0b b6       	in	r0, 0x3b	; 59
 394:	0f 92       	push	r0
 396:	2f 93       	push	r18
 398:	3f 93       	push	r19
 39a:	4f 93       	push	r20
 39c:	5f 93       	push	r21
 39e:	6f 93       	push	r22
 3a0:	7f 93       	push	r23
 3a2:	8f 93       	push	r24
 3a4:	9f 93       	push	r25
 3a6:	af 93       	push	r26
 3a8:	bf 93       	push	r27
 3aa:	ef 93       	push	r30
 3ac:	ff 93       	push	r31
	TCNT5 = 65535 - (F_CPU / (1024*UPDATE_FREQUENCY));
 3ae:	85 ee       	ldi	r24, 0xE5	; 229
 3b0:	99 ef       	ldi	r25, 0xF9	; 249
 3b2:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
 3b6:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
	sendRegisterData();
 3ba:	d8 df       	rcall	.-80     	; 0x36c <sendRegisterData>
}
 3bc:	ff 91       	pop	r31
 3be:	ef 91       	pop	r30
 3c0:	bf 91       	pop	r27
 3c2:	af 91       	pop	r26
 3c4:	9f 91       	pop	r25
 3c6:	8f 91       	pop	r24
 3c8:	7f 91       	pop	r23
 3ca:	6f 91       	pop	r22
 3cc:	5f 91       	pop	r21
 3ce:	4f 91       	pop	r20
 3d0:	3f 91       	pop	r19
 3d2:	2f 91       	pop	r18
 3d4:	0f 90       	pop	r0
 3d6:	0b be       	out	0x3b, r0	; 59
 3d8:	0f 90       	pop	r0
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	0f 90       	pop	r0
 3de:	1f 90       	pop	r1
 3e0:	18 95       	reti

000003e2 <SM_init>:
// instance pointer to the motor port
static volatile uint8_t * sMotorPort;

/* NOTE: Function implementations */
void SM_init(volatile uint8_t * pRegister, volatile uint8_t * pPort)
{
 3e2:	fc 01       	movw	r30, r24
    // configure port register
    *pRegister |= 0x0f;
 3e4:	90 81       	ld	r25, Z
 3e6:	9f 60       	ori	r25, 0x0F	; 15
 3e8:	90 83       	st	Z, r25

    // turn on pullup resisitors on the bottom nibble
    *pPort = (*pPort & 0xf0) | 0x00;
 3ea:	fb 01       	movw	r30, r22
 3ec:	80 81       	ld	r24, Z
 3ee:	80 7f       	andi	r24, 0xF0	; 240
 3f0:	80 83       	st	Z, r24

    // save the port pointer to the static var
    sMotorPort = pPort;
 3f2:	70 93 81 02 	sts	0x0281, r23	; 0x800281 <__data_end+0x1>
 3f6:	60 93 80 02 	sts	0x0280, r22	; 0x800280 <__data_end>
 3fa:	08 95       	ret

000003fc <getModeAndSteps>:
    *sMotorPort = *sMotorPort & 0xf0;
}

/* NOTE: Local function implementations */
StepperMotorModeData_t getModeAndSteps(StepperMotorRunMode_t mode, double rotation)
{
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	cd b7       	in	r28, 0x3d	; 61
 402:	de b7       	in	r29, 0x3e	; 62
 404:	28 97       	sbiw	r28, 0x08	; 8
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	f8 94       	cli
 40a:	de bf       	out	0x3e, r29	; 62
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	cd bf       	out	0x3d, r28	; 61
 410:	28 2f       	mov	r18, r24
 412:	cb 01       	movw	r24, r22
 414:	ba 01       	movw	r22, r20
    uint8_t * pArray = NULL;
    uint8_t   size   = 0;
    uint32_t  steps  = 0;

    switch(mode)
 416:	21 30       	cpi	r18, 0x01	; 1
 418:	71 f0       	breq	.+28     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 41a:	18 f0       	brcs	.+6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41c:	22 30       	cpi	r18, 0x02	; 2
 41e:	a9 f0       	breq	.+42     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 420:	1e c0       	rjmp	.+60     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
    {
        case Wave:
        {
            pArray = sWaveStepMap;
            size   = sizeof(sWaveStepMap) / sizeof(sWaveStepMap[0]);
            steps  = (rotation * 2048);
 422:	20 e0       	ldi	r18, 0x00	; 0
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	40 e0       	ldi	r20, 0x00	; 0
 428:	55 e4       	ldi	r21, 0x45	; 69
 42a:	41 d1       	rcall	.+642    	; 0x6ae <__mulsf3>
 42c:	c3 d0       	rcall	.+390    	; 0x5b4 <__fixunssfsi>
    switch(mode)
    {
        case Wave:
        {
            pArray = sWaveStepMap;
            size   = sizeof(sWaveStepMap) / sizeof(sWaveStepMap[0]);
 42e:	24 e0       	ldi	r18, 0x04	; 4

    switch(mode)
    {
        case Wave:
        {
            pArray = sWaveStepMap;
 430:	4b e7       	ldi	r20, 0x7B	; 123
 432:	52 e0       	ldi	r21, 0x02	; 2
            size   = sizeof(sWaveStepMap) / sizeof(sWaveStepMap[0]);
            steps  = (rotation * 2048);
        }
        break;
 434:	1b c0       	rjmp	.+54     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
        case Full:
        {
            pArray = sFullStepMap;
            size   = sizeof(sFullStepMap) / sizeof(sFullStepMap[0]);
            steps  = (rotation * 2048);
 436:	20 e0       	ldi	r18, 0x00	; 0
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	40 e0       	ldi	r20, 0x00	; 0
 43c:	55 e4       	ldi	r21, 0x45	; 69
 43e:	37 d1       	rcall	.+622    	; 0x6ae <__mulsf3>
 440:	b9 d0       	rcall	.+370    	; 0x5b4 <__fixunssfsi>
        }
        break;
        case Full:
        {
            pArray = sFullStepMap;
            size   = sizeof(sFullStepMap) / sizeof(sFullStepMap[0]);
 442:	24 e0       	ldi	r18, 0x04	; 4
            steps  = (rotation * 2048);
        }
        break;
        case Full:
        {
            pArray = sFullStepMap;
 444:	47 e7       	ldi	r20, 0x77	; 119
 446:	52 e0       	ldi	r21, 0x02	; 2
            size   = sizeof(sFullStepMap) / sizeof(sFullStepMap[0]);
            steps  = (rotation * 2048);
        }
        break;
 448:	11 c0       	rjmp	.+34     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
        case Half:
        {
            pArray = sHalfStepMap;
            size   = sizeof(sHalfStepMap) / sizeof(sHalfStepMap[0]);
            steps  = (rotation * 4096);
 44a:	20 e0       	ldi	r18, 0x00	; 0
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	40 e8       	ldi	r20, 0x80	; 128
 450:	55 e4       	ldi	r21, 0x45	; 69
 452:	2d d1       	rcall	.+602    	; 0x6ae <__mulsf3>
 454:	af d0       	rcall	.+350    	; 0x5b4 <__fixunssfsi>
        }
        break;
        case Half:
        {
            pArray = sHalfStepMap;
            size   = sizeof(sHalfStepMap) / sizeof(sHalfStepMap[0]);
 456:	28 e0       	ldi	r18, 0x08	; 8
            steps  = (rotation * 2048);
        }
        break;
        case Half:
        {
            pArray = sHalfStepMap;
 458:	4f e6       	ldi	r20, 0x6F	; 111
 45a:	52 e0       	ldi	r21, 0x02	; 2
            size   = sizeof(sHalfStepMap) / sizeof(sHalfStepMap[0]);
            steps  = (rotation * 4096);
        }
        break;
 45c:	07 c0       	rjmp	.+14     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
/* NOTE: Local function implementations */
StepperMotorModeData_t getModeAndSteps(StepperMotorRunMode_t mode, double rotation)
{
    uint8_t * pArray = NULL;
    uint8_t   size   = 0;
    uint32_t  steps  = 0;
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	90 e0       	ldi	r25, 0x00	; 0

/* NOTE: Local function implementations */
StepperMotorModeData_t getModeAndSteps(StepperMotorRunMode_t mode, double rotation)
{
    uint8_t * pArray = NULL;
    uint8_t   size   = 0;
 466:	20 e0       	ldi	r18, 0x00	; 0
}

/* NOTE: Local function implementations */
StepperMotorModeData_t getModeAndSteps(StepperMotorRunMode_t mode, double rotation)
{
    uint8_t * pArray = NULL;
 468:	40 e0       	ldi	r20, 0x00	; 0
 46a:	50 e0       	ldi	r21, 0x00	; 0
        break;
        default:
            break;
    };

    return (StepperMotorModeData_t){
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	3a 83       	std	Y+2, r19	; 0x02
 470:	29 83       	std	Y+1, r18	; 0x01
 472:	5c 83       	std	Y+4, r21	; 0x04
 474:	4b 83       	std	Y+3, r20	; 0x03
 476:	3a 81       	ldd	r19, Y+2	; 0x02
 478:	5c 81       	ldd	r21, Y+4	; 0x04
        .pArray    = pArray,
        .steps     = steps,
        .arraySize = size,
    };
 47a:	28 96       	adiw	r28, 0x08	; 8
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	f8 94       	cli
 480:	de bf       	out	0x3e, r29	; 62
 482:	0f be       	out	0x3f, r0	; 63
 484:	cd bf       	out	0x3d, r28	; 61
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	08 95       	ret

0000048c <SM_move>:
    // save the port pointer to the static var
    sMotorPort = pPort;
}

void SM_move(StepperMotorRunMode_t mode, double distance)
{
 48c:	cf 92       	push	r12
 48e:	df 92       	push	r13
 490:	ef 92       	push	r14
 492:	ff 92       	push	r15
 494:	0f 93       	push	r16
 496:	1f 93       	push	r17
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	cd b7       	in	r28, 0x3d	; 61
 49e:	de b7       	in	r29, 0x3e	; 62
 4a0:	28 97       	sbiw	r28, 0x08	; 8
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	f8 94       	cli
 4a6:	de bf       	out	0x3e, r29	; 62
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	cd bf       	out	0x3d, r28	; 61
    StepperMotorModeData_t data = getModeAndSteps(mode, distance);
 4ac:	a7 df       	rcall	.-178    	; 0x3fc <getModeAndSteps>
 4ae:	29 83       	std	Y+1, r18	; 0x01
 4b0:	3a 83       	std	Y+2, r19	; 0x02
 4b2:	4b 83       	std	Y+3, r20	; 0x03
 4b4:	5c 83       	std	Y+4, r21	; 0x04
 4b6:	6d 83       	std	Y+5, r22	; 0x05
 4b8:	7e 83       	std	Y+6, r23	; 0x06
 4ba:	8f 83       	std	Y+7, r24	; 0x07
 4bc:	98 87       	std	Y+8, r25	; 0x08

    for(uint32_t i = 0, j = 0; i < data.steps; i++)
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	dc 01       	movw	r26, r24
 4c4:	40 e0       	ldi	r20, 0x00	; 0
 4c6:	50 e0       	ldi	r21, 0x00	; 0
 4c8:	ba 01       	movw	r22, r20
 4ca:	2d c0       	rjmp	.+90     	; 0x526 <SM_move+0x9a>
    {
        *sMotorPort = (*sMotorPort & 0xf0) | data.pArray[j++];
 4cc:	e0 91 80 02 	lds	r30, 0x0280	; 0x800280 <__data_end>
 4d0:	f0 91 81 02 	lds	r31, 0x0281	; 0x800281 <__data_end+0x1>
 4d4:	10 81       	ld	r17, Z
 4d6:	2b 81       	ldd	r18, Y+3	; 0x03
 4d8:	3c 81       	ldd	r19, Y+4	; 0x04
 4da:	6c 01       	movw	r12, r24
 4dc:	7d 01       	movw	r14, r26
 4de:	0f ef       	ldi	r16, 0xFF	; 255
 4e0:	c0 1a       	sub	r12, r16
 4e2:	d0 0a       	sbc	r13, r16
 4e4:	e0 0a       	sbc	r14, r16
 4e6:	f0 0a       	sbc	r15, r16
 4e8:	d9 01       	movw	r26, r18
 4ea:	a8 0f       	add	r26, r24
 4ec:	b9 1f       	adc	r27, r25
 4ee:	9c 91       	ld	r25, X
 4f0:	81 2f       	mov	r24, r17
 4f2:	80 7f       	andi	r24, 0xF0	; 240
 4f4:	89 2b       	or	r24, r25
 4f6:	80 83       	st	Z, r24

        if(j >= data.arraySize)
 4f8:	89 81       	ldd	r24, Y+1	; 0x01
 4fa:	9a 81       	ldd	r25, Y+2	; 0x02
 4fc:	a0 e0       	ldi	r26, 0x00	; 0
 4fe:	b0 e0       	ldi	r27, 0x00	; 0
 500:	c8 16       	cp	r12, r24
 502:	d9 06       	cpc	r13, r25
 504:	ea 06       	cpc	r14, r26
 506:	fb 06       	cpc	r15, r27
 508:	18 f4       	brcc	.+6      	; 0x510 <SM_move+0x84>
{
    StepperMotorModeData_t data = getModeAndSteps(mode, distance);

    for(uint32_t i = 0, j = 0; i < data.steps; i++)
    {
        *sMotorPort = (*sMotorPort & 0xf0) | data.pArray[j++];
 50a:	d7 01       	movw	r26, r14
 50c:	c6 01       	movw	r24, r12
 50e:	03 c0       	rjmp	.+6      	; 0x516 <SM_move+0x8a>

        if(j >= data.arraySize)
        {
            j = 0;
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	dc 01       	movw	r26, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 516:	e0 ee       	ldi	r30, 0xE0	; 224
 518:	fe e2       	ldi	r31, 0x2E	; 46
 51a:	31 97       	sbiw	r30, 0x01	; 1
 51c:	f1 f7       	brne	.-4      	; 0x51a <SM_move+0x8e>

void SM_move(StepperMotorRunMode_t mode, double distance)
{
    StepperMotorModeData_t data = getModeAndSteps(mode, distance);

    for(uint32_t i = 0, j = 0; i < data.steps; i++)
 51e:	4f 5f       	subi	r20, 0xFF	; 255
 520:	5f 4f       	sbci	r21, 0xFF	; 255
 522:	6f 4f       	sbci	r22, 0xFF	; 255
 524:	7f 4f       	sbci	r23, 0xFF	; 255
 526:	cd 80       	ldd	r12, Y+5	; 0x05
 528:	de 80       	ldd	r13, Y+6	; 0x06
 52a:	ef 80       	ldd	r14, Y+7	; 0x07
 52c:	f8 84       	ldd	r15, Y+8	; 0x08
 52e:	4c 15       	cp	r20, r12
 530:	5d 05       	cpc	r21, r13
 532:	6e 05       	cpc	r22, r14
 534:	7f 05       	cpc	r23, r15
 536:	50 f2       	brcs	.-108    	; 0x4cc <SM_move+0x40>
        }

        _delay_ms(3);
    }

    *sMotorPort = *sMotorPort & 0xf0;
 538:	e0 91 80 02 	lds	r30, 0x0280	; 0x800280 <__data_end>
 53c:	f0 91 81 02 	lds	r31, 0x0281	; 0x800281 <__data_end+0x1>
 540:	80 81       	ld	r24, Z
 542:	80 7f       	andi	r24, 0xF0	; 240
 544:	80 83       	st	Z, r24
}
 546:	28 96       	adiw	r28, 0x08	; 8
 548:	0f b6       	in	r0, 0x3f	; 63
 54a:	f8 94       	cli
 54c:	de bf       	out	0x3e, r29	; 62
 54e:	0f be       	out	0x3f, r0	; 63
 550:	cd bf       	out	0x3d, r28	; 61
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	1f 91       	pop	r17
 558:	0f 91       	pop	r16
 55a:	ff 90       	pop	r15
 55c:	ef 90       	pop	r14
 55e:	df 90       	pop	r13
 560:	cf 90       	pop	r12
 562:	08 95       	ret

00000564 <IO_init>:

/* NOTE: Function implementations */
void IO_init(void)
{
    // the bottom nibble is the motor output while the top is button input
    DDRA  = 0x00;
 564:	11 b8       	out	0x01, r1	; 1
    // turn on pullup resisitors on the top nibble
    PORTA = 0xf0;
 566:	80 ef       	ldi	r24, 0xF0	; 240
 568:	82 b9       	out	0x02, r24	; 2
 56a:	08 95       	ret

0000056c <main>:

/* NOTE: Application implementation */
// the main loop of the function, provided to us
int main(void)
{
    initDebug();
 56c:	f7 dd       	rcall	.-1042   	; 0x15c <initDebug>

    IO_init();
 56e:	fa df       	rcall	.-12     	; 0x564 <IO_init>
 570:	62 e2       	ldi	r22, 0x22	; 34

    SM_init(&DDRA, &PORTA);
 572:	70 e0       	ldi	r23, 0x00	; 0
 574:	81 e2       	ldi	r24, 0x21	; 33
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	34 df       	rcall	.-408    	; 0x3e2 <SM_init>
 57a:	80 b1       	in	r24, 0x00	; 0

    while(1)
    {
        switch(PINA & (0xf0))
 57c:	80 7f       	andi	r24, 0xF0	; 240
 57e:	80 32       	cpi	r24, 0x20	; 32
 580:	59 f0       	breq	.+22     	; 0x598 <main+0x2c>
 582:	80 34       	cpi	r24, 0x40	; 64
 584:	81 f0       	breq	.+32     	; 0x5a6 <main+0x3a>
 586:	80 31       	cpi	r24, 0x10	; 16
 588:	c1 f7       	brne	.-16     	; 0x57a <main+0xe>
 58a:	40 e0       	ldi	r20, 0x00	; 0
        {
            case 0x10:
            {
                SM_move(stepperModeWave, 2);
 58c:	50 e0       	ldi	r21, 0x00	; 0
 58e:	60 e0       	ldi	r22, 0x00	; 0
 590:	70 e4       	ldi	r23, 0x40	; 64
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	7b df       	rcall	.-266    	; 0x48c <SM_move>
 596:	f1 cf       	rjmp	.-30     	; 0x57a <main+0xe>
            }
            break;
 598:	40 e0       	ldi	r20, 0x00	; 0
            case 0x20:
            {
                SM_move(stepperModeFull, 2);
 59a:	50 e0       	ldi	r21, 0x00	; 0
 59c:	60 e0       	ldi	r22, 0x00	; 0
 59e:	70 e4       	ldi	r23, 0x40	; 64
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	74 df       	rcall	.-280    	; 0x48c <SM_move>
 5a4:	ea cf       	rjmp	.-44     	; 0x57a <main+0xe>
            }
            break;
 5a6:	40 e0       	ldi	r20, 0x00	; 0
            case 0x40:
            {
                SM_move(stepperModeHalf, 2);
 5a8:	50 e0       	ldi	r21, 0x00	; 0
 5aa:	60 e0       	ldi	r22, 0x00	; 0
 5ac:	70 e4       	ldi	r23, 0x40	; 64
 5ae:	82 e0       	ldi	r24, 0x02	; 2
 5b0:	6d df       	rcall	.-294    	; 0x48c <SM_move>
 5b2:	e3 cf       	rjmp	.-58     	; 0x57a <main+0xe>

000005b4 <__fixunssfsi>:
            }
            break;
 5b4:	5b d0       	rcall	.+182    	; 0x66c <__fp_splitA>
 5b6:	88 f0       	brcs	.+34     	; 0x5da <__fixunssfsi+0x26>
 5b8:	9f 57       	subi	r25, 0x7F	; 127
 5ba:	90 f0       	brcs	.+36     	; 0x5e0 <__fixunssfsi+0x2c>
 5bc:	b9 2f       	mov	r27, r25
 5be:	99 27       	eor	r25, r25
 5c0:	b7 51       	subi	r27, 0x17	; 23
 5c2:	a0 f0       	brcs	.+40     	; 0x5ec <__fixunssfsi+0x38>
 5c4:	d1 f0       	breq	.+52     	; 0x5fa <__fixunssfsi+0x46>
 5c6:	66 0f       	add	r22, r22
 5c8:	77 1f       	adc	r23, r23
 5ca:	88 1f       	adc	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	1a f0       	brmi	.+6      	; 0x5d6 <__fixunssfsi+0x22>
 5d0:	ba 95       	dec	r27
 5d2:	c9 f7       	brne	.-14     	; 0x5c6 <__fixunssfsi+0x12>
 5d4:	12 c0       	rjmp	.+36     	; 0x5fa <__fixunssfsi+0x46>
 5d6:	b1 30       	cpi	r27, 0x01	; 1
 5d8:	81 f0       	breq	.+32     	; 0x5fa <__fixunssfsi+0x46>
 5da:	62 d0       	rcall	.+196    	; 0x6a0 <__fp_zero>
 5dc:	b1 e0       	ldi	r27, 0x01	; 1
 5de:	08 95       	ret
 5e0:	5f c0       	rjmp	.+190    	; 0x6a0 <__fp_zero>
 5e2:	67 2f       	mov	r22, r23
 5e4:	78 2f       	mov	r23, r24
 5e6:	88 27       	eor	r24, r24
 5e8:	b8 5f       	subi	r27, 0xF8	; 248
 5ea:	39 f0       	breq	.+14     	; 0x5fa <__fixunssfsi+0x46>
 5ec:	b9 3f       	cpi	r27, 0xF9	; 249
 5ee:	cc f3       	brlt	.-14     	; 0x5e2 <__fixunssfsi+0x2e>
 5f0:	86 95       	lsr	r24
 5f2:	77 95       	ror	r23
 5f4:	67 95       	ror	r22
 5f6:	b3 95       	inc	r27
 5f8:	d9 f7       	brne	.-10     	; 0x5f0 <__fixunssfsi+0x3c>
 5fa:	3e f4       	brtc	.+14     	; 0x60a <__fixunssfsi+0x56>
 5fc:	90 95       	com	r25
 5fe:	80 95       	com	r24
 600:	70 95       	com	r23
 602:	61 95       	neg	r22
 604:	7f 4f       	sbci	r23, 0xFF	; 255
 606:	8f 4f       	sbci	r24, 0xFF	; 255
 608:	9f 4f       	sbci	r25, 0xFF	; 255
 60a:	08 95       	ret

0000060c <__fp_inf>:
 60c:	97 f9       	bld	r25, 7
 60e:	9f 67       	ori	r25, 0x7F	; 127
 610:	80 e8       	ldi	r24, 0x80	; 128
 612:	70 e0       	ldi	r23, 0x00	; 0
 614:	60 e0       	ldi	r22, 0x00	; 0
 616:	08 95       	ret

00000618 <__fp_nan>:
 618:	9f ef       	ldi	r25, 0xFF	; 255
 61a:	80 ec       	ldi	r24, 0xC0	; 192
 61c:	08 95       	ret

0000061e <__fp_pscA>:
 61e:	00 24       	eor	r0, r0
 620:	0a 94       	dec	r0
 622:	16 16       	cp	r1, r22
 624:	17 06       	cpc	r1, r23
 626:	18 06       	cpc	r1, r24
 628:	09 06       	cpc	r0, r25
 62a:	08 95       	ret

0000062c <__fp_pscB>:
 62c:	00 24       	eor	r0, r0
 62e:	0a 94       	dec	r0
 630:	12 16       	cp	r1, r18
 632:	13 06       	cpc	r1, r19
 634:	14 06       	cpc	r1, r20
 636:	05 06       	cpc	r0, r21
 638:	08 95       	ret

0000063a <__fp_round>:
 63a:	09 2e       	mov	r0, r25
 63c:	03 94       	inc	r0
 63e:	00 0c       	add	r0, r0
 640:	11 f4       	brne	.+4      	; 0x646 <__fp_round+0xc>
 642:	88 23       	and	r24, r24
 644:	52 f0       	brmi	.+20     	; 0x65a <__fp_round+0x20>
 646:	bb 0f       	add	r27, r27
 648:	40 f4       	brcc	.+16     	; 0x65a <__fp_round+0x20>
 64a:	bf 2b       	or	r27, r31
 64c:	11 f4       	brne	.+4      	; 0x652 <__fp_round+0x18>
 64e:	60 ff       	sbrs	r22, 0
 650:	04 c0       	rjmp	.+8      	; 0x65a <__fp_round+0x20>
 652:	6f 5f       	subi	r22, 0xFF	; 255
 654:	7f 4f       	sbci	r23, 0xFF	; 255
 656:	8f 4f       	sbci	r24, 0xFF	; 255
 658:	9f 4f       	sbci	r25, 0xFF	; 255
 65a:	08 95       	ret

0000065c <__fp_split3>:
 65c:	57 fd       	sbrc	r21, 7
 65e:	90 58       	subi	r25, 0x80	; 128
 660:	44 0f       	add	r20, r20
 662:	55 1f       	adc	r21, r21
 664:	59 f0       	breq	.+22     	; 0x67c <__fp_splitA+0x10>
 666:	5f 3f       	cpi	r21, 0xFF	; 255
 668:	71 f0       	breq	.+28     	; 0x686 <__fp_splitA+0x1a>
 66a:	47 95       	ror	r20

0000066c <__fp_splitA>:
 66c:	88 0f       	add	r24, r24
 66e:	97 fb       	bst	r25, 7
 670:	99 1f       	adc	r25, r25
 672:	61 f0       	breq	.+24     	; 0x68c <__fp_splitA+0x20>
 674:	9f 3f       	cpi	r25, 0xFF	; 255
 676:	79 f0       	breq	.+30     	; 0x696 <__fp_splitA+0x2a>
 678:	87 95       	ror	r24
 67a:	08 95       	ret
 67c:	12 16       	cp	r1, r18
 67e:	13 06       	cpc	r1, r19
 680:	14 06       	cpc	r1, r20
 682:	55 1f       	adc	r21, r21
 684:	f2 cf       	rjmp	.-28     	; 0x66a <__fp_split3+0xe>
 686:	46 95       	lsr	r20
 688:	f1 df       	rcall	.-30     	; 0x66c <__fp_splitA>
 68a:	08 c0       	rjmp	.+16     	; 0x69c <__fp_splitA+0x30>
 68c:	16 16       	cp	r1, r22
 68e:	17 06       	cpc	r1, r23
 690:	18 06       	cpc	r1, r24
 692:	99 1f       	adc	r25, r25
 694:	f1 cf       	rjmp	.-30     	; 0x678 <__fp_splitA+0xc>
 696:	86 95       	lsr	r24
 698:	71 05       	cpc	r23, r1
 69a:	61 05       	cpc	r22, r1
 69c:	08 94       	sec
 69e:	08 95       	ret

000006a0 <__fp_zero>:
 6a0:	e8 94       	clt

000006a2 <__fp_szero>:
 6a2:	bb 27       	eor	r27, r27
 6a4:	66 27       	eor	r22, r22
 6a6:	77 27       	eor	r23, r23
 6a8:	cb 01       	movw	r24, r22
 6aa:	97 f9       	bld	r25, 7
 6ac:	08 95       	ret

000006ae <__mulsf3>:
 6ae:	0b d0       	rcall	.+22     	; 0x6c6 <__mulsf3x>
 6b0:	c4 cf       	rjmp	.-120    	; 0x63a <__fp_round>
 6b2:	b5 df       	rcall	.-150    	; 0x61e <__fp_pscA>
 6b4:	28 f0       	brcs	.+10     	; 0x6c0 <__mulsf3+0x12>
 6b6:	ba df       	rcall	.-140    	; 0x62c <__fp_pscB>
 6b8:	18 f0       	brcs	.+6      	; 0x6c0 <__mulsf3+0x12>
 6ba:	95 23       	and	r25, r21
 6bc:	09 f0       	breq	.+2      	; 0x6c0 <__mulsf3+0x12>
 6be:	a6 cf       	rjmp	.-180    	; 0x60c <__fp_inf>
 6c0:	ab cf       	rjmp	.-170    	; 0x618 <__fp_nan>
 6c2:	11 24       	eor	r1, r1
 6c4:	ee cf       	rjmp	.-36     	; 0x6a2 <__fp_szero>

000006c6 <__mulsf3x>:
 6c6:	ca df       	rcall	.-108    	; 0x65c <__fp_split3>
 6c8:	a0 f3       	brcs	.-24     	; 0x6b2 <__mulsf3+0x4>

000006ca <__mulsf3_pse>:
 6ca:	95 9f       	mul	r25, r21
 6cc:	d1 f3       	breq	.-12     	; 0x6c2 <__mulsf3+0x14>
 6ce:	95 0f       	add	r25, r21
 6d0:	50 e0       	ldi	r21, 0x00	; 0
 6d2:	55 1f       	adc	r21, r21
 6d4:	62 9f       	mul	r22, r18
 6d6:	f0 01       	movw	r30, r0
 6d8:	72 9f       	mul	r23, r18
 6da:	bb 27       	eor	r27, r27
 6dc:	f0 0d       	add	r31, r0
 6de:	b1 1d       	adc	r27, r1
 6e0:	63 9f       	mul	r22, r19
 6e2:	aa 27       	eor	r26, r26
 6e4:	f0 0d       	add	r31, r0
 6e6:	b1 1d       	adc	r27, r1
 6e8:	aa 1f       	adc	r26, r26
 6ea:	64 9f       	mul	r22, r20
 6ec:	66 27       	eor	r22, r22
 6ee:	b0 0d       	add	r27, r0
 6f0:	a1 1d       	adc	r26, r1
 6f2:	66 1f       	adc	r22, r22
 6f4:	82 9f       	mul	r24, r18
 6f6:	22 27       	eor	r18, r18
 6f8:	b0 0d       	add	r27, r0
 6fa:	a1 1d       	adc	r26, r1
 6fc:	62 1f       	adc	r22, r18
 6fe:	73 9f       	mul	r23, r19
 700:	b0 0d       	add	r27, r0
 702:	a1 1d       	adc	r26, r1
 704:	62 1f       	adc	r22, r18
 706:	83 9f       	mul	r24, r19
 708:	a0 0d       	add	r26, r0
 70a:	61 1d       	adc	r22, r1
 70c:	22 1f       	adc	r18, r18
 70e:	74 9f       	mul	r23, r20
 710:	33 27       	eor	r19, r19
 712:	a0 0d       	add	r26, r0
 714:	61 1d       	adc	r22, r1
 716:	23 1f       	adc	r18, r19
 718:	84 9f       	mul	r24, r20
 71a:	60 0d       	add	r22, r0
 71c:	21 1d       	adc	r18, r1
 71e:	82 2f       	mov	r24, r18
 720:	76 2f       	mov	r23, r22
 722:	6a 2f       	mov	r22, r26
 724:	11 24       	eor	r1, r1
 726:	9f 57       	subi	r25, 0x7F	; 127
 728:	50 40       	sbci	r21, 0x00	; 0
 72a:	8a f0       	brmi	.+34     	; 0x74e <__mulsf3_pse+0x84>
 72c:	e1 f0       	breq	.+56     	; 0x766 <__mulsf3_pse+0x9c>
 72e:	88 23       	and	r24, r24
 730:	4a f0       	brmi	.+18     	; 0x744 <__mulsf3_pse+0x7a>
 732:	ee 0f       	add	r30, r30
 734:	ff 1f       	adc	r31, r31
 736:	bb 1f       	adc	r27, r27
 738:	66 1f       	adc	r22, r22
 73a:	77 1f       	adc	r23, r23
 73c:	88 1f       	adc	r24, r24
 73e:	91 50       	subi	r25, 0x01	; 1
 740:	50 40       	sbci	r21, 0x00	; 0
 742:	a9 f7       	brne	.-22     	; 0x72e <__mulsf3_pse+0x64>
 744:	9e 3f       	cpi	r25, 0xFE	; 254
 746:	51 05       	cpc	r21, r1
 748:	70 f0       	brcs	.+28     	; 0x766 <__mulsf3_pse+0x9c>
 74a:	60 cf       	rjmp	.-320    	; 0x60c <__fp_inf>
 74c:	aa cf       	rjmp	.-172    	; 0x6a2 <__fp_szero>
 74e:	5f 3f       	cpi	r21, 0xFF	; 255
 750:	ec f3       	brlt	.-6      	; 0x74c <__mulsf3_pse+0x82>
 752:	98 3e       	cpi	r25, 0xE8	; 232
 754:	dc f3       	brlt	.-10     	; 0x74c <__mulsf3_pse+0x82>
 756:	86 95       	lsr	r24
 758:	77 95       	ror	r23
 75a:	67 95       	ror	r22
 75c:	b7 95       	ror	r27
 75e:	f7 95       	ror	r31
 760:	e7 95       	ror	r30
 762:	9f 5f       	subi	r25, 0xFF	; 255
 764:	c1 f7       	brne	.-16     	; 0x756 <__mulsf3_pse+0x8c>
 766:	fe 2b       	or	r31, r30
 768:	88 0f       	add	r24, r24
 76a:	91 1d       	adc	r25, r1
 76c:	96 95       	lsr	r25
 76e:	87 95       	ror	r24
 770:	97 f9       	bld	r25, 7
 772:	08 95       	ret

00000774 <_exit>:
 774:	f8 94       	cli

00000776 <__stop_program>:
 776:	ff cf       	rjmp	.-2      	; 0x776 <__stop_program>
