
Extra Credit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  0000024c  000002c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011e9  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d12  00000000  00000000  00001581  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000055a  00000000  00000000  00002293  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  000027f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ee  00000000  00000000  00002878  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000043a  00000000  00000000  00002e66  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000032a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e4       	ldi	r30, 0x4C	; 76
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	8e d0       	rcall	.+284    	; 0x22c <main>
 110:	9b c0       	rjmp	.+310    	; 0x248 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <LCD_instruction>:
    LCD_instruction(0x06); /* entry mode set, increment mode */
}

void LCD_instruction(uint8_t i)
{
    PORTD = 0b00000000; /* Write instruction: RS = 0 E = 0, R/!W=0 (write) */
 114:	1b b8       	out	0x0b, r1	; 11

    PORTD = PORTD | 0x04; /* Take E HIGH (logic 1) */
 116:	9b b1       	in	r25, 0x0b	; 11
 118:	94 60       	ori	r25, 0x04	; 4
 11a:	9b b9       	out	0x0b, r25	; 11
    PORTL = i;
 11c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	87 ec       	ldi	r24, 0xC7	; 199
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <LCD_instruction+0x10>
 128:	00 c0       	rjmp	.+0      	; 0x12a <LCD_instruction+0x16>
 12a:	00 00       	nop
    _delay_us(50);        /* needs to be at least 30uS or no display - use 50 */
    PORTD = PORTD & 0x01; /* Take E LOW (logic 0) */
 12c:	8b b1       	in	r24, 0x0b	; 11
 12e:	81 70       	andi	r24, 0x01	; 1
 130:	8b b9       	out	0x0b, r24	; 11
 132:	87 ec       	ldi	r24, 0xC7	; 199
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_instruction+0x22>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <LCD_instruction+0x28>
 13c:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	8f e1       	ldi	r24, 0x1F	; 31
 140:	9e e4       	ldi	r25, 0x4E	; 78
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <LCD_instruction+0x2e>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCD_instruction+0x34>
 148:	00 00       	nop
 14a:	08 95       	ret

0000014c <LCD_init>:
 14c:	2f e7       	ldi	r18, 0x7F	; 127
 14e:	85 eb       	ldi	r24, 0xB5	; 181
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <LCD_init+0x6>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <LCD_init+0x10>
 15c:	00 00       	nop

/* NOTE: Local function implementations */
void LCD_init(void)
{
    _delay_ms(35);         /* wait for more than 30mS after VDD rises to 4.5V */
    LCD_instruction(0x38); /* function set 8bits, 2line, display off */
 15e:	88 e3       	ldi	r24, 0x38	; 56
 160:	d9 df       	rcall	.-78     	; 0x114 <LCD_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	87 ec       	ldi	r24, 0xC7	; 199
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <LCD_init+0x1a>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD_init+0x20>
 16c:	00 00       	nop
    _delay_us(50);         /* wait for more than 39microS */
    LCD_instruction(0x0C); /* display on, cursor off, blink off */
 16e:	8c e0       	ldi	r24, 0x0C	; 12
 170:	d1 df       	rcall	.-94     	; 0x114 <LCD_instruction>
 172:	87 ec       	ldi	r24, 0xC7	; 199
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <LCD_init+0x2a>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <LCD_init+0x30>
    _delay_us(50);         /* wait for more than 39microS */
    LCD_instruction(0x01); /* display clear */
 17c:	00 00       	nop
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	c9 df       	rcall	.-110    	; 0x114 <LCD_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	8f e3       	ldi	r24, 0x3F	; 63
 184:	9f e1       	ldi	r25, 0x1F	; 31
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_init+0x3a>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_init+0x40>
    _delay_ms(2);          /* wait for more than 1.53mS */
    LCD_instruction(0x06); /* entry mode set, increment mode */
 18c:	00 00       	nop
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	c1 cf       	rjmp	.-126    	; 0x114 <LCD_instruction>
 192:	08 95       	ret

00000194 <LCD_sendChar>:
    _delay_ms(5);
}

void LCD_sendChar(char c)
{
    PORTD = 0b00000001; /* Write instruction: RS = 0 E = 0, R/!W=0 (write) */
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	9b b9       	out	0x0b, r25	; 11

    PORTD = PORTD | 0x04; /* Take E HIGH (logic 1) */
 198:	9b b1       	in	r25, 0x0b	; 11
 19a:	94 60       	ori	r25, 0x04	; 4
 19c:	9b b9       	out	0x0b, r25	; 11
    PORTL = c;
 19e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	87 ec       	ldi	r24, 0xC7	; 199
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCD_sendChar+0x12>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LCD_sendChar+0x18>
 1ac:	00 00       	nop
    _delay_us(50);        /* needs to be at least 30uS or no display - use 50 */
    PORTD = PORTD & 0x01; /* Take E LOW (logic 0) */
 1ae:	8b b1       	in	r24, 0x0b	; 11
 1b0:	81 70       	andi	r24, 0x01	; 1
 1b2:	8b b9       	out	0x0b, r24	; 11
 1b4:	87 ec       	ldi	r24, 0xC7	; 199
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCD_sendChar+0x24>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCD_sendChar+0x2a>
 1be:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	8f e1       	ldi	r24, 0x1F	; 31
 1c2:	9e e4       	ldi	r25, 0x4E	; 78
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <LCD_sendChar+0x30>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <LCD_sendChar+0x36>
 1ca:	00 00       	nop
 1cc:	08 95       	ret

000001ce <LCD_sendString>:

    _delay_ms(5);
}

void LCD_sendString(char * s)
{
 1ce:	fc 01       	movw	r30, r24
    PORTD = 0b00000001; /* write data: RS = 1 E = 0, R/!W=0 (write) */
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	8b b9       	out	0x0b, r24	; 11

    while(*s != '\0')
 1d4:	19 c0       	rjmp	.+50     	; 0x208 <LCD_sendString+0x3a>
    {
        PORTD = PORTD | 0x04; /* Take E HIGH (logic 1) */
 1d6:	8b b1       	in	r24, 0x0b	; 11
 1d8:	84 60       	ori	r24, 0x04	; 4
 1da:	8b b9       	out	0x0b, r24	; 11
        PORTL = *s++;
 1dc:	9f 01       	movw	r18, r30
 1de:	2f 5f       	subi	r18, 0xFF	; 255
 1e0:	3f 4f       	sbci	r19, 0xFF	; 255
 1e2:	80 81       	ld	r24, Z
 1e4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e8:	87 ec       	ldi	r24, 0xC7	; 199
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <LCD_sendString+0x1e>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <LCD_sendString+0x24>
 1f2:	00 00       	nop
        _delay_us(50);        /* needs to be at least 30uS or no display - use 50 */
        PORTD = PORTD & 0x01; /* Take E LOW (logic 0) */
 1f4:	8b b1       	in	r24, 0x0b	; 11
 1f6:	81 70       	andi	r24, 0x01	; 1
 1f8:	8b b9       	out	0x0b, r24	; 11
 1fa:	87 ec       	ldi	r24, 0xC7	; 199
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <LCD_sendString+0x30>
 202:	00 c0       	rjmp	.+0      	; 0x204 <LCD_sendString+0x36>
 204:	00 00       	nop
    PORTD = 0b00000001; /* write data: RS = 1 E = 0, R/!W=0 (write) */

    while(*s != '\0')
    {
        PORTD = PORTD | 0x04; /* Take E HIGH (logic 1) */
        PORTL = *s++;
 206:	f9 01       	movw	r30, r18

void LCD_sendString(char * s)
{
    PORTD = 0b00000001; /* write data: RS = 1 E = 0, R/!W=0 (write) */

    while(*s != '\0')
 208:	80 81       	ld	r24, Z
 20a:	81 11       	cpse	r24, r1
 20c:	e4 cf       	rjmp	.-56     	; 0x1d6 <LCD_sendString+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20e:	8f e1       	ldi	r24, 0x1F	; 31
 210:	9e e4       	ldi	r25, 0x4E	; 78
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <LCD_sendString+0x44>
 216:	00 c0       	rjmp	.+0      	; 0x218 <LCD_sendString+0x4a>
 218:	00 00       	nop
 21a:	08 95       	ret

0000021c <IO_init>:

/* NOTE: Function implementations */
void IO_init(void)
{
    // port l all out
    DDRL  = 0xFF;
 21c:	8f ef       	ldi	r24, 0xFF	; 255
 21e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
    PORTL = 0x00;
 222:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>

    // port d just out on the first three pins
    DDRD = 0x07;
 226:	87 e0       	ldi	r24, 0x07	; 7
 228:	8a b9       	out	0x0a, r24	; 10
 22a:	08 95       	ret

0000022c <main>:

/* NOTE: Application implementation */
// the main loop of the function, provided to us
int main(void)
{
    IO_init();
 22c:	f7 df       	rcall	.-18     	; 0x21c <IO_init>
    LCD_init();
 22e:	8e df       	rcall	.-228    	; 0x14c <LCD_init>

    // set to accept in cgram
    LCD_instruction(0x40);
 230:	80 e4       	ldi	r24, 0x40	; 64
 232:	70 df       	rcall	.-288    	; 0x114 <LCD_instruction>

    LCD_sendString(custom);
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	92 e0       	ldi	r25, 0x02	; 2
 238:	ca df       	rcall	.-108    	; 0x1ce <LCD_sendString>

    // clear and home
    LCD_instruction(0x01);
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	6b df       	rcall	.-298    	; 0x114 <LCD_instruction>
    LCD_instruction(0x02);
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	69 df       	rcall	.-302    	; 0x114 <LCD_instruction>
 242:	80 e0       	ldi	r24, 0x00	; 0

    LCD_sendChar(0x00);
 244:	a7 df       	rcall	.-178    	; 0x194 <LCD_sendChar>
 246:	ff cf       	rjmp	.-2      	; 0x246 <main+0x1a>

00000248 <_exit>:
 248:	f8 94       	cli

0000024a <__stop_program>:
 24a:	ff cf       	rjmp	.-2      	; 0x24a <__stop_program>
