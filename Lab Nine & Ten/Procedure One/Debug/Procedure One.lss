
Procedure One.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000248  000002bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000248  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012f5  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000db0  00000000  00000000  00001689  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f0  00000000  00000000  00002439  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00002a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f0  00000000  00000000  00002ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004c4  00000000  00000000  000030a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00003568  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e4       	ldi	r30, 0x48	; 72
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	65 d0       	rcall	.+202    	; 0x1da <main>
 110:	99 c0       	rjmp	.+306    	; 0x244 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <LCD_instruction>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	1b b8       	out	0x0b, r1	; 11
 116:	9b b1       	in	r25, 0x0b	; 11
 118:	94 60       	ori	r25, 0x04	; 4
 11a:	9b b9       	out	0x0b, r25	; 11
 11c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 120:	87 ec       	ldi	r24, 0xC7	; 199
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <LCD_instruction+0x10>
 128:	00 c0       	rjmp	.+0      	; 0x12a <LCD_instruction+0x16>
 12a:	00 00       	nop
 12c:	8b b1       	in	r24, 0x0b	; 11
 12e:	81 70       	andi	r24, 0x01	; 1
 130:	8b b9       	out	0x0b, r24	; 11
 132:	87 ec       	ldi	r24, 0xC7	; 199
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_instruction+0x22>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <LCD_instruction+0x28>
 13c:	00 00       	nop
 13e:	08 95       	ret

00000140 <LCD_init>:
 140:	2f e7       	ldi	r18, 0x7F	; 127
 142:	85 eb       	ldi	r24, 0xB5	; 181
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <LCD_init+0x6>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_init+0x10>
 150:	00 00       	nop
 152:	88 e3       	ldi	r24, 0x38	; 56
 154:	df df       	rcall	.-66     	; 0x114 <LCD_instruction>
 156:	87 ec       	ldi	r24, 0xC7	; 199
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_init+0x1a>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_init+0x20>
 160:	00 00       	nop
 162:	8c e0       	ldi	r24, 0x0C	; 12
 164:	d7 df       	rcall	.-82     	; 0x114 <LCD_instruction>
 166:	87 ec       	ldi	r24, 0xC7	; 199
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCD_init+0x2a>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCD_init+0x30>
 170:	00 00       	nop
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	cf df       	rcall	.-98     	; 0x114 <LCD_instruction>
 176:	8f e3       	ldi	r24, 0x3F	; 63
 178:	9f e1       	ldi	r25, 0x1F	; 31
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCD_init+0x3a>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <LCD_init+0x40>
 180:	00 00       	nop
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	c7 cf       	rjmp	.-114    	; 0x114 <LCD_instruction>
 186:	08 95       	ret

00000188 <LCD_sendString>:
    PORTD = PORTD & 0x01; /* Take E LOW (logic 0) */
    _delay_us(50);        /* Delay REQUIRED */
}

void LCD_sendString(char * s)
{
 188:	fc 01       	movw	r30, r24
    PORTD = 0b00000001; /* write data: RS = 1 E = 0, R/!W=0 (write) */
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	8b b9       	out	0x0b, r24	; 11

    while(*s != '\0')
 18e:	19 c0       	rjmp	.+50     	; 0x1c2 <LCD_sendString+0x3a>
    {
        PORTD = PORTD | 0x04; /* Take E HIGH (logic 1) */
 190:	8b b1       	in	r24, 0x0b	; 11
 192:	84 60       	ori	r24, 0x04	; 4
 194:	8b b9       	out	0x0b, r24	; 11
        PORTL = *s++;
 196:	9f 01       	movw	r18, r30
 198:	2f 5f       	subi	r18, 0xFF	; 255
 19a:	3f 4f       	sbci	r19, 0xFF	; 255
 19c:	80 81       	ld	r24, Z
 19e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 1a2:	87 ec       	ldi	r24, 0xC7	; 199
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCD_sendString+0x1e>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LCD_sendString+0x24>
 1ac:	00 00       	nop
        _delay_us(50);        /* needs to be at least 30uS or no display - use 50 */
        PORTD = PORTD & 0x01; /* Take E LOW (logic 0) */
 1ae:	8b b1       	in	r24, 0x0b	; 11
 1b0:	81 70       	andi	r24, 0x01	; 1
 1b2:	8b b9       	out	0x0b, r24	; 11
 1b4:	87 ec       	ldi	r24, 0xC7	; 199
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCD_sendString+0x30>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCD_sendString+0x36>
 1be:	00 00       	nop
    PORTD = 0b00000001; /* write data: RS = 1 E = 0, R/!W=0 (write) */

    while(*s != '\0')
    {
        PORTD = PORTD | 0x04; /* Take E HIGH (logic 1) */
        PORTL = *s++;
 1c0:	f9 01       	movw	r30, r18

void LCD_sendString(char * s)
{
    PORTD = 0b00000001; /* write data: RS = 1 E = 0, R/!W=0 (write) */

    while(*s != '\0')
 1c2:	80 81       	ld	r24, Z
 1c4:	81 11       	cpse	r24, r1
 1c6:	e4 cf       	rjmp	.-56     	; 0x190 <LCD_sendString+0x8>
        PORTL = *s++;
        _delay_us(50);        /* needs to be at least 30uS or no display - use 50 */
        PORTD = PORTD & 0x01; /* Take E LOW (logic 0) */
        _delay_us(50);        /* Delay REQUIRED */
    }
 1c8:	08 95       	ret

000001ca <IO_init>:

/* NOTE: Function implementations */
void IO_init(void)
{
    // port l all out
    DDRL  = 0xFF;
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
    PORTL = 0x00;
 1d0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>

    // port d just out on the first three pins
    DDRD = 0x07;
 1d4:	87 e0       	ldi	r24, 0x07	; 7
 1d6:	8a b9       	out	0x0a, r24	; 10
 1d8:	08 95       	ret

000001da <main>:

/* NOTE: Application implementation */
// the main loop of the function, provided to us
int main(void)
{
    IO_init();
 1da:	f7 df       	rcall	.-18     	; 0x1ca <IO_init>
    LCD_init();
 1dc:	b1 df       	rcall	.-158    	; 0x140 <LCD_init>

    LCD_instruction(0x01);
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	99 df       	rcall	.-206    	; 0x114 <LCD_instruction>
 1e2:	8f e3       	ldi	r24, 0x3F	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e4:	9f e1       	ldi	r25, 0x1F	; 31
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <main+0xc>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <main+0x12>
 1ec:	00 00       	nop
    _delay_ms(2); // can remove if use Busy Flag check

    LCD_instruction(0x02);
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	91 df       	rcall	.-222    	; 0x114 <LCD_instruction>
 1f2:	8f e3       	ldi	r24, 0x3F	; 63
 1f4:	9f e1       	ldi	r25, 0x1F	; 31
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <main+0x1c>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0x22>
 1fc:	00 00       	nop
    _delay_ms(2); // can remove if use Busy Flag check

    LCD_instruction(0x86);
 1fe:	86 e8       	ldi	r24, 0x86	; 134
 200:	89 df       	rcall	.-238    	; 0x114 <LCD_instruction>
 202:	9f ef       	ldi	r25, 0xFF	; 255
 204:	20 e7       	ldi	r18, 0x70	; 112
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	91 50       	subi	r25, 0x01	; 1
 20a:	20 40       	sbci	r18, 0x00	; 0
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <main+0x2e>
 210:	00 c0       	rjmp	.+0      	; 0x212 <main+0x38>
 212:	00 00       	nop
    _delay_ms(50);

    LCD_sendString(message);
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	92 e0       	ldi	r25, 0x02	; 2
 218:	b7 df       	rcall	.-146    	; 0x188 <LCD_sendString>
 21a:	9f ef       	ldi	r25, 0xFF	; 255
 21c:	20 e7       	ldi	r18, 0x70	; 112
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	91 50       	subi	r25, 0x01	; 1
 222:	20 40       	sbci	r18, 0x00	; 0
 224:	80 40       	sbci	r24, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <main+0x46>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0x50>
 22a:	00 00       	nop
    _delay_ms(50);

    LCD_instruction(0xC6);
 22c:	86 ec       	ldi	r24, 0xC6	; 198
 22e:	72 df       	rcall	.-284    	; 0x114 <LCD_instruction>
 230:	87 ec       	ldi	r24, 0xC7	; 199
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <main+0x5a>
 238:	00 c0       	rjmp	.+0      	; 0x23a <main+0x60>
 23a:	00 00       	nop
    _delay_us(50); // can remove if use Busy Flag check

    LCD_sendString(message);
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	92 e0       	ldi	r25, 0x02	; 2
 240:	a3 df       	rcall	.-186    	; 0x188 <LCD_sendString>
 242:	ff cf       	rjmp	.-2      	; 0x242 <main+0x68>

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
