
Src.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  0000088a  0000091e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000088a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800210  00800210  0000092e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000092e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000960  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012c7  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dc9  00000000  00000000  00001ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e8  00000000  00000000  00002a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00003180  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c0  00000000  00000000  000032bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007a5  00000000  00000000  0000397c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00004121  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e8       	ldi	r30, 0x8A	; 138
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 31       	cpi	r26, 0x10	; 16
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e1       	ldi	r26, 0x10	; 16
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 31       	cpi	r26, 0x13	; 19
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	bc d1       	rcall	.+888    	; 0x498 <main>
 120:	b2 c3       	rjmp	.+1892   	; 0x886 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <SM_init>:
// instance pointer to the motor port
static volatile uint8_t * sMotorPort;

/* NOTE: Function implementations */
void SM_init(volatile uint8_t * pRegister, volatile uint8_t * pPort)
{
 124:	fc 01       	movw	r30, r24
    // configure port register
    *pRegister |= 0x0f;
 126:	90 81       	ld	r25, Z
 128:	9f 60       	ori	r25, 0x0F	; 15
 12a:	90 83       	st	Z, r25

    // turn on pullup resisitors on the bottom nibble
    *pPort = (*pPort & 0xf0) | 0x00;
 12c:	fb 01       	movw	r30, r22
 12e:	80 81       	ld	r24, Z
 130:	80 7f       	andi	r24, 0xF0	; 240
 132:	80 83       	st	Z, r24

    // save the port pointer to the static var
    sMotorPort = pPort;
 134:	70 93 11 02 	sts	0x0211, r23	; 0x800211 <__data_end+0x1>
 138:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <__data_end>
 13c:	08 95       	ret

0000013e <getModeAndSteps>:
    *sMotorPort = *sMotorPort & 0xf0;
}

/* NOTE: Local function implementations */
StepperMotorModeData_t getModeAndSteps(StepperMotorRunMode_t mode, double rotation)
{
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
 146:	28 97       	sbiw	r28, 0x08	; 8
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	f8 94       	cli
 14c:	de bf       	out	0x3e, r29	; 62
 14e:	0f be       	out	0x3f, r0	; 63
 150:	cd bf       	out	0x3d, r28	; 61
 152:	28 2f       	mov	r18, r24
 154:	cb 01       	movw	r24, r22
 156:	ba 01       	movw	r22, r20
    uint8_t * pArray = NULL;
    uint8_t   size   = 0;
    uint32_t  steps  = 0;

    switch(mode)
 158:	21 30       	cpi	r18, 0x01	; 1
 15a:	71 f0       	breq	.+28     	; 0x178 <getModeAndSteps+0x3a>
 15c:	18 f0       	brcs	.+6      	; 0x164 <getModeAndSteps+0x26>
 15e:	22 30       	cpi	r18, 0x02	; 2
 160:	a9 f0       	breq	.+42     	; 0x18c <getModeAndSteps+0x4e>
 162:	1e c0       	rjmp	.+60     	; 0x1a0 <getModeAndSteps+0x62>
    {
        case Wave:
        {
            pArray = sWaveStepMap;
            size   = sizeof(sWaveStepMap) / sizeof(sWaveStepMap[0]);
            steps  = (rotation * 2048);
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	55 e4       	ldi	r21, 0x45	; 69
 16c:	29 d3       	rcall	.+1618   	; 0x7c0 <__mulsf3>
 16e:	46 d2       	rcall	.+1164   	; 0x5fc <__fixunssfsi>
    switch(mode)
    {
        case Wave:
        {
            pArray = sWaveStepMap;
            size   = sizeof(sWaveStepMap) / sizeof(sWaveStepMap[0]);
 170:	24 e0       	ldi	r18, 0x04	; 4

    switch(mode)
    {
        case Wave:
        {
            pArray = sWaveStepMap;
 172:	4c e0       	ldi	r20, 0x0C	; 12
 174:	52 e0       	ldi	r21, 0x02	; 2
            size   = sizeof(sWaveStepMap) / sizeof(sWaveStepMap[0]);
            steps  = (rotation * 2048);
        }
        break;
 176:	1b c0       	rjmp	.+54     	; 0x1ae <getModeAndSteps+0x70>
        case Full:
        {
            pArray = sFullStepMap;
            size   = sizeof(sFullStepMap) / sizeof(sFullStepMap[0]);
            steps  = (rotation * 2048);
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	55 e4       	ldi	r21, 0x45	; 69
 180:	1f d3       	rcall	.+1598   	; 0x7c0 <__mulsf3>
 182:	3c d2       	rcall	.+1144   	; 0x5fc <__fixunssfsi>
        }
        break;
        case Full:
        {
            pArray = sFullStepMap;
            size   = sizeof(sFullStepMap) / sizeof(sFullStepMap[0]);
 184:	24 e0       	ldi	r18, 0x04	; 4
            steps  = (rotation * 2048);
        }
        break;
        case Full:
        {
            pArray = sFullStepMap;
 186:	48 e0       	ldi	r20, 0x08	; 8
 188:	52 e0       	ldi	r21, 0x02	; 2
            size   = sizeof(sFullStepMap) / sizeof(sFullStepMap[0]);
            steps  = (rotation * 2048);
        }
        break;
 18a:	11 c0       	rjmp	.+34     	; 0x1ae <getModeAndSteps+0x70>
        case Half:
        {
            pArray = sHalfStepMap;
            size   = sizeof(sHalfStepMap) / sizeof(sHalfStepMap[0]);
            steps  = (rotation * 4096);
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	40 e8       	ldi	r20, 0x80	; 128
 192:	55 e4       	ldi	r21, 0x45	; 69
 194:	15 d3       	rcall	.+1578   	; 0x7c0 <__mulsf3>
 196:	32 d2       	rcall	.+1124   	; 0x5fc <__fixunssfsi>
        }
        break;
        case Half:
        {
            pArray = sHalfStepMap;
            size   = sizeof(sHalfStepMap) / sizeof(sHalfStepMap[0]);
 198:	28 e0       	ldi	r18, 0x08	; 8
            steps  = (rotation * 2048);
        }
        break;
        case Half:
        {
            pArray = sHalfStepMap;
 19a:	40 e0       	ldi	r20, 0x00	; 0
 19c:	52 e0       	ldi	r21, 0x02	; 2
            size   = sizeof(sHalfStepMap) / sizeof(sHalfStepMap[0]);
            steps  = (rotation * 4096);
        }
        break;
 19e:	07 c0       	rjmp	.+14     	; 0x1ae <getModeAndSteps+0x70>
/* NOTE: Local function implementations */
StepperMotorModeData_t getModeAndSteps(StepperMotorRunMode_t mode, double rotation)
{
    uint8_t * pArray = NULL;
    uint8_t   size   = 0;
    uint32_t  steps  = 0;
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0

/* NOTE: Local function implementations */
StepperMotorModeData_t getModeAndSteps(StepperMotorRunMode_t mode, double rotation)
{
    uint8_t * pArray = NULL;
    uint8_t   size   = 0;
 1a8:	20 e0       	ldi	r18, 0x00	; 0
}

/* NOTE: Local function implementations */
StepperMotorModeData_t getModeAndSteps(StepperMotorRunMode_t mode, double rotation)
{
    uint8_t * pArray = NULL;
 1aa:	40 e0       	ldi	r20, 0x00	; 0
 1ac:	50 e0       	ldi	r21, 0x00	; 0
        break;
        default:
            break;
    };

    return (StepperMotorModeData_t){
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	3a 83       	std	Y+2, r19	; 0x02
 1b2:	29 83       	std	Y+1, r18	; 0x01
 1b4:	5c 83       	std	Y+4, r21	; 0x04
 1b6:	4b 83       	std	Y+3, r20	; 0x03
 1b8:	3a 81       	ldd	r19, Y+2	; 0x02
 1ba:	5c 81       	ldd	r21, Y+4	; 0x04
        .pArray    = pArray,
        .steps     = steps,
        .arraySize = size,
    };
 1bc:	28 96       	adiw	r28, 0x08	; 8
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	f8 94       	cli
 1c2:	de bf       	out	0x3e, r29	; 62
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	cd bf       	out	0x3d, r28	; 61
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <SM_move>:
    // save the port pointer to the static var
    sMotorPort = pPort;
}

void SM_move(StepperMotorRunMode_t mode, double distance)
{
 1ce:	cf 92       	push	r12
 1d0:	df 92       	push	r13
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	cd b7       	in	r28, 0x3d	; 61
 1e0:	de b7       	in	r29, 0x3e	; 62
 1e2:	28 97       	sbiw	r28, 0x08	; 8
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	f8 94       	cli
 1e8:	de bf       	out	0x3e, r29	; 62
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	cd bf       	out	0x3d, r28	; 61
    StepperMotorModeData_t data = getModeAndSteps(mode, distance);
 1ee:	a7 df       	rcall	.-178    	; 0x13e <getModeAndSteps>
 1f0:	29 83       	std	Y+1, r18	; 0x01
 1f2:	3a 83       	std	Y+2, r19	; 0x02
 1f4:	4b 83       	std	Y+3, r20	; 0x03
 1f6:	5c 83       	std	Y+4, r21	; 0x04
 1f8:	6d 83       	std	Y+5, r22	; 0x05
 1fa:	7e 83       	std	Y+6, r23	; 0x06
 1fc:	8f 83       	std	Y+7, r24	; 0x07
 1fe:	98 87       	std	Y+8, r25	; 0x08

    for(uint32_t i = 0, j = 0; i < data.steps; i++)
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	dc 01       	movw	r26, r24
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	50 e0       	ldi	r21, 0x00	; 0
 20a:	ba 01       	movw	r22, r20
 20c:	2d c0       	rjmp	.+90     	; 0x268 <SM_move+0x9a>
    {
        *sMotorPort = (*sMotorPort & 0xf0) | data.pArray[j++];
 20e:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <__data_end>
 212:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <__data_end+0x1>
 216:	10 81       	ld	r17, Z
 218:	2b 81       	ldd	r18, Y+3	; 0x03
 21a:	3c 81       	ldd	r19, Y+4	; 0x04
 21c:	6c 01       	movw	r12, r24
 21e:	7d 01       	movw	r14, r26
 220:	0f ef       	ldi	r16, 0xFF	; 255
 222:	c0 1a       	sub	r12, r16
 224:	d0 0a       	sbc	r13, r16
 226:	e0 0a       	sbc	r14, r16
 228:	f0 0a       	sbc	r15, r16
 22a:	d9 01       	movw	r26, r18
 22c:	a8 0f       	add	r26, r24
 22e:	b9 1f       	adc	r27, r25
 230:	9c 91       	ld	r25, X
 232:	81 2f       	mov	r24, r17
 234:	80 7f       	andi	r24, 0xF0	; 240
 236:	89 2b       	or	r24, r25
 238:	80 83       	st	Z, r24

        if(j >= data.arraySize)
 23a:	89 81       	ldd	r24, Y+1	; 0x01
 23c:	9a 81       	ldd	r25, Y+2	; 0x02
 23e:	a0 e0       	ldi	r26, 0x00	; 0
 240:	b0 e0       	ldi	r27, 0x00	; 0
 242:	c8 16       	cp	r12, r24
 244:	d9 06       	cpc	r13, r25
 246:	ea 06       	cpc	r14, r26
 248:	fb 06       	cpc	r15, r27
 24a:	18 f4       	brcc	.+6      	; 0x252 <SM_move+0x84>
{
    StepperMotorModeData_t data = getModeAndSteps(mode, distance);

    for(uint32_t i = 0, j = 0; i < data.steps; i++)
    {
        *sMotorPort = (*sMotorPort & 0xf0) | data.pArray[j++];
 24c:	d7 01       	movw	r26, r14
 24e:	c6 01       	movw	r24, r12
 250:	03 c0       	rjmp	.+6      	; 0x258 <SM_move+0x8a>

        if(j >= data.arraySize)
        {
            j = 0;
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	dc 01       	movw	r26, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 258:	e0 ee       	ldi	r30, 0xE0	; 224
 25a:	fe e2       	ldi	r31, 0x2E	; 46
 25c:	31 97       	sbiw	r30, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <SM_move+0x8e>

void SM_move(StepperMotorRunMode_t mode, double distance)
{
    StepperMotorModeData_t data = getModeAndSteps(mode, distance);

    for(uint32_t i = 0, j = 0; i < data.steps; i++)
 260:	4f 5f       	subi	r20, 0xFF	; 255
 262:	5f 4f       	sbci	r21, 0xFF	; 255
 264:	6f 4f       	sbci	r22, 0xFF	; 255
 266:	7f 4f       	sbci	r23, 0xFF	; 255
 268:	cd 80       	ldd	r12, Y+5	; 0x05
 26a:	de 80       	ldd	r13, Y+6	; 0x06
 26c:	ef 80       	ldd	r14, Y+7	; 0x07
 26e:	f8 84       	ldd	r15, Y+8	; 0x08
 270:	4c 15       	cp	r20, r12
 272:	5d 05       	cpc	r21, r13
 274:	6e 05       	cpc	r22, r14
 276:	7f 05       	cpc	r23, r15
 278:	50 f2       	brcs	.-108    	; 0x20e <SM_move+0x40>
        }

        _delay_ms(3);
    }

    *sMotorPort = *sMotorPort & 0xf0;
 27a:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <__data_end>
 27e:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <__data_end+0x1>
 282:	80 81       	ld	r24, Z
 284:	80 7f       	andi	r24, 0xF0	; 240
 286:	80 83       	st	Z, r24
}
 288:	28 96       	adiw	r28, 0x08	; 8
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	f8 94       	cli
 28e:	de bf       	out	0x3e, r29	; 62
 290:	0f be       	out	0x3f, r0	; 63
 292:	cd bf       	out	0x3d, r28	; 61
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	ff 90       	pop	r15
 29e:	ef 90       	pop	r14
 2a0:	df 90       	pop	r13
 2a2:	cf 90       	pop	r12
 2a4:	08 95       	ret

000002a6 <SM_movePosition>:

void SM_movePosition(StepperMotorRunMode_t mode, uint16_t distance)
{
 2a6:	cf 93       	push	r28
 2a8:	c8 2f       	mov	r28, r24
    SM_move(mode, ((double)distance / 360));
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	d2 d1       	rcall	.+932    	; 0x654 <__floatunsisf>
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	44 eb       	ldi	r20, 0xB4	; 180
 2b6:	53 e4       	ldi	r21, 0x43	; 67
 2b8:	39 d1       	rcall	.+626    	; 0x52c <__divsf3>
 2ba:	ab 01       	movw	r20, r22
 2bc:	bc 01       	movw	r22, r24
 2be:	8c 2f       	mov	r24, r28
 2c0:	86 df       	rcall	.-244    	; 0x1ce <SM_move>
}
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <SM_moveTime>:

void SM_moveTime(StepperMotorRunMode_t mode, bool direction, double time, double stepTime)
{
 2c6:	3f 92       	push	r3
 2c8:	4f 92       	push	r4
 2ca:	5f 92       	push	r5
 2cc:	6f 92       	push	r6
 2ce:	7f 92       	push	r7
 2d0:	8f 92       	push	r8
 2d2:	9f 92       	push	r9
 2d4:	af 92       	push	r10
 2d6:	bf 92       	push	r11
 2d8:	cf 92       	push	r12
 2da:	df 92       	push	r13
 2dc:	ef 92       	push	r14
 2de:	ff 92       	push	r15
 2e0:	0f 93       	push	r16
 2e2:	1f 93       	push	r17
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	cd b7       	in	r28, 0x3d	; 61
 2ea:	de b7       	in	r29, 0x3e	; 62
 2ec:	60 97       	sbiw	r28, 0x10	; 16
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	f8 94       	cli
 2f2:	de bf       	out	0x3e, r29	; 62
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	cd bf       	out	0x3d, r28	; 61
 2f8:	36 2e       	mov	r3, r22
 2fa:	2d 87       	std	Y+13, r18	; 0x0d
 2fc:	3e 87       	std	Y+14, r19	; 0x0e
 2fe:	4f 87       	std	Y+15, r20	; 0x0f
 300:	58 8b       	std	Y+16, r21	; 0x10
 302:	e9 86       	std	Y+9, r14	; 0x09
 304:	fa 86       	std	Y+10, r15	; 0x0a
 306:	0b 87       	std	Y+11, r16	; 0x0b
 308:	1c 87       	std	Y+12, r17	; 0x0c
    StepperMotorModeData_t data = getModeAndSteps(mode, 0);
 30a:	40 e0       	ldi	r20, 0x00	; 0
 30c:	50 e0       	ldi	r21, 0x00	; 0
 30e:	ba 01       	movw	r22, r20
 310:	16 df       	rcall	.-468    	; 0x13e <getModeAndSteps>
 312:	29 83       	std	Y+1, r18	; 0x01
 314:	3a 83       	std	Y+2, r19	; 0x02
 316:	4b 83       	std	Y+3, r20	; 0x03
 318:	5c 83       	std	Y+4, r21	; 0x04
 31a:	6d 83       	std	Y+5, r22	; 0x05
 31c:	7e 83       	std	Y+6, r23	; 0x06
 31e:	8f 83       	std	Y+7, r24	; 0x07
 320:	98 87       	std	Y+8, r25	; 0x08

    for(uint32_t i = 0, j = (direction ? data.arraySize : 0); i < (time / stepTime); i++)
 322:	33 20       	and	r3, r3
 324:	29 f0       	breq	.+10     	; 0x330 <SM_moveTime+0x6a>
 326:	c9 80       	ldd	r12, Y+1	; 0x01
 328:	da 80       	ldd	r13, Y+2	; 0x02
 32a:	e1 2c       	mov	r14, r1
 32c:	f1 2c       	mov	r15, r1
 32e:	03 c0       	rjmp	.+6      	; 0x336 <SM_moveTime+0x70>
 330:	c1 2c       	mov	r12, r1
 332:	d1 2c       	mov	r13, r1
 334:	76 01       	movw	r14, r12

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 336:	81 2c       	mov	r8, r1
 338:	91 2c       	mov	r9, r1
 33a:	54 01       	movw	r10, r8
 33c:	71 c0       	rjmp	.+226    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
    {
        *sMotorPort = (*sMotorPort & 0xf0) | data.pArray[(direction ? j-- : j++)];
 33e:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <__data_end>
 342:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <__data_end+0x1>
 346:	80 81       	ld	r24, Z
 348:	80 7f       	andi	r24, 0xF0	; 240
 34a:	2b 81       	ldd	r18, Y+3	; 0x03
 34c:	3c 81       	ldd	r19, Y+4	; 0x04
 34e:	33 20       	and	r3, r3
 350:	39 f0       	breq	.+14     	; 0x360 <SM_moveTime+0x9a>
 352:	b7 01       	movw	r22, r14
 354:	a6 01       	movw	r20, r12
 356:	41 50       	subi	r20, 0x01	; 1
 358:	51 09       	sbc	r21, r1
 35a:	61 09       	sbc	r22, r1
 35c:	71 09       	sbc	r23, r1
 35e:	06 c0       	rjmp	.+12     	; 0x36c <SM_moveTime+0xa6>
 360:	b7 01       	movw	r22, r14
 362:	a6 01       	movw	r20, r12
 364:	4f 5f       	subi	r20, 0xFF	; 255
 366:	5f 4f       	sbci	r21, 0xFF	; 255
 368:	6f 4f       	sbci	r22, 0xFF	; 255
 36a:	7f 4f       	sbci	r23, 0xFF	; 255
 36c:	d9 01       	movw	r26, r18
 36e:	ac 0d       	add	r26, r12
 370:	bd 1d       	adc	r27, r13
 372:	9c 91       	ld	r25, X
 374:	89 2b       	or	r24, r25
 376:	80 83       	st	Z, r24

        if(j >= data.arraySize || j <= 0)
 378:	c9 80       	ldd	r12, Y+1	; 0x01
 37a:	da 80       	ldd	r13, Y+2	; 0x02
 37c:	e1 2c       	mov	r14, r1
 37e:	f1 2c       	mov	r15, r1
 380:	4c 15       	cp	r20, r12
 382:	5d 05       	cpc	r21, r13
 384:	6e 05       	cpc	r22, r14
 386:	7f 05       	cpc	r23, r15
 388:	28 f4       	brcc	.+10     	; 0x394 <SM_moveTime+0xce>
 38a:	41 15       	cp	r20, r1
 38c:	51 05       	cpc	r21, r1
 38e:	61 05       	cpc	r22, r1
 390:	71 05       	cpc	r23, r1
 392:	31 f4       	brne	.+12     	; 0x3a0 <SM_moveTime+0xda>
        {
            j = (direction ? data.arraySize : 0);
 394:	31 10       	cpse	r3, r1
 396:	06 c0       	rjmp	.+12     	; 0x3a4 <SM_moveTime+0xde>
 398:	c1 2c       	mov	r12, r1
 39a:	d1 2c       	mov	r13, r1
 39c:	76 01       	movw	r14, r12
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <SM_moveTime+0xde>
 3a0:	6a 01       	movw	r12, r20
 3a2:	7b 01       	movw	r14, r22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 3a4:	20 e0       	ldi	r18, 0x00	; 0
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	4a e7       	ldi	r20, 0x7A	; 122
 3aa:	55 e4       	ldi	r21, 0x45	; 69
 3ac:	69 85       	ldd	r22, Y+9	; 0x09
 3ae:	7a 85       	ldd	r23, Y+10	; 0x0a
 3b0:	8b 85       	ldd	r24, Y+11	; 0x0b
 3b2:	9c 85       	ldd	r25, Y+12	; 0x0c
 3b4:	05 d2       	rcall	.+1034   	; 0x7c0 <__mulsf3>
 3b6:	2b 01       	movw	r4, r22
 3b8:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
 3ba:	20 e0       	ldi	r18, 0x00	; 0
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	40 e8       	ldi	r20, 0x80	; 128
 3c0:	5f e3       	ldi	r21, 0x3F	; 63
 3c2:	b0 d0       	rcall	.+352    	; 0x524 <__cmpsf2>
 3c4:	88 23       	and	r24, r24
 3c6:	14 f1       	brlt	.+68     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		__ticks = 1;
	else if (__tmp > 65535)
 3c8:	20 e0       	ldi	r18, 0x00	; 0
 3ca:	3f ef       	ldi	r19, 0xFF	; 255
 3cc:	4f e7       	ldi	r20, 0x7F	; 127
 3ce:	57 e4       	ldi	r21, 0x47	; 71
 3d0:	c3 01       	movw	r24, r6
 3d2:	b2 01       	movw	r22, r4
 3d4:	f1 d1       	rcall	.+994    	; 0x7b8 <__gesf2>
 3d6:	18 16       	cp	r1, r24
 3d8:	ac f4       	brge	.+42     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3da:	20 e0       	ldi	r18, 0x00	; 0
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	40 e2       	ldi	r20, 0x20	; 32
 3e0:	51 e4       	ldi	r21, 0x41	; 65
 3e2:	69 85       	ldd	r22, Y+9	; 0x09
 3e4:	7a 85       	ldd	r23, Y+10	; 0x0a
 3e6:	8b 85       	ldd	r24, Y+11	; 0x0b
 3e8:	9c 85       	ldd	r25, Y+12	; 0x0c
 3ea:	ea d1       	rcall	.+980    	; 0x7c0 <__mulsf3>
 3ec:	07 d1       	rcall	.+526    	; 0x5fc <__fixunssfsi>
 3ee:	06 c0       	rjmp	.+12     	; 0x3fc <SM_moveTime+0x136>
 3f0:	80 e9       	ldi	r24, 0x90	; 144
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <SM_moveTime+0x12e>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3f8:	61 50       	subi	r22, 0x01	; 1
 3fa:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3fc:	61 15       	cp	r22, r1
 3fe:	71 05       	cpc	r23, r1
 400:	b9 f7       	brne	.-18     	; 0x3f0 <SM_moveTime+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 402:	09 c0       	rjmp	.+18     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 404:	c3 01       	movw	r24, r6
 406:	b2 01       	movw	r22, r4
 408:	f9 d0       	rcall	.+498    	; 0x5fc <__fixunssfsi>
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 40c:	61 e0       	ldi	r22, 0x01	; 1
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	cb 01       	movw	r24, r22
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>

void SM_moveTime(StepperMotorRunMode_t mode, bool direction, double time, double stepTime)
{
    StepperMotorModeData_t data = getModeAndSteps(mode, 0);

    for(uint32_t i = 0, j = (direction ? data.arraySize : 0); i < (time / stepTime); i++)
 416:	8f ef       	ldi	r24, 0xFF	; 255
 418:	88 1a       	sub	r8, r24
 41a:	98 0a       	sbc	r9, r24
 41c:	a8 0a       	sbc	r10, r24
 41e:	b8 0a       	sbc	r11, r24
 420:	c5 01       	movw	r24, r10
 422:	b4 01       	movw	r22, r8
 424:	17 d1       	rcall	.+558    	; 0x654 <__floatunsisf>
 426:	2b 01       	movw	r4, r22
 428:	3c 01       	movw	r6, r24
 42a:	29 85       	ldd	r18, Y+9	; 0x09
 42c:	3a 85       	ldd	r19, Y+10	; 0x0a
 42e:	4b 85       	ldd	r20, Y+11	; 0x0b
 430:	5c 85       	ldd	r21, Y+12	; 0x0c
 432:	6d 85       	ldd	r22, Y+13	; 0x0d
 434:	7e 85       	ldd	r23, Y+14	; 0x0e
 436:	8f 85       	ldd	r24, Y+15	; 0x0f
 438:	98 89       	ldd	r25, Y+16	; 0x10
 43a:	78 d0       	rcall	.+240    	; 0x52c <__divsf3>
 43c:	9b 01       	movw	r18, r22
 43e:	ac 01       	movw	r20, r24
 440:	c3 01       	movw	r24, r6
 442:	b2 01       	movw	r22, r4
 444:	6f d0       	rcall	.+222    	; 0x524 <__cmpsf2>
 446:	88 23       	and	r24, r24
 448:	0c f4       	brge	.+2      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 44a:	79 cf       	rjmp	.-270    	; 0x33e <SM_moveTime+0x78>
        }

        _delay_ms(stepTime);
    }

    *sMotorPort = *sMotorPort & 0xf0;
 44c:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <__data_end>
 450:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <__data_end+0x1>
 454:	80 81       	ld	r24, Z
 456:	80 7f       	andi	r24, 0xF0	; 240
 458:	80 83       	st	Z, r24
}
 45a:	60 96       	adiw	r28, 0x10	; 16
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	f8 94       	cli
 460:	de bf       	out	0x3e, r29	; 62
 462:	0f be       	out	0x3f, r0	; 63
 464:	cd bf       	out	0x3d, r28	; 61
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	1f 91       	pop	r17
 46c:	0f 91       	pop	r16
 46e:	ff 90       	pop	r15
 470:	ef 90       	pop	r14
 472:	df 90       	pop	r13
 474:	cf 90       	pop	r12
 476:	bf 90       	pop	r11
 478:	af 90       	pop	r10
 47a:	9f 90       	pop	r9
 47c:	8f 90       	pop	r8
 47e:	7f 90       	pop	r7
 480:	6f 90       	pop	r6
 482:	5f 90       	pop	r5
 484:	4f 90       	pop	r4
 486:	3f 90       	pop	r3
 488:	08 95       	ret

0000048a <IO_init>:

/* NOTE: Function implementations */
void IO_init(void)
{
    // port c.4 is the limit switch
    DDRC  = 0x00;
 48a:	17 b8       	out	0x07, r1	; 7
    PORTC = 0x10;
 48c:	80 e1       	ldi	r24, 0x10	; 16
 48e:	88 b9       	out	0x08, r24	; 8

    // port a.0-1 are for left and right
    DDRA  = 0x00;
 490:	11 b8       	out	0x01, r1	; 1
    PORTA = 0x03;
 492:	83 e0       	ldi	r24, 0x03	; 3
 494:	82 b9       	out	0x02, r24	; 2
 496:	08 95       	ret

00000498 <main>:

/* NOTE: Application implementation */
// the main loop of the function, provided to us
int main(void)
{
    IO_init();
 498:	f8 df       	rcall	.-16     	; 0x48a <IO_init>

    // in this case, 1 is CCW, and 0 is CW
    // pass in the port and register we want to use for the motor
    SM_init(&DDRC, &PORTC);
 49a:	68 e2       	ldi	r22, 0x28	; 40
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	87 e2       	ldi	r24, 0x27	; 39
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	40 de       	rcall	.-896    	; 0x124 <SM_init>
            record needs to save the the actions to a LL and store them in eeprom

            action needs to be able to move the crane
        */

        switch(applicationState)
 4a4:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <applicationState>
 4a8:	81 30       	cpi	r24, 0x01	; 1
 4aa:	d9 f4       	brne	.+54     	; 0x4e2 <main+0x4a>
        {
            // the action case
            case actionState:
            {
                if(rightButton)
 4ac:	01 9b       	sbis	0x00, 1	; 0
 4ae:	0b c0       	rjmp	.+22     	; 0x4c6 <main+0x2e>
                {
                    SM_moveTime(stepperModeHalf, 0, 90, 3);
 4b0:	e1 2c       	mov	r14, r1
 4b2:	f1 2c       	mov	r15, r1
 4b4:	00 e4       	ldi	r16, 0x40	; 64
 4b6:	10 e4       	ldi	r17, 0x40	; 64
 4b8:	20 e0       	ldi	r18, 0x00	; 0
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	44 eb       	ldi	r20, 0xB4	; 180
 4be:	52 e4       	ldi	r21, 0x42	; 66
 4c0:	60 e0       	ldi	r22, 0x00	; 0
 4c2:	82 e0       	ldi	r24, 0x02	; 2
 4c4:	00 df       	rcall	.-512    	; 0x2c6 <SM_moveTime>
                }

                if(leftButton)
 4c6:	00 9b       	sbis	0x00, 0	; 0
 4c8:	ed cf       	rjmp	.-38     	; 0x4a4 <main+0xc>
                {
                    SM_moveTime(stepperModeHalf, 1, 90, 3);
 4ca:	e1 2c       	mov	r14, r1
 4cc:	f1 2c       	mov	r15, r1
 4ce:	00 e4       	ldi	r16, 0x40	; 64
 4d0:	10 e4       	ldi	r17, 0x40	; 64
 4d2:	20 e0       	ldi	r18, 0x00	; 0
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	44 eb       	ldi	r20, 0xB4	; 180
 4d8:	52 e4       	ldi	r21, 0x42	; 66
 4da:	61 e0       	ldi	r22, 0x01	; 1
 4dc:	82 e0       	ldi	r24, 0x02	; 2
 4de:	f3 de       	rcall	.-538    	; 0x2c6 <SM_moveTime>
 4e0:	e1 cf       	rjmp	.-62     	; 0x4a4 <main+0xc>
            // the default case will be the home case
            case calibrateState:
            default:
            {
                // move CW for one second to ensure the limit switch is not set
                SM_moveTime(stepperModeHalf, 0, 1000, 3);
 4e2:	e1 2c       	mov	r14, r1
 4e4:	f1 2c       	mov	r15, r1
 4e6:	00 e4       	ldi	r16, 0x40	; 64
 4e8:	10 e4       	ldi	r17, 0x40	; 64
 4ea:	20 e0       	ldi	r18, 0x00	; 0
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	4a e7       	ldi	r20, 0x7A	; 122
 4f0:	54 e4       	ldi	r21, 0x44	; 68
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	82 e0       	ldi	r24, 0x02	; 2
 4f6:	e7 de       	rcall	.-562    	; 0x2c6 <SM_moveTime>

                // while not hitting the switch
                while(!limitSwitch)
 4f8:	0b c0       	rjmp	.+22     	; 0x510 <main+0x78>
                {
                    // then move CCW a bit at the time until we hit the limit switch
                    SM_moveTime(stepperModeHalf, 1, 12, 3);
 4fa:	e1 2c       	mov	r14, r1
 4fc:	f1 2c       	mov	r15, r1
 4fe:	00 e4       	ldi	r16, 0x40	; 64
 500:	10 e4       	ldi	r17, 0x40	; 64
 502:	20 e0       	ldi	r18, 0x00	; 0
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	40 e4       	ldi	r20, 0x40	; 64
 508:	51 e4       	ldi	r21, 0x41	; 65
 50a:	61 e0       	ldi	r22, 0x01	; 1
 50c:	82 e0       	ldi	r24, 0x02	; 2
 50e:	db de       	rcall	.-586    	; 0x2c6 <SM_moveTime>
            {
                // move CW for one second to ensure the limit switch is not set
                SM_moveTime(stepperModeHalf, 0, 1000, 3);

                // while not hitting the switch
                while(!limitSwitch)
 510:	34 9b       	sbis	0x06, 4	; 6
 512:	f3 cf       	rjmp	.-26     	; 0x4fa <main+0x62>
                    // then move CCW a bit at the time until we hit the limit switch
                    SM_moveTime(stepperModeHalf, 1, 12, 3);
                }

                // then move 30 degrees back to center the arm
                SM_movePosition(stepperModeHalf, 35);
 514:	63 e2       	ldi	r22, 0x23	; 35
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	82 e0       	ldi	r24, 0x02	; 2
 51a:	c5 de       	rcall	.-630    	; 0x2a6 <SM_movePosition>
 51c:	81 e0       	ldi	r24, 0x01	; 1

                // then set it to action state
                applicationState = actionState;
 51e:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <applicationState>
 522:	c0 cf       	rjmp	.-128    	; 0x4a4 <main+0xc>

00000524 <__cmpsf2>:
            }
            break;
 524:	d4 d0       	rcall	.+424    	; 0x6ce <__fp_cmp>
 526:	08 f4       	brcc	.+2      	; 0x52a <__cmpsf2+0x6>
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	08 95       	ret

0000052c <__divsf3>:
 52c:	0c d0       	rcall	.+24     	; 0x546 <__divsf3x>
 52e:	0a c1       	rjmp	.+532    	; 0x744 <__fp_round>
 530:	02 d1       	rcall	.+516    	; 0x736 <__fp_pscB>
 532:	40 f0       	brcs	.+16     	; 0x544 <__divsf3+0x18>
 534:	f9 d0       	rcall	.+498    	; 0x728 <__fp_pscA>
 536:	30 f0       	brcs	.+12     	; 0x544 <__divsf3+0x18>
 538:	21 f4       	brne	.+8      	; 0x542 <__divsf3+0x16>
 53a:	5f 3f       	cpi	r21, 0xFF	; 255
 53c:	19 f0       	breq	.+6      	; 0x544 <__divsf3+0x18>
 53e:	eb c0       	rjmp	.+470    	; 0x716 <__fp_inf>
 540:	51 11       	cpse	r21, r1
 542:	34 c1       	rjmp	.+616    	; 0x7ac <__fp_szero>
 544:	ee c0       	rjmp	.+476    	; 0x722 <__fp_nan>

00000546 <__divsf3x>:
 546:	0f d1       	rcall	.+542    	; 0x766 <__fp_split3>
 548:	98 f3       	brcs	.-26     	; 0x530 <__divsf3+0x4>

0000054a <__divsf3_pse>:
 54a:	99 23       	and	r25, r25
 54c:	c9 f3       	breq	.-14     	; 0x540 <__divsf3+0x14>
 54e:	55 23       	and	r21, r21
 550:	b1 f3       	breq	.-20     	; 0x53e <__divsf3+0x12>
 552:	95 1b       	sub	r25, r21
 554:	55 0b       	sbc	r21, r21
 556:	bb 27       	eor	r27, r27
 558:	aa 27       	eor	r26, r26
 55a:	62 17       	cp	r22, r18
 55c:	73 07       	cpc	r23, r19
 55e:	84 07       	cpc	r24, r20
 560:	38 f0       	brcs	.+14     	; 0x570 <__divsf3_pse+0x26>
 562:	9f 5f       	subi	r25, 0xFF	; 255
 564:	5f 4f       	sbci	r21, 0xFF	; 255
 566:	22 0f       	add	r18, r18
 568:	33 1f       	adc	r19, r19
 56a:	44 1f       	adc	r20, r20
 56c:	aa 1f       	adc	r26, r26
 56e:	a9 f3       	breq	.-22     	; 0x55a <__divsf3_pse+0x10>
 570:	33 d0       	rcall	.+102    	; 0x5d8 <__divsf3_pse+0x8e>
 572:	0e 2e       	mov	r0, r30
 574:	3a f0       	brmi	.+14     	; 0x584 <__divsf3_pse+0x3a>
 576:	e0 e8       	ldi	r30, 0x80	; 128
 578:	30 d0       	rcall	.+96     	; 0x5da <__divsf3_pse+0x90>
 57a:	91 50       	subi	r25, 0x01	; 1
 57c:	50 40       	sbci	r21, 0x00	; 0
 57e:	e6 95       	lsr	r30
 580:	00 1c       	adc	r0, r0
 582:	ca f7       	brpl	.-14     	; 0x576 <__divsf3_pse+0x2c>
 584:	29 d0       	rcall	.+82     	; 0x5d8 <__divsf3_pse+0x8e>
 586:	fe 2f       	mov	r31, r30
 588:	27 d0       	rcall	.+78     	; 0x5d8 <__divsf3_pse+0x8e>
 58a:	66 0f       	add	r22, r22
 58c:	77 1f       	adc	r23, r23
 58e:	88 1f       	adc	r24, r24
 590:	bb 1f       	adc	r27, r27
 592:	26 17       	cp	r18, r22
 594:	37 07       	cpc	r19, r23
 596:	48 07       	cpc	r20, r24
 598:	ab 07       	cpc	r26, r27
 59a:	b0 e8       	ldi	r27, 0x80	; 128
 59c:	09 f0       	breq	.+2      	; 0x5a0 <__divsf3_pse+0x56>
 59e:	bb 0b       	sbc	r27, r27
 5a0:	80 2d       	mov	r24, r0
 5a2:	bf 01       	movw	r22, r30
 5a4:	ff 27       	eor	r31, r31
 5a6:	93 58       	subi	r25, 0x83	; 131
 5a8:	5f 4f       	sbci	r21, 0xFF	; 255
 5aa:	2a f0       	brmi	.+10     	; 0x5b6 <__divsf3_pse+0x6c>
 5ac:	9e 3f       	cpi	r25, 0xFE	; 254
 5ae:	51 05       	cpc	r21, r1
 5b0:	68 f0       	brcs	.+26     	; 0x5cc <__divsf3_pse+0x82>
 5b2:	b1 c0       	rjmp	.+354    	; 0x716 <__fp_inf>
 5b4:	fb c0       	rjmp	.+502    	; 0x7ac <__fp_szero>
 5b6:	5f 3f       	cpi	r21, 0xFF	; 255
 5b8:	ec f3       	brlt	.-6      	; 0x5b4 <__divsf3_pse+0x6a>
 5ba:	98 3e       	cpi	r25, 0xE8	; 232
 5bc:	dc f3       	brlt	.-10     	; 0x5b4 <__divsf3_pse+0x6a>
 5be:	86 95       	lsr	r24
 5c0:	77 95       	ror	r23
 5c2:	67 95       	ror	r22
 5c4:	b7 95       	ror	r27
 5c6:	f7 95       	ror	r31
 5c8:	9f 5f       	subi	r25, 0xFF	; 255
 5ca:	c9 f7       	brne	.-14     	; 0x5be <__divsf3_pse+0x74>
 5cc:	88 0f       	add	r24, r24
 5ce:	91 1d       	adc	r25, r1
 5d0:	96 95       	lsr	r25
 5d2:	87 95       	ror	r24
 5d4:	97 f9       	bld	r25, 7
 5d6:	08 95       	ret
 5d8:	e1 e0       	ldi	r30, 0x01	; 1
 5da:	66 0f       	add	r22, r22
 5dc:	77 1f       	adc	r23, r23
 5de:	88 1f       	adc	r24, r24
 5e0:	bb 1f       	adc	r27, r27
 5e2:	62 17       	cp	r22, r18
 5e4:	73 07       	cpc	r23, r19
 5e6:	84 07       	cpc	r24, r20
 5e8:	ba 07       	cpc	r27, r26
 5ea:	20 f0       	brcs	.+8      	; 0x5f4 <__divsf3_pse+0xaa>
 5ec:	62 1b       	sub	r22, r18
 5ee:	73 0b       	sbc	r23, r19
 5f0:	84 0b       	sbc	r24, r20
 5f2:	ba 0b       	sbc	r27, r26
 5f4:	ee 1f       	adc	r30, r30
 5f6:	88 f7       	brcc	.-30     	; 0x5da <__divsf3_pse+0x90>
 5f8:	e0 95       	com	r30
 5fa:	08 95       	ret

000005fc <__fixunssfsi>:
 5fc:	bc d0       	rcall	.+376    	; 0x776 <__fp_splitA>
 5fe:	88 f0       	brcs	.+34     	; 0x622 <__fixunssfsi+0x26>
 600:	9f 57       	subi	r25, 0x7F	; 127
 602:	90 f0       	brcs	.+36     	; 0x628 <__fixunssfsi+0x2c>
 604:	b9 2f       	mov	r27, r25
 606:	99 27       	eor	r25, r25
 608:	b7 51       	subi	r27, 0x17	; 23
 60a:	a0 f0       	brcs	.+40     	; 0x634 <__fixunssfsi+0x38>
 60c:	d1 f0       	breq	.+52     	; 0x642 <__fixunssfsi+0x46>
 60e:	66 0f       	add	r22, r22
 610:	77 1f       	adc	r23, r23
 612:	88 1f       	adc	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	1a f0       	brmi	.+6      	; 0x61e <__fixunssfsi+0x22>
 618:	ba 95       	dec	r27
 61a:	c9 f7       	brne	.-14     	; 0x60e <__fixunssfsi+0x12>
 61c:	12 c0       	rjmp	.+36     	; 0x642 <__fixunssfsi+0x46>
 61e:	b1 30       	cpi	r27, 0x01	; 1
 620:	81 f0       	breq	.+32     	; 0x642 <__fixunssfsi+0x46>
 622:	c3 d0       	rcall	.+390    	; 0x7aa <__fp_zero>
 624:	b1 e0       	ldi	r27, 0x01	; 1
 626:	08 95       	ret
 628:	c0 c0       	rjmp	.+384    	; 0x7aa <__fp_zero>
 62a:	67 2f       	mov	r22, r23
 62c:	78 2f       	mov	r23, r24
 62e:	88 27       	eor	r24, r24
 630:	b8 5f       	subi	r27, 0xF8	; 248
 632:	39 f0       	breq	.+14     	; 0x642 <__fixunssfsi+0x46>
 634:	b9 3f       	cpi	r27, 0xF9	; 249
 636:	cc f3       	brlt	.-14     	; 0x62a <__fixunssfsi+0x2e>
 638:	86 95       	lsr	r24
 63a:	77 95       	ror	r23
 63c:	67 95       	ror	r22
 63e:	b3 95       	inc	r27
 640:	d9 f7       	brne	.-10     	; 0x638 <__fixunssfsi+0x3c>
 642:	3e f4       	brtc	.+14     	; 0x652 <__fixunssfsi+0x56>
 644:	90 95       	com	r25
 646:	80 95       	com	r24
 648:	70 95       	com	r23
 64a:	61 95       	neg	r22
 64c:	7f 4f       	sbci	r23, 0xFF	; 255
 64e:	8f 4f       	sbci	r24, 0xFF	; 255
 650:	9f 4f       	sbci	r25, 0xFF	; 255
 652:	08 95       	ret

00000654 <__floatunsisf>:
 654:	e8 94       	clt
 656:	09 c0       	rjmp	.+18     	; 0x66a <__floatsisf+0x12>

00000658 <__floatsisf>:
 658:	97 fb       	bst	r25, 7
 65a:	3e f4       	brtc	.+14     	; 0x66a <__floatsisf+0x12>
 65c:	90 95       	com	r25
 65e:	80 95       	com	r24
 660:	70 95       	com	r23
 662:	61 95       	neg	r22
 664:	7f 4f       	sbci	r23, 0xFF	; 255
 666:	8f 4f       	sbci	r24, 0xFF	; 255
 668:	9f 4f       	sbci	r25, 0xFF	; 255
 66a:	99 23       	and	r25, r25
 66c:	a9 f0       	breq	.+42     	; 0x698 <__floatsisf+0x40>
 66e:	f9 2f       	mov	r31, r25
 670:	96 e9       	ldi	r25, 0x96	; 150
 672:	bb 27       	eor	r27, r27
 674:	93 95       	inc	r25
 676:	f6 95       	lsr	r31
 678:	87 95       	ror	r24
 67a:	77 95       	ror	r23
 67c:	67 95       	ror	r22
 67e:	b7 95       	ror	r27
 680:	f1 11       	cpse	r31, r1
 682:	f8 cf       	rjmp	.-16     	; 0x674 <__floatsisf+0x1c>
 684:	fa f4       	brpl	.+62     	; 0x6c4 <__floatsisf+0x6c>
 686:	bb 0f       	add	r27, r27
 688:	11 f4       	brne	.+4      	; 0x68e <__floatsisf+0x36>
 68a:	60 ff       	sbrs	r22, 0
 68c:	1b c0       	rjmp	.+54     	; 0x6c4 <__floatsisf+0x6c>
 68e:	6f 5f       	subi	r22, 0xFF	; 255
 690:	7f 4f       	sbci	r23, 0xFF	; 255
 692:	8f 4f       	sbci	r24, 0xFF	; 255
 694:	9f 4f       	sbci	r25, 0xFF	; 255
 696:	16 c0       	rjmp	.+44     	; 0x6c4 <__floatsisf+0x6c>
 698:	88 23       	and	r24, r24
 69a:	11 f0       	breq	.+4      	; 0x6a0 <__floatsisf+0x48>
 69c:	96 e9       	ldi	r25, 0x96	; 150
 69e:	11 c0       	rjmp	.+34     	; 0x6c2 <__floatsisf+0x6a>
 6a0:	77 23       	and	r23, r23
 6a2:	21 f0       	breq	.+8      	; 0x6ac <__floatsisf+0x54>
 6a4:	9e e8       	ldi	r25, 0x8E	; 142
 6a6:	87 2f       	mov	r24, r23
 6a8:	76 2f       	mov	r23, r22
 6aa:	05 c0       	rjmp	.+10     	; 0x6b6 <__floatsisf+0x5e>
 6ac:	66 23       	and	r22, r22
 6ae:	71 f0       	breq	.+28     	; 0x6cc <__floatsisf+0x74>
 6b0:	96 e8       	ldi	r25, 0x86	; 134
 6b2:	86 2f       	mov	r24, r22
 6b4:	70 e0       	ldi	r23, 0x00	; 0
 6b6:	60 e0       	ldi	r22, 0x00	; 0
 6b8:	2a f0       	brmi	.+10     	; 0x6c4 <__floatsisf+0x6c>
 6ba:	9a 95       	dec	r25
 6bc:	66 0f       	add	r22, r22
 6be:	77 1f       	adc	r23, r23
 6c0:	88 1f       	adc	r24, r24
 6c2:	da f7       	brpl	.-10     	; 0x6ba <__floatsisf+0x62>
 6c4:	88 0f       	add	r24, r24
 6c6:	96 95       	lsr	r25
 6c8:	87 95       	ror	r24
 6ca:	97 f9       	bld	r25, 7
 6cc:	08 95       	ret

000006ce <__fp_cmp>:
 6ce:	99 0f       	add	r25, r25
 6d0:	00 08       	sbc	r0, r0
 6d2:	55 0f       	add	r21, r21
 6d4:	aa 0b       	sbc	r26, r26
 6d6:	e0 e8       	ldi	r30, 0x80	; 128
 6d8:	fe ef       	ldi	r31, 0xFE	; 254
 6da:	16 16       	cp	r1, r22
 6dc:	17 06       	cpc	r1, r23
 6de:	e8 07       	cpc	r30, r24
 6e0:	f9 07       	cpc	r31, r25
 6e2:	c0 f0       	brcs	.+48     	; 0x714 <__fp_cmp+0x46>
 6e4:	12 16       	cp	r1, r18
 6e6:	13 06       	cpc	r1, r19
 6e8:	e4 07       	cpc	r30, r20
 6ea:	f5 07       	cpc	r31, r21
 6ec:	98 f0       	brcs	.+38     	; 0x714 <__fp_cmp+0x46>
 6ee:	62 1b       	sub	r22, r18
 6f0:	73 0b       	sbc	r23, r19
 6f2:	84 0b       	sbc	r24, r20
 6f4:	95 0b       	sbc	r25, r21
 6f6:	39 f4       	brne	.+14     	; 0x706 <__fp_cmp+0x38>
 6f8:	0a 26       	eor	r0, r26
 6fa:	61 f0       	breq	.+24     	; 0x714 <__fp_cmp+0x46>
 6fc:	23 2b       	or	r18, r19
 6fe:	24 2b       	or	r18, r20
 700:	25 2b       	or	r18, r21
 702:	21 f4       	brne	.+8      	; 0x70c <__fp_cmp+0x3e>
 704:	08 95       	ret
 706:	0a 26       	eor	r0, r26
 708:	09 f4       	brne	.+2      	; 0x70c <__fp_cmp+0x3e>
 70a:	a1 40       	sbci	r26, 0x01	; 1
 70c:	a6 95       	lsr	r26
 70e:	8f ef       	ldi	r24, 0xFF	; 255
 710:	81 1d       	adc	r24, r1
 712:	81 1d       	adc	r24, r1
 714:	08 95       	ret

00000716 <__fp_inf>:
 716:	97 f9       	bld	r25, 7
 718:	9f 67       	ori	r25, 0x7F	; 127
 71a:	80 e8       	ldi	r24, 0x80	; 128
 71c:	70 e0       	ldi	r23, 0x00	; 0
 71e:	60 e0       	ldi	r22, 0x00	; 0
 720:	08 95       	ret

00000722 <__fp_nan>:
 722:	9f ef       	ldi	r25, 0xFF	; 255
 724:	80 ec       	ldi	r24, 0xC0	; 192
 726:	08 95       	ret

00000728 <__fp_pscA>:
 728:	00 24       	eor	r0, r0
 72a:	0a 94       	dec	r0
 72c:	16 16       	cp	r1, r22
 72e:	17 06       	cpc	r1, r23
 730:	18 06       	cpc	r1, r24
 732:	09 06       	cpc	r0, r25
 734:	08 95       	ret

00000736 <__fp_pscB>:
 736:	00 24       	eor	r0, r0
 738:	0a 94       	dec	r0
 73a:	12 16       	cp	r1, r18
 73c:	13 06       	cpc	r1, r19
 73e:	14 06       	cpc	r1, r20
 740:	05 06       	cpc	r0, r21
 742:	08 95       	ret

00000744 <__fp_round>:
 744:	09 2e       	mov	r0, r25
 746:	03 94       	inc	r0
 748:	00 0c       	add	r0, r0
 74a:	11 f4       	brne	.+4      	; 0x750 <__fp_round+0xc>
 74c:	88 23       	and	r24, r24
 74e:	52 f0       	brmi	.+20     	; 0x764 <__fp_round+0x20>
 750:	bb 0f       	add	r27, r27
 752:	40 f4       	brcc	.+16     	; 0x764 <__fp_round+0x20>
 754:	bf 2b       	or	r27, r31
 756:	11 f4       	brne	.+4      	; 0x75c <__fp_round+0x18>
 758:	60 ff       	sbrs	r22, 0
 75a:	04 c0       	rjmp	.+8      	; 0x764 <__fp_round+0x20>
 75c:	6f 5f       	subi	r22, 0xFF	; 255
 75e:	7f 4f       	sbci	r23, 0xFF	; 255
 760:	8f 4f       	sbci	r24, 0xFF	; 255
 762:	9f 4f       	sbci	r25, 0xFF	; 255
 764:	08 95       	ret

00000766 <__fp_split3>:
 766:	57 fd       	sbrc	r21, 7
 768:	90 58       	subi	r25, 0x80	; 128
 76a:	44 0f       	add	r20, r20
 76c:	55 1f       	adc	r21, r21
 76e:	59 f0       	breq	.+22     	; 0x786 <__fp_splitA+0x10>
 770:	5f 3f       	cpi	r21, 0xFF	; 255
 772:	71 f0       	breq	.+28     	; 0x790 <__fp_splitA+0x1a>
 774:	47 95       	ror	r20

00000776 <__fp_splitA>:
 776:	88 0f       	add	r24, r24
 778:	97 fb       	bst	r25, 7
 77a:	99 1f       	adc	r25, r25
 77c:	61 f0       	breq	.+24     	; 0x796 <__fp_splitA+0x20>
 77e:	9f 3f       	cpi	r25, 0xFF	; 255
 780:	79 f0       	breq	.+30     	; 0x7a0 <__fp_splitA+0x2a>
 782:	87 95       	ror	r24
 784:	08 95       	ret
 786:	12 16       	cp	r1, r18
 788:	13 06       	cpc	r1, r19
 78a:	14 06       	cpc	r1, r20
 78c:	55 1f       	adc	r21, r21
 78e:	f2 cf       	rjmp	.-28     	; 0x774 <__fp_split3+0xe>
 790:	46 95       	lsr	r20
 792:	f1 df       	rcall	.-30     	; 0x776 <__fp_splitA>
 794:	08 c0       	rjmp	.+16     	; 0x7a6 <__fp_splitA+0x30>
 796:	16 16       	cp	r1, r22
 798:	17 06       	cpc	r1, r23
 79a:	18 06       	cpc	r1, r24
 79c:	99 1f       	adc	r25, r25
 79e:	f1 cf       	rjmp	.-30     	; 0x782 <__fp_splitA+0xc>
 7a0:	86 95       	lsr	r24
 7a2:	71 05       	cpc	r23, r1
 7a4:	61 05       	cpc	r22, r1
 7a6:	08 94       	sec
 7a8:	08 95       	ret

000007aa <__fp_zero>:
 7aa:	e8 94       	clt

000007ac <__fp_szero>:
 7ac:	bb 27       	eor	r27, r27
 7ae:	66 27       	eor	r22, r22
 7b0:	77 27       	eor	r23, r23
 7b2:	cb 01       	movw	r24, r22
 7b4:	97 f9       	bld	r25, 7
 7b6:	08 95       	ret

000007b8 <__gesf2>:
 7b8:	8a df       	rcall	.-236    	; 0x6ce <__fp_cmp>
 7ba:	08 f4       	brcc	.+2      	; 0x7be <__gesf2+0x6>
 7bc:	8f ef       	ldi	r24, 0xFF	; 255
 7be:	08 95       	ret

000007c0 <__mulsf3>:
 7c0:	0b d0       	rcall	.+22     	; 0x7d8 <__mulsf3x>
 7c2:	c0 cf       	rjmp	.-128    	; 0x744 <__fp_round>
 7c4:	b1 df       	rcall	.-158    	; 0x728 <__fp_pscA>
 7c6:	28 f0       	brcs	.+10     	; 0x7d2 <__mulsf3+0x12>
 7c8:	b6 df       	rcall	.-148    	; 0x736 <__fp_pscB>
 7ca:	18 f0       	brcs	.+6      	; 0x7d2 <__mulsf3+0x12>
 7cc:	95 23       	and	r25, r21
 7ce:	09 f0       	breq	.+2      	; 0x7d2 <__mulsf3+0x12>
 7d0:	a2 cf       	rjmp	.-188    	; 0x716 <__fp_inf>
 7d2:	a7 cf       	rjmp	.-178    	; 0x722 <__fp_nan>
 7d4:	11 24       	eor	r1, r1
 7d6:	ea cf       	rjmp	.-44     	; 0x7ac <__fp_szero>

000007d8 <__mulsf3x>:
 7d8:	c6 df       	rcall	.-116    	; 0x766 <__fp_split3>
 7da:	a0 f3       	brcs	.-24     	; 0x7c4 <__mulsf3+0x4>

000007dc <__mulsf3_pse>:
 7dc:	95 9f       	mul	r25, r21
 7de:	d1 f3       	breq	.-12     	; 0x7d4 <__mulsf3+0x14>
 7e0:	95 0f       	add	r25, r21
 7e2:	50 e0       	ldi	r21, 0x00	; 0
 7e4:	55 1f       	adc	r21, r21
 7e6:	62 9f       	mul	r22, r18
 7e8:	f0 01       	movw	r30, r0
 7ea:	72 9f       	mul	r23, r18
 7ec:	bb 27       	eor	r27, r27
 7ee:	f0 0d       	add	r31, r0
 7f0:	b1 1d       	adc	r27, r1
 7f2:	63 9f       	mul	r22, r19
 7f4:	aa 27       	eor	r26, r26
 7f6:	f0 0d       	add	r31, r0
 7f8:	b1 1d       	adc	r27, r1
 7fa:	aa 1f       	adc	r26, r26
 7fc:	64 9f       	mul	r22, r20
 7fe:	66 27       	eor	r22, r22
 800:	b0 0d       	add	r27, r0
 802:	a1 1d       	adc	r26, r1
 804:	66 1f       	adc	r22, r22
 806:	82 9f       	mul	r24, r18
 808:	22 27       	eor	r18, r18
 80a:	b0 0d       	add	r27, r0
 80c:	a1 1d       	adc	r26, r1
 80e:	62 1f       	adc	r22, r18
 810:	73 9f       	mul	r23, r19
 812:	b0 0d       	add	r27, r0
 814:	a1 1d       	adc	r26, r1
 816:	62 1f       	adc	r22, r18
 818:	83 9f       	mul	r24, r19
 81a:	a0 0d       	add	r26, r0
 81c:	61 1d       	adc	r22, r1
 81e:	22 1f       	adc	r18, r18
 820:	74 9f       	mul	r23, r20
 822:	33 27       	eor	r19, r19
 824:	a0 0d       	add	r26, r0
 826:	61 1d       	adc	r22, r1
 828:	23 1f       	adc	r18, r19
 82a:	84 9f       	mul	r24, r20
 82c:	60 0d       	add	r22, r0
 82e:	21 1d       	adc	r18, r1
 830:	82 2f       	mov	r24, r18
 832:	76 2f       	mov	r23, r22
 834:	6a 2f       	mov	r22, r26
 836:	11 24       	eor	r1, r1
 838:	9f 57       	subi	r25, 0x7F	; 127
 83a:	50 40       	sbci	r21, 0x00	; 0
 83c:	8a f0       	brmi	.+34     	; 0x860 <__mulsf3_pse+0x84>
 83e:	e1 f0       	breq	.+56     	; 0x878 <__mulsf3_pse+0x9c>
 840:	88 23       	and	r24, r24
 842:	4a f0       	brmi	.+18     	; 0x856 <__mulsf3_pse+0x7a>
 844:	ee 0f       	add	r30, r30
 846:	ff 1f       	adc	r31, r31
 848:	bb 1f       	adc	r27, r27
 84a:	66 1f       	adc	r22, r22
 84c:	77 1f       	adc	r23, r23
 84e:	88 1f       	adc	r24, r24
 850:	91 50       	subi	r25, 0x01	; 1
 852:	50 40       	sbci	r21, 0x00	; 0
 854:	a9 f7       	brne	.-22     	; 0x840 <__mulsf3_pse+0x64>
 856:	9e 3f       	cpi	r25, 0xFE	; 254
 858:	51 05       	cpc	r21, r1
 85a:	70 f0       	brcs	.+28     	; 0x878 <__mulsf3_pse+0x9c>
 85c:	5c cf       	rjmp	.-328    	; 0x716 <__fp_inf>
 85e:	a6 cf       	rjmp	.-180    	; 0x7ac <__fp_szero>
 860:	5f 3f       	cpi	r21, 0xFF	; 255
 862:	ec f3       	brlt	.-6      	; 0x85e <__mulsf3_pse+0x82>
 864:	98 3e       	cpi	r25, 0xE8	; 232
 866:	dc f3       	brlt	.-10     	; 0x85e <__mulsf3_pse+0x82>
 868:	86 95       	lsr	r24
 86a:	77 95       	ror	r23
 86c:	67 95       	ror	r22
 86e:	b7 95       	ror	r27
 870:	f7 95       	ror	r31
 872:	e7 95       	ror	r30
 874:	9f 5f       	subi	r25, 0xFF	; 255
 876:	c1 f7       	brne	.-16     	; 0x868 <__mulsf3_pse+0x8c>
 878:	fe 2b       	or	r31, r30
 87a:	88 0f       	add	r24, r24
 87c:	91 1d       	adc	r25, r1
 87e:	96 95       	lsr	r25
 880:	87 95       	ror	r24
 882:	97 f9       	bld	r25, 7
 884:	08 95       	ret

00000886 <_exit>:
 886:	f8 94       	cli

00000888 <__stop_program>:
 888:	ff cf       	rjmp	.-2      	; 0x888 <__stop_program>
