
Src.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800200  00000c12  00000ca6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000089  00800254  00800254  00000cfa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cfa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000199f  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001118  00000000  00000000  00002853  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c22  00000000  00000000  0000396b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  00004590  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000959  00000000  00000000  000048e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c1d  00000000  00000000  00005239  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00005e56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	26 c3       	rjmp	.+1612   	; 0x6b2 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	87 c0       	rjmp	.+270    	; 0x184 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e1       	ldi	r30, 0x12	; 18
  fc:	fc e0       	ldi	r31, 0x0C	; 12
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 35       	cpi	r26, 0x54	; 84
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e5       	ldi	r26, 0x54	; 84
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ad 3d       	cpi	r26, 0xDD	; 221
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	15 d3       	rcall	.+1578   	; 0x74a <main>
 120:	76 c5       	rjmp	.+2796   	; 0xc0e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <ADC_init>:
 124:	83 e8       	ldi	r24, 0x83	; 131
 126:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 12a:	80 e4       	ldi	r24, 0x40	; 64
 12c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
 130:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
 134:	08 95       	ret

00000136 <ADC_getTenBitValue>:
 136:	ec e7       	ldi	r30, 0x7C	; 124
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	20 81       	ld	r18, Z
 13c:	20 7e       	andi	r18, 0xE0	; 224
 13e:	28 2b       	or	r18, r24
 140:	20 83       	st	Z, r18
 142:	eb e7       	ldi	r30, 0x7B	; 123
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	20 81       	ld	r18, Z
 148:	96 95       	lsr	r25
 14a:	87 95       	ror	r24
 14c:	96 95       	lsr	r25
 14e:	87 95       	ror	r24
 150:	92 2f       	mov	r25, r18
 152:	97 7f       	andi	r25, 0xF7	; 247
 154:	89 2b       	or	r24, r25
 156:	80 83       	st	Z, r24
 158:	ea e7       	ldi	r30, 0x7A	; 122
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	80 64       	ori	r24, 0x40	; 64
 160:	80 83       	st	Z, r24
 162:	80 81       	ld	r24, Z
 164:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 168:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	79 2f       	mov	r23, r25
 170:	68 2b       	or	r22, r24
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	01 d4       	rcall	.+2050   	; 0x97a <__floatunsisf>
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	40 e8       	ldi	r20, 0x80	; 128
 17e:	5a e3       	ldi	r21, 0x3A	; 58
 180:	b2 c4       	rjmp	.+2404   	; 0xae6 <__mulsf3>
 182:	08 95       	ret

00000184 <__vector_29>:
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	0b b6       	in	r0, 0x3b	; 59
 190:	0f 92       	push	r0
 192:	2f 93       	push	r18
 194:	3f 93       	push	r19
 196:	4f 93       	push	r20
 198:	5f 93       	push	r21
 19a:	6f 93       	push	r22
 19c:	7f 93       	push	r23
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
 1a2:	af 93       	push	r26
 1a4:	bf 93       	push	r27
 1a6:	ef 93       	push	r30
 1a8:	ff 93       	push	r31
 1aa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 1ae:	28 2f       	mov	r18, r24
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	30 93 57 02 	sts	0x0257, r19	; 0x800257 <readInterrupt+0x1>
 1b6:	20 93 56 02 	sts	0x0256, r18	; 0x800256 <readInterrupt>
 1ba:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	98 2f       	mov	r25, r24
 1c2:	88 27       	eor	r24, r24
 1c4:	82 2b       	or	r24, r18
 1c6:	93 2b       	or	r25, r19
 1c8:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <readInterrupt+0x1>
 1cc:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <readInterrupt>
 1d0:	e0 91 54 02 	lds	r30, 0x0254	; 0x800254 <__data_end>
 1d4:	f0 91 55 02 	lds	r31, 0x0255	; 0x800255 <__data_end+0x1>
 1d8:	19 95       	eicall
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	7f 91       	pop	r23
 1e8:	6f 91       	pop	r22
 1ea:	5f 91       	pop	r21
 1ec:	4f 91       	pop	r20
 1ee:	3f 91       	pop	r19
 1f0:	2f 91       	pop	r18
 1f2:	0f 90       	pop	r0
 1f4:	0b be       	out	0x3b, r0	; 59
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <SM_init>:
// instance pointer to the motor port
static uint8_t * sMotorPort;

/* NOTE: Function implementations */
void SM_init(uint8_t volatile * const pRegister, uint8_t volatile * const pPort)
{
 200:	fc 01       	movw	r30, r24
    // configure port register
    *pRegister |= 0x0f;
 202:	90 81       	ld	r25, Z
 204:	9f 60       	ori	r25, 0x0F	; 15
 206:	90 83       	st	Z, r25

    // turn on pullup resisitors on the bottom nibble
    *pPort = (*pPort & 0xf0) | 0x00;
 208:	fb 01       	movw	r30, r22
 20a:	80 81       	ld	r24, Z
 20c:	80 7f       	andi	r24, 0xF0	; 240
 20e:	80 83       	st	Z, r24

    // save the port pointer to the static var
    sMotorPort = (uint8_t *)pPort;
 210:	70 93 59 02 	sts	0x0259, r23	; 0x800259 <sMotorPort+0x1>
 214:	60 93 58 02 	sts	0x0258, r22	; 0x800258 <sMotorPort>
 218:	08 95       	ret

0000021a <getModeAndSteps>:
    *sMotorPort = *sMotorPort & 0xf0;
}

/* NOTE: Local function implementations */
StepperMotorModeData_t getModeAndSteps(StepperMotorRunMode_t mode, double rotation)
{
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	27 97       	sbiw	r28, 0x07	; 7
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	f8 94       	cli
 228:	de bf       	out	0x3e, r29	; 62
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	cd bf       	out	0x3d, r28	; 61
 22e:	28 2f       	mov	r18, r24
 230:	cb 01       	movw	r24, r22
 232:	ba 01       	movw	r22, r20
    uint8_t * pArray;
    uint8_t   size  = 0;
    uint32_t  steps = 0;

    switch(mode)
 234:	21 30       	cpi	r18, 0x01	; 1
 236:	71 f0       	breq	.+28     	; 0x254 <getModeAndSteps+0x3a>
 238:	18 f0       	brcs	.+6      	; 0x240 <getModeAndSteps+0x26>
 23a:	22 30       	cpi	r18, 0x02	; 2
 23c:	a9 f0       	breq	.+42     	; 0x268 <getModeAndSteps+0x4e>
 23e:	1e c0       	rjmp	.+60     	; 0x27c <getModeAndSteps+0x62>
    {
        case stepperModeWave:
        {
            pArray = sWaveStepMap;
            size   = sizeof(sWaveStepMap) / sizeof(sWaveStepMap[0]);
            steps  = (rotation * 2048);
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	55 e4       	ldi	r21, 0x45	; 69
 248:	4e d4       	rcall	.+2204   	; 0xae6 <__mulsf3>
 24a:	6b d3       	rcall	.+1750   	; 0x922 <__fixunssfsi>
    switch(mode)
    {
        case stepperModeWave:
        {
            pArray = sWaveStepMap;
            size   = sizeof(sWaveStepMap) / sizeof(sWaveStepMap[0]);
 24c:	24 e0       	ldi	r18, 0x04	; 4

    switch(mode)
    {
        case stepperModeWave:
        {
            pArray = sWaveStepMap;
 24e:	ec e0       	ldi	r30, 0x0C	; 12
 250:	f2 e0       	ldi	r31, 0x02	; 2
            size   = sizeof(sWaveStepMap) / sizeof(sWaveStepMap[0]);
            steps  = (rotation * 2048);
        }
        break;
 252:	19 c0       	rjmp	.+50     	; 0x286 <getModeAndSteps+0x6c>
        case stepperModeFull:
        {
            pArray = sFullStepMap;
            size   = sizeof(sFullStepMap) / sizeof(sFullStepMap[0]);
            steps  = (rotation * 2048);
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	55 e4       	ldi	r21, 0x45	; 69
 25c:	44 d4       	rcall	.+2184   	; 0xae6 <__mulsf3>
 25e:	61 d3       	rcall	.+1730   	; 0x922 <__fixunssfsi>
        }
        break;
        case stepperModeFull:
        {
            pArray = sFullStepMap;
            size   = sizeof(sFullStepMap) / sizeof(sFullStepMap[0]);
 260:	24 e0       	ldi	r18, 0x04	; 4
            steps  = (rotation * 2048);
        }
        break;
        case stepperModeFull:
        {
            pArray = sFullStepMap;
 262:	e8 e0       	ldi	r30, 0x08	; 8
 264:	f2 e0       	ldi	r31, 0x02	; 2
            size   = sizeof(sFullStepMap) / sizeof(sFullStepMap[0]);
            steps  = (rotation * 2048);
        }
        break;
 266:	0f c0       	rjmp	.+30     	; 0x286 <getModeAndSteps+0x6c>
        case stepperModeHalf:
        {
            pArray = sHalfStepMap;
            size   = sizeof(sHalfStepMap) / sizeof(sHalfStepMap[0]);
            steps  = (rotation * 4096);
 268:	20 e0       	ldi	r18, 0x00	; 0
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	40 e8       	ldi	r20, 0x80	; 128
 26e:	55 e4       	ldi	r21, 0x45	; 69
 270:	3a d4       	rcall	.+2164   	; 0xae6 <__mulsf3>
 272:	57 d3       	rcall	.+1710   	; 0x922 <__fixunssfsi>
        }
        break;
        case stepperModeHalf:
        {
            pArray = sHalfStepMap;
            size   = sizeof(sHalfStepMap) / sizeof(sHalfStepMap[0]);
 274:	28 e0       	ldi	r18, 0x08	; 8
            steps  = (rotation * 2048);
        }
        break;
        case stepperModeHalf:
        {
            pArray = sHalfStepMap;
 276:	e0 e0       	ldi	r30, 0x00	; 0
 278:	f2 e0       	ldi	r31, 0x02	; 2
            size   = sizeof(sHalfStepMap) / sizeof(sHalfStepMap[0]);
            steps  = (rotation * 4096);
        }
        break;
 27a:	05 c0       	rjmp	.+10     	; 0x286 <getModeAndSteps+0x6c>
/* NOTE: Local function implementations */
StepperMotorModeData_t getModeAndSteps(StepperMotorRunMode_t mode, double rotation)
{
    uint8_t * pArray;
    uint8_t   size  = 0;
    uint32_t  steps = 0;
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0

/* NOTE: Local function implementations */
StepperMotorModeData_t getModeAndSteps(StepperMotorRunMode_t mode, double rotation)
{
    uint8_t * pArray;
    uint8_t   size  = 0;
 284:	20 e0       	ldi	r18, 0x00	; 0
        break;
        default:
            break;
    };

    return (StepperMotorModeData_t){
 286:	fb 83       	std	Y+3, r31	; 0x03
 288:	ea 83       	std	Y+2, r30	; 0x02
 28a:	3e 2f       	mov	r19, r30
 28c:	4b 81       	ldd	r20, Y+3	; 0x03
 28e:	56 2f       	mov	r21, r22
 290:	67 2f       	mov	r22, r23
 292:	78 2f       	mov	r23, r24
        .pArray    = pArray,
        .steps     = steps,
        .arraySize = size,
    };
 294:	89 2f       	mov	r24, r25
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	27 96       	adiw	r28, 0x07	; 7
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <SM_move>:
    // save the port pointer to the static var
    sMotorPort = (uint8_t *)pPort;
}

void SM_move(StepperMotorRunMode_t mode, double distance)
{
 2aa:	cf 92       	push	r12
 2ac:	df 92       	push	r13
 2ae:	ef 92       	push	r14
 2b0:	ff 92       	push	r15
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
 2be:	27 97       	sbiw	r28, 0x07	; 7
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	f8 94       	cli
 2c4:	de bf       	out	0x3e, r29	; 62
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	cd bf       	out	0x3d, r28	; 61
    StepperMotorModeData_t data = getModeAndSteps(mode, distance);
 2ca:	a7 df       	rcall	.-178    	; 0x21a <getModeAndSteps>
 2cc:	29 83       	std	Y+1, r18	; 0x01
 2ce:	3a 83       	std	Y+2, r19	; 0x02
 2d0:	4b 83       	std	Y+3, r20	; 0x03
 2d2:	5c 83       	std	Y+4, r21	; 0x04
 2d4:	6d 83       	std	Y+5, r22	; 0x05
 2d6:	7e 83       	std	Y+6, r23	; 0x06
 2d8:	8f 83       	std	Y+7, r24	; 0x07

    for(uint32_t i = 0, j = 0; i < data.steps; i++)
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	dc 01       	movw	r26, r24
 2e0:	40 e0       	ldi	r20, 0x00	; 0
 2e2:	50 e0       	ldi	r21, 0x00	; 0
 2e4:	ba 01       	movw	r22, r20
 2e6:	2d c0       	rjmp	.+90     	; 0x342 <SM_move+0x98>
    {
        *sMotorPort = (*sMotorPort & 0xf0) | data.pArray[j++];
 2e8:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <sMotorPort>
 2ec:	f0 91 59 02 	lds	r31, 0x0259	; 0x800259 <sMotorPort+0x1>
 2f0:	10 81       	ld	r17, Z
 2f2:	2a 81       	ldd	r18, Y+2	; 0x02
 2f4:	3b 81       	ldd	r19, Y+3	; 0x03
 2f6:	6c 01       	movw	r12, r24
 2f8:	7d 01       	movw	r14, r26
 2fa:	0f ef       	ldi	r16, 0xFF	; 255
 2fc:	c0 1a       	sub	r12, r16
 2fe:	d0 0a       	sbc	r13, r16
 300:	e0 0a       	sbc	r14, r16
 302:	f0 0a       	sbc	r15, r16
 304:	d9 01       	movw	r26, r18
 306:	a8 0f       	add	r26, r24
 308:	b9 1f       	adc	r27, r25
 30a:	9c 91       	ld	r25, X
 30c:	81 2f       	mov	r24, r17
 30e:	80 7f       	andi	r24, 0xF0	; 240
 310:	89 2b       	or	r24, r25
 312:	80 83       	st	Z, r24

        if(j >= data.arraySize)
 314:	89 81       	ldd	r24, Y+1	; 0x01
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	a0 e0       	ldi	r26, 0x00	; 0
 31a:	b0 e0       	ldi	r27, 0x00	; 0
 31c:	c8 16       	cp	r12, r24
 31e:	d9 06       	cpc	r13, r25
 320:	ea 06       	cpc	r14, r26
 322:	fb 06       	cpc	r15, r27
 324:	18 f4       	brcc	.+6      	; 0x32c <SM_move+0x82>
{
    StepperMotorModeData_t data = getModeAndSteps(mode, distance);

    for(uint32_t i = 0, j = 0; i < data.steps; i++)
    {
        *sMotorPort = (*sMotorPort & 0xf0) | data.pArray[j++];
 326:	d7 01       	movw	r26, r14
 328:	c6 01       	movw	r24, r12
 32a:	03 c0       	rjmp	.+6      	; 0x332 <SM_move+0x88>

        if(j >= data.arraySize)
        {
            j = 0;
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	dc 01       	movw	r26, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 332:	e0 ee       	ldi	r30, 0xE0	; 224
 334:	fe e2       	ldi	r31, 0x2E	; 46
 336:	31 97       	sbiw	r30, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <SM_move+0x8c>

void SM_move(StepperMotorRunMode_t mode, double distance)
{
    StepperMotorModeData_t data = getModeAndSteps(mode, distance);

    for(uint32_t i = 0, j = 0; i < data.steps; i++)
 33a:	4f 5f       	subi	r20, 0xFF	; 255
 33c:	5f 4f       	sbci	r21, 0xFF	; 255
 33e:	6f 4f       	sbci	r22, 0xFF	; 255
 340:	7f 4f       	sbci	r23, 0xFF	; 255
 342:	cc 80       	ldd	r12, Y+4	; 0x04
 344:	dd 80       	ldd	r13, Y+5	; 0x05
 346:	ee 80       	ldd	r14, Y+6	; 0x06
 348:	ff 80       	ldd	r15, Y+7	; 0x07
 34a:	4c 15       	cp	r20, r12
 34c:	5d 05       	cpc	r21, r13
 34e:	6e 05       	cpc	r22, r14
 350:	7f 05       	cpc	r23, r15
 352:	50 f2       	brcs	.-108    	; 0x2e8 <SM_move+0x3e>
        }

        _delay_ms(3);
    }

    *sMotorPort = *sMotorPort & 0xf0;
 354:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <sMotorPort>
 358:	f0 91 59 02 	lds	r31, 0x0259	; 0x800259 <sMotorPort+0x1>
 35c:	80 81       	ld	r24, Z
 35e:	80 7f       	andi	r24, 0xF0	; 240
 360:	80 83       	st	Z, r24
}
 362:	27 96       	adiw	r28, 0x07	; 7
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	f8 94       	cli
 368:	de bf       	out	0x3e, r29	; 62
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	cd bf       	out	0x3d, r28	; 61
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	1f 91       	pop	r17
 374:	0f 91       	pop	r16
 376:	ff 90       	pop	r15
 378:	ef 90       	pop	r14
 37a:	df 90       	pop	r13
 37c:	cf 90       	pop	r12
 37e:	08 95       	ret

00000380 <SM_movePosition>:

void SM_movePosition(StepperMotorRunMode_t mode, uint16_t distance)
{
 380:	cf 93       	push	r28
 382:	c8 2f       	mov	r28, r24
    SM_move(mode, ((double)distance / 360));
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	f8 d2       	rcall	.+1520   	; 0x97a <__floatunsisf>
 38a:	20 e0       	ldi	r18, 0x00	; 0
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	44 eb       	ldi	r20, 0xB4	; 180
 390:	53 e4       	ldi	r21, 0x43	; 67
 392:	5f d2       	rcall	.+1214   	; 0x852 <__divsf3>
 394:	ab 01       	movw	r20, r22
 396:	bc 01       	movw	r22, r24
 398:	8c 2f       	mov	r24, r28
 39a:	87 df       	rcall	.-242    	; 0x2aa <SM_move>
}
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <SM_moveTime>:

void SM_moveTime(StepperMotorRunMode_t mode, bool direction, double time, double stepTime)
{
 3a0:	3f 92       	push	r3
 3a2:	4f 92       	push	r4
 3a4:	5f 92       	push	r5
 3a6:	6f 92       	push	r6
 3a8:	7f 92       	push	r7
 3aa:	8f 92       	push	r8
 3ac:	9f 92       	push	r9
 3ae:	af 92       	push	r10
 3b0:	bf 92       	push	r11
 3b2:	cf 92       	push	r12
 3b4:	df 92       	push	r13
 3b6:	ef 92       	push	r14
 3b8:	ff 92       	push	r15
 3ba:	0f 93       	push	r16
 3bc:	1f 93       	push	r17
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
 3c6:	2f 97       	sbiw	r28, 0x0f	; 15
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	f8 94       	cli
 3cc:	de bf       	out	0x3e, r29	; 62
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	cd bf       	out	0x3d, r28	; 61
 3d2:	36 2e       	mov	r3, r22
 3d4:	2c 87       	std	Y+12, r18	; 0x0c
 3d6:	3d 87       	std	Y+13, r19	; 0x0d
 3d8:	4e 87       	std	Y+14, r20	; 0x0e
 3da:	5f 87       	std	Y+15, r21	; 0x0f
 3dc:	e8 86       	std	Y+8, r14	; 0x08
 3de:	f9 86       	std	Y+9, r15	; 0x09
 3e0:	0a 87       	std	Y+10, r16	; 0x0a
 3e2:	1b 87       	std	Y+11, r17	; 0x0b
    StepperMotorModeData_t data = getModeAndSteps(mode, 0);
 3e4:	40 e0       	ldi	r20, 0x00	; 0
 3e6:	50 e0       	ldi	r21, 0x00	; 0
 3e8:	ba 01       	movw	r22, r20
 3ea:	17 df       	rcall	.-466    	; 0x21a <getModeAndSteps>
 3ec:	29 83       	std	Y+1, r18	; 0x01
 3ee:	3a 83       	std	Y+2, r19	; 0x02
 3f0:	4b 83       	std	Y+3, r20	; 0x03
 3f2:	5c 83       	std	Y+4, r21	; 0x04
 3f4:	6d 83       	std	Y+5, r22	; 0x05
 3f6:	7e 83       	std	Y+6, r23	; 0x06
 3f8:	8f 83       	std	Y+7, r24	; 0x07

    for(uint32_t i = 0, j = (direction ? data.arraySize : 0); i < (time / stepTime); i++)
 3fa:	33 20       	and	r3, r3
 3fc:	29 f0       	breq	.+10     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3fe:	c2 2e       	mov	r12, r18
 400:	d1 2c       	mov	r13, r1
 402:	e1 2c       	mov	r14, r1
 404:	f1 2c       	mov	r15, r1
 406:	03 c0       	rjmp	.+6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 408:	c1 2c       	mov	r12, r1
 40a:	d1 2c       	mov	r13, r1
 40c:	76 01       	movw	r14, r12

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 40e:	81 2c       	mov	r8, r1
 410:	91 2c       	mov	r9, r1
 412:	54 01       	movw	r10, r8
 414:	71 c0       	rjmp	.+226    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
    {
        *sMotorPort = (*sMotorPort & 0xf0) | data.pArray[(direction ? j-- : j++)];
 416:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <sMotorPort>
 41a:	f0 91 59 02 	lds	r31, 0x0259	; 0x800259 <sMotorPort+0x1>
 41e:	80 81       	ld	r24, Z
 420:	80 7f       	andi	r24, 0xF0	; 240
 422:	2a 81       	ldd	r18, Y+2	; 0x02
 424:	3b 81       	ldd	r19, Y+3	; 0x03
 426:	33 20       	and	r3, r3
 428:	39 f0       	breq	.+14     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 42a:	b7 01       	movw	r22, r14
 42c:	a6 01       	movw	r20, r12
 42e:	41 50       	subi	r20, 0x01	; 1
 430:	51 09       	sbc	r21, r1
 432:	61 09       	sbc	r22, r1
 434:	71 09       	sbc	r23, r1
 436:	06 c0       	rjmp	.+12     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 438:	b7 01       	movw	r22, r14
 43a:	a6 01       	movw	r20, r12
 43c:	4f 5f       	subi	r20, 0xFF	; 255
 43e:	5f 4f       	sbci	r21, 0xFF	; 255
 440:	6f 4f       	sbci	r22, 0xFF	; 255
 442:	7f 4f       	sbci	r23, 0xFF	; 255
 444:	d9 01       	movw	r26, r18
 446:	ac 0d       	add	r26, r12
 448:	bd 1d       	adc	r27, r13
 44a:	9c 91       	ld	r25, X
 44c:	89 2b       	or	r24, r25
 44e:	80 83       	st	Z, r24

        if(j >= data.arraySize || j <= 0)
 450:	c9 80       	ldd	r12, Y+1	; 0x01
 452:	d1 2c       	mov	r13, r1
 454:	e1 2c       	mov	r14, r1
 456:	f1 2c       	mov	r15, r1
 458:	4c 15       	cp	r20, r12
 45a:	5d 05       	cpc	r21, r13
 45c:	6e 05       	cpc	r22, r14
 45e:	7f 05       	cpc	r23, r15
 460:	28 f4       	brcc	.+10     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 462:	41 15       	cp	r20, r1
 464:	51 05       	cpc	r21, r1
 466:	61 05       	cpc	r22, r1
 468:	71 05       	cpc	r23, r1
 46a:	31 f4       	brne	.+12     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
        {
            j = (direction ? data.arraySize : 0);
 46c:	31 10       	cpse	r3, r1
 46e:	06 c0       	rjmp	.+12     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 470:	c1 2c       	mov	r12, r1
 472:	d1 2c       	mov	r13, r1
 474:	76 01       	movw	r14, r12
 476:	02 c0       	rjmp	.+4      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 478:	6a 01       	movw	r12, r20
 47a:	7b 01       	movw	r14, r22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 47c:	20 e0       	ldi	r18, 0x00	; 0
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	4a e7       	ldi	r20, 0x7A	; 122
 482:	55 e4       	ldi	r21, 0x45	; 69
 484:	68 85       	ldd	r22, Y+8	; 0x08
 486:	79 85       	ldd	r23, Y+9	; 0x09
 488:	8a 85       	ldd	r24, Y+10	; 0x0a
 48a:	9b 85       	ldd	r25, Y+11	; 0x0b
 48c:	2c d3       	rcall	.+1624   	; 0xae6 <__mulsf3>
 48e:	2b 01       	movw	r4, r22
 490:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
 492:	20 e0       	ldi	r18, 0x00	; 0
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	40 e8       	ldi	r20, 0x80	; 128
 498:	5f e3       	ldi	r21, 0x3F	; 63
 49a:	d7 d1       	rcall	.+942    	; 0x84a <__cmpsf2>
 49c:	88 23       	and	r24, r24
 49e:	14 f1       	brlt	.+68     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
		__ticks = 1;
	else if (__tmp > 65535)
 4a0:	20 e0       	ldi	r18, 0x00	; 0
 4a2:	3f ef       	ldi	r19, 0xFF	; 255
 4a4:	4f e7       	ldi	r20, 0x7F	; 127
 4a6:	57 e4       	ldi	r21, 0x47	; 71
 4a8:	c3 01       	movw	r24, r6
 4aa:	b2 01       	movw	r22, r4
 4ac:	18 d3       	rcall	.+1584   	; 0xade <__gesf2>
 4ae:	18 16       	cp	r1, r24
 4b0:	ac f4       	brge	.+42     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4b2:	20 e0       	ldi	r18, 0x00	; 0
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	40 e2       	ldi	r20, 0x20	; 32
 4b8:	51 e4       	ldi	r21, 0x41	; 65
 4ba:	68 85       	ldd	r22, Y+8	; 0x08
 4bc:	79 85       	ldd	r23, Y+9	; 0x09
 4be:	8a 85       	ldd	r24, Y+10	; 0x0a
 4c0:	9b 85       	ldd	r25, Y+11	; 0x0b
 4c2:	11 d3       	rcall	.+1570   	; 0xae6 <__mulsf3>
 4c4:	2e d2       	rcall	.+1116   	; 0x922 <__fixunssfsi>
 4c6:	06 c0       	rjmp	.+12     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4c8:	80 e9       	ldi	r24, 0x90	; 144
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	01 97       	sbiw	r24, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4d0:	61 50       	subi	r22, 0x01	; 1
 4d2:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4d4:	61 15       	cp	r22, r1
 4d6:	71 05       	cpc	r23, r1
 4d8:	b9 f7       	brne	.-18     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4da:	09 c0       	rjmp	.+18     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4dc:	c3 01       	movw	r24, r6
 4de:	b2 01       	movw	r22, r4
 4e0:	20 d2       	rcall	.+1088   	; 0x922 <__fixunssfsi>
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 4e4:	61 e0       	ldi	r22, 0x01	; 1
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	cb 01       	movw	r24, r22
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>

void SM_moveTime(StepperMotorRunMode_t mode, bool direction, double time, double stepTime)
{
    StepperMotorModeData_t data = getModeAndSteps(mode, 0);

    for(uint32_t i = 0, j = (direction ? data.arraySize : 0); i < (time / stepTime); i++)
 4ee:	8f ef       	ldi	r24, 0xFF	; 255
 4f0:	88 1a       	sub	r8, r24
 4f2:	98 0a       	sbc	r9, r24
 4f4:	a8 0a       	sbc	r10, r24
 4f6:	b8 0a       	sbc	r11, r24
 4f8:	c5 01       	movw	r24, r10
 4fa:	b4 01       	movw	r22, r8
 4fc:	3e d2       	rcall	.+1148   	; 0x97a <__floatunsisf>
 4fe:	2b 01       	movw	r4, r22
 500:	3c 01       	movw	r6, r24
 502:	28 85       	ldd	r18, Y+8	; 0x08
 504:	39 85       	ldd	r19, Y+9	; 0x09
 506:	4a 85       	ldd	r20, Y+10	; 0x0a
 508:	5b 85       	ldd	r21, Y+11	; 0x0b
 50a:	6c 85       	ldd	r22, Y+12	; 0x0c
 50c:	7d 85       	ldd	r23, Y+13	; 0x0d
 50e:	8e 85       	ldd	r24, Y+14	; 0x0e
 510:	9f 85       	ldd	r25, Y+15	; 0x0f
 512:	9f d1       	rcall	.+830    	; 0x852 <__divsf3>
 514:	9b 01       	movw	r18, r22
 516:	ac 01       	movw	r20, r24
 518:	c3 01       	movw	r24, r6
 51a:	b2 01       	movw	r22, r4
 51c:	96 d1       	rcall	.+812    	; 0x84a <__cmpsf2>
 51e:	88 23       	and	r24, r24
 520:	0c f4       	brge	.+2      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 522:	79 cf       	rjmp	.-270    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
        }

        _delay_ms(stepTime);
    }

    *sMotorPort = *sMotorPort & 0xf0;
 524:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <sMotorPort>
 528:	f0 91 59 02 	lds	r31, 0x0259	; 0x800259 <sMotorPort+0x1>
 52c:	80 81       	ld	r24, Z
 52e:	80 7f       	andi	r24, 0xF0	; 240
 530:	80 83       	st	Z, r24
}
 532:	2f 96       	adiw	r28, 0x0f	; 15
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	f8 94       	cli
 538:	de bf       	out	0x3e, r29	; 62
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	cd bf       	out	0x3d, r28	; 61
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
 542:	1f 91       	pop	r17
 544:	0f 91       	pop	r16
 546:	ff 90       	pop	r15
 548:	ef 90       	pop	r14
 54a:	df 90       	pop	r13
 54c:	cf 90       	pop	r12
 54e:	bf 90       	pop	r11
 550:	af 90       	pop	r10
 552:	9f 90       	pop	r9
 554:	8f 90       	pop	r8
 556:	7f 90       	pop	r7
 558:	6f 90       	pop	r6
 55a:	5f 90       	pop	r5
 55c:	4f 90       	pop	r4
 55e:	3f 90       	pop	r3
 560:	08 95       	ret

00000562 <CRANE_initSerial>:

    // set up baud rate
    mybur = (F_CPU) / (16UL * (uint16_t)baudRate) - 1;

    UBRR1L = mybur;
    UBRR1H = 0x00;
 562:	9c 01       	movw	r18, r24
 564:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 568:	88 e9       	ldi	r24, 0x98	; 152
 56a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 56e:	86 e0       	ldi	r24, 0x06	; 6
 570:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 574:	c9 01       	movw	r24, r18
 576:	a0 e0       	ldi	r26, 0x00	; 0
 578:	b0 e0       	ldi	r27, 0x00	; 0
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	aa 1f       	adc	r26, r26
 580:	bb 1f       	adc	r27, r27
 582:	88 0f       	add	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	aa 1f       	adc	r26, r26
 588:	bb 1f       	adc	r27, r27
 58a:	9c 01       	movw	r18, r24
 58c:	ad 01       	movw	r20, r26
 58e:	22 0f       	add	r18, r18
 590:	33 1f       	adc	r19, r19
 592:	44 1f       	adc	r20, r20
 594:	55 1f       	adc	r21, r21
 596:	22 0f       	add	r18, r18
 598:	33 1f       	adc	r19, r19
 59a:	44 1f       	adc	r20, r20
 59c:	55 1f       	adc	r21, r21
 59e:	60 e0       	ldi	r22, 0x00	; 0
 5a0:	74 e2       	ldi	r23, 0x24	; 36
 5a2:	84 ef       	ldi	r24, 0xF4	; 244
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	02 d3       	rcall	.+1540   	; 0xbac <__udivmodsi4>
 5a8:	21 50       	subi	r18, 0x01	; 1
 5aa:	31 09       	sbc	r19, r1
 5ac:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 5b0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 5b4:	08 95       	ret

000005b6 <UART_out>:

/* NOTE: Local function implementations */
void UART_out(uint8_t ch)
{
    // wait to complete transmission and empty udr0
    while((UCSR0A & (1 << UDRE0)) == 0)
 5b6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 5ba:	95 ff       	sbrs	r25, 5
 5bc:	fc cf       	rjmp	.-8      	; 0x5b6 <UART_out>
    {
    }

    // load next byte to be transmitted
    UDR0 = ch;
 5be:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 5c2:	08 95       	ret

000005c4 <CRANE_sendSerial>:

    UBRR0H = 0x00;
}

void CRANE_sendSerial(char const * const pData)
{
 5c4:	cf 93       	push	r28
 5c6:	df 93       	push	r29
 5c8:	ec 01       	movw	r28, r24
    char const * pWorker = (char const *)pData;

    // while we are not at the end of the string
    while(*pWorker != '\0')
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <CRANE_sendSerial+0xc>
    {
        // wait for uart tx to be ready then send out uart
        UART_out(*pWorker);
 5cc:	f4 df       	rcall	.-24     	; 0x5b6 <UART_out>

        pWorker++;
 5ce:	21 96       	adiw	r28, 0x01	; 1
void CRANE_sendSerial(char const * const pData)
{
    char const * pWorker = (char const *)pData;

    // while we are not at the end of the string
    while(*pWorker != '\0')
 5d0:	88 81       	ld	r24, Y
 5d2:	81 11       	cpse	r24, r1
 5d4:	fb cf       	rjmp	.-10     	; 0x5cc <CRANE_sendSerial+0x8>
        // wait for uart tx to be ready then send out uart
        UART_out(*pWorker);

        pWorker++;
    }
}
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	08 95       	ret

000005dc <CRANE_initServos>:

/* NOTE: Global function implementations */
void CRANE_initServos(void)
{
    // set up PORTB.5 as an output and 0V
    DDRB |= 0x60;
 5dc:	84 b1       	in	r24, 0x04	; 4
 5de:	80 66       	ori	r24, 0x60	; 96
 5e0:	84 b9       	out	0x04, r24	; 4
    PORTB |= PORTB & ~0x60;
 5e2:	85 b1       	in	r24, 0x05	; 5
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	8f 79       	andi	r24, 0x9F	; 159
 5e8:	95 b1       	in	r25, 0x05	; 5
 5ea:	89 2b       	or	r24, r25
 5ec:	85 b9       	out	0x05, r24	; 5

    // 5000 @ 64
    // set frequency to 50hz
    ICR1 = 5000;
 5ee:	88 e8       	ldi	r24, 0x88	; 136
 5f0:	93 e1       	ldi	r25, 0x13	; 19
 5f2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7c0087>
 5f6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7c0086>

    // fast pwm set on compare
    TCCR1A = 0x02;
 5fa:	82 e0       	ldi	r24, 0x02	; 2
 5fc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    // prescaler set to 64
    TCCR1B = 0x1B;
 600:	8b e1       	ldi	r24, 0x1B	; 27
 602:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 606:	08 95       	ret

00000608 <CRANE_setServoPosition>:
}

void CRANE_setServoPosition(uint8_t servo, uint8_t position)
{
    if(servo == 0)
 608:	81 11       	cpse	r24, r1
 60a:	11 c0       	rjmp	.+34     	; 0x62e <CRANE_setServoPosition+0x26>
    {
        OCR1A = (uint32_t)position * 250 / 255 + 250;
 60c:	26 2f       	mov	r18, r22
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	aa ef       	ldi	r26, 0xFA	; 250
 612:	b0 e0       	ldi	r27, 0x00	; 0
 614:	ed d2       	rcall	.+1498   	; 0xbf0 <__umulhisi3>
 616:	2f ef       	ldi	r18, 0xFF	; 255
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	40 e0       	ldi	r20, 0x00	; 0
 61c:	50 e0       	ldi	r21, 0x00	; 0
 61e:	c6 d2       	rcall	.+1420   	; 0xbac <__udivmodsi4>
 620:	26 50       	subi	r18, 0x06	; 6
 622:	3f 4f       	sbci	r19, 0xFF	; 255
 624:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 628:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 62c:	08 95       	ret
    }
    else if(servo == 1)
 62e:	81 30       	cpi	r24, 0x01	; 1
 630:	81 f4       	brne	.+32     	; 0x652 <CRANE_setServoPosition+0x4a>
    {
        OCR1B = (uint32_t)position * 250 / 255 + 250;
 632:	26 2f       	mov	r18, r22
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	aa ef       	ldi	r26, 0xFA	; 250
 638:	b0 e0       	ldi	r27, 0x00	; 0
 63a:	da d2       	rcall	.+1460   	; 0xbf0 <__umulhisi3>
 63c:	2f ef       	ldi	r18, 0xFF	; 255
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	40 e0       	ldi	r20, 0x00	; 0
 642:	50 e0       	ldi	r21, 0x00	; 0
 644:	b3 d2       	rcall	.+1382   	; 0xbac <__udivmodsi4>
 646:	26 50       	subi	r18, 0x06	; 6
 648:	3f 4f       	sbci	r19, 0xFF	; 255
 64a:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 64e:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
 652:	08 95       	ret

00000654 <CRANE_startServos>:
    }
}

void CRANE_startServos(void)
{
    TCCR1A |= 0xA0;
 654:	e0 e8       	ldi	r30, 0x80	; 128
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	80 81       	ld	r24, Z
 65a:	80 6a       	ori	r24, 0xA0	; 160
 65c:	80 83       	st	Z, r24
 65e:	08 95       	ret

00000660 <IO_init>:

/* NOTE: Function implementations */
void IO_init(void)
{
    // port c.4 is the limit switch
    DDRC  = 0x00;
 660:	17 b8       	out	0x07, r1	; 7
    PORTC = 0x10;
 662:	80 e1       	ldi	r24, 0x10	; 16
 664:	88 b9       	out	0x08, r24	; 8

    // port a.0-1 are for left and right
    DDRA  = 0x00;
 666:	11 b8       	out	0x01, r1	; 1
    PORTA = 0x03;
 668:	83 e0       	ldi	r24, 0x03	; 3
 66a:	82 b9       	out	0x02, r24	; 2
 66c:	08 95       	ret

0000066e <asyncSerialRxHandler>:
}

void asyncSerialRxHandler(char c)
{
    if(c != '\r' && c != '\n' && c != '\0' && (serialBufferIndex < 127))
 66e:	8d 30       	cpi	r24, 0x0D	; 13
 670:	d1 f0       	breq	.+52     	; 0x6a6 <asyncSerialRxHandler+0x38>
 672:	8a 30       	cpi	r24, 0x0A	; 10
 674:	c1 f0       	breq	.+48     	; 0x6a6 <asyncSerialRxHandler+0x38>
 676:	88 23       	and	r24, r24
 678:	b1 f0       	breq	.+44     	; 0x6a6 <asyncSerialRxHandler+0x38>
 67a:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <serialBufferIndex>
 67e:	9f 37       	cpi	r25, 0x7F	; 127
 680:	90 f4       	brcc	.+36     	; 0x6a6 <asyncSerialRxHandler+0x38>
    {
        // add to array
        serialBuffer[serialBufferIndex]     = c;
 682:	e0 91 5b 02 	lds	r30, 0x025B	; 0x80025b <serialBufferIndex>
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	e4 5a       	subi	r30, 0xA4	; 164
 68a:	fd 4f       	sbci	r31, 0xFD	; 253
 68c:	80 83       	st	Z, r24
        serialBuffer[serialBufferIndex + 1] = '\0';
 68e:	e0 91 5b 02 	lds	r30, 0x025B	; 0x80025b <serialBufferIndex>
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	e3 5a       	subi	r30, 0xA3	; 163
 696:	fd 4f       	sbci	r31, 0xFD	; 253
 698:	10 82       	st	Z, r1

        serialBufferIndex++;
 69a:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <serialBufferIndex>
 69e:	8f 5f       	subi	r24, 0xFF	; 255
 6a0:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <serialBufferIndex>
 6a4:	08 95       	ret
    }
    else
    {
        // set update flag
        serialReadFlag    = 1;
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <serialReadFlag>
        // reset message index
        serialBufferIndex = 0;
 6ac:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <serialBufferIndex>
 6b0:	08 95       	ret

000006b2 <__vector_25>:
        }
    }
}

ISR(serialInterrupt)
{
 6b2:	1f 92       	push	r1
 6b4:	0f 92       	push	r0
 6b6:	0f b6       	in	r0, 0x3f	; 63
 6b8:	0f 92       	push	r0
 6ba:	11 24       	eor	r1, r1
 6bc:	0b b6       	in	r0, 0x3b	; 59
 6be:	0f 92       	push	r0
 6c0:	2f 93       	push	r18
 6c2:	3f 93       	push	r19
 6c4:	4f 93       	push	r20
 6c6:	5f 93       	push	r21
 6c8:	6f 93       	push	r22
 6ca:	7f 93       	push	r23
 6cc:	8f 93       	push	r24
 6ce:	9f 93       	push	r25
 6d0:	af 93       	push	r26
 6d2:	bf 93       	push	r27
 6d4:	ef 93       	push	r30
 6d6:	ff 93       	push	r31
    asyncSerialRxHandler(serialData);
 6d8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 6dc:	c8 df       	rcall	.-112    	; 0x66e <asyncSerialRxHandler>
}
 6de:	ff 91       	pop	r31
 6e0:	ef 91       	pop	r30
 6e2:	bf 91       	pop	r27
 6e4:	af 91       	pop	r26
 6e6:	9f 91       	pop	r25
 6e8:	8f 91       	pop	r24
 6ea:	7f 91       	pop	r23
 6ec:	6f 91       	pop	r22
 6ee:	5f 91       	pop	r21
 6f0:	4f 91       	pop	r20
 6f2:	3f 91       	pop	r19
 6f4:	2f 91       	pop	r18
 6f6:	0f 90       	pop	r0
 6f8:	0b be       	out	0x3b, r0	; 59
 6fa:	0f 90       	pop	r0
 6fc:	0f be       	out	0x3f, r0	; 63
 6fe:	0f 90       	pop	r0
 700:	1f 90       	pop	r1
 702:	18 95       	reti

00000704 <stringCompare>:
        serialBufferIndex = 0;
    }
}

uint8_t stringCompare(char const * const pStrOne, char const * const pStrTwo)
{
 704:	ac 01       	movw	r20, r24
    uint8_t i = 0;
 706:	90 e0       	ldi	r25, 0x00	; 0

    // while string one still has data
    do
    {
        if(*(pStrOne + i) == *(pStrTwo + i))
 708:	29 2f       	mov	r18, r25
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	fa 01       	movw	r30, r20
 70e:	e2 0f       	add	r30, r18
 710:	f3 1f       	adc	r31, r19
 712:	e0 81       	ld	r30, Z
 714:	db 01       	movw	r26, r22
 716:	a2 0f       	add	r26, r18
 718:	b3 1f       	adc	r27, r19
 71a:	8c 91       	ld	r24, X
 71c:	e8 13       	cpse	r30, r24
 71e:	11 c0       	rjmp	.+34     	; 0x742 <stringCompare+0x3e>
        {
            // increment
            i++;
 720:	9f 5f       	subi	r25, 0xFF	; 255
        else
        {
            // exit
            return 0;
        }
    } while((*(pStrOne + i) != '\0') && (*(pStrTwo + i) != '\0'));
 722:	29 2f       	mov	r18, r25
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	fa 01       	movw	r30, r20
 728:	e2 0f       	add	r30, r18
 72a:	f3 1f       	adc	r31, r19
 72c:	80 81       	ld	r24, Z
 72e:	88 23       	and	r24, r24
 730:	51 f0       	breq	.+20     	; 0x746 <stringCompare+0x42>
 732:	fb 01       	movw	r30, r22
 734:	e2 0f       	add	r30, r18
 736:	f3 1f       	adc	r31, r19
 738:	80 81       	ld	r24, Z
 73a:	81 11       	cpse	r24, r1
 73c:	e5 cf       	rjmp	.-54     	; 0x708 <stringCompare+0x4>

    // made it out of the loop
    return 1;
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	08 95       	ret
            i++;
        }
        else
        {
            // exit
            return 0;
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	08 95       	ret
        }
    } while((*(pStrOne + i) != '\0') && (*(pStrTwo + i) != '\0'));

    // made it out of the loop
    return 1;
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	08 95       	ret

0000074a <main>:

/* NOTE: Application implementation */
// the main loop of the function, provided to us
int main(void)
{
    IO_init();
 74a:	8a df       	rcall	.-236    	; 0x660 <IO_init>

    // init the ADC and the servo control
    ADC_init();
 74c:	eb dc       	rcall	.-1578   	; 0x124 <ADC_init>
    CRANE_initServos();
 74e:	46 df       	rcall	.-372    	; 0x5dc <CRANE_initServos>
 750:	68 e2       	ldi	r22, 0x28	; 40

    // in this case, 1 is CCW, and 0 is CW
    // pass in the port and register we want to use for the motor
    SM_init(&DDRC, &PORTC);
 752:	70 e0       	ldi	r23, 0x00	; 0
 754:	87 e2       	ldi	r24, 0x27	; 39
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	53 dd       	rcall	.-1370   	; 0x200 <SM_init>

    // turn on the serial on port 0 at 9600 baud
    CRANE_initSerial(9600);
 75a:	80 e8       	ldi	r24, 0x80	; 128
 75c:	95 e2       	ldi	r25, 0x25	; 37
 75e:	01 df       	rcall	.-510    	; 0x562 <CRANE_initSerial>
    CRANE_sendSerial("Crane online\r\n");
 760:	80 e1       	ldi	r24, 0x10	; 16
 762:	92 e0       	ldi	r25, 0x02	; 2
 764:	2f df       	rcall	.-418    	; 0x5c4 <CRANE_sendSerial>
 766:	78 94       	sei

    sei();
 768:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <serialReadFlag>
            record needs to save the the actions to a LL and store them in eeprom

            action needs to be able to move the crane
        */

        if(serialReadFlag)
 76c:	88 23       	and	r24, r24
 76e:	99 f0       	breq	.+38     	; 0x796 <main+0x4c>
        {
            if(stringCompare(serialBuffer, "password") && (applicationState != recordState))
 770:	6f e1       	ldi	r22, 0x1F	; 31
 772:	72 e0       	ldi	r23, 0x02	; 2
 774:	8c e5       	ldi	r24, 0x5C	; 92
 776:	92 e0       	ldi	r25, 0x02	; 2
 778:	c5 df       	rcall	.-118    	; 0x704 <stringCompare>
 77a:	88 23       	and	r24, r24
 77c:	51 f0       	breq	.+20     	; 0x792 <main+0x48>
 77e:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <applicationState>
 782:	82 30       	cpi	r24, 0x02	; 2
 784:	31 f0       	breq	.+12     	; 0x792 <main+0x48>
            {
                CRANE_sendSerial("Password entered, starting config mode...\r\n");
 786:	88 e2       	ldi	r24, 0x28	; 40
 788:	92 e0       	ldi	r25, 0x02	; 2
 78a:	1c df       	rcall	.-456    	; 0x5c4 <CRANE_sendSerial>
 78c:	82 e0       	ldi	r24, 0x02	; 2

                applicationState = recordState;
 78e:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <applicationState>
 792:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <serialReadFlag>
            }

            serialReadFlag = 0;
 796:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <applicationState>
        }

        switch(applicationState)
 79a:	81 30       	cpi	r24, 0x01	; 1
 79c:	19 f0       	breq	.+6      	; 0x7a4 <main+0x5a>
 79e:	82 30       	cpi	r24, 0x02	; 2
 7a0:	19 f3       	breq	.-58     	; 0x768 <main+0x1e>
 7a2:	32 c0       	rjmp	.+100    	; 0x808 <main+0xbe>
 7a4:	01 9b       	sbis	0x00, 1	; 0
        {
            // the action case
            case actionState:
            {
                if(rightButton)
 7a6:	0b c0       	rjmp	.+22     	; 0x7be <main+0x74>
 7a8:	e1 2c       	mov	r14, r1
                {
                    SM_moveTime(stepperModeHalf, 0, 90, 3);
 7aa:	f1 2c       	mov	r15, r1
 7ac:	00 e4       	ldi	r16, 0x40	; 64
 7ae:	10 e4       	ldi	r17, 0x40	; 64
 7b0:	20 e0       	ldi	r18, 0x00	; 0
 7b2:	30 e0       	ldi	r19, 0x00	; 0
 7b4:	44 eb       	ldi	r20, 0xB4	; 180
 7b6:	52 e4       	ldi	r21, 0x42	; 66
 7b8:	60 e0       	ldi	r22, 0x00	; 0
 7ba:	82 e0       	ldi	r24, 0x02	; 2
 7bc:	f1 dd       	rcall	.-1054   	; 0x3a0 <SM_moveTime>
 7be:	00 9b       	sbis	0x00, 0	; 0
                }

                if(leftButton)
 7c0:	0b c0       	rjmp	.+22     	; 0x7d8 <main+0x8e>
 7c2:	e1 2c       	mov	r14, r1
                {
                    SM_moveTime(stepperModeHalf, 1, 90, 3);
 7c4:	f1 2c       	mov	r15, r1
 7c6:	00 e4       	ldi	r16, 0x40	; 64
 7c8:	10 e4       	ldi	r17, 0x40	; 64
 7ca:	20 e0       	ldi	r18, 0x00	; 0
 7cc:	30 e0       	ldi	r19, 0x00	; 0
 7ce:	44 eb       	ldi	r20, 0xB4	; 180
 7d0:	52 e4       	ldi	r21, 0x42	; 66
 7d2:	61 e0       	ldi	r22, 0x01	; 1
 7d4:	82 e0       	ldi	r24, 0x02	; 2
                }

                CRANE_startServos();
 7d6:	e4 dd       	rcall	.-1080   	; 0x3a0 <SM_moveTime>

                CRANE_setServoPosition(0, 255 * ADC_getTenBitValue(0));
 7d8:	3d df       	rcall	.-390    	; 0x654 <CRANE_startServos>
 7da:	80 e0       	ldi	r24, 0x00	; 0
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	ab dc       	rcall	.-1706   	; 0x136 <ADC_getTenBitValue>
 7e0:	20 e0       	ldi	r18, 0x00	; 0
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	4f e7       	ldi	r20, 0x7F	; 127
 7e6:	53 e4       	ldi	r21, 0x43	; 67
 7e8:	7e d1       	rcall	.+764    	; 0xae6 <__mulsf3>
 7ea:	9b d0       	rcall	.+310    	; 0x922 <__fixunssfsi>
 7ec:	80 e0       	ldi	r24, 0x00	; 0
                CRANE_setServoPosition(1, 255 * ADC_getTenBitValue(1));
 7ee:	0c df       	rcall	.-488    	; 0x608 <CRANE_setServoPosition>
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	a0 dc       	rcall	.-1728   	; 0x136 <ADC_getTenBitValue>
 7f6:	20 e0       	ldi	r18, 0x00	; 0
 7f8:	30 e0       	ldi	r19, 0x00	; 0
 7fa:	4f e7       	ldi	r20, 0x7F	; 127
 7fc:	53 e4       	ldi	r21, 0x43	; 67
 7fe:	73 d1       	rcall	.+742    	; 0xae6 <__mulsf3>
 800:	90 d0       	rcall	.+288    	; 0x922 <__fixunssfsi>
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	01 df       	rcall	.-510    	; 0x608 <CRANE_setServoPosition>
 806:	b0 cf       	rjmp	.-160    	; 0x768 <main+0x1e>
 808:	e1 2c       	mov	r14, r1
            }
            break;
 80a:	f1 2c       	mov	r15, r1
            // the default case will be the home case
            case calibrateState:
            default:
            {
                // move CW for one second to ensure the limit switch is not set
                SM_moveTime(stepperModeHalf, 0, 1000, 3);
 80c:	00 e4       	ldi	r16, 0x40	; 64
 80e:	10 e4       	ldi	r17, 0x40	; 64
 810:	20 e0       	ldi	r18, 0x00	; 0
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	4a e7       	ldi	r20, 0x7A	; 122
 816:	54 e4       	ldi	r21, 0x44	; 68
 818:	60 e0       	ldi	r22, 0x00	; 0
 81a:	82 e0       	ldi	r24, 0x02	; 2
 81c:	c1 dd       	rcall	.-1150   	; 0x3a0 <SM_moveTime>
 81e:	0b c0       	rjmp	.+22     	; 0x836 <main+0xec>

                // while not hitting the switch
                while(!limitSwitch)
 820:	e1 2c       	mov	r14, r1
                {
                    // then move CCW a bit at the time until we hit the limit switch
                    SM_moveTime(stepperModeHalf, 1, 12, 3);
 822:	f1 2c       	mov	r15, r1
 824:	00 e4       	ldi	r16, 0x40	; 64
 826:	10 e4       	ldi	r17, 0x40	; 64
 828:	20 e0       	ldi	r18, 0x00	; 0
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	40 e4       	ldi	r20, 0x40	; 64
 82e:	51 e4       	ldi	r21, 0x41	; 65
 830:	61 e0       	ldi	r22, 0x01	; 1
 832:	82 e0       	ldi	r24, 0x02	; 2
 834:	b5 dd       	rcall	.-1174   	; 0x3a0 <SM_moveTime>
 836:	34 9b       	sbis	0x06, 4	; 6
 838:	f3 cf       	rjmp	.-26     	; 0x820 <main+0xd6>
            {
                // move CW for one second to ensure the limit switch is not set
                SM_moveTime(stepperModeHalf, 0, 1000, 3);

                // while not hitting the switch
                while(!limitSwitch)
 83a:	6e e1       	ldi	r22, 0x1E	; 30
 83c:	70 e0       	ldi	r23, 0x00	; 0
                    // then move CCW a bit at the time until we hit the limit switch
                    SM_moveTime(stepperModeHalf, 1, 12, 3);
                }

                // then move 30 degrees back to center the arm
                SM_movePosition(stepperModeHalf, 30);
 83e:	82 e0       	ldi	r24, 0x02	; 2
 840:	9f dd       	rcall	.-1218   	; 0x380 <SM_movePosition>
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <applicationState>

                // then set it to action state
                applicationState = actionState;
 848:	8f cf       	rjmp	.-226    	; 0x768 <main+0x1e>

0000084a <__cmpsf2>:
 84a:	d4 d0       	rcall	.+424    	; 0x9f4 <__fp_cmp>
 84c:	08 f4       	brcc	.+2      	; 0x850 <__cmpsf2+0x6>
            }
            break;
 84e:	81 e0       	ldi	r24, 0x01	; 1
 850:	08 95       	ret

00000852 <__divsf3>:
 852:	0c d0       	rcall	.+24     	; 0x86c <__divsf3x>
 854:	0a c1       	rjmp	.+532    	; 0xa6a <__fp_round>
 856:	02 d1       	rcall	.+516    	; 0xa5c <__fp_pscB>
 858:	40 f0       	brcs	.+16     	; 0x86a <__divsf3+0x18>
 85a:	f9 d0       	rcall	.+498    	; 0xa4e <__fp_pscA>
 85c:	30 f0       	brcs	.+12     	; 0x86a <__divsf3+0x18>
 85e:	21 f4       	brne	.+8      	; 0x868 <__divsf3+0x16>
 860:	5f 3f       	cpi	r21, 0xFF	; 255
 862:	19 f0       	breq	.+6      	; 0x86a <__divsf3+0x18>
 864:	eb c0       	rjmp	.+470    	; 0xa3c <__fp_inf>
 866:	51 11       	cpse	r21, r1
 868:	34 c1       	rjmp	.+616    	; 0xad2 <__fp_szero>
 86a:	ee c0       	rjmp	.+476    	; 0xa48 <__fp_nan>

0000086c <__divsf3x>:
 86c:	0f d1       	rcall	.+542    	; 0xa8c <__fp_split3>
 86e:	98 f3       	brcs	.-26     	; 0x856 <__divsf3+0x4>

00000870 <__divsf3_pse>:
 870:	99 23       	and	r25, r25
 872:	c9 f3       	breq	.-14     	; 0x866 <__divsf3+0x14>
 874:	55 23       	and	r21, r21
 876:	b1 f3       	breq	.-20     	; 0x864 <__divsf3+0x12>
 878:	95 1b       	sub	r25, r21
 87a:	55 0b       	sbc	r21, r21
 87c:	bb 27       	eor	r27, r27
 87e:	aa 27       	eor	r26, r26
 880:	62 17       	cp	r22, r18
 882:	73 07       	cpc	r23, r19
 884:	84 07       	cpc	r24, r20
 886:	38 f0       	brcs	.+14     	; 0x896 <__divsf3_pse+0x26>
 888:	9f 5f       	subi	r25, 0xFF	; 255
 88a:	5f 4f       	sbci	r21, 0xFF	; 255
 88c:	22 0f       	add	r18, r18
 88e:	33 1f       	adc	r19, r19
 890:	44 1f       	adc	r20, r20
 892:	aa 1f       	adc	r26, r26
 894:	a9 f3       	breq	.-22     	; 0x880 <__divsf3_pse+0x10>
 896:	33 d0       	rcall	.+102    	; 0x8fe <__divsf3_pse+0x8e>
 898:	0e 2e       	mov	r0, r30
 89a:	3a f0       	brmi	.+14     	; 0x8aa <__divsf3_pse+0x3a>
 89c:	e0 e8       	ldi	r30, 0x80	; 128
 89e:	30 d0       	rcall	.+96     	; 0x900 <__divsf3_pse+0x90>
 8a0:	91 50       	subi	r25, 0x01	; 1
 8a2:	50 40       	sbci	r21, 0x00	; 0
 8a4:	e6 95       	lsr	r30
 8a6:	00 1c       	adc	r0, r0
 8a8:	ca f7       	brpl	.-14     	; 0x89c <__divsf3_pse+0x2c>
 8aa:	29 d0       	rcall	.+82     	; 0x8fe <__divsf3_pse+0x8e>
 8ac:	fe 2f       	mov	r31, r30
 8ae:	27 d0       	rcall	.+78     	; 0x8fe <__divsf3_pse+0x8e>
 8b0:	66 0f       	add	r22, r22
 8b2:	77 1f       	adc	r23, r23
 8b4:	88 1f       	adc	r24, r24
 8b6:	bb 1f       	adc	r27, r27
 8b8:	26 17       	cp	r18, r22
 8ba:	37 07       	cpc	r19, r23
 8bc:	48 07       	cpc	r20, r24
 8be:	ab 07       	cpc	r26, r27
 8c0:	b0 e8       	ldi	r27, 0x80	; 128
 8c2:	09 f0       	breq	.+2      	; 0x8c6 <__divsf3_pse+0x56>
 8c4:	bb 0b       	sbc	r27, r27
 8c6:	80 2d       	mov	r24, r0
 8c8:	bf 01       	movw	r22, r30
 8ca:	ff 27       	eor	r31, r31
 8cc:	93 58       	subi	r25, 0x83	; 131
 8ce:	5f 4f       	sbci	r21, 0xFF	; 255
 8d0:	2a f0       	brmi	.+10     	; 0x8dc <__divsf3_pse+0x6c>
 8d2:	9e 3f       	cpi	r25, 0xFE	; 254
 8d4:	51 05       	cpc	r21, r1
 8d6:	68 f0       	brcs	.+26     	; 0x8f2 <__divsf3_pse+0x82>
 8d8:	b1 c0       	rjmp	.+354    	; 0xa3c <__fp_inf>
 8da:	fb c0       	rjmp	.+502    	; 0xad2 <__fp_szero>
 8dc:	5f 3f       	cpi	r21, 0xFF	; 255
 8de:	ec f3       	brlt	.-6      	; 0x8da <__divsf3_pse+0x6a>
 8e0:	98 3e       	cpi	r25, 0xE8	; 232
 8e2:	dc f3       	brlt	.-10     	; 0x8da <__divsf3_pse+0x6a>
 8e4:	86 95       	lsr	r24
 8e6:	77 95       	ror	r23
 8e8:	67 95       	ror	r22
 8ea:	b7 95       	ror	r27
 8ec:	f7 95       	ror	r31
 8ee:	9f 5f       	subi	r25, 0xFF	; 255
 8f0:	c9 f7       	brne	.-14     	; 0x8e4 <__divsf3_pse+0x74>
 8f2:	88 0f       	add	r24, r24
 8f4:	91 1d       	adc	r25, r1
 8f6:	96 95       	lsr	r25
 8f8:	87 95       	ror	r24
 8fa:	97 f9       	bld	r25, 7
 8fc:	08 95       	ret
 8fe:	e1 e0       	ldi	r30, 0x01	; 1
 900:	66 0f       	add	r22, r22
 902:	77 1f       	adc	r23, r23
 904:	88 1f       	adc	r24, r24
 906:	bb 1f       	adc	r27, r27
 908:	62 17       	cp	r22, r18
 90a:	73 07       	cpc	r23, r19
 90c:	84 07       	cpc	r24, r20
 90e:	ba 07       	cpc	r27, r26
 910:	20 f0       	brcs	.+8      	; 0x91a <__divsf3_pse+0xaa>
 912:	62 1b       	sub	r22, r18
 914:	73 0b       	sbc	r23, r19
 916:	84 0b       	sbc	r24, r20
 918:	ba 0b       	sbc	r27, r26
 91a:	ee 1f       	adc	r30, r30
 91c:	88 f7       	brcc	.-30     	; 0x900 <__divsf3_pse+0x90>
 91e:	e0 95       	com	r30
 920:	08 95       	ret

00000922 <__fixunssfsi>:
 922:	bc d0       	rcall	.+376    	; 0xa9c <__fp_splitA>
 924:	88 f0       	brcs	.+34     	; 0x948 <__fixunssfsi+0x26>
 926:	9f 57       	subi	r25, 0x7F	; 127
 928:	90 f0       	brcs	.+36     	; 0x94e <__fixunssfsi+0x2c>
 92a:	b9 2f       	mov	r27, r25
 92c:	99 27       	eor	r25, r25
 92e:	b7 51       	subi	r27, 0x17	; 23
 930:	a0 f0       	brcs	.+40     	; 0x95a <__fixunssfsi+0x38>
 932:	d1 f0       	breq	.+52     	; 0x968 <__fixunssfsi+0x46>
 934:	66 0f       	add	r22, r22
 936:	77 1f       	adc	r23, r23
 938:	88 1f       	adc	r24, r24
 93a:	99 1f       	adc	r25, r25
 93c:	1a f0       	brmi	.+6      	; 0x944 <__fixunssfsi+0x22>
 93e:	ba 95       	dec	r27
 940:	c9 f7       	brne	.-14     	; 0x934 <__fixunssfsi+0x12>
 942:	12 c0       	rjmp	.+36     	; 0x968 <__fixunssfsi+0x46>
 944:	b1 30       	cpi	r27, 0x01	; 1
 946:	81 f0       	breq	.+32     	; 0x968 <__fixunssfsi+0x46>
 948:	c3 d0       	rcall	.+390    	; 0xad0 <__fp_zero>
 94a:	b1 e0       	ldi	r27, 0x01	; 1
 94c:	08 95       	ret
 94e:	c0 c0       	rjmp	.+384    	; 0xad0 <__fp_zero>
 950:	67 2f       	mov	r22, r23
 952:	78 2f       	mov	r23, r24
 954:	88 27       	eor	r24, r24
 956:	b8 5f       	subi	r27, 0xF8	; 248
 958:	39 f0       	breq	.+14     	; 0x968 <__fixunssfsi+0x46>
 95a:	b9 3f       	cpi	r27, 0xF9	; 249
 95c:	cc f3       	brlt	.-14     	; 0x950 <__fixunssfsi+0x2e>
 95e:	86 95       	lsr	r24
 960:	77 95       	ror	r23
 962:	67 95       	ror	r22
 964:	b3 95       	inc	r27
 966:	d9 f7       	brne	.-10     	; 0x95e <__fixunssfsi+0x3c>
 968:	3e f4       	brtc	.+14     	; 0x978 <__fixunssfsi+0x56>
 96a:	90 95       	com	r25
 96c:	80 95       	com	r24
 96e:	70 95       	com	r23
 970:	61 95       	neg	r22
 972:	7f 4f       	sbci	r23, 0xFF	; 255
 974:	8f 4f       	sbci	r24, 0xFF	; 255
 976:	9f 4f       	sbci	r25, 0xFF	; 255
 978:	08 95       	ret

0000097a <__floatunsisf>:
 97a:	e8 94       	clt
 97c:	09 c0       	rjmp	.+18     	; 0x990 <__floatsisf+0x12>

0000097e <__floatsisf>:
 97e:	97 fb       	bst	r25, 7
 980:	3e f4       	brtc	.+14     	; 0x990 <__floatsisf+0x12>
 982:	90 95       	com	r25
 984:	80 95       	com	r24
 986:	70 95       	com	r23
 988:	61 95       	neg	r22
 98a:	7f 4f       	sbci	r23, 0xFF	; 255
 98c:	8f 4f       	sbci	r24, 0xFF	; 255
 98e:	9f 4f       	sbci	r25, 0xFF	; 255
 990:	99 23       	and	r25, r25
 992:	a9 f0       	breq	.+42     	; 0x9be <__floatsisf+0x40>
 994:	f9 2f       	mov	r31, r25
 996:	96 e9       	ldi	r25, 0x96	; 150
 998:	bb 27       	eor	r27, r27
 99a:	93 95       	inc	r25
 99c:	f6 95       	lsr	r31
 99e:	87 95       	ror	r24
 9a0:	77 95       	ror	r23
 9a2:	67 95       	ror	r22
 9a4:	b7 95       	ror	r27
 9a6:	f1 11       	cpse	r31, r1
 9a8:	f8 cf       	rjmp	.-16     	; 0x99a <__floatsisf+0x1c>
 9aa:	fa f4       	brpl	.+62     	; 0x9ea <__floatsisf+0x6c>
 9ac:	bb 0f       	add	r27, r27
 9ae:	11 f4       	brne	.+4      	; 0x9b4 <__floatsisf+0x36>
 9b0:	60 ff       	sbrs	r22, 0
 9b2:	1b c0       	rjmp	.+54     	; 0x9ea <__floatsisf+0x6c>
 9b4:	6f 5f       	subi	r22, 0xFF	; 255
 9b6:	7f 4f       	sbci	r23, 0xFF	; 255
 9b8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ba:	9f 4f       	sbci	r25, 0xFF	; 255
 9bc:	16 c0       	rjmp	.+44     	; 0x9ea <__floatsisf+0x6c>
 9be:	88 23       	and	r24, r24
 9c0:	11 f0       	breq	.+4      	; 0x9c6 <__floatsisf+0x48>
 9c2:	96 e9       	ldi	r25, 0x96	; 150
 9c4:	11 c0       	rjmp	.+34     	; 0x9e8 <__floatsisf+0x6a>
 9c6:	77 23       	and	r23, r23
 9c8:	21 f0       	breq	.+8      	; 0x9d2 <__floatsisf+0x54>
 9ca:	9e e8       	ldi	r25, 0x8E	; 142
 9cc:	87 2f       	mov	r24, r23
 9ce:	76 2f       	mov	r23, r22
 9d0:	05 c0       	rjmp	.+10     	; 0x9dc <__floatsisf+0x5e>
 9d2:	66 23       	and	r22, r22
 9d4:	71 f0       	breq	.+28     	; 0x9f2 <__floatsisf+0x74>
 9d6:	96 e8       	ldi	r25, 0x86	; 134
 9d8:	86 2f       	mov	r24, r22
 9da:	70 e0       	ldi	r23, 0x00	; 0
 9dc:	60 e0       	ldi	r22, 0x00	; 0
 9de:	2a f0       	brmi	.+10     	; 0x9ea <__floatsisf+0x6c>
 9e0:	9a 95       	dec	r25
 9e2:	66 0f       	add	r22, r22
 9e4:	77 1f       	adc	r23, r23
 9e6:	88 1f       	adc	r24, r24
 9e8:	da f7       	brpl	.-10     	; 0x9e0 <__floatsisf+0x62>
 9ea:	88 0f       	add	r24, r24
 9ec:	96 95       	lsr	r25
 9ee:	87 95       	ror	r24
 9f0:	97 f9       	bld	r25, 7
 9f2:	08 95       	ret

000009f4 <__fp_cmp>:
 9f4:	99 0f       	add	r25, r25
 9f6:	00 08       	sbc	r0, r0
 9f8:	55 0f       	add	r21, r21
 9fa:	aa 0b       	sbc	r26, r26
 9fc:	e0 e8       	ldi	r30, 0x80	; 128
 9fe:	fe ef       	ldi	r31, 0xFE	; 254
 a00:	16 16       	cp	r1, r22
 a02:	17 06       	cpc	r1, r23
 a04:	e8 07       	cpc	r30, r24
 a06:	f9 07       	cpc	r31, r25
 a08:	c0 f0       	brcs	.+48     	; 0xa3a <__fp_cmp+0x46>
 a0a:	12 16       	cp	r1, r18
 a0c:	13 06       	cpc	r1, r19
 a0e:	e4 07       	cpc	r30, r20
 a10:	f5 07       	cpc	r31, r21
 a12:	98 f0       	brcs	.+38     	; 0xa3a <__fp_cmp+0x46>
 a14:	62 1b       	sub	r22, r18
 a16:	73 0b       	sbc	r23, r19
 a18:	84 0b       	sbc	r24, r20
 a1a:	95 0b       	sbc	r25, r21
 a1c:	39 f4       	brne	.+14     	; 0xa2c <__fp_cmp+0x38>
 a1e:	0a 26       	eor	r0, r26
 a20:	61 f0       	breq	.+24     	; 0xa3a <__fp_cmp+0x46>
 a22:	23 2b       	or	r18, r19
 a24:	24 2b       	or	r18, r20
 a26:	25 2b       	or	r18, r21
 a28:	21 f4       	brne	.+8      	; 0xa32 <__fp_cmp+0x3e>
 a2a:	08 95       	ret
 a2c:	0a 26       	eor	r0, r26
 a2e:	09 f4       	brne	.+2      	; 0xa32 <__fp_cmp+0x3e>
 a30:	a1 40       	sbci	r26, 0x01	; 1
 a32:	a6 95       	lsr	r26
 a34:	8f ef       	ldi	r24, 0xFF	; 255
 a36:	81 1d       	adc	r24, r1
 a38:	81 1d       	adc	r24, r1
 a3a:	08 95       	ret

00000a3c <__fp_inf>:
 a3c:	97 f9       	bld	r25, 7
 a3e:	9f 67       	ori	r25, 0x7F	; 127
 a40:	80 e8       	ldi	r24, 0x80	; 128
 a42:	70 e0       	ldi	r23, 0x00	; 0
 a44:	60 e0       	ldi	r22, 0x00	; 0
 a46:	08 95       	ret

00000a48 <__fp_nan>:
 a48:	9f ef       	ldi	r25, 0xFF	; 255
 a4a:	80 ec       	ldi	r24, 0xC0	; 192
 a4c:	08 95       	ret

00000a4e <__fp_pscA>:
 a4e:	00 24       	eor	r0, r0
 a50:	0a 94       	dec	r0
 a52:	16 16       	cp	r1, r22
 a54:	17 06       	cpc	r1, r23
 a56:	18 06       	cpc	r1, r24
 a58:	09 06       	cpc	r0, r25
 a5a:	08 95       	ret

00000a5c <__fp_pscB>:
 a5c:	00 24       	eor	r0, r0
 a5e:	0a 94       	dec	r0
 a60:	12 16       	cp	r1, r18
 a62:	13 06       	cpc	r1, r19
 a64:	14 06       	cpc	r1, r20
 a66:	05 06       	cpc	r0, r21
 a68:	08 95       	ret

00000a6a <__fp_round>:
 a6a:	09 2e       	mov	r0, r25
 a6c:	03 94       	inc	r0
 a6e:	00 0c       	add	r0, r0
 a70:	11 f4       	brne	.+4      	; 0xa76 <__fp_round+0xc>
 a72:	88 23       	and	r24, r24
 a74:	52 f0       	brmi	.+20     	; 0xa8a <__fp_round+0x20>
 a76:	bb 0f       	add	r27, r27
 a78:	40 f4       	brcc	.+16     	; 0xa8a <__fp_round+0x20>
 a7a:	bf 2b       	or	r27, r31
 a7c:	11 f4       	brne	.+4      	; 0xa82 <__fp_round+0x18>
 a7e:	60 ff       	sbrs	r22, 0
 a80:	04 c0       	rjmp	.+8      	; 0xa8a <__fp_round+0x20>
 a82:	6f 5f       	subi	r22, 0xFF	; 255
 a84:	7f 4f       	sbci	r23, 0xFF	; 255
 a86:	8f 4f       	sbci	r24, 0xFF	; 255
 a88:	9f 4f       	sbci	r25, 0xFF	; 255
 a8a:	08 95       	ret

00000a8c <__fp_split3>:
 a8c:	57 fd       	sbrc	r21, 7
 a8e:	90 58       	subi	r25, 0x80	; 128
 a90:	44 0f       	add	r20, r20
 a92:	55 1f       	adc	r21, r21
 a94:	59 f0       	breq	.+22     	; 0xaac <__fp_splitA+0x10>
 a96:	5f 3f       	cpi	r21, 0xFF	; 255
 a98:	71 f0       	breq	.+28     	; 0xab6 <__fp_splitA+0x1a>
 a9a:	47 95       	ror	r20

00000a9c <__fp_splitA>:
 a9c:	88 0f       	add	r24, r24
 a9e:	97 fb       	bst	r25, 7
 aa0:	99 1f       	adc	r25, r25
 aa2:	61 f0       	breq	.+24     	; 0xabc <__fp_splitA+0x20>
 aa4:	9f 3f       	cpi	r25, 0xFF	; 255
 aa6:	79 f0       	breq	.+30     	; 0xac6 <__fp_splitA+0x2a>
 aa8:	87 95       	ror	r24
 aaa:	08 95       	ret
 aac:	12 16       	cp	r1, r18
 aae:	13 06       	cpc	r1, r19
 ab0:	14 06       	cpc	r1, r20
 ab2:	55 1f       	adc	r21, r21
 ab4:	f2 cf       	rjmp	.-28     	; 0xa9a <__fp_split3+0xe>
 ab6:	46 95       	lsr	r20
 ab8:	f1 df       	rcall	.-30     	; 0xa9c <__fp_splitA>
 aba:	08 c0       	rjmp	.+16     	; 0xacc <__fp_splitA+0x30>
 abc:	16 16       	cp	r1, r22
 abe:	17 06       	cpc	r1, r23
 ac0:	18 06       	cpc	r1, r24
 ac2:	99 1f       	adc	r25, r25
 ac4:	f1 cf       	rjmp	.-30     	; 0xaa8 <__fp_splitA+0xc>
 ac6:	86 95       	lsr	r24
 ac8:	71 05       	cpc	r23, r1
 aca:	61 05       	cpc	r22, r1
 acc:	08 94       	sec
 ace:	08 95       	ret

00000ad0 <__fp_zero>:
 ad0:	e8 94       	clt

00000ad2 <__fp_szero>:
 ad2:	bb 27       	eor	r27, r27
 ad4:	66 27       	eor	r22, r22
 ad6:	77 27       	eor	r23, r23
 ad8:	cb 01       	movw	r24, r22
 ada:	97 f9       	bld	r25, 7
 adc:	08 95       	ret

00000ade <__gesf2>:
 ade:	8a df       	rcall	.-236    	; 0x9f4 <__fp_cmp>
 ae0:	08 f4       	brcc	.+2      	; 0xae4 <__gesf2+0x6>
 ae2:	8f ef       	ldi	r24, 0xFF	; 255
 ae4:	08 95       	ret

00000ae6 <__mulsf3>:
 ae6:	0b d0       	rcall	.+22     	; 0xafe <__mulsf3x>
 ae8:	c0 cf       	rjmp	.-128    	; 0xa6a <__fp_round>
 aea:	b1 df       	rcall	.-158    	; 0xa4e <__fp_pscA>
 aec:	28 f0       	brcs	.+10     	; 0xaf8 <__mulsf3+0x12>
 aee:	b6 df       	rcall	.-148    	; 0xa5c <__fp_pscB>
 af0:	18 f0       	brcs	.+6      	; 0xaf8 <__mulsf3+0x12>
 af2:	95 23       	and	r25, r21
 af4:	09 f0       	breq	.+2      	; 0xaf8 <__mulsf3+0x12>
 af6:	a2 cf       	rjmp	.-188    	; 0xa3c <__fp_inf>
 af8:	a7 cf       	rjmp	.-178    	; 0xa48 <__fp_nan>
 afa:	11 24       	eor	r1, r1
 afc:	ea cf       	rjmp	.-44     	; 0xad2 <__fp_szero>

00000afe <__mulsf3x>:
 afe:	c6 df       	rcall	.-116    	; 0xa8c <__fp_split3>
 b00:	a0 f3       	brcs	.-24     	; 0xaea <__mulsf3+0x4>

00000b02 <__mulsf3_pse>:
 b02:	95 9f       	mul	r25, r21
 b04:	d1 f3       	breq	.-12     	; 0xafa <__mulsf3+0x14>
 b06:	95 0f       	add	r25, r21
 b08:	50 e0       	ldi	r21, 0x00	; 0
 b0a:	55 1f       	adc	r21, r21
 b0c:	62 9f       	mul	r22, r18
 b0e:	f0 01       	movw	r30, r0
 b10:	72 9f       	mul	r23, r18
 b12:	bb 27       	eor	r27, r27
 b14:	f0 0d       	add	r31, r0
 b16:	b1 1d       	adc	r27, r1
 b18:	63 9f       	mul	r22, r19
 b1a:	aa 27       	eor	r26, r26
 b1c:	f0 0d       	add	r31, r0
 b1e:	b1 1d       	adc	r27, r1
 b20:	aa 1f       	adc	r26, r26
 b22:	64 9f       	mul	r22, r20
 b24:	66 27       	eor	r22, r22
 b26:	b0 0d       	add	r27, r0
 b28:	a1 1d       	adc	r26, r1
 b2a:	66 1f       	adc	r22, r22
 b2c:	82 9f       	mul	r24, r18
 b2e:	22 27       	eor	r18, r18
 b30:	b0 0d       	add	r27, r0
 b32:	a1 1d       	adc	r26, r1
 b34:	62 1f       	adc	r22, r18
 b36:	73 9f       	mul	r23, r19
 b38:	b0 0d       	add	r27, r0
 b3a:	a1 1d       	adc	r26, r1
 b3c:	62 1f       	adc	r22, r18
 b3e:	83 9f       	mul	r24, r19
 b40:	a0 0d       	add	r26, r0
 b42:	61 1d       	adc	r22, r1
 b44:	22 1f       	adc	r18, r18
 b46:	74 9f       	mul	r23, r20
 b48:	33 27       	eor	r19, r19
 b4a:	a0 0d       	add	r26, r0
 b4c:	61 1d       	adc	r22, r1
 b4e:	23 1f       	adc	r18, r19
 b50:	84 9f       	mul	r24, r20
 b52:	60 0d       	add	r22, r0
 b54:	21 1d       	adc	r18, r1
 b56:	82 2f       	mov	r24, r18
 b58:	76 2f       	mov	r23, r22
 b5a:	6a 2f       	mov	r22, r26
 b5c:	11 24       	eor	r1, r1
 b5e:	9f 57       	subi	r25, 0x7F	; 127
 b60:	50 40       	sbci	r21, 0x00	; 0
 b62:	8a f0       	brmi	.+34     	; 0xb86 <__mulsf3_pse+0x84>
 b64:	e1 f0       	breq	.+56     	; 0xb9e <__mulsf3_pse+0x9c>
 b66:	88 23       	and	r24, r24
 b68:	4a f0       	brmi	.+18     	; 0xb7c <__mulsf3_pse+0x7a>
 b6a:	ee 0f       	add	r30, r30
 b6c:	ff 1f       	adc	r31, r31
 b6e:	bb 1f       	adc	r27, r27
 b70:	66 1f       	adc	r22, r22
 b72:	77 1f       	adc	r23, r23
 b74:	88 1f       	adc	r24, r24
 b76:	91 50       	subi	r25, 0x01	; 1
 b78:	50 40       	sbci	r21, 0x00	; 0
 b7a:	a9 f7       	brne	.-22     	; 0xb66 <__mulsf3_pse+0x64>
 b7c:	9e 3f       	cpi	r25, 0xFE	; 254
 b7e:	51 05       	cpc	r21, r1
 b80:	70 f0       	brcs	.+28     	; 0xb9e <__mulsf3_pse+0x9c>
 b82:	5c cf       	rjmp	.-328    	; 0xa3c <__fp_inf>
 b84:	a6 cf       	rjmp	.-180    	; 0xad2 <__fp_szero>
 b86:	5f 3f       	cpi	r21, 0xFF	; 255
 b88:	ec f3       	brlt	.-6      	; 0xb84 <__mulsf3_pse+0x82>
 b8a:	98 3e       	cpi	r25, 0xE8	; 232
 b8c:	dc f3       	brlt	.-10     	; 0xb84 <__mulsf3_pse+0x82>
 b8e:	86 95       	lsr	r24
 b90:	77 95       	ror	r23
 b92:	67 95       	ror	r22
 b94:	b7 95       	ror	r27
 b96:	f7 95       	ror	r31
 b98:	e7 95       	ror	r30
 b9a:	9f 5f       	subi	r25, 0xFF	; 255
 b9c:	c1 f7       	brne	.-16     	; 0xb8e <__mulsf3_pse+0x8c>
 b9e:	fe 2b       	or	r31, r30
 ba0:	88 0f       	add	r24, r24
 ba2:	91 1d       	adc	r25, r1
 ba4:	96 95       	lsr	r25
 ba6:	87 95       	ror	r24
 ba8:	97 f9       	bld	r25, 7
 baa:	08 95       	ret

00000bac <__udivmodsi4>:
 bac:	a1 e2       	ldi	r26, 0x21	; 33
 bae:	1a 2e       	mov	r1, r26
 bb0:	aa 1b       	sub	r26, r26
 bb2:	bb 1b       	sub	r27, r27
 bb4:	fd 01       	movw	r30, r26
 bb6:	0d c0       	rjmp	.+26     	; 0xbd2 <__udivmodsi4_ep>

00000bb8 <__udivmodsi4_loop>:
 bb8:	aa 1f       	adc	r26, r26
 bba:	bb 1f       	adc	r27, r27
 bbc:	ee 1f       	adc	r30, r30
 bbe:	ff 1f       	adc	r31, r31
 bc0:	a2 17       	cp	r26, r18
 bc2:	b3 07       	cpc	r27, r19
 bc4:	e4 07       	cpc	r30, r20
 bc6:	f5 07       	cpc	r31, r21
 bc8:	20 f0       	brcs	.+8      	; 0xbd2 <__udivmodsi4_ep>
 bca:	a2 1b       	sub	r26, r18
 bcc:	b3 0b       	sbc	r27, r19
 bce:	e4 0b       	sbc	r30, r20
 bd0:	f5 0b       	sbc	r31, r21

00000bd2 <__udivmodsi4_ep>:
 bd2:	66 1f       	adc	r22, r22
 bd4:	77 1f       	adc	r23, r23
 bd6:	88 1f       	adc	r24, r24
 bd8:	99 1f       	adc	r25, r25
 bda:	1a 94       	dec	r1
 bdc:	69 f7       	brne	.-38     	; 0xbb8 <__udivmodsi4_loop>
 bde:	60 95       	com	r22
 be0:	70 95       	com	r23
 be2:	80 95       	com	r24
 be4:	90 95       	com	r25
 be6:	9b 01       	movw	r18, r22
 be8:	ac 01       	movw	r20, r24
 bea:	bd 01       	movw	r22, r26
 bec:	cf 01       	movw	r24, r30
 bee:	08 95       	ret

00000bf0 <__umulhisi3>:
 bf0:	a2 9f       	mul	r26, r18
 bf2:	b0 01       	movw	r22, r0
 bf4:	b3 9f       	mul	r27, r19
 bf6:	c0 01       	movw	r24, r0
 bf8:	a3 9f       	mul	r26, r19
 bfa:	70 0d       	add	r23, r0
 bfc:	81 1d       	adc	r24, r1
 bfe:	11 24       	eor	r1, r1
 c00:	91 1d       	adc	r25, r1
 c02:	b2 9f       	mul	r27, r18
 c04:	70 0d       	add	r23, r0
 c06:	81 1d       	adc	r24, r1
 c08:	11 24       	eor	r1, r1
 c0a:	91 1d       	adc	r25, r1
 c0c:	08 95       	ret

00000c0e <_exit>:
 c0e:	f8 94       	cli

00000c10 <__stop_program>:
 c10:	ff cf       	rjmp	.-2      	; 0xc10 <__stop_program>
