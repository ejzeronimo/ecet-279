
Src.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800200  00000e20  00000eb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000091  00800254  00800254  00000f08  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dba  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011ac  00000000  00000000  00002ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e14  00000000  00000000  0000404e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b4  00000000  00000000  00004e64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a16  00000000  00000000  00005318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011aa  00000000  00000000  00005d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00006ed8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	7b c1       	rjmp	.+758    	; 0x35c <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	87 c0       	rjmp	.+270    	; 0x184 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	92 c1       	rjmp	.+804    	; 0x3b6 <__vector_36>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	a1 c1       	rjmp	.+834    	; 0x410 <__vector_51>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	c8 c1       	rjmp	.+912    	; 0x46a <__vector_54>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e2       	ldi	r30, 0x20	; 32
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 35       	cpi	r26, 0x54	; 84
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e5       	ldi	r26, 0x54	; 84
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 3e       	cpi	r26, 0xE5	; 229
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	13 d4       	rcall	.+2086   	; 0x946 <main>
 120:	7d c6       	rjmp	.+3322   	; 0xe1c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <ADC_init>:
    return readInterrupt;
}

void ADC_setInterruptHandler(AnalogAsyncGetHandler_t cb)
{
    interruptCallback = cb;
 124:	83 e8       	ldi	r24, 0x83	; 131
 126:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 12a:	80 e4       	ldi	r24, 0x40	; 64
 12c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
 130:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
 134:	08 95       	ret

00000136 <ADC_getTenBitValue>:
 136:	ec e7       	ldi	r30, 0x7C	; 124
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	20 81       	ld	r18, Z
 13c:	20 7e       	andi	r18, 0xE0	; 224
 13e:	28 2b       	or	r18, r24
 140:	20 83       	st	Z, r18
 142:	eb e7       	ldi	r30, 0x7B	; 123
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	20 81       	ld	r18, Z
 148:	96 95       	lsr	r25
 14a:	87 95       	ror	r24
 14c:	96 95       	lsr	r25
 14e:	87 95       	ror	r24
 150:	92 2f       	mov	r25, r18
 152:	97 7f       	andi	r25, 0xF7	; 247
 154:	89 2b       	or	r24, r25
 156:	80 83       	st	Z, r24
 158:	ea e7       	ldi	r30, 0x7A	; 122
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	80 64       	ori	r24, 0x40	; 64
 160:	80 83       	st	Z, r24
 162:	80 81       	ld	r24, Z
 164:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 168:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	79 2f       	mov	r23, r25
 170:	68 2b       	or	r22, r24
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	08 d5       	rcall	.+2576   	; 0xb88 <__floatunsisf>
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	40 e8       	ldi	r20, 0x80	; 128
 17e:	5a e3       	ldi	r21, 0x3A	; 58
 180:	b9 c5       	rjmp	.+2930   	; 0xcf4 <__mulsf3>
 182:	08 95       	ret

00000184 <__vector_29>:
}

/* NOTE: Local function implementations */
ISR(ADC_vect)
{
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	0b b6       	in	r0, 0x3b	; 59
 190:	0f 92       	push	r0
 192:	2f 93       	push	r18
 194:	3f 93       	push	r19
 196:	4f 93       	push	r20
 198:	5f 93       	push	r21
 19a:	6f 93       	push	r22
 19c:	7f 93       	push	r23
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
 1a2:	af 93       	push	r26
 1a4:	bf 93       	push	r27
 1a6:	ef 93       	push	r30
 1a8:	ff 93       	push	r31
    readInterrupt = ADCL;
 1aa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 1ae:	28 2f       	mov	r18, r24
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	30 93 57 02 	sts	0x0257, r19	; 0x800257 <readInterrupt+0x1>
 1b6:	20 93 56 02 	sts	0x0256, r18	; 0x800256 <readInterrupt>
    readInterrupt = readInterrupt | (ADCH << 8);
 1ba:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	98 2f       	mov	r25, r24
 1c2:	88 27       	eor	r24, r24
 1c4:	82 2b       	or	r24, r18
 1c6:	93 2b       	or	r25, r19
 1c8:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <readInterrupt+0x1>
 1cc:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <readInterrupt>

    interruptCallback(readInterrupt);
 1d0:	e0 91 54 02 	lds	r30, 0x0254	; 0x800254 <__data_end>
 1d4:	f0 91 55 02 	lds	r31, 0x0255	; 0x800255 <__data_end+0x1>
 1d8:	19 95       	eicall
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	7f 91       	pop	r23
 1e8:	6f 91       	pop	r22
 1ea:	5f 91       	pop	r21
 1ec:	4f 91       	pop	r20
 1ee:	3f 91       	pop	r19
 1f0:	2f 91       	pop	r18
 1f2:	0f 90       	pop	r0
 1f4:	0b be       	out	0x3b, r0	; 59
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <SERIAL_uartInit>:
    for(uint16_t i = 0; i < length; i++)
    {
        // wait for uart tx to be ready then send out uart
        sendCharHelper(port, pTransmitString + i);
    }
}
 200:	cf 93       	push	r28
 202:	c8 2f       	mov	r28, r24
 204:	9a 01       	movw	r18, r20
 206:	ab 01       	movw	r20, r22
 208:	60 e4       	ldi	r22, 0x40	; 64
 20a:	72 e4       	ldi	r23, 0x42	; 66
 20c:	8f e0       	ldi	r24, 0x0F	; 15
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	d4 d5       	rcall	.+2984   	; 0xdba <__udivmodsi4>
 212:	21 50       	subi	r18, 0x01	; 1
 214:	31 09       	sbc	r19, r1
 216:	c2 30       	cpi	r28, 0x02	; 2
 218:	11 f1       	breq	.+68     	; 0x25e <SERIAL_uartInit+0x5e>
 21a:	c3 30       	cpi	r28, 0x03	; 3
 21c:	79 f1       	breq	.+94     	; 0x27c <SERIAL_uartInit+0x7c>
 21e:	c1 30       	cpi	r28, 0x01	; 1
 220:	79 f0       	breq	.+30     	; 0x240 <SERIAL_uartInit+0x40>
 222:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 226:	88 e1       	ldi	r24, 0x18	; 24
 228:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 22c:	86 e0       	ldi	r24, 0x06	; 6
 22e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 232:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 236:	83 2f       	mov	r24, r19
 238:	8f 70       	andi	r24, 0x0F	; 15
 23a:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 23e:	2c c0       	rjmp	.+88     	; 0x298 <SERIAL_uartInit+0x98>
 240:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 244:	88 e1       	ldi	r24, 0x18	; 24
 246:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
 24a:	86 e0       	ldi	r24, 0x06	; 6
 24c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
 250:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
 254:	83 2f       	mov	r24, r19
 256:	8f 70       	andi	r24, 0x0F	; 15
 258:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
 25c:	1d c0       	rjmp	.+58     	; 0x298 <SERIAL_uartInit+0x98>
 25e:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
 262:	88 e1       	ldi	r24, 0x18	; 24
 264:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7c00d1>
 268:	86 e0       	ldi	r24, 0x06	; 6
 26a:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7c00d2>
 26e:	20 93 d4 00 	sts	0x00D4, r18	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7c00d4>
 272:	83 2f       	mov	r24, r19
 274:	8f 70       	andi	r24, 0x0F	; 15
 276:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7c00d5>
 27a:	0e c0       	rjmp	.+28     	; 0x298 <SERIAL_uartInit+0x98>
 27c:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__TEXT_REGION_LENGTH__+0x7c0130>
 280:	88 e1       	ldi	r24, 0x18	; 24
 282:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x7c0131>
 286:	86 e0       	ldi	r24, 0x06	; 6
 288:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x7c0132>
 28c:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
 290:	83 2f       	mov	r24, r19
 292:	8f 70       	andi	r24, 0x0F	; 15
 294:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <SERIAL_uartInitAsync>:
 29c:	cf 93       	push	r28
 29e:	c8 2f       	mov	r28, r24
 2a0:	af df       	rcall	.-162    	; 0x200 <SERIAL_uartInit>
 2a2:	c2 30       	cpi	r28, 0x02	; 2
 2a4:	61 f0       	breq	.+24     	; 0x2be <SERIAL_uartInitAsync+0x22>
 2a6:	c3 30       	cpi	r28, 0x03	; 3
 2a8:	71 f0       	breq	.+28     	; 0x2c6 <SERIAL_uartInitAsync+0x2a>
 2aa:	c1 30       	cpi	r28, 0x01	; 1
 2ac:	21 f0       	breq	.+8      	; 0x2b6 <SERIAL_uartInitAsync+0x1a>
 2ae:	88 e9       	ldi	r24, 0x98	; 152
 2b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 2b4:	0b c0       	rjmp	.+22     	; 0x2cc <SERIAL_uartInitAsync+0x30>
 2b6:	88 e9       	ldi	r24, 0x98	; 152
 2b8:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
 2bc:	07 c0       	rjmp	.+14     	; 0x2cc <SERIAL_uartInitAsync+0x30>
 2be:	88 e9       	ldi	r24, 0x98	; 152
 2c0:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7c00d1>
 2c4:	03 c0       	rjmp	.+6      	; 0x2cc <SERIAL_uartInitAsync+0x30>
 2c6:	88 e9       	ldi	r24, 0x98	; 152
 2c8:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x7c0131>
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <SERIAL_uartAsyncGetHandler>:
 2d0:	e8 2f       	mov	r30, r24
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	ee 0f       	add	r30, r30
 2d6:	ff 1f       	adc	r31, r31
 2d8:	e8 5a       	subi	r30, 0xA8	; 168
 2da:	fd 4f       	sbci	r31, 0xFD	; 253
 2dc:	71 83       	std	Z+1, r23	; 0x01
 2de:	60 83       	st	Z, r22
 2e0:	08 95       	ret

000002e2 <pollThenSetHelper>:
 2e2:	fc 01       	movw	r30, r24
 2e4:	90 81       	ld	r25, Z
 2e6:	96 23       	and	r25, r22
 2e8:	e9 f3       	breq	.-6      	; 0x2e4 <pollThenSetHelper+0x2>
 2ea:	f9 01       	movw	r30, r18
 2ec:	80 81       	ld	r24, Z
 2ee:	fa 01       	movw	r30, r20
 2f0:	80 83       	st	Z, r24
 2f2:	08 95       	ret

000002f4 <sendCharHelper>:
 2f4:	9b 01       	movw	r18, r22
 2f6:	82 30       	cpi	r24, 0x02	; 2
 2f8:	91 f0       	breq	.+36     	; 0x31e <sendCharHelper+0x2a>
 2fa:	83 30       	cpi	r24, 0x03	; 3
 2fc:	b9 f0       	breq	.+46     	; 0x32c <sendCharHelper+0x38>
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	39 f0       	breq	.+14     	; 0x310 <sendCharHelper+0x1c>
 302:	46 ec       	ldi	r20, 0xC6	; 198
 304:	50 e0       	ldi	r21, 0x00	; 0
 306:	60 e2       	ldi	r22, 0x20	; 32
 308:	80 ec       	ldi	r24, 0xC0	; 192
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	ea cf       	rjmp	.-44     	; 0x2e2 <pollThenSetHelper>
 30e:	08 95       	ret
 310:	4e ec       	ldi	r20, 0xCE	; 206
 312:	50 e0       	ldi	r21, 0x00	; 0
 314:	60 e2       	ldi	r22, 0x20	; 32
 316:	88 ec       	ldi	r24, 0xC8	; 200
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	e3 cf       	rjmp	.-58     	; 0x2e2 <pollThenSetHelper>
 31c:	08 95       	ret
 31e:	46 ed       	ldi	r20, 0xD6	; 214
 320:	50 e0       	ldi	r21, 0x00	; 0
 322:	60 e2       	ldi	r22, 0x20	; 32
 324:	80 ed       	ldi	r24, 0xD0	; 208
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	dc cf       	rjmp	.-72     	; 0x2e2 <pollThenSetHelper>
 32a:	08 95       	ret
 32c:	46 e3       	ldi	r20, 0x36	; 54
 32e:	51 e0       	ldi	r21, 0x01	; 1
 330:	60 e2       	ldi	r22, 0x20	; 32
 332:	80 e3       	ldi	r24, 0x30	; 48
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	d5 cf       	rjmp	.-86     	; 0x2e2 <pollThenSetHelper>
 338:	08 95       	ret

0000033a <SERIAL_uartSend>:
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	18 2f       	mov	r17, r24
 342:	eb 01       	movw	r28, r22
 344:	04 c0       	rjmp	.+8      	; 0x34e <SERIAL_uartSend+0x14>
 346:	be 01       	movw	r22, r28
 348:	81 2f       	mov	r24, r17
 34a:	d4 df       	rcall	.-88     	; 0x2f4 <sendCharHelper>
 34c:	21 96       	adiw	r28, 0x01	; 1
 34e:	88 81       	ld	r24, Y
 350:	81 11       	cpse	r24, r1
 352:	f9 cf       	rjmp	.-14     	; 0x346 <SERIAL_uartSend+0xc>
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	1f 91       	pop	r17
 35a:	08 95       	ret

0000035c <__vector_25>:
            break;
    }
}

ISR(USART0_RX_vect)
{
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	0f 92       	push	r0
 364:	11 24       	eor	r1, r1
 366:	0b b6       	in	r0, 0x3b	; 59
 368:	0f 92       	push	r0
 36a:	2f 93       	push	r18
 36c:	3f 93       	push	r19
 36e:	4f 93       	push	r20
 370:	5f 93       	push	r21
 372:	6f 93       	push	r22
 374:	7f 93       	push	r23
 376:	8f 93       	push	r24
 378:	9f 93       	push	r25
 37a:	af 93       	push	r26
 37c:	bf 93       	push	r27
 37e:	ef 93       	push	r30
 380:	ff 93       	push	r31
    interruptCallback[serialUsart0](UDR0);
 382:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <interruptCallback>
 386:	f0 91 59 02 	lds	r31, 0x0259	; 0x800259 <interruptCallback+0x1>
 38a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 38e:	19 95       	eicall
}
 390:	ff 91       	pop	r31
 392:	ef 91       	pop	r30
 394:	bf 91       	pop	r27
 396:	af 91       	pop	r26
 398:	9f 91       	pop	r25
 39a:	8f 91       	pop	r24
 39c:	7f 91       	pop	r23
 39e:	6f 91       	pop	r22
 3a0:	5f 91       	pop	r21
 3a2:	4f 91       	pop	r20
 3a4:	3f 91       	pop	r19
 3a6:	2f 91       	pop	r18
 3a8:	0f 90       	pop	r0
 3aa:	0b be       	out	0x3b, r0	; 59
 3ac:	0f 90       	pop	r0
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	0f 90       	pop	r0
 3b2:	1f 90       	pop	r1
 3b4:	18 95       	reti

000003b6 <__vector_36>:

ISR(USART1_RX_vect)
{
 3b6:	1f 92       	push	r1
 3b8:	0f 92       	push	r0
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	0f 92       	push	r0
 3be:	11 24       	eor	r1, r1
 3c0:	0b b6       	in	r0, 0x3b	; 59
 3c2:	0f 92       	push	r0
 3c4:	2f 93       	push	r18
 3c6:	3f 93       	push	r19
 3c8:	4f 93       	push	r20
 3ca:	5f 93       	push	r21
 3cc:	6f 93       	push	r22
 3ce:	7f 93       	push	r23
 3d0:	8f 93       	push	r24
 3d2:	9f 93       	push	r25
 3d4:	af 93       	push	r26
 3d6:	bf 93       	push	r27
 3d8:	ef 93       	push	r30
 3da:	ff 93       	push	r31
    interruptCallback[serialUsart1](UDR1);
 3dc:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <interruptCallback+0x2>
 3e0:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <interruptCallback+0x3>
 3e4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 3e8:	19 95       	eicall
}
 3ea:	ff 91       	pop	r31
 3ec:	ef 91       	pop	r30
 3ee:	bf 91       	pop	r27
 3f0:	af 91       	pop	r26
 3f2:	9f 91       	pop	r25
 3f4:	8f 91       	pop	r24
 3f6:	7f 91       	pop	r23
 3f8:	6f 91       	pop	r22
 3fa:	5f 91       	pop	r21
 3fc:	4f 91       	pop	r20
 3fe:	3f 91       	pop	r19
 400:	2f 91       	pop	r18
 402:	0f 90       	pop	r0
 404:	0b be       	out	0x3b, r0	; 59
 406:	0f 90       	pop	r0
 408:	0f be       	out	0x3f, r0	; 63
 40a:	0f 90       	pop	r0
 40c:	1f 90       	pop	r1
 40e:	18 95       	reti

00000410 <__vector_51>:

ISR(USART2_RX_vect)
{
 410:	1f 92       	push	r1
 412:	0f 92       	push	r0
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	0f 92       	push	r0
 418:	11 24       	eor	r1, r1
 41a:	0b b6       	in	r0, 0x3b	; 59
 41c:	0f 92       	push	r0
 41e:	2f 93       	push	r18
 420:	3f 93       	push	r19
 422:	4f 93       	push	r20
 424:	5f 93       	push	r21
 426:	6f 93       	push	r22
 428:	7f 93       	push	r23
 42a:	8f 93       	push	r24
 42c:	9f 93       	push	r25
 42e:	af 93       	push	r26
 430:	bf 93       	push	r27
 432:	ef 93       	push	r30
 434:	ff 93       	push	r31
    interruptCallback[serialUsart2](UDR2);
 436:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <interruptCallback+0x4>
 43a:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <interruptCallback+0x5>
 43e:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
 442:	19 95       	eicall
}
 444:	ff 91       	pop	r31
 446:	ef 91       	pop	r30
 448:	bf 91       	pop	r27
 44a:	af 91       	pop	r26
 44c:	9f 91       	pop	r25
 44e:	8f 91       	pop	r24
 450:	7f 91       	pop	r23
 452:	6f 91       	pop	r22
 454:	5f 91       	pop	r21
 456:	4f 91       	pop	r20
 458:	3f 91       	pop	r19
 45a:	2f 91       	pop	r18
 45c:	0f 90       	pop	r0
 45e:	0b be       	out	0x3b, r0	; 59
 460:	0f 90       	pop	r0
 462:	0f be       	out	0x3f, r0	; 63
 464:	0f 90       	pop	r0
 466:	1f 90       	pop	r1
 468:	18 95       	reti

0000046a <__vector_54>:

ISR(USART3_RX_vect)
{
 46a:	1f 92       	push	r1
 46c:	0f 92       	push	r0
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	0f 92       	push	r0
 472:	11 24       	eor	r1, r1
 474:	0b b6       	in	r0, 0x3b	; 59
 476:	0f 92       	push	r0
 478:	2f 93       	push	r18
 47a:	3f 93       	push	r19
 47c:	4f 93       	push	r20
 47e:	5f 93       	push	r21
 480:	6f 93       	push	r22
 482:	7f 93       	push	r23
 484:	8f 93       	push	r24
 486:	9f 93       	push	r25
 488:	af 93       	push	r26
 48a:	bf 93       	push	r27
 48c:	ef 93       	push	r30
 48e:	ff 93       	push	r31
    interruptCallback[serialUsart3](UDR3);
 490:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <interruptCallback+0x6>
 494:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <interruptCallback+0x7>
 498:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
 49c:	19 95       	eicall
 49e:	ff 91       	pop	r31
 4a0:	ef 91       	pop	r30
 4a2:	bf 91       	pop	r27
 4a4:	af 91       	pop	r26
 4a6:	9f 91       	pop	r25
 4a8:	8f 91       	pop	r24
 4aa:	7f 91       	pop	r23
 4ac:	6f 91       	pop	r22
 4ae:	5f 91       	pop	r21
 4b0:	4f 91       	pop	r20
 4b2:	3f 91       	pop	r19
 4b4:	2f 91       	pop	r18
 4b6:	0f 90       	pop	r0
 4b8:	0b be       	out	0x3b, r0	; 59
 4ba:	0f 90       	pop	r0
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	0f 90       	pop	r0
 4c0:	1f 90       	pop	r1
 4c2:	18 95       	reti

000004c4 <SM_init>:
// instance pointer to the motor port
static uint8_t * sMotorPort;

/* NOTE: Function implementations */
void SM_init(uint8_t volatile * const pRegister, uint8_t volatile * const pPort)
{
 4c4:	fc 01       	movw	r30, r24
    // configure port register
    *pRegister |= 0x0f;
 4c6:	90 81       	ld	r25, Z
 4c8:	9f 60       	ori	r25, 0x0F	; 15
 4ca:	90 83       	st	Z, r25

    // turn on pullup resisitors on the bottom nibble
    *pPort = (*pPort & 0xf0) | 0x00;
 4cc:	fb 01       	movw	r30, r22
 4ce:	80 81       	ld	r24, Z
 4d0:	80 7f       	andi	r24, 0xF0	; 240
 4d2:	80 83       	st	Z, r24

    // save the port pointer to the static var
    sMotorPort = (uint8_t *)pPort;
 4d4:	70 93 61 02 	sts	0x0261, r23	; 0x800261 <sMotorPort+0x1>
 4d8:	60 93 60 02 	sts	0x0260, r22	; 0x800260 <sMotorPort>
 4dc:	08 95       	ret

000004de <getModeAndSteps>:
    *sMotorPort = *sMotorPort & 0xf0;
}

/* NOTE: Local function implementations */
StepperMotorModeData_t getModeAndSteps(StepperMotorRunMode_t mode, double rotation)
{
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	cd b7       	in	r28, 0x3d	; 61
 4e4:	de b7       	in	r29, 0x3e	; 62
 4e6:	28 97       	sbiw	r28, 0x08	; 8
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	f8 94       	cli
 4ec:	de bf       	out	0x3e, r29	; 62
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	cd bf       	out	0x3d, r28	; 61
 4f2:	28 2f       	mov	r18, r24
 4f4:	cb 01       	movw	r24, r22
 4f6:	ba 01       	movw	r22, r20
    uint8_t * pArray;
    uint8_t   size  = 0;
    uint32_t  steps = 0;

    switch(mode)
 4f8:	21 30       	cpi	r18, 0x01	; 1
 4fa:	71 f0       	breq	.+28     	; 0x518 <getModeAndSteps+0x3a>
 4fc:	18 f0       	brcs	.+6      	; 0x504 <getModeAndSteps+0x26>
 4fe:	22 30       	cpi	r18, 0x02	; 2
 500:	a9 f0       	breq	.+42     	; 0x52c <getModeAndSteps+0x4e>
 502:	1e c0       	rjmp	.+60     	; 0x540 <getModeAndSteps+0x62>
    {
        case stepperModeWave:
        {
            pArray = sWaveStepMap;
            size   = sizeof(sWaveStepMap) / sizeof(sWaveStepMap[0]);
            steps  = (rotation * 2048);
 504:	20 e0       	ldi	r18, 0x00	; 0
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	40 e0       	ldi	r20, 0x00	; 0
 50a:	55 e4       	ldi	r21, 0x45	; 69
 50c:	f3 d3       	rcall	.+2022   	; 0xcf4 <__mulsf3>
 50e:	10 d3       	rcall	.+1568   	; 0xb30 <__fixunssfsi>
    switch(mode)
    {
        case stepperModeWave:
        {
            pArray = sWaveStepMap;
            size   = sizeof(sWaveStepMap) / sizeof(sWaveStepMap[0]);
 510:	24 e0       	ldi	r18, 0x04	; 4

    switch(mode)
    {
        case stepperModeWave:
        {
            pArray = sWaveStepMap;
 512:	4c e0       	ldi	r20, 0x0C	; 12
 514:	52 e0       	ldi	r21, 0x02	; 2
            size   = sizeof(sWaveStepMap) / sizeof(sWaveStepMap[0]);
            steps  = (rotation * 2048);
        }
        break;
 516:	1b c0       	rjmp	.+54     	; 0x54e <getModeAndSteps+0x70>
        case stepperModeFull:
        {
            pArray = sFullStepMap;
            size   = sizeof(sFullStepMap) / sizeof(sFullStepMap[0]);
            steps  = (rotation * 2048);
 518:	20 e0       	ldi	r18, 0x00	; 0
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	40 e0       	ldi	r20, 0x00	; 0
 51e:	55 e4       	ldi	r21, 0x45	; 69
 520:	e9 d3       	rcall	.+2002   	; 0xcf4 <__mulsf3>
 522:	06 d3       	rcall	.+1548   	; 0xb30 <__fixunssfsi>
        }
        break;
        case stepperModeFull:
        {
            pArray = sFullStepMap;
            size   = sizeof(sFullStepMap) / sizeof(sFullStepMap[0]);
 524:	24 e0       	ldi	r18, 0x04	; 4
            steps  = (rotation * 2048);
        }
        break;
        case stepperModeFull:
        {
            pArray = sFullStepMap;
 526:	48 e0       	ldi	r20, 0x08	; 8
 528:	52 e0       	ldi	r21, 0x02	; 2
            size   = sizeof(sFullStepMap) / sizeof(sFullStepMap[0]);
            steps  = (rotation * 2048);
        }
        break;
 52a:	11 c0       	rjmp	.+34     	; 0x54e <getModeAndSteps+0x70>
        case stepperModeHalf:
        {
            pArray = sHalfStepMap;
            size   = sizeof(sHalfStepMap) / sizeof(sHalfStepMap[0]);
            steps  = (rotation * 4096);
 52c:	20 e0       	ldi	r18, 0x00	; 0
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	40 e8       	ldi	r20, 0x80	; 128
 532:	55 e4       	ldi	r21, 0x45	; 69
 534:	df d3       	rcall	.+1982   	; 0xcf4 <__mulsf3>
 536:	fc d2       	rcall	.+1528   	; 0xb30 <__fixunssfsi>
        }
        break;
        case stepperModeHalf:
        {
            pArray = sHalfStepMap;
            size   = sizeof(sHalfStepMap) / sizeof(sHalfStepMap[0]);
 538:	28 e0       	ldi	r18, 0x08	; 8
            steps  = (rotation * 2048);
        }
        break;
        case stepperModeHalf:
        {
            pArray = sHalfStepMap;
 53a:	40 e0       	ldi	r20, 0x00	; 0
 53c:	52 e0       	ldi	r21, 0x02	; 2
            size   = sizeof(sHalfStepMap) / sizeof(sHalfStepMap[0]);
            steps  = (rotation * 4096);
        }
        break;
 53e:	07 c0       	rjmp	.+14     	; 0x54e <getModeAndSteps+0x70>
/* NOTE: Local function implementations */
StepperMotorModeData_t getModeAndSteps(StepperMotorRunMode_t mode, double rotation)
{
    uint8_t * pArray;
    uint8_t   size  = 0;
    uint32_t  steps = 0;
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	90 e0       	ldi	r25, 0x00	; 0

/* NOTE: Local function implementations */
StepperMotorModeData_t getModeAndSteps(StepperMotorRunMode_t mode, double rotation)
{
    uint8_t * pArray;
    uint8_t   size  = 0;
 548:	20 e0       	ldi	r18, 0x00	; 0
}

/* NOTE: Local function implementations */
StepperMotorModeData_t getModeAndSteps(StepperMotorRunMode_t mode, double rotation)
{
    uint8_t * pArray;
 54a:	40 e0       	ldi	r20, 0x00	; 0
 54c:	50 e0       	ldi	r21, 0x00	; 0
        break;
        default:
            break;
    };

    return (StepperMotorModeData_t){
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	3a 83       	std	Y+2, r19	; 0x02
 552:	29 83       	std	Y+1, r18	; 0x01
 554:	5c 83       	std	Y+4, r21	; 0x04
 556:	4b 83       	std	Y+3, r20	; 0x03
 558:	3a 81       	ldd	r19, Y+2	; 0x02
 55a:	5c 81       	ldd	r21, Y+4	; 0x04
        .pArray    = pArray,
        .steps     = steps,
        .arraySize = size,
    };
 55c:	28 96       	adiw	r28, 0x08	; 8
 55e:	0f b6       	in	r0, 0x3f	; 63
 560:	f8 94       	cli
 562:	de bf       	out	0x3e, r29	; 62
 564:	0f be       	out	0x3f, r0	; 63
 566:	cd bf       	out	0x3d, r28	; 61
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	08 95       	ret

0000056e <SM_move>:
    // save the port pointer to the static var
    sMotorPort = (uint8_t *)pPort;
}

void SM_move(StepperMotorRunMode_t mode, double distance)
{
 56e:	cf 92       	push	r12
 570:	df 92       	push	r13
 572:	ef 92       	push	r14
 574:	ff 92       	push	r15
 576:	0f 93       	push	r16
 578:	1f 93       	push	r17
 57a:	cf 93       	push	r28
 57c:	df 93       	push	r29
 57e:	cd b7       	in	r28, 0x3d	; 61
 580:	de b7       	in	r29, 0x3e	; 62
 582:	28 97       	sbiw	r28, 0x08	; 8
 584:	0f b6       	in	r0, 0x3f	; 63
 586:	f8 94       	cli
 588:	de bf       	out	0x3e, r29	; 62
 58a:	0f be       	out	0x3f, r0	; 63
 58c:	cd bf       	out	0x3d, r28	; 61
    StepperMotorModeData_t data = getModeAndSteps(mode, distance);
 58e:	a7 df       	rcall	.-178    	; 0x4de <getModeAndSteps>
 590:	29 83       	std	Y+1, r18	; 0x01
 592:	3a 83       	std	Y+2, r19	; 0x02
 594:	4b 83       	std	Y+3, r20	; 0x03
 596:	5c 83       	std	Y+4, r21	; 0x04
 598:	6d 83       	std	Y+5, r22	; 0x05
 59a:	7e 83       	std	Y+6, r23	; 0x06
 59c:	8f 83       	std	Y+7, r24	; 0x07
 59e:	98 87       	std	Y+8, r25	; 0x08

    for(uint32_t i = 0, j = 0; i < data.steps; i++)
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	dc 01       	movw	r26, r24
 5a6:	40 e0       	ldi	r20, 0x00	; 0
 5a8:	50 e0       	ldi	r21, 0x00	; 0
 5aa:	ba 01       	movw	r22, r20
 5ac:	2d c0       	rjmp	.+90     	; 0x608 <SM_move+0x9a>
    {
        *sMotorPort = (*sMotorPort & 0xf0) | data.pArray[j++];
 5ae:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <sMotorPort>
 5b2:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <sMotorPort+0x1>
 5b6:	10 81       	ld	r17, Z
 5b8:	2b 81       	ldd	r18, Y+3	; 0x03
 5ba:	3c 81       	ldd	r19, Y+4	; 0x04
 5bc:	6c 01       	movw	r12, r24
 5be:	7d 01       	movw	r14, r26
 5c0:	0f ef       	ldi	r16, 0xFF	; 255
 5c2:	c0 1a       	sub	r12, r16
 5c4:	d0 0a       	sbc	r13, r16
 5c6:	e0 0a       	sbc	r14, r16
 5c8:	f0 0a       	sbc	r15, r16
 5ca:	d9 01       	movw	r26, r18
 5cc:	a8 0f       	add	r26, r24
 5ce:	b9 1f       	adc	r27, r25
 5d0:	9c 91       	ld	r25, X
 5d2:	81 2f       	mov	r24, r17
 5d4:	80 7f       	andi	r24, 0xF0	; 240
 5d6:	89 2b       	or	r24, r25
 5d8:	80 83       	st	Z, r24

        if(j >= data.arraySize)
 5da:	89 81       	ldd	r24, Y+1	; 0x01
 5dc:	9a 81       	ldd	r25, Y+2	; 0x02
 5de:	a0 e0       	ldi	r26, 0x00	; 0
 5e0:	b0 e0       	ldi	r27, 0x00	; 0
 5e2:	c8 16       	cp	r12, r24
 5e4:	d9 06       	cpc	r13, r25
 5e6:	ea 06       	cpc	r14, r26
 5e8:	fb 06       	cpc	r15, r27
 5ea:	18 f4       	brcc	.+6      	; 0x5f2 <SM_move+0x84>
{
    StepperMotorModeData_t data = getModeAndSteps(mode, distance);

    for(uint32_t i = 0, j = 0; i < data.steps; i++)
    {
        *sMotorPort = (*sMotorPort & 0xf0) | data.pArray[j++];
 5ec:	d7 01       	movw	r26, r14
 5ee:	c6 01       	movw	r24, r12
 5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <SM_move+0x8a>

        if(j >= data.arraySize)
        {
            j = 0;
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	dc 01       	movw	r26, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5f8:	e0 ee       	ldi	r30, 0xE0	; 224
 5fa:	fe e2       	ldi	r31, 0x2E	; 46
 5fc:	31 97       	sbiw	r30, 0x01	; 1
 5fe:	f1 f7       	brne	.-4      	; 0x5fc <SM_move+0x8e>

void SM_move(StepperMotorRunMode_t mode, double distance)
{
    StepperMotorModeData_t data = getModeAndSteps(mode, distance);

    for(uint32_t i = 0, j = 0; i < data.steps; i++)
 600:	4f 5f       	subi	r20, 0xFF	; 255
 602:	5f 4f       	sbci	r21, 0xFF	; 255
 604:	6f 4f       	sbci	r22, 0xFF	; 255
 606:	7f 4f       	sbci	r23, 0xFF	; 255
 608:	cd 80       	ldd	r12, Y+5	; 0x05
 60a:	de 80       	ldd	r13, Y+6	; 0x06
 60c:	ef 80       	ldd	r14, Y+7	; 0x07
 60e:	f8 84       	ldd	r15, Y+8	; 0x08
 610:	4c 15       	cp	r20, r12
 612:	5d 05       	cpc	r21, r13
 614:	6e 05       	cpc	r22, r14
 616:	7f 05       	cpc	r23, r15
 618:	50 f2       	brcs	.-108    	; 0x5ae <SM_move+0x40>
        }

        _delay_ms(3);
    }

    *sMotorPort = *sMotorPort & 0xf0;
 61a:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <sMotorPort>
 61e:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <sMotorPort+0x1>
 622:	80 81       	ld	r24, Z
 624:	80 7f       	andi	r24, 0xF0	; 240
 626:	80 83       	st	Z, r24
}
 628:	28 96       	adiw	r28, 0x08	; 8
 62a:	0f b6       	in	r0, 0x3f	; 63
 62c:	f8 94       	cli
 62e:	de bf       	out	0x3e, r29	; 62
 630:	0f be       	out	0x3f, r0	; 63
 632:	cd bf       	out	0x3d, r28	; 61
 634:	df 91       	pop	r29
 636:	cf 91       	pop	r28
 638:	1f 91       	pop	r17
 63a:	0f 91       	pop	r16
 63c:	ff 90       	pop	r15
 63e:	ef 90       	pop	r14
 640:	df 90       	pop	r13
 642:	cf 90       	pop	r12
 644:	08 95       	ret

00000646 <SM_movePosition>:

void SM_movePosition(StepperMotorRunMode_t mode, uint16_t distance)
{
 646:	cf 93       	push	r28
 648:	c8 2f       	mov	r28, r24
    SM_move(mode, ((double)distance / 360));
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	9c d2       	rcall	.+1336   	; 0xb88 <__floatunsisf>
 650:	20 e0       	ldi	r18, 0x00	; 0
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	44 eb       	ldi	r20, 0xB4	; 180
 656:	53 e4       	ldi	r21, 0x43	; 67
 658:	03 d2       	rcall	.+1030   	; 0xa60 <__divsf3>
 65a:	ab 01       	movw	r20, r22
 65c:	bc 01       	movw	r22, r24
 65e:	8c 2f       	mov	r24, r28
 660:	86 df       	rcall	.-244    	; 0x56e <SM_move>
}
 662:	cf 91       	pop	r28
 664:	08 95       	ret

00000666 <SM_moveTime>:

void SM_moveTime(StepperMotorRunMode_t mode, bool direction, double time, double stepTime)
{
 666:	3f 92       	push	r3
 668:	4f 92       	push	r4
 66a:	5f 92       	push	r5
 66c:	6f 92       	push	r6
 66e:	7f 92       	push	r7
 670:	8f 92       	push	r8
 672:	9f 92       	push	r9
 674:	af 92       	push	r10
 676:	bf 92       	push	r11
 678:	cf 92       	push	r12
 67a:	df 92       	push	r13
 67c:	ef 92       	push	r14
 67e:	ff 92       	push	r15
 680:	0f 93       	push	r16
 682:	1f 93       	push	r17
 684:	cf 93       	push	r28
 686:	df 93       	push	r29
 688:	cd b7       	in	r28, 0x3d	; 61
 68a:	de b7       	in	r29, 0x3e	; 62
 68c:	60 97       	sbiw	r28, 0x10	; 16
 68e:	0f b6       	in	r0, 0x3f	; 63
 690:	f8 94       	cli
 692:	de bf       	out	0x3e, r29	; 62
 694:	0f be       	out	0x3f, r0	; 63
 696:	cd bf       	out	0x3d, r28	; 61
 698:	36 2e       	mov	r3, r22
 69a:	2d 87       	std	Y+13, r18	; 0x0d
 69c:	3e 87       	std	Y+14, r19	; 0x0e
 69e:	4f 87       	std	Y+15, r20	; 0x0f
 6a0:	58 8b       	std	Y+16, r21	; 0x10
 6a2:	e9 86       	std	Y+9, r14	; 0x09
 6a4:	fa 86       	std	Y+10, r15	; 0x0a
 6a6:	0b 87       	std	Y+11, r16	; 0x0b
 6a8:	1c 87       	std	Y+12, r17	; 0x0c
    StepperMotorModeData_t data = getModeAndSteps(mode, 0);
 6aa:	40 e0       	ldi	r20, 0x00	; 0
 6ac:	50 e0       	ldi	r21, 0x00	; 0
 6ae:	ba 01       	movw	r22, r20
 6b0:	16 df       	rcall	.-468    	; 0x4de <getModeAndSteps>
 6b2:	29 83       	std	Y+1, r18	; 0x01
 6b4:	3a 83       	std	Y+2, r19	; 0x02
 6b6:	4b 83       	std	Y+3, r20	; 0x03
 6b8:	5c 83       	std	Y+4, r21	; 0x04
 6ba:	6d 83       	std	Y+5, r22	; 0x05
 6bc:	7e 83       	std	Y+6, r23	; 0x06
 6be:	8f 83       	std	Y+7, r24	; 0x07
 6c0:	98 87       	std	Y+8, r25	; 0x08

    for(uint32_t i = 0, j = (direction ? data.arraySize : 0); i < (time / stepTime); i++)
 6c2:	33 20       	and	r3, r3
 6c4:	29 f0       	breq	.+10     	; 0x6d0 <SM_moveTime+0x6a>
 6c6:	c9 80       	ldd	r12, Y+1	; 0x01
 6c8:	da 80       	ldd	r13, Y+2	; 0x02
 6ca:	e1 2c       	mov	r14, r1
 6cc:	f1 2c       	mov	r15, r1
 6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <SM_moveTime+0x70>
 6d0:	c1 2c       	mov	r12, r1
 6d2:	d1 2c       	mov	r13, r1
 6d4:	76 01       	movw	r14, r12

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 6d6:	81 2c       	mov	r8, r1
 6d8:	91 2c       	mov	r9, r1
 6da:	54 01       	movw	r10, r8
 6dc:	71 c0       	rjmp	.+226    	; 0x7c0 <SM_moveTime+0x15a>
    {
        *sMotorPort = (*sMotorPort & 0xf0) | data.pArray[(direction ? j-- : j++)];
 6de:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <sMotorPort>
 6e2:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <sMotorPort+0x1>
 6e6:	80 81       	ld	r24, Z
 6e8:	80 7f       	andi	r24, 0xF0	; 240
 6ea:	2b 81       	ldd	r18, Y+3	; 0x03
 6ec:	3c 81       	ldd	r19, Y+4	; 0x04
 6ee:	33 20       	and	r3, r3
 6f0:	39 f0       	breq	.+14     	; 0x700 <SM_moveTime+0x9a>
 6f2:	b7 01       	movw	r22, r14
 6f4:	a6 01       	movw	r20, r12
 6f6:	41 50       	subi	r20, 0x01	; 1
 6f8:	51 09       	sbc	r21, r1
 6fa:	61 09       	sbc	r22, r1
 6fc:	71 09       	sbc	r23, r1
 6fe:	06 c0       	rjmp	.+12     	; 0x70c <SM_moveTime+0xa6>
 700:	b7 01       	movw	r22, r14
 702:	a6 01       	movw	r20, r12
 704:	4f 5f       	subi	r20, 0xFF	; 255
 706:	5f 4f       	sbci	r21, 0xFF	; 255
 708:	6f 4f       	sbci	r22, 0xFF	; 255
 70a:	7f 4f       	sbci	r23, 0xFF	; 255
 70c:	d9 01       	movw	r26, r18
 70e:	ac 0d       	add	r26, r12
 710:	bd 1d       	adc	r27, r13
 712:	9c 91       	ld	r25, X
 714:	89 2b       	or	r24, r25
 716:	80 83       	st	Z, r24

        if(j >= data.arraySize || j <= 0)
 718:	c9 80       	ldd	r12, Y+1	; 0x01
 71a:	da 80       	ldd	r13, Y+2	; 0x02
 71c:	e1 2c       	mov	r14, r1
 71e:	f1 2c       	mov	r15, r1
 720:	4c 15       	cp	r20, r12
 722:	5d 05       	cpc	r21, r13
 724:	6e 05       	cpc	r22, r14
 726:	7f 05       	cpc	r23, r15
 728:	28 f4       	brcc	.+10     	; 0x734 <SM_moveTime+0xce>
 72a:	41 15       	cp	r20, r1
 72c:	51 05       	cpc	r21, r1
 72e:	61 05       	cpc	r22, r1
 730:	71 05       	cpc	r23, r1
 732:	31 f4       	brne	.+12     	; 0x740 <SM_moveTime+0xda>
        {
            j = (direction ? data.arraySize : 0);
 734:	31 10       	cpse	r3, r1
 736:	06 c0       	rjmp	.+12     	; 0x744 <SM_moveTime+0xde>
 738:	c1 2c       	mov	r12, r1
 73a:	d1 2c       	mov	r13, r1
 73c:	76 01       	movw	r14, r12
 73e:	02 c0       	rjmp	.+4      	; 0x744 <SM_moveTime+0xde>
 740:	6a 01       	movw	r12, r20
 742:	7b 01       	movw	r14, r22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 744:	20 e0       	ldi	r18, 0x00	; 0
 746:	30 e0       	ldi	r19, 0x00	; 0
 748:	4a e7       	ldi	r20, 0x7A	; 122
 74a:	55 e4       	ldi	r21, 0x45	; 69
 74c:	69 85       	ldd	r22, Y+9	; 0x09
 74e:	7a 85       	ldd	r23, Y+10	; 0x0a
 750:	8b 85       	ldd	r24, Y+11	; 0x0b
 752:	9c 85       	ldd	r25, Y+12	; 0x0c
 754:	cf d2       	rcall	.+1438   	; 0xcf4 <__mulsf3>
 756:	2b 01       	movw	r4, r22
 758:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
 75a:	20 e0       	ldi	r18, 0x00	; 0
 75c:	30 e0       	ldi	r19, 0x00	; 0
 75e:	40 e8       	ldi	r20, 0x80	; 128
 760:	5f e3       	ldi	r21, 0x3F	; 63
 762:	7a d1       	rcall	.+756    	; 0xa58 <__cmpsf2>
 764:	88 23       	and	r24, r24
 766:	14 f1       	brlt	.+68     	; 0x7ac <SM_moveTime+0x146>
		__ticks = 1;
	else if (__tmp > 65535)
 768:	20 e0       	ldi	r18, 0x00	; 0
 76a:	3f ef       	ldi	r19, 0xFF	; 255
 76c:	4f e7       	ldi	r20, 0x7F	; 127
 76e:	57 e4       	ldi	r21, 0x47	; 71
 770:	c3 01       	movw	r24, r6
 772:	b2 01       	movw	r22, r4
 774:	bb d2       	rcall	.+1398   	; 0xcec <__gesf2>
 776:	18 16       	cp	r1, r24
 778:	ac f4       	brge	.+42     	; 0x7a4 <SM_moveTime+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 77a:	20 e0       	ldi	r18, 0x00	; 0
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	40 e2       	ldi	r20, 0x20	; 32
 780:	51 e4       	ldi	r21, 0x41	; 65
 782:	69 85       	ldd	r22, Y+9	; 0x09
 784:	7a 85       	ldd	r23, Y+10	; 0x0a
 786:	8b 85       	ldd	r24, Y+11	; 0x0b
 788:	9c 85       	ldd	r25, Y+12	; 0x0c
 78a:	b4 d2       	rcall	.+1384   	; 0xcf4 <__mulsf3>
 78c:	d1 d1       	rcall	.+930    	; 0xb30 <__fixunssfsi>
 78e:	06 c0       	rjmp	.+12     	; 0x79c <SM_moveTime+0x136>
 790:	80 e9       	ldi	r24, 0x90	; 144
 792:	91 e0       	ldi	r25, 0x01	; 1
 794:	01 97       	sbiw	r24, 0x01	; 1
 796:	f1 f7       	brne	.-4      	; 0x794 <SM_moveTime+0x12e>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 798:	61 50       	subi	r22, 0x01	; 1
 79a:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 79c:	61 15       	cp	r22, r1
 79e:	71 05       	cpc	r23, r1
 7a0:	b9 f7       	brne	.-18     	; 0x790 <SM_moveTime+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 7a2:	09 c0       	rjmp	.+18     	; 0x7b6 <SM_moveTime+0x150>
 7a4:	c3 01       	movw	r24, r6
 7a6:	b2 01       	movw	r22, r4
 7a8:	c3 d1       	rcall	.+902    	; 0xb30 <__fixunssfsi>
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <SM_moveTime+0x14a>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 7ac:	61 e0       	ldi	r22, 0x01	; 1
 7ae:	70 e0       	ldi	r23, 0x00	; 0
 7b0:	cb 01       	movw	r24, r22
 7b2:	01 97       	sbiw	r24, 0x01	; 1
 7b4:	f1 f7       	brne	.-4      	; 0x7b2 <SM_moveTime+0x14c>

void SM_moveTime(StepperMotorRunMode_t mode, bool direction, double time, double stepTime)
{
    StepperMotorModeData_t data = getModeAndSteps(mode, 0);

    for(uint32_t i = 0, j = (direction ? data.arraySize : 0); i < (time / stepTime); i++)
 7b6:	8f ef       	ldi	r24, 0xFF	; 255
 7b8:	88 1a       	sub	r8, r24
 7ba:	98 0a       	sbc	r9, r24
 7bc:	a8 0a       	sbc	r10, r24
 7be:	b8 0a       	sbc	r11, r24
 7c0:	c5 01       	movw	r24, r10
 7c2:	b4 01       	movw	r22, r8
 7c4:	e1 d1       	rcall	.+962    	; 0xb88 <__floatunsisf>
 7c6:	2b 01       	movw	r4, r22
 7c8:	3c 01       	movw	r6, r24
 7ca:	29 85       	ldd	r18, Y+9	; 0x09
 7cc:	3a 85       	ldd	r19, Y+10	; 0x0a
 7ce:	4b 85       	ldd	r20, Y+11	; 0x0b
 7d0:	5c 85       	ldd	r21, Y+12	; 0x0c
 7d2:	6d 85       	ldd	r22, Y+13	; 0x0d
 7d4:	7e 85       	ldd	r23, Y+14	; 0x0e
 7d6:	8f 85       	ldd	r24, Y+15	; 0x0f
 7d8:	98 89       	ldd	r25, Y+16	; 0x10
 7da:	42 d1       	rcall	.+644    	; 0xa60 <__divsf3>
 7dc:	9b 01       	movw	r18, r22
 7de:	ac 01       	movw	r20, r24
 7e0:	c3 01       	movw	r24, r6
 7e2:	b2 01       	movw	r22, r4
 7e4:	39 d1       	rcall	.+626    	; 0xa58 <__cmpsf2>
 7e6:	88 23       	and	r24, r24
 7e8:	0c f4       	brge	.+2      	; 0x7ec <SM_moveTime+0x186>
 7ea:	79 cf       	rjmp	.-270    	; 0x6de <SM_moveTime+0x78>
        }

        _delay_ms(stepTime);
    }

    *sMotorPort = *sMotorPort & 0xf0;
 7ec:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <sMotorPort>
 7f0:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <sMotorPort+0x1>
 7f4:	80 81       	ld	r24, Z
 7f6:	80 7f       	andi	r24, 0xF0	; 240
 7f8:	80 83       	st	Z, r24
}
 7fa:	60 96       	adiw	r28, 0x10	; 16
 7fc:	0f b6       	in	r0, 0x3f	; 63
 7fe:	f8 94       	cli
 800:	de bf       	out	0x3e, r29	; 62
 802:	0f be       	out	0x3f, r0	; 63
 804:	cd bf       	out	0x3d, r28	; 61
 806:	df 91       	pop	r29
 808:	cf 91       	pop	r28
 80a:	1f 91       	pop	r17
 80c:	0f 91       	pop	r16
 80e:	ff 90       	pop	r15
 810:	ef 90       	pop	r14
 812:	df 90       	pop	r13
 814:	cf 90       	pop	r12
 816:	bf 90       	pop	r11
 818:	af 90       	pop	r10
 81a:	9f 90       	pop	r9
 81c:	8f 90       	pop	r8
 81e:	7f 90       	pop	r7
 820:	6f 90       	pop	r6
 822:	5f 90       	pop	r5
 824:	4f 90       	pop	r4
 826:	3f 90       	pop	r3
 828:	08 95       	ret

0000082a <CRANE_initServos>:
#include "CraneServo.h"

void CRANE_initServos(void)
{
    // set up PORTB.5 as an output and 0V
    DDRB |= 0x60;
 82a:	84 b1       	in	r24, 0x04	; 4
 82c:	80 66       	ori	r24, 0x60	; 96
 82e:	84 b9       	out	0x04, r24	; 4
    PORTB |= PORTB & ~0x60;
 830:	85 b1       	in	r24, 0x05	; 5
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	8f 79       	andi	r24, 0x9F	; 159
 836:	95 b1       	in	r25, 0x05	; 5
 838:	89 2b       	or	r24, r25
 83a:	85 b9       	out	0x05, r24	; 5

    // 5000 @ 64
    // set frequency to 50hz
    ICR1 = 5000;
 83c:	88 e8       	ldi	r24, 0x88	; 136
 83e:	93 e1       	ldi	r25, 0x13	; 19
 840:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7c0087>
 844:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7c0086>

    // fast pwm set on compare
    TCCR1A = 0x02;
 848:	82 e0       	ldi	r24, 0x02	; 2
 84a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    // prescaler set to 64
    TCCR1B = 0x1B;
 84e:	8b e1       	ldi	r24, 0x1B	; 27
 850:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 854:	08 95       	ret

00000856 <CRANE_setServoPosition>:
}

void CRANE_setServoPosition(uint8_t servo, uint8_t position)
{
    if(servo == 0)
 856:	81 11       	cpse	r24, r1
 858:	11 c0       	rjmp	.+34     	; 0x87c <CRANE_setServoPosition+0x26>
    {
        OCR1A = (uint32_t)position * 250 / 255 + 250;
 85a:	26 2f       	mov	r18, r22
 85c:	30 e0       	ldi	r19, 0x00	; 0
 85e:	aa ef       	ldi	r26, 0xFA	; 250
 860:	b0 e0       	ldi	r27, 0x00	; 0
 862:	cd d2       	rcall	.+1434   	; 0xdfe <__umulhisi3>
 864:	2f ef       	ldi	r18, 0xFF	; 255
 866:	30 e0       	ldi	r19, 0x00	; 0
 868:	40 e0       	ldi	r20, 0x00	; 0
 86a:	50 e0       	ldi	r21, 0x00	; 0
 86c:	a6 d2       	rcall	.+1356   	; 0xdba <__udivmodsi4>
 86e:	26 50       	subi	r18, 0x06	; 6
 870:	3f 4f       	sbci	r19, 0xFF	; 255
 872:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 876:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 87a:	08 95       	ret
    }
    else if(servo == 1)
 87c:	81 30       	cpi	r24, 0x01	; 1
 87e:	81 f4       	brne	.+32     	; 0x8a0 <CRANE_setServoPosition+0x4a>
    {
        OCR1B = (uint32_t)position * 250 / 255 + 250;
 880:	26 2f       	mov	r18, r22
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	aa ef       	ldi	r26, 0xFA	; 250
 886:	b0 e0       	ldi	r27, 0x00	; 0
 888:	ba d2       	rcall	.+1396   	; 0xdfe <__umulhisi3>
 88a:	2f ef       	ldi	r18, 0xFF	; 255
 88c:	30 e0       	ldi	r19, 0x00	; 0
 88e:	40 e0       	ldi	r20, 0x00	; 0
 890:	50 e0       	ldi	r21, 0x00	; 0
 892:	93 d2       	rcall	.+1318   	; 0xdba <__udivmodsi4>
 894:	26 50       	subi	r18, 0x06	; 6
 896:	3f 4f       	sbci	r19, 0xFF	; 255
 898:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 89c:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
 8a0:	08 95       	ret

000008a2 <CRANE_startServos>:
    }
}

void CRANE_startServos(void)
{
    TCCR1A |= 0xA0;
 8a2:	e0 e8       	ldi	r30, 0x80	; 128
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
 8a6:	80 81       	ld	r24, Z
 8a8:	80 6a       	ori	r24, 0xA0	; 160
 8aa:	80 83       	st	Z, r24
 8ac:	08 95       	ret

000008ae <asyncSerialRxHandler>:
    PORTA = 0x03;
}

void asyncSerialRxHandler(char c)
{
    if(c != '\r' && c != '\n' && c != '\0' && (serialBufferIndex < 127))
 8ae:	8d 30       	cpi	r24, 0x0D	; 13
 8b0:	d1 f0       	breq	.+52     	; 0x8e6 <asyncSerialRxHandler+0x38>
 8b2:	8a 30       	cpi	r24, 0x0A	; 10
 8b4:	c1 f0       	breq	.+48     	; 0x8e6 <asyncSerialRxHandler+0x38>
 8b6:	88 23       	and	r24, r24
 8b8:	b1 f0       	breq	.+44     	; 0x8e6 <asyncSerialRxHandler+0x38>
 8ba:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <serialBufferIndex>
 8be:	9f 37       	cpi	r25, 0x7F	; 127
 8c0:	90 f4       	brcc	.+36     	; 0x8e6 <asyncSerialRxHandler+0x38>
    {
        // add to array
        serialBuffer[serialBufferIndex]     = c;
 8c2:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <serialBufferIndex>
 8c6:	f0 e0       	ldi	r31, 0x00	; 0
 8c8:	ec 59       	subi	r30, 0x9C	; 156
 8ca:	fd 4f       	sbci	r31, 0xFD	; 253
 8cc:	80 83       	st	Z, r24
        serialBuffer[serialBufferIndex + 1] = '\0';
 8ce:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <serialBufferIndex>
 8d2:	f0 e0       	ldi	r31, 0x00	; 0
 8d4:	eb 59       	subi	r30, 0x9B	; 155
 8d6:	fd 4f       	sbci	r31, 0xFD	; 253
 8d8:	10 82       	st	Z, r1

        serialBufferIndex++;
 8da:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <serialBufferIndex>
 8de:	8f 5f       	subi	r24, 0xFF	; 255
 8e0:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <serialBufferIndex>
 8e4:	08 95       	ret
    }
    else
    {
        // set update flag
        serialReadFlag    = 1;
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <serialReadFlag>
        // reset message index
        serialBufferIndex = 0;
 8ec:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <serialBufferIndex>
 8f0:	08 95       	ret

000008f2 <IO_init>:

/* NOTE: Function implementations */
void IO_init(void)
{
    // port c.4 is the limit switch
    DDRC  = 0x00;
 8f2:	17 b8       	out	0x07, r1	; 7
    PORTC = 0x10;
 8f4:	80 e1       	ldi	r24, 0x10	; 16
 8f6:	88 b9       	out	0x08, r24	; 8

    // port a.0-1 are for left and right
    DDRA  = 0x00;
 8f8:	11 b8       	out	0x01, r1	; 1
    PORTA = 0x03;
 8fa:	83 e0       	ldi	r24, 0x03	; 3
 8fc:	82 b9       	out	0x02, r24	; 2
 8fe:	08 95       	ret

00000900 <stringCompare>:
        serialBufferIndex = 0;
    }
}

uint8_t stringCompare(char const * const pStrOne, char const * const pStrTwo)
{
 900:	ac 01       	movw	r20, r24
    uint8_t i = 0;
 902:	90 e0       	ldi	r25, 0x00	; 0

    // while string one still has data
    do
    {
        if(*(pStrOne + i) == *(pStrTwo + i))
 904:	29 2f       	mov	r18, r25
 906:	30 e0       	ldi	r19, 0x00	; 0
 908:	fa 01       	movw	r30, r20
 90a:	e2 0f       	add	r30, r18
 90c:	f3 1f       	adc	r31, r19
 90e:	e0 81       	ld	r30, Z
 910:	db 01       	movw	r26, r22
 912:	a2 0f       	add	r26, r18
 914:	b3 1f       	adc	r27, r19
 916:	8c 91       	ld	r24, X
 918:	e8 13       	cpse	r30, r24
 91a:	11 c0       	rjmp	.+34     	; 0x93e <stringCompare+0x3e>
        {
            // increment
            i++;
 91c:	9f 5f       	subi	r25, 0xFF	; 255
        else
        {
            // exit
            return 0;
        }
    } while((*(pStrOne + i) != '\0') && (*(pStrTwo + i) != '\0'));
 91e:	29 2f       	mov	r18, r25
 920:	30 e0       	ldi	r19, 0x00	; 0
 922:	fa 01       	movw	r30, r20
 924:	e2 0f       	add	r30, r18
 926:	f3 1f       	adc	r31, r19
 928:	80 81       	ld	r24, Z
 92a:	88 23       	and	r24, r24
 92c:	51 f0       	breq	.+20     	; 0x942 <stringCompare+0x42>
 92e:	fb 01       	movw	r30, r22
 930:	e2 0f       	add	r30, r18
 932:	f3 1f       	adc	r31, r19
 934:	80 81       	ld	r24, Z
 936:	81 11       	cpse	r24, r1
 938:	e5 cf       	rjmp	.-54     	; 0x904 <stringCompare+0x4>

    // made it out of the loop
    return 1;
 93a:	81 e0       	ldi	r24, 0x01	; 1
 93c:	08 95       	ret
            i++;
        }
        else
        {
            // exit
            return 0;
 93e:	80 e0       	ldi	r24, 0x00	; 0
 940:	08 95       	ret
        }
    } while((*(pStrOne + i) != '\0') && (*(pStrTwo + i) != '\0'));

    // made it out of the loop
    return 1;
 942:	81 e0       	ldi	r24, 0x01	; 1
 944:	08 95       	ret

00000946 <main>:

/* NOTE: Application implementation */
// the main loop of the function, provided to us
int main(void)
{
    IO_init();
 946:	d5 df       	rcall	.-86     	; 0x8f2 <IO_init>

    // init the ADC and the servo control
    ADC_init();
 948:	ed db       	rcall	.-2086   	; 0x124 <ADC_init>
    CRANE_initServos();
 94a:	6f df       	rcall	.-290    	; 0x82a <CRANE_initServos>
 94c:	68 e2       	ldi	r22, 0x28	; 40

    // in this case, 1 is CCW, and 0 is CW
    // pass in the port and register we want to use for the motor
    SM_init(&DDRC, &PORTC);
 94e:	70 e0       	ldi	r23, 0x00	; 0
 950:	87 e2       	ldi	r24, 0x27	; 39
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	b7 dd       	rcall	.-1170   	; 0x4c4 <SM_init>
 956:	40 e8       	ldi	r20, 0x80	; 128

    // turn on the serial on port 0 at 9600 baud
    SERIAL_uartInitAsync(serialUsart0, 9600);
 958:	55 e2       	ldi	r21, 0x25	; 37
 95a:	60 e0       	ldi	r22, 0x00	; 0
 95c:	70 e0       	ldi	r23, 0x00	; 0
 95e:	80 e0       	ldi	r24, 0x00	; 0
 960:	9d dc       	rcall	.-1734   	; 0x29c <SERIAL_uartInitAsync>
    SERIAL_uartAsyncGetHandler(serialUsart0, &asyncSerialRxHandler);
 962:	67 e5       	ldi	r22, 0x57	; 87
 964:	74 e0       	ldi	r23, 0x04	; 4
 966:	80 e0       	ldi	r24, 0x00	; 0
 968:	b3 dc       	rcall	.-1690   	; 0x2d0 <SERIAL_uartAsyncGetHandler>
    SERIAL_uartSend(serialUsart0, "Crane online\r\n");
 96a:	60 e1       	ldi	r22, 0x10	; 16
 96c:	72 e0       	ldi	r23, 0x02	; 2
 96e:	80 e0       	ldi	r24, 0x00	; 0
 970:	e4 dc       	rcall	.-1592   	; 0x33a <SERIAL_uartSend>
 972:	78 94       	sei

    sei();
 974:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <serialReadFlag>
            record needs to save the the actions to a LL and store them in eeprom

            action needs to be able to move the crane
        */

        if(serialReadFlag)
 978:	88 23       	and	r24, r24
 97a:	a1 f0       	breq	.+40     	; 0x9a4 <main+0x5e>
        {
            if(stringCompare(serialBuffer, "password") && (applicationState != recordState))
 97c:	6f e1       	ldi	r22, 0x1F	; 31
 97e:	72 e0       	ldi	r23, 0x02	; 2
 980:	84 e6       	ldi	r24, 0x64	; 100
 982:	92 e0       	ldi	r25, 0x02	; 2
 984:	bd df       	rcall	.-134    	; 0x900 <stringCompare>
 986:	88 23       	and	r24, r24
 988:	59 f0       	breq	.+22     	; 0x9a0 <main+0x5a>
 98a:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <applicationState>
 98e:	82 30       	cpi	r24, 0x02	; 2
 990:	39 f0       	breq	.+14     	; 0x9a0 <main+0x5a>
            {
                SERIAL_uartSend(serialUsart0, "Password entered, starting config mode...\r\n");
 992:	68 e2       	ldi	r22, 0x28	; 40
 994:	72 e0       	ldi	r23, 0x02	; 2
 996:	80 e0       	ldi	r24, 0x00	; 0
 998:	d0 dc       	rcall	.-1632   	; 0x33a <SERIAL_uartSend>
 99a:	82 e0       	ldi	r24, 0x02	; 2

                applicationState = recordState;
 99c:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <applicationState>
 9a0:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <serialReadFlag>
            }

            serialReadFlag = 0;
 9a4:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <applicationState>
        }

        switch(applicationState)
 9a8:	81 30       	cpi	r24, 0x01	; 1
 9aa:	19 f0       	breq	.+6      	; 0x9b2 <main+0x6c>
 9ac:	82 30       	cpi	r24, 0x02	; 2
 9ae:	11 f3       	breq	.-60     	; 0x974 <main+0x2e>
 9b0:	32 c0       	rjmp	.+100    	; 0xa16 <main+0xd0>
 9b2:	01 9b       	sbis	0x00, 1	; 0
        {
            // the action case
            case actionState:
            {
                if(rightButton)
 9b4:	0b c0       	rjmp	.+22     	; 0x9cc <main+0x86>
 9b6:	e1 2c       	mov	r14, r1
                {
                    SM_moveTime(stepperModeHalf, 0, 90, 3);
 9b8:	f1 2c       	mov	r15, r1
 9ba:	00 e4       	ldi	r16, 0x40	; 64
 9bc:	10 e4       	ldi	r17, 0x40	; 64
 9be:	20 e0       	ldi	r18, 0x00	; 0
 9c0:	30 e0       	ldi	r19, 0x00	; 0
 9c2:	44 eb       	ldi	r20, 0xB4	; 180
 9c4:	52 e4       	ldi	r21, 0x42	; 66
 9c6:	60 e0       	ldi	r22, 0x00	; 0
 9c8:	82 e0       	ldi	r24, 0x02	; 2
 9ca:	4d de       	rcall	.-870    	; 0x666 <SM_moveTime>
 9cc:	00 9b       	sbis	0x00, 0	; 0
                }

                if(leftButton)
 9ce:	0b c0       	rjmp	.+22     	; 0x9e6 <main+0xa0>
 9d0:	e1 2c       	mov	r14, r1
                {
                    SM_moveTime(stepperModeHalf, 1, 90, 3);
 9d2:	f1 2c       	mov	r15, r1
 9d4:	00 e4       	ldi	r16, 0x40	; 64
 9d6:	10 e4       	ldi	r17, 0x40	; 64
 9d8:	20 e0       	ldi	r18, 0x00	; 0
 9da:	30 e0       	ldi	r19, 0x00	; 0
 9dc:	44 eb       	ldi	r20, 0xB4	; 180
 9de:	52 e4       	ldi	r21, 0x42	; 66
 9e0:	61 e0       	ldi	r22, 0x01	; 1
 9e2:	82 e0       	ldi	r24, 0x02	; 2
                }

                CRANE_startServos();
 9e4:	40 de       	rcall	.-896    	; 0x666 <SM_moveTime>

                CRANE_setServoPosition(0, 255 * ADC_getTenBitValue(0));
 9e6:	5d df       	rcall	.-326    	; 0x8a2 <CRANE_startServos>
 9e8:	80 e0       	ldi	r24, 0x00	; 0
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	a4 db       	rcall	.-2232   	; 0x136 <ADC_getTenBitValue>
 9ee:	20 e0       	ldi	r18, 0x00	; 0
 9f0:	30 e0       	ldi	r19, 0x00	; 0
 9f2:	4f e7       	ldi	r20, 0x7F	; 127
 9f4:	53 e4       	ldi	r21, 0x43	; 67
 9f6:	7e d1       	rcall	.+764    	; 0xcf4 <__mulsf3>
 9f8:	9b d0       	rcall	.+310    	; 0xb30 <__fixunssfsi>
 9fa:	80 e0       	ldi	r24, 0x00	; 0
                CRANE_setServoPosition(1, 255 * ADC_getTenBitValue(1));
 9fc:	2c df       	rcall	.-424    	; 0x856 <CRANE_setServoPosition>
 9fe:	81 e0       	ldi	r24, 0x01	; 1
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	99 db       	rcall	.-2254   	; 0x136 <ADC_getTenBitValue>
 a04:	20 e0       	ldi	r18, 0x00	; 0
 a06:	30 e0       	ldi	r19, 0x00	; 0
 a08:	4f e7       	ldi	r20, 0x7F	; 127
 a0a:	53 e4       	ldi	r21, 0x43	; 67
 a0c:	73 d1       	rcall	.+742    	; 0xcf4 <__mulsf3>
 a0e:	90 d0       	rcall	.+288    	; 0xb30 <__fixunssfsi>
 a10:	81 e0       	ldi	r24, 0x01	; 1
 a12:	21 df       	rcall	.-446    	; 0x856 <CRANE_setServoPosition>
 a14:	af cf       	rjmp	.-162    	; 0x974 <main+0x2e>
 a16:	e1 2c       	mov	r14, r1
            }
            break;
 a18:	f1 2c       	mov	r15, r1
            // the default case will be the home case
            case calibrateState:
            default:
            {
                // move CW for one second to ensure the limit switch is not set
                SM_moveTime(stepperModeHalf, 0, 1000, 3);
 a1a:	00 e4       	ldi	r16, 0x40	; 64
 a1c:	10 e4       	ldi	r17, 0x40	; 64
 a1e:	20 e0       	ldi	r18, 0x00	; 0
 a20:	30 e0       	ldi	r19, 0x00	; 0
 a22:	4a e7       	ldi	r20, 0x7A	; 122
 a24:	54 e4       	ldi	r21, 0x44	; 68
 a26:	60 e0       	ldi	r22, 0x00	; 0
 a28:	82 e0       	ldi	r24, 0x02	; 2
 a2a:	1d de       	rcall	.-966    	; 0x666 <SM_moveTime>
 a2c:	0b c0       	rjmp	.+22     	; 0xa44 <main+0xfe>

                // while not hitting the switch
                while(!limitSwitch)
 a2e:	e1 2c       	mov	r14, r1
                {
                    // then move CCW a bit at the time until we hit the limit switch
                    SM_moveTime(stepperModeHalf, 1, 12, 3);
 a30:	f1 2c       	mov	r15, r1
 a32:	00 e4       	ldi	r16, 0x40	; 64
 a34:	10 e4       	ldi	r17, 0x40	; 64
 a36:	20 e0       	ldi	r18, 0x00	; 0
 a38:	30 e0       	ldi	r19, 0x00	; 0
 a3a:	40 e4       	ldi	r20, 0x40	; 64
 a3c:	51 e4       	ldi	r21, 0x41	; 65
 a3e:	61 e0       	ldi	r22, 0x01	; 1
 a40:	82 e0       	ldi	r24, 0x02	; 2
 a42:	11 de       	rcall	.-990    	; 0x666 <SM_moveTime>
 a44:	34 9b       	sbis	0x06, 4	; 6
 a46:	f3 cf       	rjmp	.-26     	; 0xa2e <main+0xe8>
            {
                // move CW for one second to ensure the limit switch is not set
                SM_moveTime(stepperModeHalf, 0, 1000, 3);

                // while not hitting the switch
                while(!limitSwitch)
 a48:	6e e1       	ldi	r22, 0x1E	; 30
 a4a:	70 e0       	ldi	r23, 0x00	; 0
                    // then move CCW a bit at the time until we hit the limit switch
                    SM_moveTime(stepperModeHalf, 1, 12, 3);
                }

                // then move 30 degrees back to center the arm
                SM_movePosition(stepperModeHalf, 30);
 a4c:	82 e0       	ldi	r24, 0x02	; 2
 a4e:	fb dd       	rcall	.-1034   	; 0x646 <SM_movePosition>
 a50:	81 e0       	ldi	r24, 0x01	; 1
 a52:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <applicationState>

                // then set it to action state
                applicationState = actionState;
 a56:	8e cf       	rjmp	.-228    	; 0x974 <main+0x2e>

00000a58 <__cmpsf2>:
 a58:	d4 d0       	rcall	.+424    	; 0xc02 <__fp_cmp>
 a5a:	08 f4       	brcc	.+2      	; 0xa5e <__cmpsf2+0x6>
            }
            break;
 a5c:	81 e0       	ldi	r24, 0x01	; 1
 a5e:	08 95       	ret

00000a60 <__divsf3>:
 a60:	0c d0       	rcall	.+24     	; 0xa7a <__divsf3x>
 a62:	0a c1       	rjmp	.+532    	; 0xc78 <__fp_round>
 a64:	02 d1       	rcall	.+516    	; 0xc6a <__fp_pscB>
 a66:	40 f0       	brcs	.+16     	; 0xa78 <__divsf3+0x18>
 a68:	f9 d0       	rcall	.+498    	; 0xc5c <__fp_pscA>
 a6a:	30 f0       	brcs	.+12     	; 0xa78 <__divsf3+0x18>
 a6c:	21 f4       	brne	.+8      	; 0xa76 <__divsf3+0x16>
 a6e:	5f 3f       	cpi	r21, 0xFF	; 255
 a70:	19 f0       	breq	.+6      	; 0xa78 <__divsf3+0x18>
 a72:	eb c0       	rjmp	.+470    	; 0xc4a <__fp_inf>
 a74:	51 11       	cpse	r21, r1
 a76:	34 c1       	rjmp	.+616    	; 0xce0 <__fp_szero>
 a78:	ee c0       	rjmp	.+476    	; 0xc56 <__fp_nan>

00000a7a <__divsf3x>:
 a7a:	0f d1       	rcall	.+542    	; 0xc9a <__fp_split3>
 a7c:	98 f3       	brcs	.-26     	; 0xa64 <__divsf3+0x4>

00000a7e <__divsf3_pse>:
 a7e:	99 23       	and	r25, r25
 a80:	c9 f3       	breq	.-14     	; 0xa74 <__divsf3+0x14>
 a82:	55 23       	and	r21, r21
 a84:	b1 f3       	breq	.-20     	; 0xa72 <__divsf3+0x12>
 a86:	95 1b       	sub	r25, r21
 a88:	55 0b       	sbc	r21, r21
 a8a:	bb 27       	eor	r27, r27
 a8c:	aa 27       	eor	r26, r26
 a8e:	62 17       	cp	r22, r18
 a90:	73 07       	cpc	r23, r19
 a92:	84 07       	cpc	r24, r20
 a94:	38 f0       	brcs	.+14     	; 0xaa4 <__divsf3_pse+0x26>
 a96:	9f 5f       	subi	r25, 0xFF	; 255
 a98:	5f 4f       	sbci	r21, 0xFF	; 255
 a9a:	22 0f       	add	r18, r18
 a9c:	33 1f       	adc	r19, r19
 a9e:	44 1f       	adc	r20, r20
 aa0:	aa 1f       	adc	r26, r26
 aa2:	a9 f3       	breq	.-22     	; 0xa8e <__divsf3_pse+0x10>
 aa4:	33 d0       	rcall	.+102    	; 0xb0c <__divsf3_pse+0x8e>
 aa6:	0e 2e       	mov	r0, r30
 aa8:	3a f0       	brmi	.+14     	; 0xab8 <__divsf3_pse+0x3a>
 aaa:	e0 e8       	ldi	r30, 0x80	; 128
 aac:	30 d0       	rcall	.+96     	; 0xb0e <__divsf3_pse+0x90>
 aae:	91 50       	subi	r25, 0x01	; 1
 ab0:	50 40       	sbci	r21, 0x00	; 0
 ab2:	e6 95       	lsr	r30
 ab4:	00 1c       	adc	r0, r0
 ab6:	ca f7       	brpl	.-14     	; 0xaaa <__divsf3_pse+0x2c>
 ab8:	29 d0       	rcall	.+82     	; 0xb0c <__divsf3_pse+0x8e>
 aba:	fe 2f       	mov	r31, r30
 abc:	27 d0       	rcall	.+78     	; 0xb0c <__divsf3_pse+0x8e>
 abe:	66 0f       	add	r22, r22
 ac0:	77 1f       	adc	r23, r23
 ac2:	88 1f       	adc	r24, r24
 ac4:	bb 1f       	adc	r27, r27
 ac6:	26 17       	cp	r18, r22
 ac8:	37 07       	cpc	r19, r23
 aca:	48 07       	cpc	r20, r24
 acc:	ab 07       	cpc	r26, r27
 ace:	b0 e8       	ldi	r27, 0x80	; 128
 ad0:	09 f0       	breq	.+2      	; 0xad4 <__divsf3_pse+0x56>
 ad2:	bb 0b       	sbc	r27, r27
 ad4:	80 2d       	mov	r24, r0
 ad6:	bf 01       	movw	r22, r30
 ad8:	ff 27       	eor	r31, r31
 ada:	93 58       	subi	r25, 0x83	; 131
 adc:	5f 4f       	sbci	r21, 0xFF	; 255
 ade:	2a f0       	brmi	.+10     	; 0xaea <__divsf3_pse+0x6c>
 ae0:	9e 3f       	cpi	r25, 0xFE	; 254
 ae2:	51 05       	cpc	r21, r1
 ae4:	68 f0       	brcs	.+26     	; 0xb00 <__divsf3_pse+0x82>
 ae6:	b1 c0       	rjmp	.+354    	; 0xc4a <__fp_inf>
 ae8:	fb c0       	rjmp	.+502    	; 0xce0 <__fp_szero>
 aea:	5f 3f       	cpi	r21, 0xFF	; 255
 aec:	ec f3       	brlt	.-6      	; 0xae8 <__divsf3_pse+0x6a>
 aee:	98 3e       	cpi	r25, 0xE8	; 232
 af0:	dc f3       	brlt	.-10     	; 0xae8 <__divsf3_pse+0x6a>
 af2:	86 95       	lsr	r24
 af4:	77 95       	ror	r23
 af6:	67 95       	ror	r22
 af8:	b7 95       	ror	r27
 afa:	f7 95       	ror	r31
 afc:	9f 5f       	subi	r25, 0xFF	; 255
 afe:	c9 f7       	brne	.-14     	; 0xaf2 <__divsf3_pse+0x74>
 b00:	88 0f       	add	r24, r24
 b02:	91 1d       	adc	r25, r1
 b04:	96 95       	lsr	r25
 b06:	87 95       	ror	r24
 b08:	97 f9       	bld	r25, 7
 b0a:	08 95       	ret
 b0c:	e1 e0       	ldi	r30, 0x01	; 1
 b0e:	66 0f       	add	r22, r22
 b10:	77 1f       	adc	r23, r23
 b12:	88 1f       	adc	r24, r24
 b14:	bb 1f       	adc	r27, r27
 b16:	62 17       	cp	r22, r18
 b18:	73 07       	cpc	r23, r19
 b1a:	84 07       	cpc	r24, r20
 b1c:	ba 07       	cpc	r27, r26
 b1e:	20 f0       	brcs	.+8      	; 0xb28 <__divsf3_pse+0xaa>
 b20:	62 1b       	sub	r22, r18
 b22:	73 0b       	sbc	r23, r19
 b24:	84 0b       	sbc	r24, r20
 b26:	ba 0b       	sbc	r27, r26
 b28:	ee 1f       	adc	r30, r30
 b2a:	88 f7       	brcc	.-30     	; 0xb0e <__divsf3_pse+0x90>
 b2c:	e0 95       	com	r30
 b2e:	08 95       	ret

00000b30 <__fixunssfsi>:
 b30:	bc d0       	rcall	.+376    	; 0xcaa <__fp_splitA>
 b32:	88 f0       	brcs	.+34     	; 0xb56 <__fixunssfsi+0x26>
 b34:	9f 57       	subi	r25, 0x7F	; 127
 b36:	90 f0       	brcs	.+36     	; 0xb5c <__fixunssfsi+0x2c>
 b38:	b9 2f       	mov	r27, r25
 b3a:	99 27       	eor	r25, r25
 b3c:	b7 51       	subi	r27, 0x17	; 23
 b3e:	a0 f0       	brcs	.+40     	; 0xb68 <__fixunssfsi+0x38>
 b40:	d1 f0       	breq	.+52     	; 0xb76 <__fixunssfsi+0x46>
 b42:	66 0f       	add	r22, r22
 b44:	77 1f       	adc	r23, r23
 b46:	88 1f       	adc	r24, r24
 b48:	99 1f       	adc	r25, r25
 b4a:	1a f0       	brmi	.+6      	; 0xb52 <__fixunssfsi+0x22>
 b4c:	ba 95       	dec	r27
 b4e:	c9 f7       	brne	.-14     	; 0xb42 <__fixunssfsi+0x12>
 b50:	12 c0       	rjmp	.+36     	; 0xb76 <__fixunssfsi+0x46>
 b52:	b1 30       	cpi	r27, 0x01	; 1
 b54:	81 f0       	breq	.+32     	; 0xb76 <__fixunssfsi+0x46>
 b56:	c3 d0       	rcall	.+390    	; 0xcde <__fp_zero>
 b58:	b1 e0       	ldi	r27, 0x01	; 1
 b5a:	08 95       	ret
 b5c:	c0 c0       	rjmp	.+384    	; 0xcde <__fp_zero>
 b5e:	67 2f       	mov	r22, r23
 b60:	78 2f       	mov	r23, r24
 b62:	88 27       	eor	r24, r24
 b64:	b8 5f       	subi	r27, 0xF8	; 248
 b66:	39 f0       	breq	.+14     	; 0xb76 <__fixunssfsi+0x46>
 b68:	b9 3f       	cpi	r27, 0xF9	; 249
 b6a:	cc f3       	brlt	.-14     	; 0xb5e <__fixunssfsi+0x2e>
 b6c:	86 95       	lsr	r24
 b6e:	77 95       	ror	r23
 b70:	67 95       	ror	r22
 b72:	b3 95       	inc	r27
 b74:	d9 f7       	brne	.-10     	; 0xb6c <__fixunssfsi+0x3c>
 b76:	3e f4       	brtc	.+14     	; 0xb86 <__fixunssfsi+0x56>
 b78:	90 95       	com	r25
 b7a:	80 95       	com	r24
 b7c:	70 95       	com	r23
 b7e:	61 95       	neg	r22
 b80:	7f 4f       	sbci	r23, 0xFF	; 255
 b82:	8f 4f       	sbci	r24, 0xFF	; 255
 b84:	9f 4f       	sbci	r25, 0xFF	; 255
 b86:	08 95       	ret

00000b88 <__floatunsisf>:
 b88:	e8 94       	clt
 b8a:	09 c0       	rjmp	.+18     	; 0xb9e <__floatsisf+0x12>

00000b8c <__floatsisf>:
 b8c:	97 fb       	bst	r25, 7
 b8e:	3e f4       	brtc	.+14     	; 0xb9e <__floatsisf+0x12>
 b90:	90 95       	com	r25
 b92:	80 95       	com	r24
 b94:	70 95       	com	r23
 b96:	61 95       	neg	r22
 b98:	7f 4f       	sbci	r23, 0xFF	; 255
 b9a:	8f 4f       	sbci	r24, 0xFF	; 255
 b9c:	9f 4f       	sbci	r25, 0xFF	; 255
 b9e:	99 23       	and	r25, r25
 ba0:	a9 f0       	breq	.+42     	; 0xbcc <__floatsisf+0x40>
 ba2:	f9 2f       	mov	r31, r25
 ba4:	96 e9       	ldi	r25, 0x96	; 150
 ba6:	bb 27       	eor	r27, r27
 ba8:	93 95       	inc	r25
 baa:	f6 95       	lsr	r31
 bac:	87 95       	ror	r24
 bae:	77 95       	ror	r23
 bb0:	67 95       	ror	r22
 bb2:	b7 95       	ror	r27
 bb4:	f1 11       	cpse	r31, r1
 bb6:	f8 cf       	rjmp	.-16     	; 0xba8 <__floatsisf+0x1c>
 bb8:	fa f4       	brpl	.+62     	; 0xbf8 <__floatsisf+0x6c>
 bba:	bb 0f       	add	r27, r27
 bbc:	11 f4       	brne	.+4      	; 0xbc2 <__floatsisf+0x36>
 bbe:	60 ff       	sbrs	r22, 0
 bc0:	1b c0       	rjmp	.+54     	; 0xbf8 <__floatsisf+0x6c>
 bc2:	6f 5f       	subi	r22, 0xFF	; 255
 bc4:	7f 4f       	sbci	r23, 0xFF	; 255
 bc6:	8f 4f       	sbci	r24, 0xFF	; 255
 bc8:	9f 4f       	sbci	r25, 0xFF	; 255
 bca:	16 c0       	rjmp	.+44     	; 0xbf8 <__floatsisf+0x6c>
 bcc:	88 23       	and	r24, r24
 bce:	11 f0       	breq	.+4      	; 0xbd4 <__floatsisf+0x48>
 bd0:	96 e9       	ldi	r25, 0x96	; 150
 bd2:	11 c0       	rjmp	.+34     	; 0xbf6 <__floatsisf+0x6a>
 bd4:	77 23       	and	r23, r23
 bd6:	21 f0       	breq	.+8      	; 0xbe0 <__floatsisf+0x54>
 bd8:	9e e8       	ldi	r25, 0x8E	; 142
 bda:	87 2f       	mov	r24, r23
 bdc:	76 2f       	mov	r23, r22
 bde:	05 c0       	rjmp	.+10     	; 0xbea <__floatsisf+0x5e>
 be0:	66 23       	and	r22, r22
 be2:	71 f0       	breq	.+28     	; 0xc00 <__floatsisf+0x74>
 be4:	96 e8       	ldi	r25, 0x86	; 134
 be6:	86 2f       	mov	r24, r22
 be8:	70 e0       	ldi	r23, 0x00	; 0
 bea:	60 e0       	ldi	r22, 0x00	; 0
 bec:	2a f0       	brmi	.+10     	; 0xbf8 <__floatsisf+0x6c>
 bee:	9a 95       	dec	r25
 bf0:	66 0f       	add	r22, r22
 bf2:	77 1f       	adc	r23, r23
 bf4:	88 1f       	adc	r24, r24
 bf6:	da f7       	brpl	.-10     	; 0xbee <__floatsisf+0x62>
 bf8:	88 0f       	add	r24, r24
 bfa:	96 95       	lsr	r25
 bfc:	87 95       	ror	r24
 bfe:	97 f9       	bld	r25, 7
 c00:	08 95       	ret

00000c02 <__fp_cmp>:
 c02:	99 0f       	add	r25, r25
 c04:	00 08       	sbc	r0, r0
 c06:	55 0f       	add	r21, r21
 c08:	aa 0b       	sbc	r26, r26
 c0a:	e0 e8       	ldi	r30, 0x80	; 128
 c0c:	fe ef       	ldi	r31, 0xFE	; 254
 c0e:	16 16       	cp	r1, r22
 c10:	17 06       	cpc	r1, r23
 c12:	e8 07       	cpc	r30, r24
 c14:	f9 07       	cpc	r31, r25
 c16:	c0 f0       	brcs	.+48     	; 0xc48 <__fp_cmp+0x46>
 c18:	12 16       	cp	r1, r18
 c1a:	13 06       	cpc	r1, r19
 c1c:	e4 07       	cpc	r30, r20
 c1e:	f5 07       	cpc	r31, r21
 c20:	98 f0       	brcs	.+38     	; 0xc48 <__fp_cmp+0x46>
 c22:	62 1b       	sub	r22, r18
 c24:	73 0b       	sbc	r23, r19
 c26:	84 0b       	sbc	r24, r20
 c28:	95 0b       	sbc	r25, r21
 c2a:	39 f4       	brne	.+14     	; 0xc3a <__fp_cmp+0x38>
 c2c:	0a 26       	eor	r0, r26
 c2e:	61 f0       	breq	.+24     	; 0xc48 <__fp_cmp+0x46>
 c30:	23 2b       	or	r18, r19
 c32:	24 2b       	or	r18, r20
 c34:	25 2b       	or	r18, r21
 c36:	21 f4       	brne	.+8      	; 0xc40 <__fp_cmp+0x3e>
 c38:	08 95       	ret
 c3a:	0a 26       	eor	r0, r26
 c3c:	09 f4       	brne	.+2      	; 0xc40 <__fp_cmp+0x3e>
 c3e:	a1 40       	sbci	r26, 0x01	; 1
 c40:	a6 95       	lsr	r26
 c42:	8f ef       	ldi	r24, 0xFF	; 255
 c44:	81 1d       	adc	r24, r1
 c46:	81 1d       	adc	r24, r1
 c48:	08 95       	ret

00000c4a <__fp_inf>:
 c4a:	97 f9       	bld	r25, 7
 c4c:	9f 67       	ori	r25, 0x7F	; 127
 c4e:	80 e8       	ldi	r24, 0x80	; 128
 c50:	70 e0       	ldi	r23, 0x00	; 0
 c52:	60 e0       	ldi	r22, 0x00	; 0
 c54:	08 95       	ret

00000c56 <__fp_nan>:
 c56:	9f ef       	ldi	r25, 0xFF	; 255
 c58:	80 ec       	ldi	r24, 0xC0	; 192
 c5a:	08 95       	ret

00000c5c <__fp_pscA>:
 c5c:	00 24       	eor	r0, r0
 c5e:	0a 94       	dec	r0
 c60:	16 16       	cp	r1, r22
 c62:	17 06       	cpc	r1, r23
 c64:	18 06       	cpc	r1, r24
 c66:	09 06       	cpc	r0, r25
 c68:	08 95       	ret

00000c6a <__fp_pscB>:
 c6a:	00 24       	eor	r0, r0
 c6c:	0a 94       	dec	r0
 c6e:	12 16       	cp	r1, r18
 c70:	13 06       	cpc	r1, r19
 c72:	14 06       	cpc	r1, r20
 c74:	05 06       	cpc	r0, r21
 c76:	08 95       	ret

00000c78 <__fp_round>:
 c78:	09 2e       	mov	r0, r25
 c7a:	03 94       	inc	r0
 c7c:	00 0c       	add	r0, r0
 c7e:	11 f4       	brne	.+4      	; 0xc84 <__fp_round+0xc>
 c80:	88 23       	and	r24, r24
 c82:	52 f0       	brmi	.+20     	; 0xc98 <__fp_round+0x20>
 c84:	bb 0f       	add	r27, r27
 c86:	40 f4       	brcc	.+16     	; 0xc98 <__fp_round+0x20>
 c88:	bf 2b       	or	r27, r31
 c8a:	11 f4       	brne	.+4      	; 0xc90 <__fp_round+0x18>
 c8c:	60 ff       	sbrs	r22, 0
 c8e:	04 c0       	rjmp	.+8      	; 0xc98 <__fp_round+0x20>
 c90:	6f 5f       	subi	r22, 0xFF	; 255
 c92:	7f 4f       	sbci	r23, 0xFF	; 255
 c94:	8f 4f       	sbci	r24, 0xFF	; 255
 c96:	9f 4f       	sbci	r25, 0xFF	; 255
 c98:	08 95       	ret

00000c9a <__fp_split3>:
 c9a:	57 fd       	sbrc	r21, 7
 c9c:	90 58       	subi	r25, 0x80	; 128
 c9e:	44 0f       	add	r20, r20
 ca0:	55 1f       	adc	r21, r21
 ca2:	59 f0       	breq	.+22     	; 0xcba <__fp_splitA+0x10>
 ca4:	5f 3f       	cpi	r21, 0xFF	; 255
 ca6:	71 f0       	breq	.+28     	; 0xcc4 <__fp_splitA+0x1a>
 ca8:	47 95       	ror	r20

00000caa <__fp_splitA>:
 caa:	88 0f       	add	r24, r24
 cac:	97 fb       	bst	r25, 7
 cae:	99 1f       	adc	r25, r25
 cb0:	61 f0       	breq	.+24     	; 0xcca <__fp_splitA+0x20>
 cb2:	9f 3f       	cpi	r25, 0xFF	; 255
 cb4:	79 f0       	breq	.+30     	; 0xcd4 <__fp_splitA+0x2a>
 cb6:	87 95       	ror	r24
 cb8:	08 95       	ret
 cba:	12 16       	cp	r1, r18
 cbc:	13 06       	cpc	r1, r19
 cbe:	14 06       	cpc	r1, r20
 cc0:	55 1f       	adc	r21, r21
 cc2:	f2 cf       	rjmp	.-28     	; 0xca8 <__fp_split3+0xe>
 cc4:	46 95       	lsr	r20
 cc6:	f1 df       	rcall	.-30     	; 0xcaa <__fp_splitA>
 cc8:	08 c0       	rjmp	.+16     	; 0xcda <__fp_splitA+0x30>
 cca:	16 16       	cp	r1, r22
 ccc:	17 06       	cpc	r1, r23
 cce:	18 06       	cpc	r1, r24
 cd0:	99 1f       	adc	r25, r25
 cd2:	f1 cf       	rjmp	.-30     	; 0xcb6 <__fp_splitA+0xc>
 cd4:	86 95       	lsr	r24
 cd6:	71 05       	cpc	r23, r1
 cd8:	61 05       	cpc	r22, r1
 cda:	08 94       	sec
 cdc:	08 95       	ret

00000cde <__fp_zero>:
 cde:	e8 94       	clt

00000ce0 <__fp_szero>:
 ce0:	bb 27       	eor	r27, r27
 ce2:	66 27       	eor	r22, r22
 ce4:	77 27       	eor	r23, r23
 ce6:	cb 01       	movw	r24, r22
 ce8:	97 f9       	bld	r25, 7
 cea:	08 95       	ret

00000cec <__gesf2>:
 cec:	8a df       	rcall	.-236    	; 0xc02 <__fp_cmp>
 cee:	08 f4       	brcc	.+2      	; 0xcf2 <__gesf2+0x6>
 cf0:	8f ef       	ldi	r24, 0xFF	; 255
 cf2:	08 95       	ret

00000cf4 <__mulsf3>:
 cf4:	0b d0       	rcall	.+22     	; 0xd0c <__mulsf3x>
 cf6:	c0 cf       	rjmp	.-128    	; 0xc78 <__fp_round>
 cf8:	b1 df       	rcall	.-158    	; 0xc5c <__fp_pscA>
 cfa:	28 f0       	brcs	.+10     	; 0xd06 <__mulsf3+0x12>
 cfc:	b6 df       	rcall	.-148    	; 0xc6a <__fp_pscB>
 cfe:	18 f0       	brcs	.+6      	; 0xd06 <__mulsf3+0x12>
 d00:	95 23       	and	r25, r21
 d02:	09 f0       	breq	.+2      	; 0xd06 <__mulsf3+0x12>
 d04:	a2 cf       	rjmp	.-188    	; 0xc4a <__fp_inf>
 d06:	a7 cf       	rjmp	.-178    	; 0xc56 <__fp_nan>
 d08:	11 24       	eor	r1, r1
 d0a:	ea cf       	rjmp	.-44     	; 0xce0 <__fp_szero>

00000d0c <__mulsf3x>:
 d0c:	c6 df       	rcall	.-116    	; 0xc9a <__fp_split3>
 d0e:	a0 f3       	brcs	.-24     	; 0xcf8 <__mulsf3+0x4>

00000d10 <__mulsf3_pse>:
 d10:	95 9f       	mul	r25, r21
 d12:	d1 f3       	breq	.-12     	; 0xd08 <__mulsf3+0x14>
 d14:	95 0f       	add	r25, r21
 d16:	50 e0       	ldi	r21, 0x00	; 0
 d18:	55 1f       	adc	r21, r21
 d1a:	62 9f       	mul	r22, r18
 d1c:	f0 01       	movw	r30, r0
 d1e:	72 9f       	mul	r23, r18
 d20:	bb 27       	eor	r27, r27
 d22:	f0 0d       	add	r31, r0
 d24:	b1 1d       	adc	r27, r1
 d26:	63 9f       	mul	r22, r19
 d28:	aa 27       	eor	r26, r26
 d2a:	f0 0d       	add	r31, r0
 d2c:	b1 1d       	adc	r27, r1
 d2e:	aa 1f       	adc	r26, r26
 d30:	64 9f       	mul	r22, r20
 d32:	66 27       	eor	r22, r22
 d34:	b0 0d       	add	r27, r0
 d36:	a1 1d       	adc	r26, r1
 d38:	66 1f       	adc	r22, r22
 d3a:	82 9f       	mul	r24, r18
 d3c:	22 27       	eor	r18, r18
 d3e:	b0 0d       	add	r27, r0
 d40:	a1 1d       	adc	r26, r1
 d42:	62 1f       	adc	r22, r18
 d44:	73 9f       	mul	r23, r19
 d46:	b0 0d       	add	r27, r0
 d48:	a1 1d       	adc	r26, r1
 d4a:	62 1f       	adc	r22, r18
 d4c:	83 9f       	mul	r24, r19
 d4e:	a0 0d       	add	r26, r0
 d50:	61 1d       	adc	r22, r1
 d52:	22 1f       	adc	r18, r18
 d54:	74 9f       	mul	r23, r20
 d56:	33 27       	eor	r19, r19
 d58:	a0 0d       	add	r26, r0
 d5a:	61 1d       	adc	r22, r1
 d5c:	23 1f       	adc	r18, r19
 d5e:	84 9f       	mul	r24, r20
 d60:	60 0d       	add	r22, r0
 d62:	21 1d       	adc	r18, r1
 d64:	82 2f       	mov	r24, r18
 d66:	76 2f       	mov	r23, r22
 d68:	6a 2f       	mov	r22, r26
 d6a:	11 24       	eor	r1, r1
 d6c:	9f 57       	subi	r25, 0x7F	; 127
 d6e:	50 40       	sbci	r21, 0x00	; 0
 d70:	8a f0       	brmi	.+34     	; 0xd94 <__mulsf3_pse+0x84>
 d72:	e1 f0       	breq	.+56     	; 0xdac <__mulsf3_pse+0x9c>
 d74:	88 23       	and	r24, r24
 d76:	4a f0       	brmi	.+18     	; 0xd8a <__mulsf3_pse+0x7a>
 d78:	ee 0f       	add	r30, r30
 d7a:	ff 1f       	adc	r31, r31
 d7c:	bb 1f       	adc	r27, r27
 d7e:	66 1f       	adc	r22, r22
 d80:	77 1f       	adc	r23, r23
 d82:	88 1f       	adc	r24, r24
 d84:	91 50       	subi	r25, 0x01	; 1
 d86:	50 40       	sbci	r21, 0x00	; 0
 d88:	a9 f7       	brne	.-22     	; 0xd74 <__mulsf3_pse+0x64>
 d8a:	9e 3f       	cpi	r25, 0xFE	; 254
 d8c:	51 05       	cpc	r21, r1
 d8e:	70 f0       	brcs	.+28     	; 0xdac <__mulsf3_pse+0x9c>
 d90:	5c cf       	rjmp	.-328    	; 0xc4a <__fp_inf>
 d92:	a6 cf       	rjmp	.-180    	; 0xce0 <__fp_szero>
 d94:	5f 3f       	cpi	r21, 0xFF	; 255
 d96:	ec f3       	brlt	.-6      	; 0xd92 <__mulsf3_pse+0x82>
 d98:	98 3e       	cpi	r25, 0xE8	; 232
 d9a:	dc f3       	brlt	.-10     	; 0xd92 <__mulsf3_pse+0x82>
 d9c:	86 95       	lsr	r24
 d9e:	77 95       	ror	r23
 da0:	67 95       	ror	r22
 da2:	b7 95       	ror	r27
 da4:	f7 95       	ror	r31
 da6:	e7 95       	ror	r30
 da8:	9f 5f       	subi	r25, 0xFF	; 255
 daa:	c1 f7       	brne	.-16     	; 0xd9c <__mulsf3_pse+0x8c>
 dac:	fe 2b       	or	r31, r30
 dae:	88 0f       	add	r24, r24
 db0:	91 1d       	adc	r25, r1
 db2:	96 95       	lsr	r25
 db4:	87 95       	ror	r24
 db6:	97 f9       	bld	r25, 7
 db8:	08 95       	ret

00000dba <__udivmodsi4>:
 dba:	a1 e2       	ldi	r26, 0x21	; 33
 dbc:	1a 2e       	mov	r1, r26
 dbe:	aa 1b       	sub	r26, r26
 dc0:	bb 1b       	sub	r27, r27
 dc2:	fd 01       	movw	r30, r26
 dc4:	0d c0       	rjmp	.+26     	; 0xde0 <__udivmodsi4_ep>

00000dc6 <__udivmodsi4_loop>:
 dc6:	aa 1f       	adc	r26, r26
 dc8:	bb 1f       	adc	r27, r27
 dca:	ee 1f       	adc	r30, r30
 dcc:	ff 1f       	adc	r31, r31
 dce:	a2 17       	cp	r26, r18
 dd0:	b3 07       	cpc	r27, r19
 dd2:	e4 07       	cpc	r30, r20
 dd4:	f5 07       	cpc	r31, r21
 dd6:	20 f0       	brcs	.+8      	; 0xde0 <__udivmodsi4_ep>
 dd8:	a2 1b       	sub	r26, r18
 dda:	b3 0b       	sbc	r27, r19
 ddc:	e4 0b       	sbc	r30, r20
 dde:	f5 0b       	sbc	r31, r21

00000de0 <__udivmodsi4_ep>:
 de0:	66 1f       	adc	r22, r22
 de2:	77 1f       	adc	r23, r23
 de4:	88 1f       	adc	r24, r24
 de6:	99 1f       	adc	r25, r25
 de8:	1a 94       	dec	r1
 dea:	69 f7       	brne	.-38     	; 0xdc6 <__udivmodsi4_loop>
 dec:	60 95       	com	r22
 dee:	70 95       	com	r23
 df0:	80 95       	com	r24
 df2:	90 95       	com	r25
 df4:	9b 01       	movw	r18, r22
 df6:	ac 01       	movw	r20, r24
 df8:	bd 01       	movw	r22, r26
 dfa:	cf 01       	movw	r24, r30
 dfc:	08 95       	ret

00000dfe <__umulhisi3>:
 dfe:	a2 9f       	mul	r26, r18
 e00:	b0 01       	movw	r22, r0
 e02:	b3 9f       	mul	r27, r19
 e04:	c0 01       	movw	r24, r0
 e06:	a3 9f       	mul	r26, r19
 e08:	70 0d       	add	r23, r0
 e0a:	81 1d       	adc	r24, r1
 e0c:	11 24       	eor	r1, r1
 e0e:	91 1d       	adc	r25, r1
 e10:	b2 9f       	mul	r27, r18
 e12:	70 0d       	add	r23, r0
 e14:	81 1d       	adc	r24, r1
 e16:	11 24       	eor	r1, r1
 e18:	91 1d       	adc	r25, r1
 e1a:	08 95       	ret

00000e1c <_exit>:
 e1c:	f8 94       	cli

00000e1e <__stop_program>:
 e1e:	ff cf       	rjmp	.-2      	; 0xe1e <__stop_program>
