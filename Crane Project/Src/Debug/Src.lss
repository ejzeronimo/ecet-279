
Src.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800200  00001682  00001716  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001682  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000140  0080026a  0080026a  00001780  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000218d  00000000  00000000  000019bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001313  00000000  00000000  00003b49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001130  00000000  00000000  00004e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  00005f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b40  00000000  00000000  00006420  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000129a  00000000  00000000  00006f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  000081fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	4f c3       	rjmp	.+1694   	; 0x704 <__vector_25>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	88 c0       	rjmp	.+272    	; 0x186 <__vector_29>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	78 c3       	rjmp	.+1776   	; 0x782 <__vector_36>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 e8       	ldi	r30, 0x82	; 130
      fc:	f6 e1       	ldi	r31, 0x16	; 22
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 36       	cpi	r26, 0x6A	; 106
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	aa e6       	ldi	r26, 0x6A	; 106
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 3a       	cpi	r26, 0xAA	; 170
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	93 d4       	rcall	.+2342   	; 0xa46 <main>
     120:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <ADC_init>:
     126:	83 e8       	ldi	r24, 0x83	; 131
     128:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
     12c:	80 e4       	ldi	r24, 0x40	; 64
     12e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
     132:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
     136:	08 95       	ret

00000138 <ADC_getTenBitValue>:
     138:	ec e7       	ldi	r30, 0x7C	; 124
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	20 81       	ld	r18, Z
     13e:	20 7e       	andi	r18, 0xE0	; 224
     140:	28 2b       	or	r18, r24
     142:	20 83       	st	Z, r18
     144:	eb e7       	ldi	r30, 0x7B	; 123
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	20 81       	ld	r18, Z
     14a:	96 95       	lsr	r25
     14c:	87 95       	ror	r24
     14e:	96 95       	lsr	r25
     150:	87 95       	ror	r24
     152:	92 2f       	mov	r25, r18
     154:	97 7f       	andi	r25, 0xF7	; 247
     156:	89 2b       	or	r24, r25
     158:	80 83       	st	Z, r24
     15a:	ea e7       	ldi	r30, 0x7A	; 122
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	80 64       	ori	r24, 0x40	; 64
     162:	80 83       	st	Z, r24
     164:	80 81       	ld	r24, Z
     166:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     16a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
     16e:	60 e0       	ldi	r22, 0x00	; 0
     170:	79 2f       	mov	r23, r25
     172:	68 2b       	or	r22, r24
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	5d d6       	rcall	.+3258   	; 0xe34 <__floatunsisf>
     17a:	20 e0       	ldi	r18, 0x00	; 0
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	40 e8       	ldi	r20, 0x80	; 128
     180:	5a e3       	ldi	r21, 0x3A	; 58
     182:	0e c7       	rjmp	.+3612   	; 0xfa0 <__mulsf3>
     184:	08 95       	ret

00000186 <__vector_29>:
     186:	1f 92       	push	r1
     188:	0f 92       	push	r0
     18a:	0f b6       	in	r0, 0x3f	; 63
     18c:	0f 92       	push	r0
     18e:	11 24       	eor	r1, r1
     190:	0b b6       	in	r0, 0x3b	; 59
     192:	0f 92       	push	r0
     194:	2f 93       	push	r18
     196:	3f 93       	push	r19
     198:	4f 93       	push	r20
     19a:	5f 93       	push	r21
     19c:	6f 93       	push	r22
     19e:	7f 93       	push	r23
     1a0:	8f 93       	push	r24
     1a2:	9f 93       	push	r25
     1a4:	af 93       	push	r26
     1a6:	bf 93       	push	r27
     1a8:	ef 93       	push	r30
     1aa:	ff 93       	push	r31
     1ac:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     1b0:	28 2f       	mov	r18, r24
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	30 93 6d 02 	sts	0x026D, r19	; 0x80026d <readInterrupt+0x1>
     1b8:	20 93 6c 02 	sts	0x026C, r18	; 0x80026c <readInterrupt>
     1bc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	98 2f       	mov	r25, r24
     1c4:	88 27       	eor	r24, r24
     1c6:	82 2b       	or	r24, r18
     1c8:	93 2b       	or	r25, r19
     1ca:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <readInterrupt+0x1>
     1ce:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <readInterrupt>
     1d2:	e0 91 6a 02 	lds	r30, 0x026A	; 0x80026a <__data_end>
     1d6:	f0 91 6b 02 	lds	r31, 0x026B	; 0x80026b <__data_end+0x1>
     1da:	19 95       	eicall
     1dc:	ff 91       	pop	r31
     1de:	ef 91       	pop	r30
     1e0:	bf 91       	pop	r27
     1e2:	af 91       	pop	r26
     1e4:	9f 91       	pop	r25
     1e6:	8f 91       	pop	r24
     1e8:	7f 91       	pop	r23
     1ea:	6f 91       	pop	r22
     1ec:	5f 91       	pop	r21
     1ee:	4f 91       	pop	r20
     1f0:	3f 91       	pop	r19
     1f2:	2f 91       	pop	r18
     1f4:	0f 90       	pop	r0
     1f6:	0b be       	out	0x3b, r0	; 59
     1f8:	0f 90       	pop	r0
     1fa:	0f be       	out	0x3f, r0	; 63
     1fc:	0f 90       	pop	r0
     1fe:	1f 90       	pop	r1
     200:	18 95       	reti

00000202 <SM_init>:
// instance pointer to the motor port
static uint8_t * sMotorPort;

/* NOTE: Function implementations */
void SM_init(uint8_t volatile * const pRegister, uint8_t volatile * const pPort)
{
     202:	fc 01       	movw	r30, r24
    // configure port register
    *pRegister |= 0x0f;
     204:	90 81       	ld	r25, Z
     206:	9f 60       	ori	r25, 0x0F	; 15
     208:	90 83       	st	Z, r25

    // turn on pullup resisitors on the bottom nibble
    *pPort = (*pPort & 0xf0) | 0x00;
     20a:	fb 01       	movw	r30, r22
     20c:	80 81       	ld	r24, Z
     20e:	80 7f       	andi	r24, 0xF0	; 240
     210:	80 83       	st	Z, r24

    // save the port pointer to the static var
    sMotorPort = (uint8_t *)pPort;
     212:	70 93 6f 02 	sts	0x026F, r23	; 0x80026f <sMotorPort+0x1>
     216:	60 93 6e 02 	sts	0x026E, r22	; 0x80026e <sMotorPort>
     21a:	08 95       	ret

0000021c <getModeAndSteps>:
    *sMotorPort = *sMotorPort & 0xf0;
}

/* NOTE: Local function implementations */
StepperMotorModeData_t getModeAndSteps(StepperMotorRunMode_t mode, double rotation)
{
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	cd b7       	in	r28, 0x3d	; 61
     222:	de b7       	in	r29, 0x3e	; 62
     224:	27 97       	sbiw	r28, 0x07	; 7
     226:	0f b6       	in	r0, 0x3f	; 63
     228:	f8 94       	cli
     22a:	de bf       	out	0x3e, r29	; 62
     22c:	0f be       	out	0x3f, r0	; 63
     22e:	cd bf       	out	0x3d, r28	; 61
     230:	28 2f       	mov	r18, r24
     232:	cb 01       	movw	r24, r22
     234:	ba 01       	movw	r22, r20
    uint8_t * pArray;
    uint8_t   size  = 0;
    uint32_t  steps = 0;

    switch(mode)
     236:	21 30       	cpi	r18, 0x01	; 1
     238:	71 f0       	breq	.+28     	; 0x256 <getModeAndSteps+0x3a>
     23a:	18 f0       	brcs	.+6      	; 0x242 <getModeAndSteps+0x26>
     23c:	22 30       	cpi	r18, 0x02	; 2
     23e:	a9 f0       	breq	.+42     	; 0x26a <getModeAndSteps+0x4e>
     240:	1e c0       	rjmp	.+60     	; 0x27e <getModeAndSteps+0x62>
    {
        case stepperModeWave:
        {
            pArray = sWaveStepMap;
            size   = sizeof(sWaveStepMap) / sizeof(sWaveStepMap[0]);
            steps  = (rotation * 2048);
     242:	20 e0       	ldi	r18, 0x00	; 0
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	40 e0       	ldi	r20, 0x00	; 0
     248:	55 e4       	ldi	r21, 0x45	; 69
     24a:	aa d6       	rcall	.+3412   	; 0xfa0 <__mulsf3>
     24c:	c7 d5       	rcall	.+2958   	; 0xddc <__fixunssfsi>
    switch(mode)
    {
        case stepperModeWave:
        {
            pArray = sWaveStepMap;
            size   = sizeof(sWaveStepMap) / sizeof(sWaveStepMap[0]);
     24e:	24 e0       	ldi	r18, 0x04	; 4

    switch(mode)
    {
        case stepperModeWave:
        {
            pArray = sWaveStepMap;
     250:	ec e0       	ldi	r30, 0x0C	; 12
     252:	f2 e0       	ldi	r31, 0x02	; 2
            size   = sizeof(sWaveStepMap) / sizeof(sWaveStepMap[0]);
            steps  = (rotation * 2048);
        }
        break;
     254:	19 c0       	rjmp	.+50     	; 0x288 <getModeAndSteps+0x6c>
        case stepperModeFull:
        {
            pArray = sFullStepMap;
            size   = sizeof(sFullStepMap) / sizeof(sFullStepMap[0]);
            steps  = (rotation * 2048);
     256:	20 e0       	ldi	r18, 0x00	; 0
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	55 e4       	ldi	r21, 0x45	; 69
     25e:	a0 d6       	rcall	.+3392   	; 0xfa0 <__mulsf3>
     260:	bd d5       	rcall	.+2938   	; 0xddc <__fixunssfsi>
        }
        break;
        case stepperModeFull:
        {
            pArray = sFullStepMap;
            size   = sizeof(sFullStepMap) / sizeof(sFullStepMap[0]);
     262:	24 e0       	ldi	r18, 0x04	; 4
            steps  = (rotation * 2048);
        }
        break;
        case stepperModeFull:
        {
            pArray = sFullStepMap;
     264:	e8 e0       	ldi	r30, 0x08	; 8
     266:	f2 e0       	ldi	r31, 0x02	; 2
            size   = sizeof(sFullStepMap) / sizeof(sFullStepMap[0]);
            steps  = (rotation * 2048);
        }
        break;
     268:	0f c0       	rjmp	.+30     	; 0x288 <getModeAndSteps+0x6c>
        case stepperModeHalf:
        {
            pArray = sHalfStepMap;
            size   = sizeof(sHalfStepMap) / sizeof(sHalfStepMap[0]);
            steps  = (rotation * 4096);
     26a:	20 e0       	ldi	r18, 0x00	; 0
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	40 e8       	ldi	r20, 0x80	; 128
     270:	55 e4       	ldi	r21, 0x45	; 69
     272:	96 d6       	rcall	.+3372   	; 0xfa0 <__mulsf3>
     274:	b3 d5       	rcall	.+2918   	; 0xddc <__fixunssfsi>
        }
        break;
        case stepperModeHalf:
        {
            pArray = sHalfStepMap;
            size   = sizeof(sHalfStepMap) / sizeof(sHalfStepMap[0]);
     276:	28 e0       	ldi	r18, 0x08	; 8
            steps  = (rotation * 2048);
        }
        break;
        case stepperModeHalf:
        {
            pArray = sHalfStepMap;
     278:	e0 e0       	ldi	r30, 0x00	; 0
     27a:	f2 e0       	ldi	r31, 0x02	; 2
            size   = sizeof(sHalfStepMap) / sizeof(sHalfStepMap[0]);
            steps  = (rotation * 4096);
        }
        break;
     27c:	05 c0       	rjmp	.+10     	; 0x288 <getModeAndSteps+0x6c>
/* NOTE: Local function implementations */
StepperMotorModeData_t getModeAndSteps(StepperMotorRunMode_t mode, double rotation)
{
    uint8_t * pArray;
    uint8_t   size  = 0;
    uint32_t  steps = 0;
     27e:	60 e0       	ldi	r22, 0x00	; 0
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	90 e0       	ldi	r25, 0x00	; 0

/* NOTE: Local function implementations */
StepperMotorModeData_t getModeAndSteps(StepperMotorRunMode_t mode, double rotation)
{
    uint8_t * pArray;
    uint8_t   size  = 0;
     286:	20 e0       	ldi	r18, 0x00	; 0
        break;
        default:
            break;
    };

    return (StepperMotorModeData_t){
     288:	fb 83       	std	Y+3, r31	; 0x03
     28a:	ea 83       	std	Y+2, r30	; 0x02
     28c:	3e 2f       	mov	r19, r30
     28e:	4b 81       	ldd	r20, Y+3	; 0x03
     290:	56 2f       	mov	r21, r22
     292:	67 2f       	mov	r22, r23
     294:	78 2f       	mov	r23, r24
        .pArray    = pArray,
        .steps     = steps,
        .arraySize = size,
    };
     296:	89 2f       	mov	r24, r25
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	27 96       	adiw	r28, 0x07	; 7
     29c:	0f b6       	in	r0, 0x3f	; 63
     29e:	f8 94       	cli
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	0f be       	out	0x3f, r0	; 63
     2a4:	cd bf       	out	0x3d, r28	; 61
     2a6:	df 91       	pop	r29
     2a8:	cf 91       	pop	r28
     2aa:	08 95       	ret

000002ac <SM_move>:
    // save the port pointer to the static var
    sMotorPort = (uint8_t *)pPort;
}

void SM_move(StepperMotorRunMode_t mode, double distance)
{
     2ac:	cf 92       	push	r12
     2ae:	df 92       	push	r13
     2b0:	ef 92       	push	r14
     2b2:	ff 92       	push	r15
     2b4:	0f 93       	push	r16
     2b6:	1f 93       	push	r17
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
     2c0:	27 97       	sbiw	r28, 0x07	; 7
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	f8 94       	cli
     2c6:	de bf       	out	0x3e, r29	; 62
     2c8:	0f be       	out	0x3f, r0	; 63
     2ca:	cd bf       	out	0x3d, r28	; 61
    StepperMotorModeData_t data = getModeAndSteps(mode, distance);
     2cc:	a7 df       	rcall	.-178    	; 0x21c <getModeAndSteps>
     2ce:	29 83       	std	Y+1, r18	; 0x01
     2d0:	3a 83       	std	Y+2, r19	; 0x02
     2d2:	4b 83       	std	Y+3, r20	; 0x03
     2d4:	5c 83       	std	Y+4, r21	; 0x04
     2d6:	6d 83       	std	Y+5, r22	; 0x05
     2d8:	7e 83       	std	Y+6, r23	; 0x06
     2da:	8f 83       	std	Y+7, r24	; 0x07

    for(uint32_t i = 0, j = 0; i < data.steps; i++)
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	dc 01       	movw	r26, r24
     2e2:	40 e0       	ldi	r20, 0x00	; 0
     2e4:	50 e0       	ldi	r21, 0x00	; 0
     2e6:	ba 01       	movw	r22, r20
     2e8:	2d c0       	rjmp	.+90     	; 0x344 <SM_move+0x98>
    {
        *sMotorPort = (*sMotorPort & 0xf0) | data.pArray[j++];
     2ea:	e0 91 6e 02 	lds	r30, 0x026E	; 0x80026e <sMotorPort>
     2ee:	f0 91 6f 02 	lds	r31, 0x026F	; 0x80026f <sMotorPort+0x1>
     2f2:	10 81       	ld	r17, Z
     2f4:	2a 81       	ldd	r18, Y+2	; 0x02
     2f6:	3b 81       	ldd	r19, Y+3	; 0x03
     2f8:	6c 01       	movw	r12, r24
     2fa:	7d 01       	movw	r14, r26
     2fc:	0f ef       	ldi	r16, 0xFF	; 255
     2fe:	c0 1a       	sub	r12, r16
     300:	d0 0a       	sbc	r13, r16
     302:	e0 0a       	sbc	r14, r16
     304:	f0 0a       	sbc	r15, r16
     306:	d9 01       	movw	r26, r18
     308:	a8 0f       	add	r26, r24
     30a:	b9 1f       	adc	r27, r25
     30c:	9c 91       	ld	r25, X
     30e:	81 2f       	mov	r24, r17
     310:	80 7f       	andi	r24, 0xF0	; 240
     312:	89 2b       	or	r24, r25
     314:	80 83       	st	Z, r24

        if(j >= data.arraySize)
     316:	89 81       	ldd	r24, Y+1	; 0x01
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	a0 e0       	ldi	r26, 0x00	; 0
     31c:	b0 e0       	ldi	r27, 0x00	; 0
     31e:	c8 16       	cp	r12, r24
     320:	d9 06       	cpc	r13, r25
     322:	ea 06       	cpc	r14, r26
     324:	fb 06       	cpc	r15, r27
     326:	18 f4       	brcc	.+6      	; 0x32e <SM_move+0x82>
{
    StepperMotorModeData_t data = getModeAndSteps(mode, distance);

    for(uint32_t i = 0, j = 0; i < data.steps; i++)
    {
        *sMotorPort = (*sMotorPort & 0xf0) | data.pArray[j++];
     328:	d7 01       	movw	r26, r14
     32a:	c6 01       	movw	r24, r12
     32c:	03 c0       	rjmp	.+6      	; 0x334 <SM_move+0x88>

        if(j >= data.arraySize)
        {
            j = 0;
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	dc 01       	movw	r26, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     334:	e0 ee       	ldi	r30, 0xE0	; 224
     336:	fe e2       	ldi	r31, 0x2E	; 46
     338:	31 97       	sbiw	r30, 0x01	; 1
     33a:	f1 f7       	brne	.-4      	; 0x338 <SM_move+0x8c>

void SM_move(StepperMotorRunMode_t mode, double distance)
{
    StepperMotorModeData_t data = getModeAndSteps(mode, distance);

    for(uint32_t i = 0, j = 0; i < data.steps; i++)
     33c:	4f 5f       	subi	r20, 0xFF	; 255
     33e:	5f 4f       	sbci	r21, 0xFF	; 255
     340:	6f 4f       	sbci	r22, 0xFF	; 255
     342:	7f 4f       	sbci	r23, 0xFF	; 255
     344:	cc 80       	ldd	r12, Y+4	; 0x04
     346:	dd 80       	ldd	r13, Y+5	; 0x05
     348:	ee 80       	ldd	r14, Y+6	; 0x06
     34a:	ff 80       	ldd	r15, Y+7	; 0x07
     34c:	4c 15       	cp	r20, r12
     34e:	5d 05       	cpc	r21, r13
     350:	6e 05       	cpc	r22, r14
     352:	7f 05       	cpc	r23, r15
     354:	50 f2       	brcs	.-108    	; 0x2ea <SM_move+0x3e>
        }

        _delay_ms(3);
    }

    *sMotorPort = *sMotorPort & 0xf0;
     356:	e0 91 6e 02 	lds	r30, 0x026E	; 0x80026e <sMotorPort>
     35a:	f0 91 6f 02 	lds	r31, 0x026F	; 0x80026f <sMotorPort+0x1>
     35e:	80 81       	ld	r24, Z
     360:	80 7f       	andi	r24, 0xF0	; 240
     362:	80 83       	st	Z, r24
}
     364:	27 96       	adiw	r28, 0x07	; 7
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	f8 94       	cli
     36a:	de bf       	out	0x3e, r29	; 62
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	cd bf       	out	0x3d, r28	; 61
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	ff 90       	pop	r15
     37a:	ef 90       	pop	r14
     37c:	df 90       	pop	r13
     37e:	cf 90       	pop	r12
     380:	08 95       	ret

00000382 <SM_movePosition>:

void SM_movePosition(StepperMotorRunMode_t mode, uint16_t distance)
{
     382:	cf 93       	push	r28
     384:	c8 2f       	mov	r28, r24
    SM_move(mode, ((double)distance / 360));
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	54 d5       	rcall	.+2728   	; 0xe34 <__floatunsisf>
     38c:	20 e0       	ldi	r18, 0x00	; 0
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	44 eb       	ldi	r20, 0xB4	; 180
     392:	53 e4       	ldi	r21, 0x43	; 67
     394:	bb d4       	rcall	.+2422   	; 0xd0c <__divsf3>
     396:	ab 01       	movw	r20, r22
     398:	bc 01       	movw	r22, r24
     39a:	8c 2f       	mov	r24, r28
     39c:	87 df       	rcall	.-242    	; 0x2ac <SM_move>
}
     39e:	cf 91       	pop	r28
     3a0:	08 95       	ret

000003a2 <SM_moveTime>:

void SM_moveTime(StepperMotorRunMode_t mode, bool direction, double time, double stepTime)
{
     3a2:	3f 92       	push	r3
     3a4:	4f 92       	push	r4
     3a6:	5f 92       	push	r5
     3a8:	6f 92       	push	r6
     3aa:	7f 92       	push	r7
     3ac:	8f 92       	push	r8
     3ae:	9f 92       	push	r9
     3b0:	af 92       	push	r10
     3b2:	bf 92       	push	r11
     3b4:	cf 92       	push	r12
     3b6:	df 92       	push	r13
     3b8:	ef 92       	push	r14
     3ba:	ff 92       	push	r15
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
     3c8:	2f 97       	sbiw	r28, 0x0f	; 15
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	de bf       	out	0x3e, r29	; 62
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	cd bf       	out	0x3d, r28	; 61
     3d4:	36 2e       	mov	r3, r22
     3d6:	2c 87       	std	Y+12, r18	; 0x0c
     3d8:	3d 87       	std	Y+13, r19	; 0x0d
     3da:	4e 87       	std	Y+14, r20	; 0x0e
     3dc:	5f 87       	std	Y+15, r21	; 0x0f
     3de:	e8 86       	std	Y+8, r14	; 0x08
     3e0:	f9 86       	std	Y+9, r15	; 0x09
     3e2:	0a 87       	std	Y+10, r16	; 0x0a
     3e4:	1b 87       	std	Y+11, r17	; 0x0b
    StepperMotorModeData_t data = getModeAndSteps(mode, 0);
     3e6:	40 e0       	ldi	r20, 0x00	; 0
     3e8:	50 e0       	ldi	r21, 0x00	; 0
     3ea:	ba 01       	movw	r22, r20
     3ec:	17 df       	rcall	.-466    	; 0x21c <getModeAndSteps>
     3ee:	29 83       	std	Y+1, r18	; 0x01
     3f0:	3a 83       	std	Y+2, r19	; 0x02
     3f2:	4b 83       	std	Y+3, r20	; 0x03
     3f4:	5c 83       	std	Y+4, r21	; 0x04
     3f6:	6d 83       	std	Y+5, r22	; 0x05
     3f8:	7e 83       	std	Y+6, r23	; 0x06
     3fa:	8f 83       	std	Y+7, r24	; 0x07

    for(uint32_t i = 0, j = (direction ? data.arraySize : 0); i < (time / stepTime); i++)
     3fc:	33 20       	and	r3, r3
     3fe:	29 f0       	breq	.+10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     400:	c2 2e       	mov	r12, r18
     402:	d1 2c       	mov	r13, r1
     404:	e1 2c       	mov	r14, r1
     406:	f1 2c       	mov	r15, r1
     408:	03 c0       	rjmp	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40a:	c1 2c       	mov	r12, r1
     40c:	d1 2c       	mov	r13, r1
     40e:	76 01       	movw	r14, r12

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     410:	81 2c       	mov	r8, r1
     412:	91 2c       	mov	r9, r1
     414:	54 01       	movw	r10, r8
     416:	71 c0       	rjmp	.+226    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
    {
        *sMotorPort = (*sMotorPort & 0xf0) | data.pArray[(direction ? j-- : j++)];
     418:	e0 91 6e 02 	lds	r30, 0x026E	; 0x80026e <sMotorPort>
     41c:	f0 91 6f 02 	lds	r31, 0x026F	; 0x80026f <sMotorPort+0x1>
     420:	80 81       	ld	r24, Z
     422:	80 7f       	andi	r24, 0xF0	; 240
     424:	2a 81       	ldd	r18, Y+2	; 0x02
     426:	3b 81       	ldd	r19, Y+3	; 0x03
     428:	33 20       	and	r3, r3
     42a:	39 f0       	breq	.+14     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     42c:	b7 01       	movw	r22, r14
     42e:	a6 01       	movw	r20, r12
     430:	41 50       	subi	r20, 0x01	; 1
     432:	51 09       	sbc	r21, r1
     434:	61 09       	sbc	r22, r1
     436:	71 09       	sbc	r23, r1
     438:	06 c0       	rjmp	.+12     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     43a:	b7 01       	movw	r22, r14
     43c:	a6 01       	movw	r20, r12
     43e:	4f 5f       	subi	r20, 0xFF	; 255
     440:	5f 4f       	sbci	r21, 0xFF	; 255
     442:	6f 4f       	sbci	r22, 0xFF	; 255
     444:	7f 4f       	sbci	r23, 0xFF	; 255
     446:	d9 01       	movw	r26, r18
     448:	ac 0d       	add	r26, r12
     44a:	bd 1d       	adc	r27, r13
     44c:	9c 91       	ld	r25, X
     44e:	89 2b       	or	r24, r25
     450:	80 83       	st	Z, r24

        if(j >= data.arraySize || j <= 0)
     452:	c9 80       	ldd	r12, Y+1	; 0x01
     454:	d1 2c       	mov	r13, r1
     456:	e1 2c       	mov	r14, r1
     458:	f1 2c       	mov	r15, r1
     45a:	4c 15       	cp	r20, r12
     45c:	5d 05       	cpc	r21, r13
     45e:	6e 05       	cpc	r22, r14
     460:	7f 05       	cpc	r23, r15
     462:	28 f4       	brcc	.+10     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     464:	41 15       	cp	r20, r1
     466:	51 05       	cpc	r21, r1
     468:	61 05       	cpc	r22, r1
     46a:	71 05       	cpc	r23, r1
     46c:	31 f4       	brne	.+12     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
        {
            j = (direction ? data.arraySize : 0);
     46e:	31 10       	cpse	r3, r1
     470:	06 c0       	rjmp	.+12     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     472:	c1 2c       	mov	r12, r1
     474:	d1 2c       	mov	r13, r1
     476:	76 01       	movw	r14, r12
     478:	02 c0       	rjmp	.+4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     47a:	6a 01       	movw	r12, r20
     47c:	7b 01       	movw	r14, r22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	4a e7       	ldi	r20, 0x7A	; 122
     484:	55 e4       	ldi	r21, 0x45	; 69
     486:	68 85       	ldd	r22, Y+8	; 0x08
     488:	79 85       	ldd	r23, Y+9	; 0x09
     48a:	8a 85       	ldd	r24, Y+10	; 0x0a
     48c:	9b 85       	ldd	r25, Y+11	; 0x0b
     48e:	88 d5       	rcall	.+2832   	; 0xfa0 <__mulsf3>
     490:	2b 01       	movw	r4, r22
     492:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	40 e8       	ldi	r20, 0x80	; 128
     49a:	5f e3       	ldi	r21, 0x3F	; 63
     49c:	33 d4       	rcall	.+2150   	; 0xd04 <__cmpsf2>
     49e:	88 23       	and	r24, r24
     4a0:	14 f1       	brlt	.+68     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
		__ticks = 1;
	else if (__tmp > 65535)
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	3f ef       	ldi	r19, 0xFF	; 255
     4a6:	4f e7       	ldi	r20, 0x7F	; 127
     4a8:	57 e4       	ldi	r21, 0x47	; 71
     4aa:	c3 01       	movw	r24, r6
     4ac:	b2 01       	movw	r22, r4
     4ae:	74 d5       	rcall	.+2792   	; 0xf98 <__gesf2>
     4b0:	18 16       	cp	r1, r24
     4b2:	ac f4       	brge	.+42     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	40 e2       	ldi	r20, 0x20	; 32
     4ba:	51 e4       	ldi	r21, 0x41	; 65
     4bc:	68 85       	ldd	r22, Y+8	; 0x08
     4be:	79 85       	ldd	r23, Y+9	; 0x09
     4c0:	8a 85       	ldd	r24, Y+10	; 0x0a
     4c2:	9b 85       	ldd	r25, Y+11	; 0x0b
     4c4:	6d d5       	rcall	.+2778   	; 0xfa0 <__mulsf3>
     4c6:	8a d4       	rcall	.+2324   	; 0xddc <__fixunssfsi>
     4c8:	06 c0       	rjmp	.+12     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4ca:	80 e9       	ldi	r24, 0x90	; 144
     4cc:	91 e0       	ldi	r25, 0x01	; 1
     4ce:	01 97       	sbiw	r24, 0x01	; 1
     4d0:	f1 f7       	brne	.-4      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4d2:	61 50       	subi	r22, 0x01	; 1
     4d4:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4d6:	61 15       	cp	r22, r1
     4d8:	71 05       	cpc	r23, r1
     4da:	b9 f7       	brne	.-18     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4dc:	09 c0       	rjmp	.+18     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4de:	c3 01       	movw	r24, r6
     4e0:	b2 01       	movw	r22, r4
     4e2:	7c d4       	rcall	.+2296   	; 0xddc <__fixunssfsi>
     4e4:	02 c0       	rjmp	.+4      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     4e6:	61 e0       	ldi	r22, 0x01	; 1
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	cb 01       	movw	r24, r22
     4ec:	01 97       	sbiw	r24, 0x01	; 1
     4ee:	f1 f7       	brne	.-4      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>

void SM_moveTime(StepperMotorRunMode_t mode, bool direction, double time, double stepTime)
{
    StepperMotorModeData_t data = getModeAndSteps(mode, 0);

    for(uint32_t i = 0, j = (direction ? data.arraySize : 0); i < (time / stepTime); i++)
     4f0:	8f ef       	ldi	r24, 0xFF	; 255
     4f2:	88 1a       	sub	r8, r24
     4f4:	98 0a       	sbc	r9, r24
     4f6:	a8 0a       	sbc	r10, r24
     4f8:	b8 0a       	sbc	r11, r24
     4fa:	c5 01       	movw	r24, r10
     4fc:	b4 01       	movw	r22, r8
     4fe:	9a d4       	rcall	.+2356   	; 0xe34 <__floatunsisf>
     500:	2b 01       	movw	r4, r22
     502:	3c 01       	movw	r6, r24
     504:	28 85       	ldd	r18, Y+8	; 0x08
     506:	39 85       	ldd	r19, Y+9	; 0x09
     508:	4a 85       	ldd	r20, Y+10	; 0x0a
     50a:	5b 85       	ldd	r21, Y+11	; 0x0b
     50c:	6c 85       	ldd	r22, Y+12	; 0x0c
     50e:	7d 85       	ldd	r23, Y+13	; 0x0d
     510:	8e 85       	ldd	r24, Y+14	; 0x0e
     512:	9f 85       	ldd	r25, Y+15	; 0x0f
     514:	fb d3       	rcall	.+2038   	; 0xd0c <__divsf3>
     516:	9b 01       	movw	r18, r22
     518:	ac 01       	movw	r20, r24
     51a:	c3 01       	movw	r24, r6
     51c:	b2 01       	movw	r22, r4
     51e:	f2 d3       	rcall	.+2020   	; 0xd04 <__cmpsf2>
     520:	88 23       	and	r24, r24
     522:	0c f4       	brge	.+2      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
     524:	79 cf       	rjmp	.-270    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
        }

        _delay_ms(stepTime);
    }

    *sMotorPort = *sMotorPort & 0xf0;
     526:	e0 91 6e 02 	lds	r30, 0x026E	; 0x80026e <sMotorPort>
     52a:	f0 91 6f 02 	lds	r31, 0x026F	; 0x80026f <sMotorPort+0x1>
     52e:	80 81       	ld	r24, Z
     530:	80 7f       	andi	r24, 0xF0	; 240
     532:	80 83       	st	Z, r24
}
     534:	2f 96       	adiw	r28, 0x0f	; 15
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	f8 94       	cli
     53a:	de bf       	out	0x3e, r29	; 62
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	cd bf       	out	0x3d, r28	; 61
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	0f 91       	pop	r16
     548:	ff 90       	pop	r15
     54a:	ef 90       	pop	r14
     54c:	df 90       	pop	r13
     54e:	cf 90       	pop	r12
     550:	bf 90       	pop	r11
     552:	af 90       	pop	r10
     554:	9f 90       	pop	r9
     556:	8f 90       	pop	r8
     558:	7f 90       	pop	r7
     55a:	6f 90       	pop	r6
     55c:	5f 90       	pop	r5
     55e:	4f 90       	pop	r4
     560:	3f 90       	pop	r3
     562:	08 95       	ret

00000564 <CRANE_initSerial>:
// transmit single byte of data
void BLUETOOTH_out(uint8_t ch);

/* NOTE: Global function implementations */
void CRANE_initSerial(uint16_t baudRate)
{
     564:	9c 01       	movw	r18, r24
    // ubrr load
    uint16_t myubr;

    // set up the ucsr0a and ucsr0b and ucsr0c
    UCSR0A = 0x00;
     566:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
     56a:	88 e9       	ldi	r24, 0x98	; 152
     56c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
     570:	86 e0       	ldi	r24, 0x06	; 6
     572:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>

    myubr  = (F_CPU / (16UL * (uint16_t)baudRate)) - 1;
     576:	c9 01       	movw	r24, r18
     578:	a0 e0       	ldi	r26, 0x00	; 0
     57a:	b0 e0       	ldi	r27, 0x00	; 0
     57c:	88 0f       	add	r24, r24
     57e:	99 1f       	adc	r25, r25
     580:	aa 1f       	adc	r26, r26
     582:	bb 1f       	adc	r27, r27
     584:	88 0f       	add	r24, r24
     586:	99 1f       	adc	r25, r25
     588:	aa 1f       	adc	r26, r26
     58a:	bb 1f       	adc	r27, r27
     58c:	9c 01       	movw	r18, r24
     58e:	ad 01       	movw	r20, r26
     590:	22 0f       	add	r18, r18
     592:	33 1f       	adc	r19, r19
     594:	44 1f       	adc	r20, r20
     596:	55 1f       	adc	r21, r21
     598:	22 0f       	add	r18, r18
     59a:	33 1f       	adc	r19, r19
     59c:	44 1f       	adc	r20, r20
     59e:	55 1f       	adc	r21, r21
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	74 e2       	ldi	r23, 0x24	; 36
     5a4:	84 ef       	ldi	r24, 0xF4	; 244
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	5e d5       	rcall	.+2748   	; 0x1066 <__udivmodsi4>
     5aa:	21 50       	subi	r18, 0x01	; 1
     5ac:	31 09       	sbc	r19, r1
    // load ubrr low
    UBRR0L = myubr;
     5ae:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>

    UBRR0H = 0x00;
     5b2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
     5b6:	08 95       	ret

000005b8 <CRANE_initBluetooth>:
        pWorker++;
    }
}

void CRANE_initBluetooth(uint16_t baudRate)
{
     5b8:	9c 01       	movw	r18, r24
    uint16_t mybur;
    UCSR1A = 0;
     5ba:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>

    // enable receive interrupt
    // enable transmits
    // enable receive
    // 2 stop bits
    UCSR1B = (1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1);
     5be:	88 e9       	ldi	r24, 0x98	; 152
     5c0:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>

    UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);
     5c4:	86 e0       	ldi	r24, 0x06	; 6
     5c6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>

    // set up baud rate
    mybur = (F_CPU) / (16UL * (uint16_t)baudRate) - 1;
     5ca:	c9 01       	movw	r24, r18
     5cc:	a0 e0       	ldi	r26, 0x00	; 0
     5ce:	b0 e0       	ldi	r27, 0x00	; 0
     5d0:	88 0f       	add	r24, r24
     5d2:	99 1f       	adc	r25, r25
     5d4:	aa 1f       	adc	r26, r26
     5d6:	bb 1f       	adc	r27, r27
     5d8:	88 0f       	add	r24, r24
     5da:	99 1f       	adc	r25, r25
     5dc:	aa 1f       	adc	r26, r26
     5de:	bb 1f       	adc	r27, r27
     5e0:	9c 01       	movw	r18, r24
     5e2:	ad 01       	movw	r20, r26
     5e4:	22 0f       	add	r18, r18
     5e6:	33 1f       	adc	r19, r19
     5e8:	44 1f       	adc	r20, r20
     5ea:	55 1f       	adc	r21, r21
     5ec:	22 0f       	add	r18, r18
     5ee:	33 1f       	adc	r19, r19
     5f0:	44 1f       	adc	r20, r20
     5f2:	55 1f       	adc	r21, r21
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	74 e2       	ldi	r23, 0x24	; 36
     5f8:	84 ef       	ldi	r24, 0xF4	; 244
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	34 d5       	rcall	.+2664   	; 0x1066 <__udivmodsi4>
     5fe:	21 50       	subi	r18, 0x01	; 1
     600:	31 09       	sbc	r19, r1

    UBRR1L = mybur;
     602:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
    UBRR1H = 0x00;
     606:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
     60a:	08 95       	ret

0000060c <UART_out>:

/* NOTE: Local function implementations */
void UART_out(uint8_t ch)
{
    // wait to complete transmission and empty udr0
    while((UCSR0A & (1 << UDRE0)) == 0)
     60c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
     610:	95 ff       	sbrs	r25, 5
     612:	fc cf       	rjmp	.-8      	; 0x60c <UART_out>
    {
    }

    // load next byte to be transmitted
    UDR0 = ch;
     614:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     618:	08 95       	ret

0000061a <CRANE_sendSerial>:

    UBRR0H = 0x00;
}

void CRANE_sendSerial(char const * const pData)
{
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	ec 01       	movw	r28, r24
    char const * pWorker = (char const *)pData;

    // while we are not at the end of the string
    while(*pWorker != '\0')
     620:	02 c0       	rjmp	.+4      	; 0x626 <CRANE_sendSerial+0xc>
    {
        // wait for uart tx to be ready then send out uart
        UART_out(*pWorker);
     622:	f4 df       	rcall	.-24     	; 0x60c <UART_out>

        pWorker++;
     624:	21 96       	adiw	r28, 0x01	; 1
void CRANE_sendSerial(char const * const pData)
{
    char const * pWorker = (char const *)pData;

    // while we are not at the end of the string
    while(*pWorker != '\0')
     626:	88 81       	ld	r24, Y
     628:	81 11       	cpse	r24, r1
     62a:	fb cf       	rjmp	.-10     	; 0x622 <CRANE_sendSerial+0x8>
        // wait for uart tx to be ready then send out uart
        UART_out(*pWorker);

        pWorker++;
    }
}
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <BLUETOOTH_out>:
    UDR0 = ch;
}

void BLUETOOTH_out(uint8_t ch) // transmit single byte of data
{
    while((UCSR1A & (1 << UDRE1)) == 0)
     632:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
     636:	95 ff       	sbrs	r25, 5
     638:	fc cf       	rjmp	.-8      	; 0x632 <BLUETOOTH_out>
    {
        // wait for completing transmission and empty UDR0
    }

    UDR1 = ch; // load next byte to be transmitted
     63a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
     63e:	08 95       	ret

00000640 <CRANE_sendBluetooth>:
    UBRR1L = mybur;
    UBRR1H = 0x00;
}

void CRANE_sendBluetooth(char const * const pData)
{
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	ec 01       	movw	r28, r24
    char const * pWorker = (char const *)pData;

    // while we are not at the end of the string
    while(*pWorker != '\0')
     646:	02 c0       	rjmp	.+4      	; 0x64c <CRANE_sendBluetooth+0xc>
    {
        // wait for uart tx to be ready then send out uart
        BLUETOOTH_out(*pWorker);
     648:	f4 df       	rcall	.-24     	; 0x632 <BLUETOOTH_out>

        pWorker++;
     64a:	21 96       	adiw	r28, 0x01	; 1
void CRANE_sendBluetooth(char const * const pData)
{
    char const * pWorker = (char const *)pData;

    // while we are not at the end of the string
    while(*pWorker != '\0')
     64c:	88 81       	ld	r24, Y
     64e:	81 11       	cpse	r24, r1
     650:	fb cf       	rjmp	.-10     	; 0x648 <CRANE_sendBluetooth+0x8>
        // wait for uart tx to be ready then send out uart
        BLUETOOTH_out(*pWorker);

        pWorker++;
    }
}
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	08 95       	ret

00000658 <CRANE_eepromWriteChar>:
#include "CraneEeprom.h"

/* NOTE: Global function implementations */
void CRANE_eepromWriteChar(char ucData, uint16_t uiAddress)
{
    while(EECR & (1 << EEPE))
     658:	f9 99       	sbic	0x1f, 1	; 31
     65a:	fe cf       	rjmp	.-4      	; 0x658 <CRANE_eepromWriteChar>
    {
        /* Wait for completion of previous write */
    }

    /* Set up address and Data Registers */
    EEAR = uiAddress;
     65c:	72 bd       	out	0x22, r23	; 34
     65e:	61 bd       	out	0x21, r22	; 33
    EEDR = ucData;
     660:	80 bd       	out	0x20, r24	; 32

    /* Write logical one to EEMPE */
    // step 5. write 1 to EEMPE and 0 to EEPE
    EECR = (1 << EEMPE);
     662:	84 e0       	ldi	r24, 0x04	; 4
     664:	8f bb       	out	0x1f, r24	; 31

    /* Start EEPROM write by setting EEPE */
    // write EEPE within 4 clock cycles
    EECR |= (1 << EEPE);
     666:	8f b3       	in	r24, 0x1f	; 31
     668:	82 60       	ori	r24, 0x02	; 2
     66a:	8f bb       	out	0x1f, r24	; 31
     66c:	08 95       	ret

0000066e <CRANE_eepromReadChar>:
}

char CRANE_eepromReadChar(uint16_t uiAddress)
{
    while(EECR & (1 << EEPE))
     66e:	f9 99       	sbic	0x1f, 1	; 31
     670:	fe cf       	rjmp	.-4      	; 0x66e <CRANE_eepromReadChar>
    {
        /* Wait for completion of previous write */
    };

    EEAR = uiAddress;
     672:	92 bd       	out	0x22, r25	; 34
     674:	81 bd       	out	0x21, r24	; 33
    EECR |= (1 << EERE);
     676:	8f b3       	in	r24, 0x1f	; 31
     678:	81 60       	ori	r24, 0x01	; 1
     67a:	8f bb       	out	0x1f, r24	; 31

    return EEDR;
     67c:	80 b5       	in	r24, 0x20	; 32
}
     67e:	08 95       	ret

00000680 <CRANE_initServos>:

/* NOTE: Global function implementations */
void CRANE_initServos(void)
{
    // set up PORTB.5 as an output and 0V
    DDRB |= 0x60;
     680:	84 b1       	in	r24, 0x04	; 4
     682:	80 66       	ori	r24, 0x60	; 96
     684:	84 b9       	out	0x04, r24	; 4
    PORTB |= PORTB & ~0x60;
     686:	85 b1       	in	r24, 0x05	; 5
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	8f 79       	andi	r24, 0x9F	; 159
     68c:	95 b1       	in	r25, 0x05	; 5
     68e:	89 2b       	or	r24, r25
     690:	85 b9       	out	0x05, r24	; 5

    // 5000 @ 64
    // set frequency to 50hz
    ICR1 = 5000;
     692:	88 e8       	ldi	r24, 0x88	; 136
     694:	93 e1       	ldi	r25, 0x13	; 19
     696:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7c0087>
     69a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7c0086>

    // fast pwm set on compare
    TCCR1A = 0x02;
     69e:	82 e0       	ldi	r24, 0x02	; 2
     6a0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    // prescaler set to 64
    TCCR1B = 0x1B;
     6a4:	8b e1       	ldi	r24, 0x1B	; 27
     6a6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
     6aa:	08 95       	ret

000006ac <CRANE_setServoPosition>:
}

void CRANE_setServoPosition(uint8_t servo, uint8_t position)
{
    if(servo == 0)
     6ac:	81 11       	cpse	r24, r1
     6ae:	11 c0       	rjmp	.+34     	; 0x6d2 <CRANE_setServoPosition+0x26>
    {
        OCR1A = (uint32_t)position * 250 / 255 + 250;
     6b0:	26 2f       	mov	r18, r22
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	aa ef       	ldi	r26, 0xFA	; 250
     6b6:	b0 e0       	ldi	r27, 0x00	; 0
     6b8:	f8 d4       	rcall	.+2544   	; 0x10aa <__umulhisi3>
     6ba:	2f ef       	ldi	r18, 0xFF	; 255
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e0       	ldi	r20, 0x00	; 0
     6c0:	50 e0       	ldi	r21, 0x00	; 0
     6c2:	d1 d4       	rcall	.+2466   	; 0x1066 <__udivmodsi4>
     6c4:	26 50       	subi	r18, 0x06	; 6
     6c6:	3f 4f       	sbci	r19, 0xFF	; 255
     6c8:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     6cc:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     6d0:	08 95       	ret
    }
    else if(servo == 1)
     6d2:	81 30       	cpi	r24, 0x01	; 1
     6d4:	81 f4       	brne	.+32     	; 0x6f6 <CRANE_setServoPosition+0x4a>
    {
        OCR1B = (uint32_t)position * 250 / 255 + 250;
     6d6:	26 2f       	mov	r18, r22
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	aa ef       	ldi	r26, 0xFA	; 250
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
     6de:	e5 d4       	rcall	.+2506   	; 0x10aa <__umulhisi3>
     6e0:	2f ef       	ldi	r18, 0xFF	; 255
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	40 e0       	ldi	r20, 0x00	; 0
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	be d4       	rcall	.+2428   	; 0x1066 <__udivmodsi4>
     6ea:	26 50       	subi	r18, 0x06	; 6
     6ec:	3f 4f       	sbci	r19, 0xFF	; 255
     6ee:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
     6f2:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
     6f6:	08 95       	ret

000006f8 <CRANE_startServos>:
    }
}

void CRANE_startServos(void)
{
    TCCR1A |= 0xA0;
     6f8:	e0 e8       	ldi	r30, 0x80	; 128
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	80 81       	ld	r24, Z
     6fe:	80 6a       	ori	r24, 0xA0	; 160
     700:	80 83       	st	Z, r24
     702:	08 95       	ret

00000704 <__vector_25>:
    }
}

// interrupt handling for the serial connection
ISR(serialInterrupt)
{
     704:	1f 92       	push	r1
     706:	0f 92       	push	r0
     708:	0f b6       	in	r0, 0x3f	; 63
     70a:	0f 92       	push	r0
     70c:	11 24       	eor	r1, r1
     70e:	0b b6       	in	r0, 0x3b	; 59
     710:	0f 92       	push	r0
     712:	8f 93       	push	r24
     714:	af 93       	push	r26
     716:	bf 93       	push	r27
     718:	ef 93       	push	r30
     71a:	ff 93       	push	r31
    if(serialData != '\r' && serialData != '\n' && serialData != '\0' && (serialInputData.index < 127))
     71c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     720:	8d 30       	cpi	r24, 0x0D	; 13
     722:	f1 f0       	breq	.+60     	; 0x760 <__vector_25+0x5c>
     724:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     728:	8a 30       	cpi	r24, 0x0A	; 10
     72a:	d1 f0       	breq	.+52     	; 0x760 <__vector_25+0x5c>
     72c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     730:	88 23       	and	r24, r24
     732:	b1 f0       	breq	.+44     	; 0x760 <__vector_25+0x5c>
     734:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <serialInputData+0x80>
     738:	8f 37       	cpi	r24, 0x7F	; 127
     73a:	90 f4       	brcc	.+36     	; 0x760 <__vector_25+0x5c>
    {
        // add to array
        serialInputData.buffer[serialInputData.index]     = serialData;
     73c:	a2 e7       	ldi	r26, 0x72	; 114
     73e:	b3 e0       	ldi	r27, 0x03	; 3
     740:	ec 91       	ld	r30, X
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     748:	ee 50       	subi	r30, 0x0E	; 14
     74a:	fd 4f       	sbci	r31, 0xFD	; 253
     74c:	80 83       	st	Z, r24
        serialInputData.buffer[serialInputData.index + 1] = '\0';
     74e:	ec 91       	ld	r30, X
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	ed 50       	subi	r30, 0x0D	; 13
     754:	fd 4f       	sbci	r31, 0xFD	; 253
     756:	10 82       	st	Z, r1

        serialInputData.index++;
     758:	8c 91       	ld	r24, X
     75a:	8f 5f       	subi	r24, 0xFF	; 255
     75c:	8c 93       	st	X, r24
     75e:	05 c0       	rjmp	.+10     	; 0x76a <__vector_25+0x66>
    }
    else
    {
        // set update flag
        serialInputData.readFlag = 1;
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <serialInputData+0x81>
        // reset message index
        serialInputData.index    = 0;
     766:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <serialInputData+0x80>
    }
}
     76a:	ff 91       	pop	r31
     76c:	ef 91       	pop	r30
     76e:	bf 91       	pop	r27
     770:	af 91       	pop	r26
     772:	8f 91       	pop	r24
     774:	0f 90       	pop	r0
     776:	0b be       	out	0x3b, r0	; 59
     778:	0f 90       	pop	r0
     77a:	0f be       	out	0x3f, r0	; 63
     77c:	0f 90       	pop	r0
     77e:	1f 90       	pop	r1
     780:	18 95       	reti

00000782 <__vector_36>:

// interrupt handling for the bluetooth connection
ISR(bluetoothInterrupt)
{
     782:	1f 92       	push	r1
     784:	0f 92       	push	r0
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	0f 92       	push	r0
     78a:	11 24       	eor	r1, r1
     78c:	0b b6       	in	r0, 0x3b	; 59
     78e:	0f 92       	push	r0
     790:	8f 93       	push	r24
     792:	af 93       	push	r26
     794:	bf 93       	push	r27
     796:	ef 93       	push	r30
     798:	ff 93       	push	r31
    if(bluetoothData != '\r' && bluetoothData != '\n' && bluetoothData != '\0' && (bluetoothInputData.index < 127))
     79a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
     79e:	8d 30       	cpi	r24, 0x0D	; 13
     7a0:	f1 f0       	breq	.+60     	; 0x7de <__vector_36+0x5c>
     7a2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
     7a6:	8a 30       	cpi	r24, 0x0A	; 10
     7a8:	d1 f0       	breq	.+52     	; 0x7de <__vector_36+0x5c>
     7aa:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
     7ae:	88 23       	and	r24, r24
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__vector_36+0x5c>
     7b2:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <bluetoothInputData+0x80>
     7b6:	8f 37       	cpi	r24, 0x7F	; 127
     7b8:	90 f4       	brcc	.+36     	; 0x7de <__vector_36+0x5c>
    {
        // add to array
        bluetoothInputData.buffer[bluetoothInputData.index]     = bluetoothData;
     7ba:	a0 ef       	ldi	r26, 0xF0	; 240
     7bc:	b2 e0       	ldi	r27, 0x02	; 2
     7be:	ec 91       	ld	r30, X
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
     7c2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
     7c6:	e0 59       	subi	r30, 0x90	; 144
     7c8:	fd 4f       	sbci	r31, 0xFD	; 253
     7ca:	80 83       	st	Z, r24
        bluetoothInputData.buffer[bluetoothInputData.index + 1] = '\0';
     7cc:	ec 91       	ld	r30, X
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	ef 58       	subi	r30, 0x8F	; 143
     7d2:	fd 4f       	sbci	r31, 0xFD	; 253
     7d4:	10 82       	st	Z, r1

        bluetoothInputData.index++;
     7d6:	8c 91       	ld	r24, X
     7d8:	8f 5f       	subi	r24, 0xFF	; 255
     7da:	8c 93       	st	X, r24
     7dc:	05 c0       	rjmp	.+10     	; 0x7e8 <__vector_36+0x66>
    }
    else
    {
        // set update flag
        bluetoothInputData.readFlag = 1;
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <bluetoothInputData+0x81>
        // reset message index
        bluetoothInputData.index    = 0;
     7e4:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <bluetoothInputData+0x80>
    }
}
     7e8:	ff 91       	pop	r31
     7ea:	ef 91       	pop	r30
     7ec:	bf 91       	pop	r27
     7ee:	af 91       	pop	r26
     7f0:	8f 91       	pop	r24
     7f2:	0f 90       	pop	r0
     7f4:	0b be       	out	0x3b, r0	; 59
     7f6:	0f 90       	pop	r0
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	0f 90       	pop	r0
     7fc:	1f 90       	pop	r1
     7fe:	18 95       	reti

00000800 <IO_init>:

/* NOTE: Function implementations */
void IO_init(void)
{
    // port c.4 is the limit switch
    DDRC  = 0x00;
     800:	17 b8       	out	0x07, r1	; 7
    PORTC = 0x10;
     802:	80 e1       	ldi	r24, 0x10	; 16
     804:	88 b9       	out	0x08, r24	; 8

    // port a.0-1 are for left and right
    DDRA  = 0x00;
     806:	11 b8       	out	0x01, r1	; 1
    PORTA = 0xff;
     808:	8f ef       	ldi	r24, 0xFF	; 255
     80a:	82 b9       	out	0x02, r24	; 2

    DDRK  = 0xFF;
     80c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
    PORTK = 0x00;
     810:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
     814:	08 95       	ret

00000816 <CRANE_getMovesFromEeprom>:
    // then set our global state all at the end
    applicationState = newApplicationState;
}

void CRANE_getMovesFromEeprom(uint16_t addr)
{
     816:	af 92       	push	r10
     818:	bf 92       	push	r11
     81a:	df 92       	push	r13
     81c:	ef 92       	push	r14
     81e:	ff 92       	push	r15
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	8c 01       	movw	r16, r24
    uint16_t address = addr;

    for(uint8_t i = 0; i < recordLength; i++)
     82a:	d1 2c       	mov	r13, r1
     82c:	26 c0       	rjmp	.+76     	; 0x87a <CRANE_getMovesFromEeprom+0x64>
    {
        uint16_t motorTicks = 0;

        // read the motor position
        motorTicks = CRANE_eepromReadChar(address++) << 8;
     82e:	58 01       	movw	r10, r16
     830:	2f ef       	ldi	r18, 0xFF	; 255
     832:	a2 1a       	sub	r10, r18
     834:	b2 0a       	sbc	r11, r18
     836:	c8 01       	movw	r24, r16
     838:	1a df       	rcall	.-460    	; 0x66e <CRANE_eepromReadChar>
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	c3 2f       	mov	r28, r19
     83e:	d8 2f       	mov	r29, r24
        motorTicks += CRANE_eepromReadChar(address++);
     840:	78 01       	movw	r14, r16
     842:	82 e0       	ldi	r24, 0x02	; 2
     844:	e8 0e       	add	r14, r24
     846:	f1 1c       	adc	r15, r1
     848:	c5 01       	movw	r24, r10
     84a:	11 df       	rcall	.-478    	; 0x66e <CRANE_eepromReadChar>
     84c:	9e 01       	movw	r18, r28
     84e:	28 0f       	add	r18, r24
     850:	31 1d       	adc	r19, r1

        recordedMoves[i].motorTicks = motorTicks;
     852:	cd 2d       	mov	r28, r13
     854:	d0 e0       	ldi	r29, 0x00	; 0
     856:	cc 0f       	add	r28, r28
     858:	dd 1f       	adc	r29, r29
     85a:	cc 0f       	add	r28, r28
     85c:	dd 1f       	adc	r29, r29
     85e:	c6 58       	subi	r28, 0x86	; 134
     860:	dc 4f       	sbci	r29, 0xFC	; 252
     862:	39 83       	std	Y+1, r19	; 0x01

        // read the arm position
        recordedMoves[i].armTicks = CRANE_eepromReadChar(address++);
     864:	28 83       	st	Y, r18
     866:	c7 01       	movw	r24, r14
     868:	02 df       	rcall	.-508    	; 0x66e <CRANE_eepromReadChar>
     86a:	8a 83       	std	Y+2, r24	; 0x02

        // read the plunger position
        recordedMoves[i].plungerTicks = CRANE_eepromReadChar(address++);
     86c:	c8 01       	movw	r24, r16
     86e:	03 96       	adiw	r24, 0x03	; 3
     870:	0c 5f       	subi	r16, 0xFC	; 252
     872:	1f 4f       	sbci	r17, 0xFF	; 255
     874:	fc de       	rcall	.-520    	; 0x66e <CRANE_eepromReadChar>
     876:	8b 83       	std	Y+3, r24	; 0x03

void CRANE_getMovesFromEeprom(uint16_t addr)
{
    uint16_t address = addr;

    for(uint8_t i = 0; i < recordLength; i++)
     878:	d3 94       	inc	r13
     87a:	35 e0       	ldi	r19, 0x05	; 5
     87c:	3d 15       	cp	r19, r13
     87e:	b8 f6       	brcc	.-82     	; 0x82e <CRANE_getMovesFromEeprom+0x18>
        recordedMoves[i].armTicks = CRANE_eepromReadChar(address++);

        // read the plunger position
        recordedMoves[i].plungerTicks = CRANE_eepromReadChar(address++);
    }
}
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	bf 90       	pop	r11
     890:	af 90       	pop	r10
     892:	08 95       	ret

00000894 <CRANE_saveMovesToEeprom>:

void CRANE_saveMovesToEeprom(uint16_t addr)
{
     894:	af 92       	push	r10
     896:	bf 92       	push	r11
     898:	cf 92       	push	r12
     89a:	df 92       	push	r13
     89c:	ff 92       	push	r15
     89e:	0f 93       	push	r16
     8a0:	1f 93       	push	r17
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	8c 01       	movw	r16, r24
    uint16_t address = addr;

    for(uint8_t i = 0; i < recordLength; i++)
     8a8:	f1 2c       	mov	r15, r1
     8aa:	2c c0       	rjmp	.+88     	; 0x904 <CRANE_saveMovesToEeprom+0x70>
    {
        // cheat by directly moving into our recorded var
        recordedMoves[i] = currentMoves[i];
     8ac:	cf 2d       	mov	r28, r15
     8ae:	d0 e0       	ldi	r29, 0x00	; 0
     8b0:	cc 0f       	add	r28, r28
     8b2:	dd 1f       	adc	r29, r29
     8b4:	cc 0f       	add	r28, r28
     8b6:	dd 1f       	adc	r29, r29
     8b8:	fe 01       	movw	r30, r28
     8ba:	e6 58       	subi	r30, 0x86	; 134
     8bc:	fc 4f       	sbci	r31, 0xFC	; 252
     8be:	ce 56       	subi	r28, 0x6E	; 110
     8c0:	dc 4f       	sbci	r29, 0xFC	; 252
     8c2:	88 81       	ld	r24, Y
     8c4:	99 81       	ldd	r25, Y+1	; 0x01
     8c6:	aa 81       	ldd	r26, Y+2	; 0x02
     8c8:	bb 81       	ldd	r27, Y+3	; 0x03
     8ca:	80 83       	st	Z, r24
     8cc:	91 83       	std	Z+1, r25	; 0x01
     8ce:	a2 83       	std	Z+2, r26	; 0x02
     8d0:	b3 83       	std	Z+3, r27	; 0x03

        // save the motor position
        CRANE_eepromWriteChar((currentMoves[i].motorTicks & 0xff00) >> 8, address++);
     8d2:	58 01       	movw	r10, r16
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	a8 1a       	sub	r10, r24
     8d8:	b8 0a       	sbc	r11, r24
     8da:	b8 01       	movw	r22, r16
     8dc:	89 81       	ldd	r24, Y+1	; 0x01
     8de:	bc de       	rcall	.-648    	; 0x658 <CRANE_eepromWriteChar>
        CRANE_eepromWriteChar((currentMoves[i].motorTicks & 0x00ff), address++);
     8e0:	68 01       	movw	r12, r16
     8e2:	82 e0       	ldi	r24, 0x02	; 2
     8e4:	c8 0e       	add	r12, r24
     8e6:	d1 1c       	adc	r13, r1
     8e8:	b5 01       	movw	r22, r10
     8ea:	88 81       	ld	r24, Y
     8ec:	b5 de       	rcall	.-662    	; 0x658 <CRANE_eepromWriteChar>

        // save the arm position
        CRANE_eepromWriteChar(currentMoves[i].armTicks, address++);
     8ee:	b6 01       	movw	r22, r12
     8f0:	8a 81       	ldd	r24, Y+2	; 0x02
     8f2:	b2 de       	rcall	.-668    	; 0x658 <CRANE_eepromWriteChar>

        // save the plunger position
        CRANE_eepromWriteChar(currentMoves[i].plungerTicks, address++);
     8f4:	b8 01       	movw	r22, r16
     8f6:	6d 5f       	subi	r22, 0xFD	; 253
     8f8:	7f 4f       	sbci	r23, 0xFF	; 255
     8fa:	0c 5f       	subi	r16, 0xFC	; 252
     8fc:	1f 4f       	sbci	r17, 0xFF	; 255
     8fe:	8b 81       	ldd	r24, Y+3	; 0x03
     900:	ab de       	rcall	.-682    	; 0x658 <CRANE_eepromWriteChar>

void CRANE_saveMovesToEeprom(uint16_t addr)
{
    uint16_t address = addr;

    for(uint8_t i = 0; i < recordLength; i++)
     902:	f3 94       	inc	r15
     904:	85 e0       	ldi	r24, 0x05	; 5
     906:	8f 15       	cp	r24, r15
     908:	88 f6       	brcc	.-94     	; 0x8ac <CRANE_saveMovesToEeprom+0x18>
        CRANE_eepromWriteChar(currentMoves[i].armTicks, address++);

        // save the plunger position
        CRANE_eepromWriteChar(currentMoves[i].plungerTicks, address++);
    }
}
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	1f 91       	pop	r17
     910:	0f 91       	pop	r16
     912:	ff 90       	pop	r15
     914:	df 90       	pop	r13
     916:	cf 90       	pop	r12
     918:	bf 90       	pop	r11
     91a:	af 90       	pop	r10
     91c:	08 95       	ret

0000091e <timeAtThreeMsStep>:
        we move about ~3 degrees

        half has 8 positions
    */

    uint16_t requiredSteps = ((float)4096 / 360) * degrees;
     91e:	bc 01       	movw	r22, r24
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	87 d2       	rcall	.+1294   	; 0xe34 <__floatunsisf>
     926:	21 e6       	ldi	r18, 0x61	; 97
     928:	3b e0       	ldi	r19, 0x0B	; 11
     92a:	46 e3       	ldi	r20, 0x36	; 54
     92c:	51 e4       	ldi	r21, 0x41	; 65
     92e:	38 d3       	rcall	.+1648   	; 0xfa0 <__mulsf3>
     930:	55 d2       	rcall	.+1194   	; 0xddc <__fixunssfsi>

    // round to the closest full amount of steps
    // requiredSteps = requiredSteps + (requiredSteps % 8);

    return requiredSteps * 3;
     932:	9b 01       	movw	r18, r22
     934:	22 0f       	add	r18, r18
     936:	33 1f       	adc	r19, r19
     938:	c9 01       	movw	r24, r18
     93a:	86 0f       	add	r24, r22
     93c:	97 1f       	adc	r25, r23
}
     93e:	08 95       	ret

00000940 <stringCompare>:

uint8_t stringCompare(char const * const pStrOne, char const * const pStrTwo)
{
     940:	ac 01       	movw	r20, r24
    uint8_t i = 0;
     942:	90 e0       	ldi	r25, 0x00	; 0

    // while string one still has data
    do
    {
        if(*(pStrOne + i) == *(pStrTwo + i))
     944:	29 2f       	mov	r18, r25
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	fa 01       	movw	r30, r20
     94a:	e2 0f       	add	r30, r18
     94c:	f3 1f       	adc	r31, r19
     94e:	e0 81       	ld	r30, Z
     950:	db 01       	movw	r26, r22
     952:	a2 0f       	add	r26, r18
     954:	b3 1f       	adc	r27, r19
     956:	8c 91       	ld	r24, X
     958:	e8 13       	cpse	r30, r24
     95a:	11 c0       	rjmp	.+34     	; 0x97e <stringCompare+0x3e>
        {
            // increment
            i++;
     95c:	9f 5f       	subi	r25, 0xFF	; 255
        else
        {
            // exit
            return 0;
        }
    } while((*(pStrOne + i) != '\0') && (*(pStrTwo + i) != '\0'));
     95e:	29 2f       	mov	r18, r25
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	fa 01       	movw	r30, r20
     964:	e2 0f       	add	r30, r18
     966:	f3 1f       	adc	r31, r19
     968:	80 81       	ld	r24, Z
     96a:	88 23       	and	r24, r24
     96c:	51 f0       	breq	.+20     	; 0x982 <stringCompare+0x42>
     96e:	fb 01       	movw	r30, r22
     970:	e2 0f       	add	r30, r18
     972:	f3 1f       	adc	r31, r19
     974:	80 81       	ld	r24, Z
     976:	81 11       	cpse	r24, r1
     978:	e5 cf       	rjmp	.-54     	; 0x944 <stringCompare+0x4>

    // made it out of the loop
    return 1;
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	08 95       	ret
            i++;
        }
        else
        {
            // exit
            return 0;
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	08 95       	ret
        }
    } while((*(pStrOne + i) != '\0') && (*(pStrTwo + i) != '\0'));

    // made it out of the loop
    return 1;
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	08 95       	ret

00000986 <CRANE_getState>:
    DDRK  = 0xFF;
    PORTK = 0x00;
}

void CRANE_getState(void)
{
     986:	cf 93       	push	r28
    // temp variables
    uint8_t newApplicationState = applicationState;
     988:	c0 91 79 03 	lds	r28, 0x0379	; 0x800379 <applicationState>

    // check the serial buffer
    if(serialInputData.readFlag)
     98c:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <serialInputData+0x81>
     990:	88 23       	and	r24, r24
     992:	e9 f0       	breq	.+58     	; 0x9ce <CRANE_getState+0x48>
    {
        // if we get the command for record mode and we are not already in record mode
        if(stringCompare(serialInputData.buffer, recordModeCommand) && (applicationState != recordState))
     994:	60 e1       	ldi	r22, 0x10	; 16
     996:	72 e0       	ldi	r23, 0x02	; 2
     998:	82 ef       	ldi	r24, 0xF2	; 242
     99a:	92 e0       	ldi	r25, 0x02	; 2
     99c:	d1 df       	rcall	.-94     	; 0x940 <stringCompare>
     99e:	88 23       	and	r24, r24
     9a0:	39 f0       	breq	.+14     	; 0x9b0 <CRANE_getState+0x2a>
     9a2:	c2 30       	cpi	r28, 0x02	; 2
     9a4:	29 f0       	breq	.+10     	; 0x9b0 <CRANE_getState+0x2a>
        {
            CRANE_sendSerial("Entering record mode...\r\n");
     9a6:	8a e1       	ldi	r24, 0x1A	; 26
     9a8:	92 e0       	ldi	r25, 0x02	; 2
     9aa:	37 de       	rcall	.-914    	; 0x61a <CRANE_sendSerial>

            newApplicationState = recordState;
     9ac:	c2 e0       	ldi	r28, 0x02	; 2
     9ae:	0d c0       	rjmp	.+26     	; 0x9ca <CRANE_getState+0x44>
        }
        // check for reset command
        else if(stringCompare(serialInputData.buffer, calibrateModeCommand) && (applicationState != calibrateState))
     9b0:	64 e3       	ldi	r22, 0x34	; 52
     9b2:	72 e0       	ldi	r23, 0x02	; 2
     9b4:	82 ef       	ldi	r24, 0xF2	; 242
     9b6:	92 e0       	ldi	r25, 0x02	; 2
     9b8:	c3 df       	rcall	.-122    	; 0x940 <stringCompare>
     9ba:	88 23       	and	r24, r24
     9bc:	31 f0       	breq	.+12     	; 0x9ca <CRANE_getState+0x44>
     9be:	cc 23       	and	r28, r28
        {
            CRANE_sendBluetooth("Resetting...\r\n");
     9c0:	21 f0       	breq	.+8      	; 0x9ca <CRANE_getState+0x44>
     9c2:	8a e3       	ldi	r24, 0x3A	; 58
     9c4:	92 e0       	ldi	r25, 0x02	; 2
     9c6:	3c de       	rcall	.-904    	; 0x640 <CRANE_sendBluetooth>

            newApplicationState = calibrateState;
     9c8:	c0 e0       	ldi	r28, 0x00	; 0
        }

        serialInputData.readFlag = 0;
     9ca:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <serialInputData+0x81>
    }

    // check the bluetooth buffer
    if(bluetoothInputData.readFlag)
     9ce:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <bluetoothInputData+0x81>
     9d2:	88 23       	and	r24, r24
     9d4:	09 f1       	breq	.+66     	; 0xa18 <CRANE_getState+0x92>
    {
        // if we get the command for record mode and we are not already in record mode
        if(stringCompare(bluetoothInputData.buffer, recordModeCommand) && (applicationState != recordState))
     9d6:	60 e1       	ldi	r22, 0x10	; 16
     9d8:	72 e0       	ldi	r23, 0x02	; 2
     9da:	80 e7       	ldi	r24, 0x70	; 112
     9dc:	92 e0       	ldi	r25, 0x02	; 2
     9de:	b0 df       	rcall	.-160    	; 0x940 <stringCompare>
     9e0:	88 23       	and	r24, r24
     9e2:	49 f0       	breq	.+18     	; 0x9f6 <CRANE_getState+0x70>
     9e4:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <applicationState>
     9e8:	82 30       	cpi	r24, 0x02	; 2
        {
            CRANE_sendBluetooth("Entering record mode...\r\n");
     9ea:	29 f0       	breq	.+10     	; 0x9f6 <CRANE_getState+0x70>
     9ec:	8a e1       	ldi	r24, 0x1A	; 26
     9ee:	92 e0       	ldi	r25, 0x02	; 2
     9f0:	27 de       	rcall	.-946    	; 0x640 <CRANE_sendBluetooth>

            newApplicationState = recordState;
     9f2:	c2 e0       	ldi	r28, 0x02	; 2
        }
        // check for reset command
        else if(stringCompare(bluetoothInputData.buffer, calibrateModeCommand) && (applicationState != calibrateState))
     9f4:	0f c0       	rjmp	.+30     	; 0xa14 <CRANE_getState+0x8e>
     9f6:	64 e3       	ldi	r22, 0x34	; 52
     9f8:	72 e0       	ldi	r23, 0x02	; 2
     9fa:	80 e7       	ldi	r24, 0x70	; 112
     9fc:	92 e0       	ldi	r25, 0x02	; 2
     9fe:	a0 df       	rcall	.-192    	; 0x940 <stringCompare>
     a00:	88 23       	and	r24, r24
     a02:	41 f0       	breq	.+16     	; 0xa14 <CRANE_getState+0x8e>
     a04:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <applicationState>
     a08:	88 23       	and	r24, r24
        {
            CRANE_sendBluetooth("Resetting...\r\n");
     a0a:	21 f0       	breq	.+8      	; 0xa14 <CRANE_getState+0x8e>
     a0c:	8a e3       	ldi	r24, 0x3A	; 58
     a0e:	92 e0       	ldi	r25, 0x02	; 2
     a10:	17 de       	rcall	.-978    	; 0x640 <CRANE_sendBluetooth>

            newApplicationState = calibrateState;
     a12:	c0 e0       	ldi	r28, 0x00	; 0
        }

        bluetoothInputData.readFlag = 0;
     a14:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <bluetoothInputData+0x81>
    }

    // finally check the physical buttons
    if(recordButton && (applicationState != recordState))
     a18:	02 9b       	sbis	0x00, 2	; 0
     a1a:	08 c0       	rjmp	.+16     	; 0xa2c <CRANE_getState+0xa6>
     a1c:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <applicationState>
     a20:	82 30       	cpi	r24, 0x02	; 2
     a22:	21 f0       	breq	.+8      	; 0xa2c <CRANE_getState+0xa6>
    {
        newApplicationState = recordState;

        while(recordButton)
     a24:	02 99       	sbic	0x00, 2	; 0
     a26:	fe cf       	rjmp	.-4      	; 0xa24 <CRANE_getState+0x9e>
    }

    // finally check the physical buttons
    if(recordButton && (applicationState != recordState))
    {
        newApplicationState = recordState;
     a28:	c2 e0       	ldi	r28, 0x02	; 2
     a2a:	09 c0       	rjmp	.+18     	; 0xa3e <CRANE_getState+0xb8>
        while(recordButton)
        {
            // do nothing until we let go
        }
    }
    else if(calibrateButton && (applicationState != calibrateState))
     a2c:	03 9b       	sbis	0x00, 3	; 0
     a2e:	07 c0       	rjmp	.+14     	; 0xa3e <CRANE_getState+0xb8>
     a30:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <applicationState>
     a34:	88 23       	and	r24, r24
     a36:	19 f0       	breq	.+6      	; 0xa3e <CRANE_getState+0xb8>
    {
        newApplicationState = calibrateState;

        while(calibrateButton)
     a38:	03 99       	sbic	0x00, 3	; 0
     a3a:	fe cf       	rjmp	.-4      	; 0xa38 <CRANE_getState+0xb2>
            // do nothing until we let go
        }
    }
    else if(calibrateButton && (applicationState != calibrateState))
    {
        newApplicationState = calibrateState;
     a3c:	c0 e0       	ldi	r28, 0x00	; 0
            // do nothing until we let go
        }
    }

    // then set our global state all at the end
    applicationState = newApplicationState;
     a3e:	c0 93 79 03 	sts	0x0379, r28	; 0x800379 <applicationState>
}
     a42:	cf 91       	pop	r28
     a44:	08 95       	ret

00000a46 <main>:
uint8_t  stringCompare(char const * const pStrOne, char const * const pStrTwo);

/* NOTE: Application implementation */
// the main loop of the function, provided to us
int main(void)
{
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	cd b7       	in	r28, 0x3d	; 61
     a4c:	de b7       	in	r29, 0x3e	; 62
     a4e:	da 95       	dec	r29
     a50:	0f b6       	in	r0, 0x3f	; 63
     a52:	f8 94       	cli
     a54:	de bf       	out	0x3e, r29	; 62
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	cd bf       	out	0x3d, r28	; 61
    // start the gpio
    IO_init();
     a5a:	d2 de       	rcall	.-604    	; 0x800 <IO_init>

    // init the ADC and the servo control
    ADC_init();
     a5c:	64 db       	rcall	.-2360   	; 0x126 <ADC_init>
    CRANE_initServos();
     a5e:	10 de       	rcall	.-992    	; 0x680 <CRANE_initServos>
     a60:	4b de       	rcall	.-874    	; 0x6f8 <CRANE_startServos>
    CRANE_startServos();
     a62:	68 e2       	ldi	r22, 0x28	; 40
     a64:	70 e0       	ldi	r23, 0x00	; 0

    // in this case, 1 is CCW, and 0 is CW
    // pass in the port and register we want to use for the motor
    SM_init(&DDRC, &PORTC);
     a66:	87 e2       	ldi	r24, 0x27	; 39
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	cb db       	rcall	.-2154   	; 0x202 <SM_init>
     a6c:	85 e5       	ldi	r24, 0x55	; 85

    // get the stored recorded data from the EEPROM
    CRANE_getMovesFromEeprom(eepromAddress);
     a6e:	95 e0       	ldi	r25, 0x05	; 5
     a70:	d2 de       	rcall	.-604    	; 0x816 <CRANE_getMovesFromEeprom>
     a72:	80 e8       	ldi	r24, 0x80	; 128

    // turn on the serial on port 0 at 9600 baud
    CRANE_initSerial(9600);
     a74:	95 e2       	ldi	r25, 0x25	; 37
     a76:	76 dd       	rcall	.-1300   	; 0x564 <CRANE_initSerial>
     a78:	89 e4       	ldi	r24, 0x49	; 73
    CRANE_sendSerial("Crane online\r\n");
     a7a:	92 e0       	ldi	r25, 0x02	; 2
     a7c:	ce dd       	rcall	.-1124   	; 0x61a <CRANE_sendSerial>
     a7e:	80 e8       	ldi	r24, 0x80	; 128

    // turn on the blutooth connection
    CRANE_initBluetooth(9600);
     a80:	95 e2       	ldi	r25, 0x25	; 37
     a82:	9a dd       	rcall	.-1228   	; 0x5b8 <CRANE_initBluetooth>
     a84:	89 e4       	ldi	r24, 0x49	; 73
     a86:	92 e0       	ldi	r25, 0x02	; 2
    CRANE_sendBluetooth("Crane online\r\n");
     a88:	db dd       	rcall	.-1098   	; 0x640 <CRANE_sendBluetooth>
     a8a:	78 94       	sei
     a8c:	7c df       	rcall	.-264    	; 0x986 <CRANE_getState>
     a8e:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <applicationState>
    sei();

    while(1)
    {
        // check to see if the state has changed
        CRANE_getState();
     a92:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>

        // TODO: display state on leds
        PORTK = applicationState;
     a96:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <applicationState>
     a9a:	81 30       	cpi	r24, 0x01	; 1
     a9c:	21 f0       	breq	.+8      	; 0xaa6 <main+0x60>

        // main application switch case
        switch(applicationState)
     a9e:	82 30       	cpi	r24, 0x02	; 2
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <main+0x5e>
     aa2:	89 c0       	rjmp	.+274    	; 0xbb6 <main+0x170>
     aa4:	00 c1       	rjmp	.+512    	; 0xca6 <main+0x260>
     aa6:	00 99       	sbic	0x00, 0	; 0
     aa8:	7e c0       	rjmp	.+252    	; 0xba6 <main+0x160>
     aaa:	f0 cf       	rjmp	.-32     	; 0xa8c <main+0x46>
     aac:	cb 2c       	mov	r12, r11
        {
            // the action case
            case actionState:
            {
                if(leftButton)
     aae:	d1 2c       	mov	r13, r1
     ab0:	f6 01       	movw	r30, r12
     ab2:	ee 0f       	add	r30, r30
                {
                    for(uint8_t i = 0; i < recordLength; i++)
                    {
                        int16_t moveTicks = recordedMoves[i].motorTicks - craneState.motorTicks;
     ab4:	ff 1f       	adc	r31, r31
     ab6:	ee 0f       	add	r30, r30
     ab8:	ff 1f       	adc	r31, r31
     aba:	e6 58       	subi	r30, 0x86	; 134
     abc:	fc 4f       	sbci	r31, 0xFC	; 252
     abe:	80 81       	ld	r24, Z
     ac0:	91 81       	ldd	r25, Z+1	; 0x01
     ac2:	20 91 74 03 	lds	r18, 0x0374	; 0x800374 <craneState>
     ac6:	30 91 75 03 	lds	r19, 0x0375	; 0x800375 <craneState+0x1>
     aca:	8c 01       	movw	r16, r24
     acc:	02 1b       	sub	r16, r18
     ace:	13 0b       	sbc	r17, r19
     ad0:	33 81       	ldd	r19, Z+3	; 0x03
     ad2:	22 81       	ldd	r18, Z+2	; 0x02
     ad4:	1f 92       	push	r1
     ad6:	3f 93       	push	r19

                        char buf[256];

                        sprintf(&buf, "%i, %i, %u, %u\r\n", moveTicks, recordedMoves[i].motorTicks, recordedMoves[i].armTicks, recordedMoves[i].plungerTicks);
     ad8:	1f 92       	push	r1
     ada:	2f 93       	push	r18
     adc:	9f 93       	push	r25
     ade:	8f 93       	push	r24
     ae0:	1f 93       	push	r17
     ae2:	0f 93       	push	r16
     ae4:	88 e5       	ldi	r24, 0x58	; 88
     ae6:	92 e0       	ldi	r25, 0x02	; 2
     ae8:	9f 93       	push	r25
     aea:	8f 93       	push	r24
     aec:	ce 01       	movw	r24, r28
     aee:	01 96       	adiw	r24, 0x01	; 1
     af0:	7c 01       	movw	r14, r24
     af2:	9f 93       	push	r25
     af4:	8f 93       	push	r24
     af6:	e8 d2       	rcall	.+1488   	; 0x10c8 <sprintf>
     af8:	c7 01       	movw	r24, r14
     afa:	8f dd       	rcall	.-1250   	; 0x61a <CRANE_sendSerial>
     afc:	0f b6       	in	r0, 0x3f	; 63

                        CRANE_sendSerial(&buf);
     afe:	f8 94       	cli
     b00:	de bf       	out	0x3e, r29	; 62
                        // move motor
                        if(moveTicks > 0)
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	cd bf       	out	0x3d, r28	; 61
     b06:	10 16       	cp	r1, r16
     b08:	11 06       	cpc	r1, r17
     b0a:	7c f4       	brge	.+30     	; 0xb2a <main+0xe4>
     b0c:	b8 01       	movw	r22, r16
     b0e:	11 0f       	add	r17, r17
     b10:	88 0b       	sbc	r24, r24
                        {
                            SM_moveTime(stepperModeHalf, 0, moveTicks, 3);
     b12:	99 0b       	sbc	r25, r25
     b14:	91 d1       	rcall	.+802    	; 0xe38 <__floatsisf>
     b16:	9b 01       	movw	r18, r22
     b18:	ac 01       	movw	r20, r24
     b1a:	e1 2c       	mov	r14, r1
     b1c:	f1 2c       	mov	r15, r1
     b1e:	00 e4       	ldi	r16, 0x40	; 64
     b20:	10 e4       	ldi	r17, 0x40	; 64
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	82 e0       	ldi	r24, 0x02	; 2
     b26:	3d dc       	rcall	.-1926   	; 0x3a2 <SM_moveTime>
     b28:	14 c0       	rjmp	.+40     	; 0xb52 <main+0x10c>
     b2a:	11 23       	and	r17, r17
     b2c:	94 f4       	brge	.+36     	; 0xb52 <main+0x10c>
     b2e:	66 27       	eor	r22, r22
                        }
                        else if(moveTicks < 0)
     b30:	77 27       	eor	r23, r23
     b32:	60 1b       	sub	r22, r16
                        {
                            SM_moveTime(stepperModeHalf, 1, -1 * moveTicks, 3);
     b34:	71 0b       	sbc	r23, r17
     b36:	07 2e       	mov	r0, r23
     b38:	00 0c       	add	r0, r0
     b3a:	88 0b       	sbc	r24, r24
     b3c:	99 0b       	sbc	r25, r25
     b3e:	7c d1       	rcall	.+760    	; 0xe38 <__floatsisf>
     b40:	9b 01       	movw	r18, r22
     b42:	ac 01       	movw	r20, r24
     b44:	e1 2c       	mov	r14, r1
     b46:	f1 2c       	mov	r15, r1
     b48:	00 e4       	ldi	r16, 0x40	; 64
     b4a:	10 e4       	ldi	r17, 0x40	; 64
     b4c:	61 e0       	ldi	r22, 0x01	; 1
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	28 dc       	rcall	.-1968   	; 0x3a2 <SM_moveTime>
     b52:	86 01       	movw	r16, r12
     b54:	00 0f       	add	r16, r16
     b56:	11 1f       	adc	r17, r17
                        }

                        CRANE_setServoPosition(armServo, recordedMoves[i].armTicks);
     b58:	00 0f       	add	r16, r16
     b5a:	11 1f       	adc	r17, r17
     b5c:	06 58       	subi	r16, 0x86	; 134
     b5e:	1c 4f       	sbci	r17, 0xFC	; 252
     b60:	f8 01       	movw	r30, r16
     b62:	62 81       	ldd	r22, Z+2	; 0x02
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	a2 dd       	rcall	.-1212   	; 0x6ac <CRANE_setServoPosition>
     b68:	d8 01       	movw	r26, r16
     b6a:	13 96       	adiw	r26, 0x03	; 3
     b6c:	6c 91       	ld	r22, X
     b6e:	81 e0       	ldi	r24, 0x01	; 1
                        CRANE_setServoPosition(plungerServo, recordedMoves[i].plungerTicks);
     b70:	9d dd       	rcall	.-1222   	; 0x6ac <CRANE_setServoPosition>
     b72:	f8 01       	movw	r30, r16
     b74:	80 81       	ld	r24, Z
     b76:	91 81       	ldd	r25, Z+1	; 0x01
     b78:	e4 e7       	ldi	r30, 0x74	; 116
     b7a:	f3 e0       	ldi	r31, 0x03	; 3

                        // set our state
                        craneState.motorTicks = recordedMoves[i].motorTicks;
     b7c:	91 83       	std	Z+1, r25	; 0x01
     b7e:	80 83       	st	Z, r24
     b80:	d8 01       	movw	r26, r16
     b82:	12 96       	adiw	r26, 0x02	; 2
     b84:	8c 91       	ld	r24, X
     b86:	12 97       	sbiw	r26, 0x02	; 2
     b88:	82 83       	std	Z+2, r24	; 0x02
                        craneState.armTicks     = recordedMoves[i].armTicks;
     b8a:	13 96       	adiw	r26, 0x03	; 3
     b8c:	8c 91       	ld	r24, X
     b8e:	83 83       	std	Z+3, r24	; 0x03
     b90:	bf ef       	ldi	r27, 0xFF	; 255
     b92:	e9 e6       	ldi	r30, 0x69	; 105
                        craneState.plungerTicks = recordedMoves[i].plungerTicks;
     b94:	f8 e1       	ldi	r31, 0x18	; 24
     b96:	b1 50       	subi	r27, 0x01	; 1
     b98:	e0 40       	sbci	r30, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b9a:	f0 40       	sbci	r31, 0x00	; 0
     b9c:	e1 f7       	brne	.-8      	; 0xb96 <main+0x150>
     b9e:	00 c0       	rjmp	.+0      	; 0xba0 <main+0x15a>
     ba0:	00 00       	nop
     ba2:	b3 94       	inc	r11
     ba4:	01 c0       	rjmp	.+2      	; 0xba8 <main+0x162>
     ba6:	b1 2c       	mov	r11, r1
            // the action case
            case actionState:
            {
                if(leftButton)
                {
                    for(uint8_t i = 0; i < recordLength; i++)
     ba8:	25 e0       	ldi	r18, 0x05	; 5
     baa:	2b 15       	cp	r18, r11
     bac:	08 f0       	brcs	.+2      	; 0xbb0 <main+0x16a>
     bae:	7e cf       	rjmp	.-260    	; 0xaac <main+0x66>
     bb0:	00 99       	sbic	0x00, 0	; 0
     bb2:	fe cf       	rjmp	.-4      	; 0xbb0 <main+0x16a>
                        craneState.plungerTicks = recordedMoves[i].plungerTicks;

                        _delay_ms(500);
                    }

                    while(leftButton)
     bb4:	6b cf       	rjmp	.-298    	; 0xa8c <main+0x46>
     bb6:	80 e0       	ldi	r24, 0x00	; 0
            break;

            // the record case
            case recordState:
            {
                uint8_t armPosition     = 255 * ADC_getTenBitValue(0);
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	be da       	rcall	.-2692   	; 0x138 <ADC_getTenBitValue>
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	4f e7       	ldi	r20, 0x7F	; 127
     bc2:	53 e4       	ldi	r21, 0x43	; 67
     bc4:	ed d1       	rcall	.+986    	; 0xfa0 <__mulsf3>
     bc6:	0a d1       	rcall	.+532    	; 0xddc <__fixunssfsi>
     bc8:	a6 2e       	mov	r10, r22
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
                uint8_t plungerPosition = 255 * ADC_getTenBitValue(1);
     bce:	b4 da       	rcall	.-2712   	; 0x138 <ADC_getTenBitValue>
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	4f e7       	ldi	r20, 0x7F	; 127
     bd6:	53 e4       	ldi	r21, 0x43	; 67
     bd8:	e3 d1       	rcall	.+966    	; 0xfa0 <__mulsf3>
     bda:	00 d1       	rcall	.+512    	; 0xddc <__fixunssfsi>
     bdc:	b6 2e       	mov	r11, r22
     bde:	83 e0       	ldi	r24, 0x03	; 3
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	9d de       	rcall	.-710    	; 0x91e <timeAtThreeMsStep>
     be4:	6c 01       	movw	r12, r24
                int16_t moveTicks       = timeAtThreeMsStep(3);
     be6:	01 9b       	sbis	0x00, 1	; 0
     be8:	0f c0       	rjmp	.+30     	; 0xc08 <main+0x1c2>
     bea:	bc 01       	movw	r22, r24
     bec:	99 0f       	add	r25, r25

                // manually move the motor
                if(rightButton)
     bee:	88 0b       	sbc	r24, r24
     bf0:	99 0b       	sbc	r25, r25
                {
                    SM_moveTime(stepperModeHalf, 0, moveTicks, 3);
     bf2:	22 d1       	rcall	.+580    	; 0xe38 <__floatsisf>
     bf4:	9b 01       	movw	r18, r22
     bf6:	ac 01       	movw	r20, r24
     bf8:	e1 2c       	mov	r14, r1
     bfa:	f1 2c       	mov	r15, r1
     bfc:	00 e4       	ldi	r16, 0x40	; 64
     bfe:	10 e4       	ldi	r17, 0x40	; 64
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	82 e0       	ldi	r24, 0x02	; 2
     c04:	ce db       	rcall	.-2148   	; 0x3a2 <SM_moveTime>
     c06:	16 c0       	rjmp	.+44     	; 0xc34 <main+0x1ee>
     c08:	00 9b       	sbis	0x00, 0	; 0
     c0a:	12 c0       	rjmp	.+36     	; 0xc30 <main+0x1ea>
     c0c:	bc 01       	movw	r22, r24
     c0e:	99 0f       	add	r25, r25
                }
                else if(leftButton)
     c10:	88 0b       	sbc	r24, r24
     c12:	99 0b       	sbc	r25, r25
                {
                    SM_moveTime(stepperModeHalf, 1, moveTicks, 3);
     c14:	11 d1       	rcall	.+546    	; 0xe38 <__floatsisf>
     c16:	9b 01       	movw	r18, r22
     c18:	ac 01       	movw	r20, r24
     c1a:	e1 2c       	mov	r14, r1
     c1c:	f1 2c       	mov	r15, r1
     c1e:	00 e4       	ldi	r16, 0x40	; 64
     c20:	10 e4       	ldi	r17, 0x40	; 64
     c22:	61 e0       	ldi	r22, 0x01	; 1
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	bd db       	rcall	.-2182   	; 0x3a2 <SM_moveTime>
     c28:	d1 94       	neg	r13
     c2a:	c1 94       	neg	r12
     c2c:	d1 08       	sbc	r13, r1
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <main+0x1ee>
     c30:	c1 2c       	mov	r12, r1
     c32:	d1 2c       	mov	r13, r1

                    // negate for current position
                    moveTicks *= -1;
     c34:	6a 2d       	mov	r22, r10
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	39 dd       	rcall	.-1422   	; 0x6ac <CRANE_setServoPosition>
     c3a:	6b 2d       	mov	r22, r11
                }
                else
                {
                    moveTicks = 0;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	36 dd       	rcall	.-1428   	; 0x6ac <CRANE_setServoPosition>
                }

                // manually move the servos
                CRANE_setServoPosition(armServo, armPosition);
     c40:	e4 e7       	ldi	r30, 0x74	; 116
     c42:	f3 e0       	ldi	r31, 0x03	; 3
     c44:	80 81       	ld	r24, Z
     c46:	91 81       	ldd	r25, Z+1	; 0x01
                CRANE_setServoPosition(plungerServo, plungerPosition);
     c48:	c8 0e       	add	r12, r24
     c4a:	d9 1e       	adc	r13, r25
     c4c:	d1 82       	std	Z+1, r13	; 0x01
     c4e:	c0 82       	st	Z, r12

                // update the current positions
                craneState.motorTicks += moveTicks;
     c50:	a2 82       	std	Z+2, r10	; 0x02
     c52:	b3 82       	std	Z+3, r11	; 0x03
     c54:	02 9b       	sbis	0x00, 2	; 0
     c56:	1a cf       	rjmp	.-460    	; 0xa8c <main+0x46>
     c58:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <currentMoveIndex>
     c5c:	e6 30       	cpi	r30, 0x06	; 6
     c5e:	c0 f4       	brcc	.+48     	; 0xc90 <main+0x24a>
                craneState.armTicks     = armPosition;
     c60:	81 e0       	ldi	r24, 0x01	; 1
                craneState.plungerTicks = plungerPosition;
     c62:	8e 0f       	add	r24, r30

                // if we press the record button save the position
                if(recordButton)
     c64:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <currentMoveIndex>
                {
                    if(currentMoveIndex < recordLength)
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	ee 0f       	add	r30, r30
     c6c:	ff 1f       	adc	r31, r31
                    {
                        currentMoves[currentMoveIndex++] = craneState;
     c6e:	ee 0f       	add	r30, r30
     c70:	ff 1f       	adc	r31, r31
     c72:	ee 56       	subi	r30, 0x6E	; 110
     c74:	fc 4f       	sbci	r31, 0xFC	; 252
     c76:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <craneState>
     c7a:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <craneState+0x1>
     c7e:	a0 91 76 03 	lds	r26, 0x0376	; 0x800376 <craneState+0x2>
     c82:	b0 91 77 03 	lds	r27, 0x0377	; 0x800377 <craneState+0x3>
     c86:	80 83       	st	Z, r24
     c88:	91 83       	std	Z+1, r25	; 0x01
     c8a:	a2 83       	std	Z+2, r26	; 0x02
     c8c:	b3 83       	std	Z+3, r27	; 0x03
     c8e:	08 c0       	rjmp	.+16     	; 0xca0 <main+0x25a>
     c90:	85 e5       	ldi	r24, 0x55	; 85
     c92:	95 e0       	ldi	r25, 0x05	; 5
     c94:	ff dd       	rcall	.-1026   	; 0x894 <CRANE_saveMovesToEeprom>
     c96:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <currentMoveIndex>
                    }
                    else
                    {
                        CRANE_saveMovesToEeprom(eepromAddress);
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <applicationState>
                        currentMoveIndex = 0;
     ca0:	02 99       	sbic	0x00, 2	; 0
     ca2:	fe cf       	rjmp	.-4      	; 0xca0 <main+0x25a>

                        // done recording, back to action state
                        applicationState = actionState;
     ca4:	f3 ce       	rjmp	.-538    	; 0xa8c <main+0x46>
     ca6:	66 e9       	ldi	r22, 0x96	; 150
                    }

                    while(recordButton)
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	00 dd       	rcall	.-1536   	; 0x6ac <CRANE_setServoPosition>
     cac:	68 ec       	ldi	r22, 0xC8	; 200
            // the default case will be the home case
            case calibrateState:
            default:
            {
                // 0 is up 255 is down
                CRANE_setServoPosition(armServo, armStartPosition);
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	fd dc       	rcall	.-1542   	; 0x6ac <CRANE_setServoPosition>
     cb2:	e1 2c       	mov	r14, r1
                // 255 is close 0 is open
                CRANE_setServoPosition(plungerServo, plungerStartPosition);
     cb4:	f1 2c       	mov	r15, r1
     cb6:	00 e4       	ldi	r16, 0x40	; 64
     cb8:	10 e4       	ldi	r17, 0x40	; 64
     cba:	20 e0       	ldi	r18, 0x00	; 0

                // move CW for one second to ensure the limit switch is not set
                SM_moveTime(stepperModeHalf, 0, 1000, 3);
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	4a e7       	ldi	r20, 0x7A	; 122
     cc0:	54 e4       	ldi	r21, 0x44	; 68
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	82 e0       	ldi	r24, 0x02	; 2
     cc6:	6d db       	rcall	.-2342   	; 0x3a2 <SM_moveTime>
     cc8:	0b c0       	rjmp	.+22     	; 0xce0 <main+0x29a>
     cca:	e1 2c       	mov	r14, r1
     ccc:	f1 2c       	mov	r15, r1
     cce:	00 e4       	ldi	r16, 0x40	; 64
     cd0:	10 e4       	ldi	r17, 0x40	; 64
     cd2:	20 e0       	ldi	r18, 0x00	; 0

                // while not hitting the switch
                while(!limitSwitch)
     cd4:	30 e0       	ldi	r19, 0x00	; 0
                {
                    // then move CCW a bit at the time until we hit the limit switch
                    SM_moveTime(stepperModeHalf, 1, 12, 3);
     cd6:	40 e4       	ldi	r20, 0x40	; 64
     cd8:	51 e4       	ldi	r21, 0x41	; 65
     cda:	61 e0       	ldi	r22, 0x01	; 1
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	61 db       	rcall	.-2366   	; 0x3a2 <SM_moveTime>
     ce0:	34 9b       	sbis	0x06, 4	; 6
     ce2:	f3 cf       	rjmp	.-26     	; 0xcca <main+0x284>
     ce4:	6e e1       	ldi	r22, 0x1E	; 30
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	82 e0       	ldi	r24, 0x02	; 2
     cea:	4b db       	rcall	.-2410   	; 0x382 <SM_movePosition>
     cec:	e4 e7       	ldi	r30, 0x74	; 116

                // move CW for one second to ensure the limit switch is not set
                SM_moveTime(stepperModeHalf, 0, 1000, 3);

                // while not hitting the switch
                while(!limitSwitch)
     cee:	f3 e0       	ldi	r31, 0x03	; 3
     cf0:	11 82       	std	Z+1, r1	; 0x01
                    // then move CCW a bit at the time until we hit the limit switch
                    SM_moveTime(stepperModeHalf, 1, 12, 3);
                }

                // then move 30 degrees back to center the arm
                SM_movePosition(stepperModeHalf, 30);
     cf2:	10 82       	st	Z, r1
     cf4:	86 e9       	ldi	r24, 0x96	; 150
     cf6:	82 83       	std	Z+2, r24	; 0x02
     cf8:	88 ec       	ldi	r24, 0xC8	; 200
     cfa:	83 83       	std	Z+3, r24	; 0x03

                // set the current position
                craneState.motorTicks   = 0;
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <applicationState>
     d02:	c4 ce       	rjmp	.-632    	; 0xa8c <main+0x46>

00000d04 <__cmpsf2>:
                craneState.armTicks     = armStartPosition;
     d04:	d4 d0       	rcall	.+424    	; 0xeae <__fp_cmp>
     d06:	08 f4       	brcc	.+2      	; 0xd0a <__cmpsf2+0x6>
                craneState.plungerTicks = plungerStartPosition;
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	08 95       	ret

00000d0c <__divsf3>:

                // then set it to action state
                applicationState = actionState;
     d0c:	0c d0       	rcall	.+24     	; 0xd26 <__divsf3x>
     d0e:	0a c1       	rjmp	.+532    	; 0xf24 <__fp_round>
     d10:	02 d1       	rcall	.+516    	; 0xf16 <__fp_pscB>
            }
            break;
     d12:	40 f0       	brcs	.+16     	; 0xd24 <__divsf3+0x18>
     d14:	f9 d0       	rcall	.+498    	; 0xf08 <__fp_pscA>
     d16:	30 f0       	brcs	.+12     	; 0xd24 <__divsf3+0x18>
     d18:	21 f4       	brne	.+8      	; 0xd22 <__divsf3+0x16>
     d1a:	5f 3f       	cpi	r21, 0xFF	; 255
     d1c:	19 f0       	breq	.+6      	; 0xd24 <__divsf3+0x18>
     d1e:	eb c0       	rjmp	.+470    	; 0xef6 <__fp_inf>
     d20:	51 11       	cpse	r21, r1
     d22:	34 c1       	rjmp	.+616    	; 0xf8c <__fp_szero>
     d24:	ee c0       	rjmp	.+476    	; 0xf02 <__fp_nan>

00000d26 <__divsf3x>:
     d26:	0f d1       	rcall	.+542    	; 0xf46 <__fp_split3>
     d28:	98 f3       	brcs	.-26     	; 0xd10 <__divsf3+0x4>

00000d2a <__divsf3_pse>:
     d2a:	99 23       	and	r25, r25
     d2c:	c9 f3       	breq	.-14     	; 0xd20 <__divsf3+0x14>
     d2e:	55 23       	and	r21, r21
     d30:	b1 f3       	breq	.-20     	; 0xd1e <__divsf3+0x12>
     d32:	95 1b       	sub	r25, r21
     d34:	55 0b       	sbc	r21, r21
     d36:	bb 27       	eor	r27, r27
     d38:	aa 27       	eor	r26, r26
     d3a:	62 17       	cp	r22, r18
     d3c:	73 07       	cpc	r23, r19
     d3e:	84 07       	cpc	r24, r20
     d40:	38 f0       	brcs	.+14     	; 0xd50 <__divsf3_pse+0x26>
     d42:	9f 5f       	subi	r25, 0xFF	; 255
     d44:	5f 4f       	sbci	r21, 0xFF	; 255
     d46:	22 0f       	add	r18, r18
     d48:	33 1f       	adc	r19, r19
     d4a:	44 1f       	adc	r20, r20
     d4c:	aa 1f       	adc	r26, r26
     d4e:	a9 f3       	breq	.-22     	; 0xd3a <__divsf3_pse+0x10>
     d50:	33 d0       	rcall	.+102    	; 0xdb8 <__divsf3_pse+0x8e>
     d52:	0e 2e       	mov	r0, r30
     d54:	3a f0       	brmi	.+14     	; 0xd64 <__divsf3_pse+0x3a>
     d56:	e0 e8       	ldi	r30, 0x80	; 128
     d58:	30 d0       	rcall	.+96     	; 0xdba <__divsf3_pse+0x90>
     d5a:	91 50       	subi	r25, 0x01	; 1
     d5c:	50 40       	sbci	r21, 0x00	; 0
     d5e:	e6 95       	lsr	r30
     d60:	00 1c       	adc	r0, r0
     d62:	ca f7       	brpl	.-14     	; 0xd56 <__divsf3_pse+0x2c>
     d64:	29 d0       	rcall	.+82     	; 0xdb8 <__divsf3_pse+0x8e>
     d66:	fe 2f       	mov	r31, r30
     d68:	27 d0       	rcall	.+78     	; 0xdb8 <__divsf3_pse+0x8e>
     d6a:	66 0f       	add	r22, r22
     d6c:	77 1f       	adc	r23, r23
     d6e:	88 1f       	adc	r24, r24
     d70:	bb 1f       	adc	r27, r27
     d72:	26 17       	cp	r18, r22
     d74:	37 07       	cpc	r19, r23
     d76:	48 07       	cpc	r20, r24
     d78:	ab 07       	cpc	r26, r27
     d7a:	b0 e8       	ldi	r27, 0x80	; 128
     d7c:	09 f0       	breq	.+2      	; 0xd80 <__divsf3_pse+0x56>
     d7e:	bb 0b       	sbc	r27, r27
     d80:	80 2d       	mov	r24, r0
     d82:	bf 01       	movw	r22, r30
     d84:	ff 27       	eor	r31, r31
     d86:	93 58       	subi	r25, 0x83	; 131
     d88:	5f 4f       	sbci	r21, 0xFF	; 255
     d8a:	2a f0       	brmi	.+10     	; 0xd96 <__divsf3_pse+0x6c>
     d8c:	9e 3f       	cpi	r25, 0xFE	; 254
     d8e:	51 05       	cpc	r21, r1
     d90:	68 f0       	brcs	.+26     	; 0xdac <__divsf3_pse+0x82>
     d92:	b1 c0       	rjmp	.+354    	; 0xef6 <__fp_inf>
     d94:	fb c0       	rjmp	.+502    	; 0xf8c <__fp_szero>
     d96:	5f 3f       	cpi	r21, 0xFF	; 255
     d98:	ec f3       	brlt	.-6      	; 0xd94 <__divsf3_pse+0x6a>
     d9a:	98 3e       	cpi	r25, 0xE8	; 232
     d9c:	dc f3       	brlt	.-10     	; 0xd94 <__divsf3_pse+0x6a>
     d9e:	86 95       	lsr	r24
     da0:	77 95       	ror	r23
     da2:	67 95       	ror	r22
     da4:	b7 95       	ror	r27
     da6:	f7 95       	ror	r31
     da8:	9f 5f       	subi	r25, 0xFF	; 255
     daa:	c9 f7       	brne	.-14     	; 0xd9e <__divsf3_pse+0x74>
     dac:	88 0f       	add	r24, r24
     dae:	91 1d       	adc	r25, r1
     db0:	96 95       	lsr	r25
     db2:	87 95       	ror	r24
     db4:	97 f9       	bld	r25, 7
     db6:	08 95       	ret
     db8:	e1 e0       	ldi	r30, 0x01	; 1
     dba:	66 0f       	add	r22, r22
     dbc:	77 1f       	adc	r23, r23
     dbe:	88 1f       	adc	r24, r24
     dc0:	bb 1f       	adc	r27, r27
     dc2:	62 17       	cp	r22, r18
     dc4:	73 07       	cpc	r23, r19
     dc6:	84 07       	cpc	r24, r20
     dc8:	ba 07       	cpc	r27, r26
     dca:	20 f0       	brcs	.+8      	; 0xdd4 <__divsf3_pse+0xaa>
     dcc:	62 1b       	sub	r22, r18
     dce:	73 0b       	sbc	r23, r19
     dd0:	84 0b       	sbc	r24, r20
     dd2:	ba 0b       	sbc	r27, r26
     dd4:	ee 1f       	adc	r30, r30
     dd6:	88 f7       	brcc	.-30     	; 0xdba <__divsf3_pse+0x90>
     dd8:	e0 95       	com	r30
     dda:	08 95       	ret

00000ddc <__fixunssfsi>:
     ddc:	bc d0       	rcall	.+376    	; 0xf56 <__fp_splitA>
     dde:	88 f0       	brcs	.+34     	; 0xe02 <__fixunssfsi+0x26>
     de0:	9f 57       	subi	r25, 0x7F	; 127
     de2:	90 f0       	brcs	.+36     	; 0xe08 <__fixunssfsi+0x2c>
     de4:	b9 2f       	mov	r27, r25
     de6:	99 27       	eor	r25, r25
     de8:	b7 51       	subi	r27, 0x17	; 23
     dea:	a0 f0       	brcs	.+40     	; 0xe14 <__fixunssfsi+0x38>
     dec:	d1 f0       	breq	.+52     	; 0xe22 <__fixunssfsi+0x46>
     dee:	66 0f       	add	r22, r22
     df0:	77 1f       	adc	r23, r23
     df2:	88 1f       	adc	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	1a f0       	brmi	.+6      	; 0xdfe <__fixunssfsi+0x22>
     df8:	ba 95       	dec	r27
     dfa:	c9 f7       	brne	.-14     	; 0xdee <__fixunssfsi+0x12>
     dfc:	12 c0       	rjmp	.+36     	; 0xe22 <__fixunssfsi+0x46>
     dfe:	b1 30       	cpi	r27, 0x01	; 1
     e00:	81 f0       	breq	.+32     	; 0xe22 <__fixunssfsi+0x46>
     e02:	c3 d0       	rcall	.+390    	; 0xf8a <__fp_zero>
     e04:	b1 e0       	ldi	r27, 0x01	; 1
     e06:	08 95       	ret
     e08:	c0 c0       	rjmp	.+384    	; 0xf8a <__fp_zero>
     e0a:	67 2f       	mov	r22, r23
     e0c:	78 2f       	mov	r23, r24
     e0e:	88 27       	eor	r24, r24
     e10:	b8 5f       	subi	r27, 0xF8	; 248
     e12:	39 f0       	breq	.+14     	; 0xe22 <__fixunssfsi+0x46>
     e14:	b9 3f       	cpi	r27, 0xF9	; 249
     e16:	cc f3       	brlt	.-14     	; 0xe0a <__fixunssfsi+0x2e>
     e18:	86 95       	lsr	r24
     e1a:	77 95       	ror	r23
     e1c:	67 95       	ror	r22
     e1e:	b3 95       	inc	r27
     e20:	d9 f7       	brne	.-10     	; 0xe18 <__fixunssfsi+0x3c>
     e22:	3e f4       	brtc	.+14     	; 0xe32 <__fixunssfsi+0x56>
     e24:	90 95       	com	r25
     e26:	80 95       	com	r24
     e28:	70 95       	com	r23
     e2a:	61 95       	neg	r22
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255
     e2e:	8f 4f       	sbci	r24, 0xFF	; 255
     e30:	9f 4f       	sbci	r25, 0xFF	; 255
     e32:	08 95       	ret

00000e34 <__floatunsisf>:
     e34:	e8 94       	clt
     e36:	09 c0       	rjmp	.+18     	; 0xe4a <__floatsisf+0x12>

00000e38 <__floatsisf>:
     e38:	97 fb       	bst	r25, 7
     e3a:	3e f4       	brtc	.+14     	; 0xe4a <__floatsisf+0x12>
     e3c:	90 95       	com	r25
     e3e:	80 95       	com	r24
     e40:	70 95       	com	r23
     e42:	61 95       	neg	r22
     e44:	7f 4f       	sbci	r23, 0xFF	; 255
     e46:	8f 4f       	sbci	r24, 0xFF	; 255
     e48:	9f 4f       	sbci	r25, 0xFF	; 255
     e4a:	99 23       	and	r25, r25
     e4c:	a9 f0       	breq	.+42     	; 0xe78 <__floatsisf+0x40>
     e4e:	f9 2f       	mov	r31, r25
     e50:	96 e9       	ldi	r25, 0x96	; 150
     e52:	bb 27       	eor	r27, r27
     e54:	93 95       	inc	r25
     e56:	f6 95       	lsr	r31
     e58:	87 95       	ror	r24
     e5a:	77 95       	ror	r23
     e5c:	67 95       	ror	r22
     e5e:	b7 95       	ror	r27
     e60:	f1 11       	cpse	r31, r1
     e62:	f8 cf       	rjmp	.-16     	; 0xe54 <__floatsisf+0x1c>
     e64:	fa f4       	brpl	.+62     	; 0xea4 <__floatsisf+0x6c>
     e66:	bb 0f       	add	r27, r27
     e68:	11 f4       	brne	.+4      	; 0xe6e <__floatsisf+0x36>
     e6a:	60 ff       	sbrs	r22, 0
     e6c:	1b c0       	rjmp	.+54     	; 0xea4 <__floatsisf+0x6c>
     e6e:	6f 5f       	subi	r22, 0xFF	; 255
     e70:	7f 4f       	sbci	r23, 0xFF	; 255
     e72:	8f 4f       	sbci	r24, 0xFF	; 255
     e74:	9f 4f       	sbci	r25, 0xFF	; 255
     e76:	16 c0       	rjmp	.+44     	; 0xea4 <__floatsisf+0x6c>
     e78:	88 23       	and	r24, r24
     e7a:	11 f0       	breq	.+4      	; 0xe80 <__floatsisf+0x48>
     e7c:	96 e9       	ldi	r25, 0x96	; 150
     e7e:	11 c0       	rjmp	.+34     	; 0xea2 <__floatsisf+0x6a>
     e80:	77 23       	and	r23, r23
     e82:	21 f0       	breq	.+8      	; 0xe8c <__floatsisf+0x54>
     e84:	9e e8       	ldi	r25, 0x8E	; 142
     e86:	87 2f       	mov	r24, r23
     e88:	76 2f       	mov	r23, r22
     e8a:	05 c0       	rjmp	.+10     	; 0xe96 <__floatsisf+0x5e>
     e8c:	66 23       	and	r22, r22
     e8e:	71 f0       	breq	.+28     	; 0xeac <__floatsisf+0x74>
     e90:	96 e8       	ldi	r25, 0x86	; 134
     e92:	86 2f       	mov	r24, r22
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	2a f0       	brmi	.+10     	; 0xea4 <__floatsisf+0x6c>
     e9a:	9a 95       	dec	r25
     e9c:	66 0f       	add	r22, r22
     e9e:	77 1f       	adc	r23, r23
     ea0:	88 1f       	adc	r24, r24
     ea2:	da f7       	brpl	.-10     	; 0xe9a <__floatsisf+0x62>
     ea4:	88 0f       	add	r24, r24
     ea6:	96 95       	lsr	r25
     ea8:	87 95       	ror	r24
     eaa:	97 f9       	bld	r25, 7
     eac:	08 95       	ret

00000eae <__fp_cmp>:
     eae:	99 0f       	add	r25, r25
     eb0:	00 08       	sbc	r0, r0
     eb2:	55 0f       	add	r21, r21
     eb4:	aa 0b       	sbc	r26, r26
     eb6:	e0 e8       	ldi	r30, 0x80	; 128
     eb8:	fe ef       	ldi	r31, 0xFE	; 254
     eba:	16 16       	cp	r1, r22
     ebc:	17 06       	cpc	r1, r23
     ebe:	e8 07       	cpc	r30, r24
     ec0:	f9 07       	cpc	r31, r25
     ec2:	c0 f0       	brcs	.+48     	; 0xef4 <__fp_cmp+0x46>
     ec4:	12 16       	cp	r1, r18
     ec6:	13 06       	cpc	r1, r19
     ec8:	e4 07       	cpc	r30, r20
     eca:	f5 07       	cpc	r31, r21
     ecc:	98 f0       	brcs	.+38     	; 0xef4 <__fp_cmp+0x46>
     ece:	62 1b       	sub	r22, r18
     ed0:	73 0b       	sbc	r23, r19
     ed2:	84 0b       	sbc	r24, r20
     ed4:	95 0b       	sbc	r25, r21
     ed6:	39 f4       	brne	.+14     	; 0xee6 <__fp_cmp+0x38>
     ed8:	0a 26       	eor	r0, r26
     eda:	61 f0       	breq	.+24     	; 0xef4 <__fp_cmp+0x46>
     edc:	23 2b       	or	r18, r19
     ede:	24 2b       	or	r18, r20
     ee0:	25 2b       	or	r18, r21
     ee2:	21 f4       	brne	.+8      	; 0xeec <__fp_cmp+0x3e>
     ee4:	08 95       	ret
     ee6:	0a 26       	eor	r0, r26
     ee8:	09 f4       	brne	.+2      	; 0xeec <__fp_cmp+0x3e>
     eea:	a1 40       	sbci	r26, 0x01	; 1
     eec:	a6 95       	lsr	r26
     eee:	8f ef       	ldi	r24, 0xFF	; 255
     ef0:	81 1d       	adc	r24, r1
     ef2:	81 1d       	adc	r24, r1
     ef4:	08 95       	ret

00000ef6 <__fp_inf>:
     ef6:	97 f9       	bld	r25, 7
     ef8:	9f 67       	ori	r25, 0x7F	; 127
     efa:	80 e8       	ldi	r24, 0x80	; 128
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	60 e0       	ldi	r22, 0x00	; 0
     f00:	08 95       	ret

00000f02 <__fp_nan>:
     f02:	9f ef       	ldi	r25, 0xFF	; 255
     f04:	80 ec       	ldi	r24, 0xC0	; 192
     f06:	08 95       	ret

00000f08 <__fp_pscA>:
     f08:	00 24       	eor	r0, r0
     f0a:	0a 94       	dec	r0
     f0c:	16 16       	cp	r1, r22
     f0e:	17 06       	cpc	r1, r23
     f10:	18 06       	cpc	r1, r24
     f12:	09 06       	cpc	r0, r25
     f14:	08 95       	ret

00000f16 <__fp_pscB>:
     f16:	00 24       	eor	r0, r0
     f18:	0a 94       	dec	r0
     f1a:	12 16       	cp	r1, r18
     f1c:	13 06       	cpc	r1, r19
     f1e:	14 06       	cpc	r1, r20
     f20:	05 06       	cpc	r0, r21
     f22:	08 95       	ret

00000f24 <__fp_round>:
     f24:	09 2e       	mov	r0, r25
     f26:	03 94       	inc	r0
     f28:	00 0c       	add	r0, r0
     f2a:	11 f4       	brne	.+4      	; 0xf30 <__fp_round+0xc>
     f2c:	88 23       	and	r24, r24
     f2e:	52 f0       	brmi	.+20     	; 0xf44 <__fp_round+0x20>
     f30:	bb 0f       	add	r27, r27
     f32:	40 f4       	brcc	.+16     	; 0xf44 <__fp_round+0x20>
     f34:	bf 2b       	or	r27, r31
     f36:	11 f4       	brne	.+4      	; 0xf3c <__fp_round+0x18>
     f38:	60 ff       	sbrs	r22, 0
     f3a:	04 c0       	rjmp	.+8      	; 0xf44 <__fp_round+0x20>
     f3c:	6f 5f       	subi	r22, 0xFF	; 255
     f3e:	7f 4f       	sbci	r23, 0xFF	; 255
     f40:	8f 4f       	sbci	r24, 0xFF	; 255
     f42:	9f 4f       	sbci	r25, 0xFF	; 255
     f44:	08 95       	ret

00000f46 <__fp_split3>:
     f46:	57 fd       	sbrc	r21, 7
     f48:	90 58       	subi	r25, 0x80	; 128
     f4a:	44 0f       	add	r20, r20
     f4c:	55 1f       	adc	r21, r21
     f4e:	59 f0       	breq	.+22     	; 0xf66 <__fp_splitA+0x10>
     f50:	5f 3f       	cpi	r21, 0xFF	; 255
     f52:	71 f0       	breq	.+28     	; 0xf70 <__fp_splitA+0x1a>
     f54:	47 95       	ror	r20

00000f56 <__fp_splitA>:
     f56:	88 0f       	add	r24, r24
     f58:	97 fb       	bst	r25, 7
     f5a:	99 1f       	adc	r25, r25
     f5c:	61 f0       	breq	.+24     	; 0xf76 <__fp_splitA+0x20>
     f5e:	9f 3f       	cpi	r25, 0xFF	; 255
     f60:	79 f0       	breq	.+30     	; 0xf80 <__fp_splitA+0x2a>
     f62:	87 95       	ror	r24
     f64:	08 95       	ret
     f66:	12 16       	cp	r1, r18
     f68:	13 06       	cpc	r1, r19
     f6a:	14 06       	cpc	r1, r20
     f6c:	55 1f       	adc	r21, r21
     f6e:	f2 cf       	rjmp	.-28     	; 0xf54 <__fp_split3+0xe>
     f70:	46 95       	lsr	r20
     f72:	f1 df       	rcall	.-30     	; 0xf56 <__fp_splitA>
     f74:	08 c0       	rjmp	.+16     	; 0xf86 <__fp_splitA+0x30>
     f76:	16 16       	cp	r1, r22
     f78:	17 06       	cpc	r1, r23
     f7a:	18 06       	cpc	r1, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	f1 cf       	rjmp	.-30     	; 0xf62 <__fp_splitA+0xc>
     f80:	86 95       	lsr	r24
     f82:	71 05       	cpc	r23, r1
     f84:	61 05       	cpc	r22, r1
     f86:	08 94       	sec
     f88:	08 95       	ret

00000f8a <__fp_zero>:
     f8a:	e8 94       	clt

00000f8c <__fp_szero>:
     f8c:	bb 27       	eor	r27, r27
     f8e:	66 27       	eor	r22, r22
     f90:	77 27       	eor	r23, r23
     f92:	cb 01       	movw	r24, r22
     f94:	97 f9       	bld	r25, 7
     f96:	08 95       	ret

00000f98 <__gesf2>:
     f98:	8a df       	rcall	.-236    	; 0xeae <__fp_cmp>
     f9a:	08 f4       	brcc	.+2      	; 0xf9e <__gesf2+0x6>
     f9c:	8f ef       	ldi	r24, 0xFF	; 255
     f9e:	08 95       	ret

00000fa0 <__mulsf3>:
     fa0:	0b d0       	rcall	.+22     	; 0xfb8 <__mulsf3x>
     fa2:	c0 cf       	rjmp	.-128    	; 0xf24 <__fp_round>
     fa4:	b1 df       	rcall	.-158    	; 0xf08 <__fp_pscA>
     fa6:	28 f0       	brcs	.+10     	; 0xfb2 <__mulsf3+0x12>
     fa8:	b6 df       	rcall	.-148    	; 0xf16 <__fp_pscB>
     faa:	18 f0       	brcs	.+6      	; 0xfb2 <__mulsf3+0x12>
     fac:	95 23       	and	r25, r21
     fae:	09 f0       	breq	.+2      	; 0xfb2 <__mulsf3+0x12>
     fb0:	a2 cf       	rjmp	.-188    	; 0xef6 <__fp_inf>
     fb2:	a7 cf       	rjmp	.-178    	; 0xf02 <__fp_nan>
     fb4:	11 24       	eor	r1, r1
     fb6:	ea cf       	rjmp	.-44     	; 0xf8c <__fp_szero>

00000fb8 <__mulsf3x>:
     fb8:	c6 df       	rcall	.-116    	; 0xf46 <__fp_split3>
     fba:	a0 f3       	brcs	.-24     	; 0xfa4 <__mulsf3+0x4>

00000fbc <__mulsf3_pse>:
     fbc:	95 9f       	mul	r25, r21
     fbe:	d1 f3       	breq	.-12     	; 0xfb4 <__mulsf3+0x14>
     fc0:	95 0f       	add	r25, r21
     fc2:	50 e0       	ldi	r21, 0x00	; 0
     fc4:	55 1f       	adc	r21, r21
     fc6:	62 9f       	mul	r22, r18
     fc8:	f0 01       	movw	r30, r0
     fca:	72 9f       	mul	r23, r18
     fcc:	bb 27       	eor	r27, r27
     fce:	f0 0d       	add	r31, r0
     fd0:	b1 1d       	adc	r27, r1
     fd2:	63 9f       	mul	r22, r19
     fd4:	aa 27       	eor	r26, r26
     fd6:	f0 0d       	add	r31, r0
     fd8:	b1 1d       	adc	r27, r1
     fda:	aa 1f       	adc	r26, r26
     fdc:	64 9f       	mul	r22, r20
     fde:	66 27       	eor	r22, r22
     fe0:	b0 0d       	add	r27, r0
     fe2:	a1 1d       	adc	r26, r1
     fe4:	66 1f       	adc	r22, r22
     fe6:	82 9f       	mul	r24, r18
     fe8:	22 27       	eor	r18, r18
     fea:	b0 0d       	add	r27, r0
     fec:	a1 1d       	adc	r26, r1
     fee:	62 1f       	adc	r22, r18
     ff0:	73 9f       	mul	r23, r19
     ff2:	b0 0d       	add	r27, r0
     ff4:	a1 1d       	adc	r26, r1
     ff6:	62 1f       	adc	r22, r18
     ff8:	83 9f       	mul	r24, r19
     ffa:	a0 0d       	add	r26, r0
     ffc:	61 1d       	adc	r22, r1
     ffe:	22 1f       	adc	r18, r18
    1000:	74 9f       	mul	r23, r20
    1002:	33 27       	eor	r19, r19
    1004:	a0 0d       	add	r26, r0
    1006:	61 1d       	adc	r22, r1
    1008:	23 1f       	adc	r18, r19
    100a:	84 9f       	mul	r24, r20
    100c:	60 0d       	add	r22, r0
    100e:	21 1d       	adc	r18, r1
    1010:	82 2f       	mov	r24, r18
    1012:	76 2f       	mov	r23, r22
    1014:	6a 2f       	mov	r22, r26
    1016:	11 24       	eor	r1, r1
    1018:	9f 57       	subi	r25, 0x7F	; 127
    101a:	50 40       	sbci	r21, 0x00	; 0
    101c:	8a f0       	brmi	.+34     	; 0x1040 <__EEPROM_REGION_LENGTH__+0x40>
    101e:	e1 f0       	breq	.+56     	; 0x1058 <__EEPROM_REGION_LENGTH__+0x58>
    1020:	88 23       	and	r24, r24
    1022:	4a f0       	brmi	.+18     	; 0x1036 <__EEPROM_REGION_LENGTH__+0x36>
    1024:	ee 0f       	add	r30, r30
    1026:	ff 1f       	adc	r31, r31
    1028:	bb 1f       	adc	r27, r27
    102a:	66 1f       	adc	r22, r22
    102c:	77 1f       	adc	r23, r23
    102e:	88 1f       	adc	r24, r24
    1030:	91 50       	subi	r25, 0x01	; 1
    1032:	50 40       	sbci	r21, 0x00	; 0
    1034:	a9 f7       	brne	.-22     	; 0x1020 <__EEPROM_REGION_LENGTH__+0x20>
    1036:	9e 3f       	cpi	r25, 0xFE	; 254
    1038:	51 05       	cpc	r21, r1
    103a:	70 f0       	brcs	.+28     	; 0x1058 <__EEPROM_REGION_LENGTH__+0x58>
    103c:	5c cf       	rjmp	.-328    	; 0xef6 <__fp_inf>
    103e:	a6 cf       	rjmp	.-180    	; 0xf8c <__fp_szero>
    1040:	5f 3f       	cpi	r21, 0xFF	; 255
    1042:	ec f3       	brlt	.-6      	; 0x103e <__EEPROM_REGION_LENGTH__+0x3e>
    1044:	98 3e       	cpi	r25, 0xE8	; 232
    1046:	dc f3       	brlt	.-10     	; 0x103e <__EEPROM_REGION_LENGTH__+0x3e>
    1048:	86 95       	lsr	r24
    104a:	77 95       	ror	r23
    104c:	67 95       	ror	r22
    104e:	b7 95       	ror	r27
    1050:	f7 95       	ror	r31
    1052:	e7 95       	ror	r30
    1054:	9f 5f       	subi	r25, 0xFF	; 255
    1056:	c1 f7       	brne	.-16     	; 0x1048 <__EEPROM_REGION_LENGTH__+0x48>
    1058:	fe 2b       	or	r31, r30
    105a:	88 0f       	add	r24, r24
    105c:	91 1d       	adc	r25, r1
    105e:	96 95       	lsr	r25
    1060:	87 95       	ror	r24
    1062:	97 f9       	bld	r25, 7
    1064:	08 95       	ret

00001066 <__udivmodsi4>:
    1066:	a1 e2       	ldi	r26, 0x21	; 33
    1068:	1a 2e       	mov	r1, r26
    106a:	aa 1b       	sub	r26, r26
    106c:	bb 1b       	sub	r27, r27
    106e:	fd 01       	movw	r30, r26
    1070:	0d c0       	rjmp	.+26     	; 0x108c <__udivmodsi4_ep>

00001072 <__udivmodsi4_loop>:
    1072:	aa 1f       	adc	r26, r26
    1074:	bb 1f       	adc	r27, r27
    1076:	ee 1f       	adc	r30, r30
    1078:	ff 1f       	adc	r31, r31
    107a:	a2 17       	cp	r26, r18
    107c:	b3 07       	cpc	r27, r19
    107e:	e4 07       	cpc	r30, r20
    1080:	f5 07       	cpc	r31, r21
    1082:	20 f0       	brcs	.+8      	; 0x108c <__udivmodsi4_ep>
    1084:	a2 1b       	sub	r26, r18
    1086:	b3 0b       	sbc	r27, r19
    1088:	e4 0b       	sbc	r30, r20
    108a:	f5 0b       	sbc	r31, r21

0000108c <__udivmodsi4_ep>:
    108c:	66 1f       	adc	r22, r22
    108e:	77 1f       	adc	r23, r23
    1090:	88 1f       	adc	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	1a 94       	dec	r1
    1096:	69 f7       	brne	.-38     	; 0x1072 <__udivmodsi4_loop>
    1098:	60 95       	com	r22
    109a:	70 95       	com	r23
    109c:	80 95       	com	r24
    109e:	90 95       	com	r25
    10a0:	9b 01       	movw	r18, r22
    10a2:	ac 01       	movw	r20, r24
    10a4:	bd 01       	movw	r22, r26
    10a6:	cf 01       	movw	r24, r30
    10a8:	08 95       	ret

000010aa <__umulhisi3>:
    10aa:	a2 9f       	mul	r26, r18
    10ac:	b0 01       	movw	r22, r0
    10ae:	b3 9f       	mul	r27, r19
    10b0:	c0 01       	movw	r24, r0
    10b2:	a3 9f       	mul	r26, r19
    10b4:	70 0d       	add	r23, r0
    10b6:	81 1d       	adc	r24, r1
    10b8:	11 24       	eor	r1, r1
    10ba:	91 1d       	adc	r25, r1
    10bc:	b2 9f       	mul	r27, r18
    10be:	70 0d       	add	r23, r0
    10c0:	81 1d       	adc	r24, r1
    10c2:	11 24       	eor	r1, r1
    10c4:	91 1d       	adc	r25, r1
    10c6:	08 95       	ret

000010c8 <sprintf>:
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	2e 97       	sbiw	r28, 0x0e	; 14
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	0e 89       	ldd	r16, Y+22	; 0x16
    10e2:	1f 89       	ldd	r17, Y+23	; 0x17
    10e4:	86 e0       	ldi	r24, 0x06	; 6
    10e6:	8c 83       	std	Y+4, r24	; 0x04
    10e8:	1a 83       	std	Y+2, r17	; 0x02
    10ea:	09 83       	std	Y+1, r16	; 0x01
    10ec:	8f ef       	ldi	r24, 0xFF	; 255
    10ee:	9f e7       	ldi	r25, 0x7F	; 127
    10f0:	9e 83       	std	Y+6, r25	; 0x06
    10f2:	8d 83       	std	Y+5, r24	; 0x05
    10f4:	ae 01       	movw	r20, r28
    10f6:	46 5e       	subi	r20, 0xE6	; 230
    10f8:	5f 4f       	sbci	r21, 0xFF	; 255
    10fa:	68 8d       	ldd	r22, Y+24	; 0x18
    10fc:	79 8d       	ldd	r23, Y+25	; 0x19
    10fe:	ce 01       	movw	r24, r28
    1100:	01 96       	adiw	r24, 0x01	; 1
    1102:	10 d0       	rcall	.+32     	; 0x1124 <vfprintf>
    1104:	ef 81       	ldd	r30, Y+7	; 0x07
    1106:	f8 85       	ldd	r31, Y+8	; 0x08
    1108:	e0 0f       	add	r30, r16
    110a:	f1 1f       	adc	r31, r17
    110c:	10 82       	st	Z, r1
    110e:	2e 96       	adiw	r28, 0x0e	; 14
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	08 95       	ret

00001124 <vfprintf>:
    1124:	2f 92       	push	r2
    1126:	3f 92       	push	r3
    1128:	4f 92       	push	r4
    112a:	5f 92       	push	r5
    112c:	6f 92       	push	r6
    112e:	7f 92       	push	r7
    1130:	8f 92       	push	r8
    1132:	9f 92       	push	r9
    1134:	af 92       	push	r10
    1136:	bf 92       	push	r11
    1138:	cf 92       	push	r12
    113a:	df 92       	push	r13
    113c:	ef 92       	push	r14
    113e:	ff 92       	push	r15
    1140:	0f 93       	push	r16
    1142:	1f 93       	push	r17
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	2b 97       	sbiw	r28, 0x0b	; 11
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	cd bf       	out	0x3d, r28	; 61
    1158:	6c 01       	movw	r12, r24
    115a:	7b 01       	movw	r14, r22
    115c:	8a 01       	movw	r16, r20
    115e:	fc 01       	movw	r30, r24
    1160:	17 82       	std	Z+7, r1	; 0x07
    1162:	16 82       	std	Z+6, r1	; 0x06
    1164:	83 81       	ldd	r24, Z+3	; 0x03
    1166:	81 ff       	sbrs	r24, 1
    1168:	bf c1       	rjmp	.+894    	; 0x14e8 <vfprintf+0x3c4>
    116a:	ce 01       	movw	r24, r28
    116c:	01 96       	adiw	r24, 0x01	; 1
    116e:	3c 01       	movw	r6, r24
    1170:	f6 01       	movw	r30, r12
    1172:	93 81       	ldd	r25, Z+3	; 0x03
    1174:	f7 01       	movw	r30, r14
    1176:	93 fd       	sbrc	r25, 3
    1178:	85 91       	lpm	r24, Z+
    117a:	93 ff       	sbrs	r25, 3
    117c:	81 91       	ld	r24, Z+
    117e:	7f 01       	movw	r14, r30
    1180:	88 23       	and	r24, r24
    1182:	09 f4       	brne	.+2      	; 0x1186 <vfprintf+0x62>
    1184:	ad c1       	rjmp	.+858    	; 0x14e0 <vfprintf+0x3bc>
    1186:	85 32       	cpi	r24, 0x25	; 37
    1188:	39 f4       	brne	.+14     	; 0x1198 <vfprintf+0x74>
    118a:	93 fd       	sbrc	r25, 3
    118c:	85 91       	lpm	r24, Z+
    118e:	93 ff       	sbrs	r25, 3
    1190:	81 91       	ld	r24, Z+
    1192:	7f 01       	movw	r14, r30
    1194:	85 32       	cpi	r24, 0x25	; 37
    1196:	21 f4       	brne	.+8      	; 0x11a0 <vfprintf+0x7c>
    1198:	b6 01       	movw	r22, r12
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	d6 d1       	rcall	.+940    	; 0x154a <fputc>
    119e:	e8 cf       	rjmp	.-48     	; 0x1170 <vfprintf+0x4c>
    11a0:	91 2c       	mov	r9, r1
    11a2:	21 2c       	mov	r2, r1
    11a4:	31 2c       	mov	r3, r1
    11a6:	ff e1       	ldi	r31, 0x1F	; 31
    11a8:	f3 15       	cp	r31, r3
    11aa:	d8 f0       	brcs	.+54     	; 0x11e2 <vfprintf+0xbe>
    11ac:	8b 32       	cpi	r24, 0x2B	; 43
    11ae:	79 f0       	breq	.+30     	; 0x11ce <vfprintf+0xaa>
    11b0:	38 f4       	brcc	.+14     	; 0x11c0 <vfprintf+0x9c>
    11b2:	80 32       	cpi	r24, 0x20	; 32
    11b4:	79 f0       	breq	.+30     	; 0x11d4 <vfprintf+0xb0>
    11b6:	83 32       	cpi	r24, 0x23	; 35
    11b8:	a1 f4       	brne	.+40     	; 0x11e2 <vfprintf+0xbe>
    11ba:	23 2d       	mov	r18, r3
    11bc:	20 61       	ori	r18, 0x10	; 16
    11be:	1d c0       	rjmp	.+58     	; 0x11fa <vfprintf+0xd6>
    11c0:	8d 32       	cpi	r24, 0x2D	; 45
    11c2:	61 f0       	breq	.+24     	; 0x11dc <vfprintf+0xb8>
    11c4:	80 33       	cpi	r24, 0x30	; 48
    11c6:	69 f4       	brne	.+26     	; 0x11e2 <vfprintf+0xbe>
    11c8:	23 2d       	mov	r18, r3
    11ca:	21 60       	ori	r18, 0x01	; 1
    11cc:	16 c0       	rjmp	.+44     	; 0x11fa <vfprintf+0xd6>
    11ce:	83 2d       	mov	r24, r3
    11d0:	82 60       	ori	r24, 0x02	; 2
    11d2:	38 2e       	mov	r3, r24
    11d4:	e3 2d       	mov	r30, r3
    11d6:	e4 60       	ori	r30, 0x04	; 4
    11d8:	3e 2e       	mov	r3, r30
    11da:	2a c0       	rjmp	.+84     	; 0x1230 <vfprintf+0x10c>
    11dc:	f3 2d       	mov	r31, r3
    11de:	f8 60       	ori	r31, 0x08	; 8
    11e0:	1d c0       	rjmp	.+58     	; 0x121c <vfprintf+0xf8>
    11e2:	37 fc       	sbrc	r3, 7
    11e4:	2d c0       	rjmp	.+90     	; 0x1240 <vfprintf+0x11c>
    11e6:	20 ed       	ldi	r18, 0xD0	; 208
    11e8:	28 0f       	add	r18, r24
    11ea:	2a 30       	cpi	r18, 0x0A	; 10
    11ec:	40 f0       	brcs	.+16     	; 0x11fe <vfprintf+0xda>
    11ee:	8e 32       	cpi	r24, 0x2E	; 46
    11f0:	b9 f4       	brne	.+46     	; 0x1220 <vfprintf+0xfc>
    11f2:	36 fc       	sbrc	r3, 6
    11f4:	75 c1       	rjmp	.+746    	; 0x14e0 <vfprintf+0x3bc>
    11f6:	23 2d       	mov	r18, r3
    11f8:	20 64       	ori	r18, 0x40	; 64
    11fa:	32 2e       	mov	r3, r18
    11fc:	19 c0       	rjmp	.+50     	; 0x1230 <vfprintf+0x10c>
    11fe:	36 fe       	sbrs	r3, 6
    1200:	06 c0       	rjmp	.+12     	; 0x120e <vfprintf+0xea>
    1202:	8a e0       	ldi	r24, 0x0A	; 10
    1204:	98 9e       	mul	r9, r24
    1206:	20 0d       	add	r18, r0
    1208:	11 24       	eor	r1, r1
    120a:	92 2e       	mov	r9, r18
    120c:	11 c0       	rjmp	.+34     	; 0x1230 <vfprintf+0x10c>
    120e:	ea e0       	ldi	r30, 0x0A	; 10
    1210:	2e 9e       	mul	r2, r30
    1212:	20 0d       	add	r18, r0
    1214:	11 24       	eor	r1, r1
    1216:	22 2e       	mov	r2, r18
    1218:	f3 2d       	mov	r31, r3
    121a:	f0 62       	ori	r31, 0x20	; 32
    121c:	3f 2e       	mov	r3, r31
    121e:	08 c0       	rjmp	.+16     	; 0x1230 <vfprintf+0x10c>
    1220:	8c 36       	cpi	r24, 0x6C	; 108
    1222:	21 f4       	brne	.+8      	; 0x122c <vfprintf+0x108>
    1224:	83 2d       	mov	r24, r3
    1226:	80 68       	ori	r24, 0x80	; 128
    1228:	38 2e       	mov	r3, r24
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <vfprintf+0x10c>
    122c:	88 36       	cpi	r24, 0x68	; 104
    122e:	41 f4       	brne	.+16     	; 0x1240 <vfprintf+0x11c>
    1230:	f7 01       	movw	r30, r14
    1232:	93 fd       	sbrc	r25, 3
    1234:	85 91       	lpm	r24, Z+
    1236:	93 ff       	sbrs	r25, 3
    1238:	81 91       	ld	r24, Z+
    123a:	7f 01       	movw	r14, r30
    123c:	81 11       	cpse	r24, r1
    123e:	b3 cf       	rjmp	.-154    	; 0x11a6 <vfprintf+0x82>
    1240:	98 2f       	mov	r25, r24
    1242:	9f 7d       	andi	r25, 0xDF	; 223
    1244:	95 54       	subi	r25, 0x45	; 69
    1246:	93 30       	cpi	r25, 0x03	; 3
    1248:	28 f4       	brcc	.+10     	; 0x1254 <vfprintf+0x130>
    124a:	0c 5f       	subi	r16, 0xFC	; 252
    124c:	1f 4f       	sbci	r17, 0xFF	; 255
    124e:	9f e3       	ldi	r25, 0x3F	; 63
    1250:	99 83       	std	Y+1, r25	; 0x01
    1252:	0d c0       	rjmp	.+26     	; 0x126e <vfprintf+0x14a>
    1254:	83 36       	cpi	r24, 0x63	; 99
    1256:	31 f0       	breq	.+12     	; 0x1264 <vfprintf+0x140>
    1258:	83 37       	cpi	r24, 0x73	; 115
    125a:	71 f0       	breq	.+28     	; 0x1278 <vfprintf+0x154>
    125c:	83 35       	cpi	r24, 0x53	; 83
    125e:	09 f0       	breq	.+2      	; 0x1262 <vfprintf+0x13e>
    1260:	55 c0       	rjmp	.+170    	; 0x130c <vfprintf+0x1e8>
    1262:	20 c0       	rjmp	.+64     	; 0x12a4 <vfprintf+0x180>
    1264:	f8 01       	movw	r30, r16
    1266:	80 81       	ld	r24, Z
    1268:	89 83       	std	Y+1, r24	; 0x01
    126a:	0e 5f       	subi	r16, 0xFE	; 254
    126c:	1f 4f       	sbci	r17, 0xFF	; 255
    126e:	88 24       	eor	r8, r8
    1270:	83 94       	inc	r8
    1272:	91 2c       	mov	r9, r1
    1274:	53 01       	movw	r10, r6
    1276:	12 c0       	rjmp	.+36     	; 0x129c <vfprintf+0x178>
    1278:	28 01       	movw	r4, r16
    127a:	f2 e0       	ldi	r31, 0x02	; 2
    127c:	4f 0e       	add	r4, r31
    127e:	51 1c       	adc	r5, r1
    1280:	f8 01       	movw	r30, r16
    1282:	a0 80       	ld	r10, Z
    1284:	b1 80       	ldd	r11, Z+1	; 0x01
    1286:	36 fe       	sbrs	r3, 6
    1288:	03 c0       	rjmp	.+6      	; 0x1290 <vfprintf+0x16c>
    128a:	69 2d       	mov	r22, r9
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <vfprintf+0x170>
    1290:	6f ef       	ldi	r22, 0xFF	; 255
    1292:	7f ef       	ldi	r23, 0xFF	; 255
    1294:	c5 01       	movw	r24, r10
    1296:	4e d1       	rcall	.+668    	; 0x1534 <strnlen>
    1298:	4c 01       	movw	r8, r24
    129a:	82 01       	movw	r16, r4
    129c:	f3 2d       	mov	r31, r3
    129e:	ff 77       	andi	r31, 0x7F	; 127
    12a0:	3f 2e       	mov	r3, r31
    12a2:	15 c0       	rjmp	.+42     	; 0x12ce <vfprintf+0x1aa>
    12a4:	28 01       	movw	r4, r16
    12a6:	22 e0       	ldi	r18, 0x02	; 2
    12a8:	42 0e       	add	r4, r18
    12aa:	51 1c       	adc	r5, r1
    12ac:	f8 01       	movw	r30, r16
    12ae:	a0 80       	ld	r10, Z
    12b0:	b1 80       	ldd	r11, Z+1	; 0x01
    12b2:	36 fe       	sbrs	r3, 6
    12b4:	03 c0       	rjmp	.+6      	; 0x12bc <vfprintf+0x198>
    12b6:	69 2d       	mov	r22, r9
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <vfprintf+0x19c>
    12bc:	6f ef       	ldi	r22, 0xFF	; 255
    12be:	7f ef       	ldi	r23, 0xFF	; 255
    12c0:	c5 01       	movw	r24, r10
    12c2:	2d d1       	rcall	.+602    	; 0x151e <strnlen_P>
    12c4:	4c 01       	movw	r8, r24
    12c6:	f3 2d       	mov	r31, r3
    12c8:	f0 68       	ori	r31, 0x80	; 128
    12ca:	3f 2e       	mov	r3, r31
    12cc:	82 01       	movw	r16, r4
    12ce:	33 fc       	sbrc	r3, 3
    12d0:	19 c0       	rjmp	.+50     	; 0x1304 <vfprintf+0x1e0>
    12d2:	82 2d       	mov	r24, r2
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	88 16       	cp	r8, r24
    12d8:	99 06       	cpc	r9, r25
    12da:	a0 f4       	brcc	.+40     	; 0x1304 <vfprintf+0x1e0>
    12dc:	b6 01       	movw	r22, r12
    12de:	80 e2       	ldi	r24, 0x20	; 32
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	33 d1       	rcall	.+614    	; 0x154a <fputc>
    12e4:	2a 94       	dec	r2
    12e6:	f5 cf       	rjmp	.-22     	; 0x12d2 <vfprintf+0x1ae>
    12e8:	f5 01       	movw	r30, r10
    12ea:	37 fc       	sbrc	r3, 7
    12ec:	85 91       	lpm	r24, Z+
    12ee:	37 fe       	sbrs	r3, 7
    12f0:	81 91       	ld	r24, Z+
    12f2:	5f 01       	movw	r10, r30
    12f4:	b6 01       	movw	r22, r12
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	28 d1       	rcall	.+592    	; 0x154a <fputc>
    12fa:	21 10       	cpse	r2, r1
    12fc:	2a 94       	dec	r2
    12fe:	21 e0       	ldi	r18, 0x01	; 1
    1300:	82 1a       	sub	r8, r18
    1302:	91 08       	sbc	r9, r1
    1304:	81 14       	cp	r8, r1
    1306:	91 04       	cpc	r9, r1
    1308:	79 f7       	brne	.-34     	; 0x12e8 <vfprintf+0x1c4>
    130a:	e1 c0       	rjmp	.+450    	; 0x14ce <vfprintf+0x3aa>
    130c:	84 36       	cpi	r24, 0x64	; 100
    130e:	11 f0       	breq	.+4      	; 0x1314 <vfprintf+0x1f0>
    1310:	89 36       	cpi	r24, 0x69	; 105
    1312:	39 f5       	brne	.+78     	; 0x1362 <vfprintf+0x23e>
    1314:	f8 01       	movw	r30, r16
    1316:	37 fe       	sbrs	r3, 7
    1318:	07 c0       	rjmp	.+14     	; 0x1328 <vfprintf+0x204>
    131a:	60 81       	ld	r22, Z
    131c:	71 81       	ldd	r23, Z+1	; 0x01
    131e:	82 81       	ldd	r24, Z+2	; 0x02
    1320:	93 81       	ldd	r25, Z+3	; 0x03
    1322:	0c 5f       	subi	r16, 0xFC	; 252
    1324:	1f 4f       	sbci	r17, 0xFF	; 255
    1326:	08 c0       	rjmp	.+16     	; 0x1338 <vfprintf+0x214>
    1328:	60 81       	ld	r22, Z
    132a:	71 81       	ldd	r23, Z+1	; 0x01
    132c:	07 2e       	mov	r0, r23
    132e:	00 0c       	add	r0, r0
    1330:	88 0b       	sbc	r24, r24
    1332:	99 0b       	sbc	r25, r25
    1334:	0e 5f       	subi	r16, 0xFE	; 254
    1336:	1f 4f       	sbci	r17, 0xFF	; 255
    1338:	f3 2d       	mov	r31, r3
    133a:	ff 76       	andi	r31, 0x6F	; 111
    133c:	3f 2e       	mov	r3, r31
    133e:	97 ff       	sbrs	r25, 7
    1340:	09 c0       	rjmp	.+18     	; 0x1354 <vfprintf+0x230>
    1342:	90 95       	com	r25
    1344:	80 95       	com	r24
    1346:	70 95       	com	r23
    1348:	61 95       	neg	r22
    134a:	7f 4f       	sbci	r23, 0xFF	; 255
    134c:	8f 4f       	sbci	r24, 0xFF	; 255
    134e:	9f 4f       	sbci	r25, 0xFF	; 255
    1350:	f0 68       	ori	r31, 0x80	; 128
    1352:	3f 2e       	mov	r3, r31
    1354:	2a e0       	ldi	r18, 0x0A	; 10
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	a3 01       	movw	r20, r6
    135a:	33 d1       	rcall	.+614    	; 0x15c2 <__ultoa_invert>
    135c:	88 2e       	mov	r8, r24
    135e:	86 18       	sub	r8, r6
    1360:	44 c0       	rjmp	.+136    	; 0x13ea <vfprintf+0x2c6>
    1362:	85 37       	cpi	r24, 0x75	; 117
    1364:	31 f4       	brne	.+12     	; 0x1372 <vfprintf+0x24e>
    1366:	23 2d       	mov	r18, r3
    1368:	2f 7e       	andi	r18, 0xEF	; 239
    136a:	b2 2e       	mov	r11, r18
    136c:	2a e0       	ldi	r18, 0x0A	; 10
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	25 c0       	rjmp	.+74     	; 0x13bc <vfprintf+0x298>
    1372:	93 2d       	mov	r25, r3
    1374:	99 7f       	andi	r25, 0xF9	; 249
    1376:	b9 2e       	mov	r11, r25
    1378:	8f 36       	cpi	r24, 0x6F	; 111
    137a:	c1 f0       	breq	.+48     	; 0x13ac <vfprintf+0x288>
    137c:	18 f4       	brcc	.+6      	; 0x1384 <vfprintf+0x260>
    137e:	88 35       	cpi	r24, 0x58	; 88
    1380:	79 f0       	breq	.+30     	; 0x13a0 <vfprintf+0x27c>
    1382:	ae c0       	rjmp	.+348    	; 0x14e0 <vfprintf+0x3bc>
    1384:	80 37       	cpi	r24, 0x70	; 112
    1386:	19 f0       	breq	.+6      	; 0x138e <vfprintf+0x26a>
    1388:	88 37       	cpi	r24, 0x78	; 120
    138a:	21 f0       	breq	.+8      	; 0x1394 <vfprintf+0x270>
    138c:	a9 c0       	rjmp	.+338    	; 0x14e0 <vfprintf+0x3bc>
    138e:	e9 2f       	mov	r30, r25
    1390:	e0 61       	ori	r30, 0x10	; 16
    1392:	be 2e       	mov	r11, r30
    1394:	b4 fe       	sbrs	r11, 4
    1396:	0d c0       	rjmp	.+26     	; 0x13b2 <vfprintf+0x28e>
    1398:	fb 2d       	mov	r31, r11
    139a:	f4 60       	ori	r31, 0x04	; 4
    139c:	bf 2e       	mov	r11, r31
    139e:	09 c0       	rjmp	.+18     	; 0x13b2 <vfprintf+0x28e>
    13a0:	34 fe       	sbrs	r3, 4
    13a2:	0a c0       	rjmp	.+20     	; 0x13b8 <vfprintf+0x294>
    13a4:	29 2f       	mov	r18, r25
    13a6:	26 60       	ori	r18, 0x06	; 6
    13a8:	b2 2e       	mov	r11, r18
    13aa:	06 c0       	rjmp	.+12     	; 0x13b8 <vfprintf+0x294>
    13ac:	28 e0       	ldi	r18, 0x08	; 8
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	05 c0       	rjmp	.+10     	; 0x13bc <vfprintf+0x298>
    13b2:	20 e1       	ldi	r18, 0x10	; 16
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <vfprintf+0x298>
    13b8:	20 e1       	ldi	r18, 0x10	; 16
    13ba:	32 e0       	ldi	r19, 0x02	; 2
    13bc:	f8 01       	movw	r30, r16
    13be:	b7 fe       	sbrs	r11, 7
    13c0:	07 c0       	rjmp	.+14     	; 0x13d0 <vfprintf+0x2ac>
    13c2:	60 81       	ld	r22, Z
    13c4:	71 81       	ldd	r23, Z+1	; 0x01
    13c6:	82 81       	ldd	r24, Z+2	; 0x02
    13c8:	93 81       	ldd	r25, Z+3	; 0x03
    13ca:	0c 5f       	subi	r16, 0xFC	; 252
    13cc:	1f 4f       	sbci	r17, 0xFF	; 255
    13ce:	06 c0       	rjmp	.+12     	; 0x13dc <vfprintf+0x2b8>
    13d0:	60 81       	ld	r22, Z
    13d2:	71 81       	ldd	r23, Z+1	; 0x01
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 5f       	subi	r16, 0xFE	; 254
    13da:	1f 4f       	sbci	r17, 0xFF	; 255
    13dc:	a3 01       	movw	r20, r6
    13de:	f1 d0       	rcall	.+482    	; 0x15c2 <__ultoa_invert>
    13e0:	88 2e       	mov	r8, r24
    13e2:	86 18       	sub	r8, r6
    13e4:	fb 2d       	mov	r31, r11
    13e6:	ff 77       	andi	r31, 0x7F	; 127
    13e8:	3f 2e       	mov	r3, r31
    13ea:	36 fe       	sbrs	r3, 6
    13ec:	0d c0       	rjmp	.+26     	; 0x1408 <vfprintf+0x2e4>
    13ee:	23 2d       	mov	r18, r3
    13f0:	2e 7f       	andi	r18, 0xFE	; 254
    13f2:	a2 2e       	mov	r10, r18
    13f4:	89 14       	cp	r8, r9
    13f6:	58 f4       	brcc	.+22     	; 0x140e <vfprintf+0x2ea>
    13f8:	34 fe       	sbrs	r3, 4
    13fa:	0b c0       	rjmp	.+22     	; 0x1412 <vfprintf+0x2ee>
    13fc:	32 fc       	sbrc	r3, 2
    13fe:	09 c0       	rjmp	.+18     	; 0x1412 <vfprintf+0x2ee>
    1400:	83 2d       	mov	r24, r3
    1402:	8e 7e       	andi	r24, 0xEE	; 238
    1404:	a8 2e       	mov	r10, r24
    1406:	05 c0       	rjmp	.+10     	; 0x1412 <vfprintf+0x2ee>
    1408:	b8 2c       	mov	r11, r8
    140a:	a3 2c       	mov	r10, r3
    140c:	03 c0       	rjmp	.+6      	; 0x1414 <vfprintf+0x2f0>
    140e:	b8 2c       	mov	r11, r8
    1410:	01 c0       	rjmp	.+2      	; 0x1414 <vfprintf+0x2f0>
    1412:	b9 2c       	mov	r11, r9
    1414:	a4 fe       	sbrs	r10, 4
    1416:	0f c0       	rjmp	.+30     	; 0x1436 <vfprintf+0x312>
    1418:	fe 01       	movw	r30, r28
    141a:	e8 0d       	add	r30, r8
    141c:	f1 1d       	adc	r31, r1
    141e:	80 81       	ld	r24, Z
    1420:	80 33       	cpi	r24, 0x30	; 48
    1422:	21 f4       	brne	.+8      	; 0x142c <vfprintf+0x308>
    1424:	9a 2d       	mov	r25, r10
    1426:	99 7e       	andi	r25, 0xE9	; 233
    1428:	a9 2e       	mov	r10, r25
    142a:	09 c0       	rjmp	.+18     	; 0x143e <vfprintf+0x31a>
    142c:	a2 fe       	sbrs	r10, 2
    142e:	06 c0       	rjmp	.+12     	; 0x143c <vfprintf+0x318>
    1430:	b3 94       	inc	r11
    1432:	b3 94       	inc	r11
    1434:	04 c0       	rjmp	.+8      	; 0x143e <vfprintf+0x31a>
    1436:	8a 2d       	mov	r24, r10
    1438:	86 78       	andi	r24, 0x86	; 134
    143a:	09 f0       	breq	.+2      	; 0x143e <vfprintf+0x31a>
    143c:	b3 94       	inc	r11
    143e:	a3 fc       	sbrc	r10, 3
    1440:	10 c0       	rjmp	.+32     	; 0x1462 <vfprintf+0x33e>
    1442:	a0 fe       	sbrs	r10, 0
    1444:	06 c0       	rjmp	.+12     	; 0x1452 <vfprintf+0x32e>
    1446:	b2 14       	cp	r11, r2
    1448:	80 f4       	brcc	.+32     	; 0x146a <vfprintf+0x346>
    144a:	28 0c       	add	r2, r8
    144c:	92 2c       	mov	r9, r2
    144e:	9b 18       	sub	r9, r11
    1450:	0d c0       	rjmp	.+26     	; 0x146c <vfprintf+0x348>
    1452:	b2 14       	cp	r11, r2
    1454:	58 f4       	brcc	.+22     	; 0x146c <vfprintf+0x348>
    1456:	b6 01       	movw	r22, r12
    1458:	80 e2       	ldi	r24, 0x20	; 32
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	76 d0       	rcall	.+236    	; 0x154a <fputc>
    145e:	b3 94       	inc	r11
    1460:	f8 cf       	rjmp	.-16     	; 0x1452 <vfprintf+0x32e>
    1462:	b2 14       	cp	r11, r2
    1464:	18 f4       	brcc	.+6      	; 0x146c <vfprintf+0x348>
    1466:	2b 18       	sub	r2, r11
    1468:	02 c0       	rjmp	.+4      	; 0x146e <vfprintf+0x34a>
    146a:	98 2c       	mov	r9, r8
    146c:	21 2c       	mov	r2, r1
    146e:	a4 fe       	sbrs	r10, 4
    1470:	0f c0       	rjmp	.+30     	; 0x1490 <vfprintf+0x36c>
    1472:	b6 01       	movw	r22, r12
    1474:	80 e3       	ldi	r24, 0x30	; 48
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	68 d0       	rcall	.+208    	; 0x154a <fputc>
    147a:	a2 fe       	sbrs	r10, 2
    147c:	16 c0       	rjmp	.+44     	; 0x14aa <vfprintf+0x386>
    147e:	a1 fc       	sbrc	r10, 1
    1480:	03 c0       	rjmp	.+6      	; 0x1488 <vfprintf+0x364>
    1482:	88 e7       	ldi	r24, 0x78	; 120
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	02 c0       	rjmp	.+4      	; 0x148c <vfprintf+0x368>
    1488:	88 e5       	ldi	r24, 0x58	; 88
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	b6 01       	movw	r22, r12
    148e:	0c c0       	rjmp	.+24     	; 0x14a8 <vfprintf+0x384>
    1490:	8a 2d       	mov	r24, r10
    1492:	86 78       	andi	r24, 0x86	; 134
    1494:	51 f0       	breq	.+20     	; 0x14aa <vfprintf+0x386>
    1496:	a1 fe       	sbrs	r10, 1
    1498:	02 c0       	rjmp	.+4      	; 0x149e <vfprintf+0x37a>
    149a:	8b e2       	ldi	r24, 0x2B	; 43
    149c:	01 c0       	rjmp	.+2      	; 0x14a0 <vfprintf+0x37c>
    149e:	80 e2       	ldi	r24, 0x20	; 32
    14a0:	a7 fc       	sbrc	r10, 7
    14a2:	8d e2       	ldi	r24, 0x2D	; 45
    14a4:	b6 01       	movw	r22, r12
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	50 d0       	rcall	.+160    	; 0x154a <fputc>
    14aa:	89 14       	cp	r8, r9
    14ac:	30 f4       	brcc	.+12     	; 0x14ba <vfprintf+0x396>
    14ae:	b6 01       	movw	r22, r12
    14b0:	80 e3       	ldi	r24, 0x30	; 48
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	4a d0       	rcall	.+148    	; 0x154a <fputc>
    14b6:	9a 94       	dec	r9
    14b8:	f8 cf       	rjmp	.-16     	; 0x14aa <vfprintf+0x386>
    14ba:	8a 94       	dec	r8
    14bc:	f3 01       	movw	r30, r6
    14be:	e8 0d       	add	r30, r8
    14c0:	f1 1d       	adc	r31, r1
    14c2:	80 81       	ld	r24, Z
    14c4:	b6 01       	movw	r22, r12
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	40 d0       	rcall	.+128    	; 0x154a <fputc>
    14ca:	81 10       	cpse	r8, r1
    14cc:	f6 cf       	rjmp	.-20     	; 0x14ba <vfprintf+0x396>
    14ce:	22 20       	and	r2, r2
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <vfprintf+0x3b0>
    14d2:	4e ce       	rjmp	.-868    	; 0x1170 <vfprintf+0x4c>
    14d4:	b6 01       	movw	r22, r12
    14d6:	80 e2       	ldi	r24, 0x20	; 32
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	37 d0       	rcall	.+110    	; 0x154a <fputc>
    14dc:	2a 94       	dec	r2
    14de:	f7 cf       	rjmp	.-18     	; 0x14ce <vfprintf+0x3aa>
    14e0:	f6 01       	movw	r30, r12
    14e2:	86 81       	ldd	r24, Z+6	; 0x06
    14e4:	97 81       	ldd	r25, Z+7	; 0x07
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <vfprintf+0x3c8>
    14e8:	8f ef       	ldi	r24, 0xFF	; 255
    14ea:	9f ef       	ldi	r25, 0xFF	; 255
    14ec:	2b 96       	adiw	r28, 0x0b	; 11
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	1f 91       	pop	r17
    14fe:	0f 91       	pop	r16
    1500:	ff 90       	pop	r15
    1502:	ef 90       	pop	r14
    1504:	df 90       	pop	r13
    1506:	cf 90       	pop	r12
    1508:	bf 90       	pop	r11
    150a:	af 90       	pop	r10
    150c:	9f 90       	pop	r9
    150e:	8f 90       	pop	r8
    1510:	7f 90       	pop	r7
    1512:	6f 90       	pop	r6
    1514:	5f 90       	pop	r5
    1516:	4f 90       	pop	r4
    1518:	3f 90       	pop	r3
    151a:	2f 90       	pop	r2
    151c:	08 95       	ret

0000151e <strnlen_P>:
    151e:	fc 01       	movw	r30, r24
    1520:	05 90       	lpm	r0, Z+
    1522:	61 50       	subi	r22, 0x01	; 1
    1524:	70 40       	sbci	r23, 0x00	; 0
    1526:	01 10       	cpse	r0, r1
    1528:	d8 f7       	brcc	.-10     	; 0x1520 <strnlen_P+0x2>
    152a:	80 95       	com	r24
    152c:	90 95       	com	r25
    152e:	8e 0f       	add	r24, r30
    1530:	9f 1f       	adc	r25, r31
    1532:	08 95       	ret

00001534 <strnlen>:
    1534:	fc 01       	movw	r30, r24
    1536:	61 50       	subi	r22, 0x01	; 1
    1538:	70 40       	sbci	r23, 0x00	; 0
    153a:	01 90       	ld	r0, Z+
    153c:	01 10       	cpse	r0, r1
    153e:	d8 f7       	brcc	.-10     	; 0x1536 <strnlen+0x2>
    1540:	80 95       	com	r24
    1542:	90 95       	com	r25
    1544:	8e 0f       	add	r24, r30
    1546:	9f 1f       	adc	r25, r31
    1548:	08 95       	ret

0000154a <fputc>:
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	fb 01       	movw	r30, r22
    1554:	23 81       	ldd	r18, Z+3	; 0x03
    1556:	21 fd       	sbrc	r18, 1
    1558:	03 c0       	rjmp	.+6      	; 0x1560 <fputc+0x16>
    155a:	8f ef       	ldi	r24, 0xFF	; 255
    155c:	9f ef       	ldi	r25, 0xFF	; 255
    155e:	2c c0       	rjmp	.+88     	; 0x15b8 <fputc+0x6e>
    1560:	22 ff       	sbrs	r18, 2
    1562:	16 c0       	rjmp	.+44     	; 0x1590 <fputc+0x46>
    1564:	46 81       	ldd	r20, Z+6	; 0x06
    1566:	57 81       	ldd	r21, Z+7	; 0x07
    1568:	24 81       	ldd	r18, Z+4	; 0x04
    156a:	35 81       	ldd	r19, Z+5	; 0x05
    156c:	42 17       	cp	r20, r18
    156e:	53 07       	cpc	r21, r19
    1570:	44 f4       	brge	.+16     	; 0x1582 <fputc+0x38>
    1572:	a0 81       	ld	r26, Z
    1574:	b1 81       	ldd	r27, Z+1	; 0x01
    1576:	9d 01       	movw	r18, r26
    1578:	2f 5f       	subi	r18, 0xFF	; 255
    157a:	3f 4f       	sbci	r19, 0xFF	; 255
    157c:	31 83       	std	Z+1, r19	; 0x01
    157e:	20 83       	st	Z, r18
    1580:	8c 93       	st	X, r24
    1582:	26 81       	ldd	r18, Z+6	; 0x06
    1584:	37 81       	ldd	r19, Z+7	; 0x07
    1586:	2f 5f       	subi	r18, 0xFF	; 255
    1588:	3f 4f       	sbci	r19, 0xFF	; 255
    158a:	37 83       	std	Z+7, r19	; 0x07
    158c:	26 83       	std	Z+6, r18	; 0x06
    158e:	14 c0       	rjmp	.+40     	; 0x15b8 <fputc+0x6e>
    1590:	8b 01       	movw	r16, r22
    1592:	ec 01       	movw	r28, r24
    1594:	fb 01       	movw	r30, r22
    1596:	00 84       	ldd	r0, Z+8	; 0x08
    1598:	f1 85       	ldd	r31, Z+9	; 0x09
    159a:	e0 2d       	mov	r30, r0
    159c:	19 95       	eicall
    159e:	89 2b       	or	r24, r25
    15a0:	e1 f6       	brne	.-72     	; 0x155a <fputc+0x10>
    15a2:	d8 01       	movw	r26, r16
    15a4:	16 96       	adiw	r26, 0x06	; 6
    15a6:	8d 91       	ld	r24, X+
    15a8:	9c 91       	ld	r25, X
    15aa:	17 97       	sbiw	r26, 0x07	; 7
    15ac:	01 96       	adiw	r24, 0x01	; 1
    15ae:	17 96       	adiw	r26, 0x07	; 7
    15b0:	9c 93       	st	X, r25
    15b2:	8e 93       	st	-X, r24
    15b4:	16 97       	sbiw	r26, 0x06	; 6
    15b6:	ce 01       	movw	r24, r28
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	1f 91       	pop	r17
    15be:	0f 91       	pop	r16
    15c0:	08 95       	ret

000015c2 <__ultoa_invert>:
    15c2:	fa 01       	movw	r30, r20
    15c4:	aa 27       	eor	r26, r26
    15c6:	28 30       	cpi	r18, 0x08	; 8
    15c8:	51 f1       	breq	.+84     	; 0x161e <__ultoa_invert+0x5c>
    15ca:	20 31       	cpi	r18, 0x10	; 16
    15cc:	81 f1       	breq	.+96     	; 0x162e <__ultoa_invert+0x6c>
    15ce:	e8 94       	clt
    15d0:	6f 93       	push	r22
    15d2:	6e 7f       	andi	r22, 0xFE	; 254
    15d4:	6e 5f       	subi	r22, 0xFE	; 254
    15d6:	7f 4f       	sbci	r23, 0xFF	; 255
    15d8:	8f 4f       	sbci	r24, 0xFF	; 255
    15da:	9f 4f       	sbci	r25, 0xFF	; 255
    15dc:	af 4f       	sbci	r26, 0xFF	; 255
    15de:	b1 e0       	ldi	r27, 0x01	; 1
    15e0:	3e d0       	rcall	.+124    	; 0x165e <__ultoa_invert+0x9c>
    15e2:	b4 e0       	ldi	r27, 0x04	; 4
    15e4:	3c d0       	rcall	.+120    	; 0x165e <__ultoa_invert+0x9c>
    15e6:	67 0f       	add	r22, r23
    15e8:	78 1f       	adc	r23, r24
    15ea:	89 1f       	adc	r24, r25
    15ec:	9a 1f       	adc	r25, r26
    15ee:	a1 1d       	adc	r26, r1
    15f0:	68 0f       	add	r22, r24
    15f2:	79 1f       	adc	r23, r25
    15f4:	8a 1f       	adc	r24, r26
    15f6:	91 1d       	adc	r25, r1
    15f8:	a1 1d       	adc	r26, r1
    15fa:	6a 0f       	add	r22, r26
    15fc:	71 1d       	adc	r23, r1
    15fe:	81 1d       	adc	r24, r1
    1600:	91 1d       	adc	r25, r1
    1602:	a1 1d       	adc	r26, r1
    1604:	20 d0       	rcall	.+64     	; 0x1646 <__ultoa_invert+0x84>
    1606:	09 f4       	brne	.+2      	; 0x160a <__ultoa_invert+0x48>
    1608:	68 94       	set
    160a:	3f 91       	pop	r19
    160c:	2a e0       	ldi	r18, 0x0A	; 10
    160e:	26 9f       	mul	r18, r22
    1610:	11 24       	eor	r1, r1
    1612:	30 19       	sub	r19, r0
    1614:	30 5d       	subi	r19, 0xD0	; 208
    1616:	31 93       	st	Z+, r19
    1618:	de f6       	brtc	.-74     	; 0x15d0 <__ultoa_invert+0xe>
    161a:	cf 01       	movw	r24, r30
    161c:	08 95       	ret
    161e:	46 2f       	mov	r20, r22
    1620:	47 70       	andi	r20, 0x07	; 7
    1622:	40 5d       	subi	r20, 0xD0	; 208
    1624:	41 93       	st	Z+, r20
    1626:	b3 e0       	ldi	r27, 0x03	; 3
    1628:	0f d0       	rcall	.+30     	; 0x1648 <__ultoa_invert+0x86>
    162a:	c9 f7       	brne	.-14     	; 0x161e <__ultoa_invert+0x5c>
    162c:	f6 cf       	rjmp	.-20     	; 0x161a <__ultoa_invert+0x58>
    162e:	46 2f       	mov	r20, r22
    1630:	4f 70       	andi	r20, 0x0F	; 15
    1632:	40 5d       	subi	r20, 0xD0	; 208
    1634:	4a 33       	cpi	r20, 0x3A	; 58
    1636:	18 f0       	brcs	.+6      	; 0x163e <__ultoa_invert+0x7c>
    1638:	49 5d       	subi	r20, 0xD9	; 217
    163a:	31 fd       	sbrc	r19, 1
    163c:	40 52       	subi	r20, 0x20	; 32
    163e:	41 93       	st	Z+, r20
    1640:	02 d0       	rcall	.+4      	; 0x1646 <__ultoa_invert+0x84>
    1642:	a9 f7       	brne	.-22     	; 0x162e <__ultoa_invert+0x6c>
    1644:	ea cf       	rjmp	.-44     	; 0x161a <__ultoa_invert+0x58>
    1646:	b4 e0       	ldi	r27, 0x04	; 4
    1648:	a6 95       	lsr	r26
    164a:	97 95       	ror	r25
    164c:	87 95       	ror	r24
    164e:	77 95       	ror	r23
    1650:	67 95       	ror	r22
    1652:	ba 95       	dec	r27
    1654:	c9 f7       	brne	.-14     	; 0x1648 <__ultoa_invert+0x86>
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	61 05       	cpc	r22, r1
    165a:	71 05       	cpc	r23, r1
    165c:	08 95       	ret
    165e:	9b 01       	movw	r18, r22
    1660:	ac 01       	movw	r20, r24
    1662:	0a 2e       	mov	r0, r26
    1664:	06 94       	lsr	r0
    1666:	57 95       	ror	r21
    1668:	47 95       	ror	r20
    166a:	37 95       	ror	r19
    166c:	27 95       	ror	r18
    166e:	ba 95       	dec	r27
    1670:	c9 f7       	brne	.-14     	; 0x1664 <__ultoa_invert+0xa2>
    1672:	62 0f       	add	r22, r18
    1674:	73 1f       	adc	r23, r19
    1676:	84 1f       	adc	r24, r20
    1678:	95 1f       	adc	r25, r21
    167a:	a0 1d       	adc	r26, r0
    167c:	08 95       	ret

0000167e <_exit>:
    167e:	f8 94       	cli

00001680 <__stop_program>:
    1680:	ff cf       	rjmp	.-2      	; 0x1680 <__stop_program>
