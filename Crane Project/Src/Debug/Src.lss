
Src.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f0  00800200  00001cf8  00001d8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cf8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000142  008002f0  008002f0  00001e7c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ed8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00001f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002460  00000000  00000000  000020f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000139d  00000000  00000000  00004550  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001399  00000000  00000000  000058ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000548  00000000  00000000  00006c88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b5e  00000000  00000000  000071d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014c7  00000000  00000000  00007d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  000091f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b2 c3       	rjmp	.+1892   	; 0x7c2 <__vector_23>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	1d c4       	rjmp	.+2106   	; 0x8a0 <__vector_25>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	8a c0       	rjmp	.+276    	; 0x18a <__vector_29>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	46 c4       	rjmp	.+2188   	; 0x91e <__vector_36>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 ef       	ldi	r30, 0xF8	; 248
      fc:	fc e1       	ldi	r31, 0x1C	; 28
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 3f       	cpi	r26, 0xF0	; 240
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	24 e0       	ldi	r18, 0x04	; 4
     110:	a0 ef       	ldi	r26, 0xF0	; 240
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a2 33       	cpi	r26, 0x32	; 50
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	24 d5       	rcall	.+2632   	; 0xb68 <main>
     120:	0c 94 7a 0e 	jmp	0x1cf4	; 0x1cf4 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <ADC_init>:
     126:	83 e8       	ldi	r24, 0x83	; 131
     128:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
     12c:	80 e4       	ldi	r24, 0x40	; 64
     12e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
     132:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
     136:	08 95       	ret

00000138 <ADC_getTenBitValue>:
     138:	ec e7       	ldi	r30, 0x7C	; 124
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	20 81       	ld	r18, Z
     13e:	20 7e       	andi	r18, 0xE0	; 224
     140:	28 2b       	or	r18, r24
     142:	20 83       	st	Z, r18
     144:	eb e7       	ldi	r30, 0x7B	; 123
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	20 81       	ld	r18, Z
     14a:	96 95       	lsr	r25
     14c:	87 95       	ror	r24
     14e:	96 95       	lsr	r25
     150:	87 95       	ror	r24
     152:	92 2f       	mov	r25, r18
     154:	97 7f       	andi	r25, 0xF7	; 247
     156:	89 2b       	or	r24, r25
     158:	80 83       	st	Z, r24
     15a:	ea e7       	ldi	r30, 0x7A	; 122
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	80 64       	ori	r24, 0x40	; 64
     162:	80 83       	st	Z, r24
     164:	80 81       	ld	r24, Z
     166:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     16a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
     16e:	60 e0       	ldi	r22, 0x00	; 0
     170:	79 2f       	mov	r23, r25
     172:	68 2b       	or	r22, r24
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__floatunsisf>
     17c:	20 e0       	ldi	r18, 0x00	; 0
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	40 e8       	ldi	r20, 0x80	; 128
     182:	5a e3       	ldi	r21, 0x3A	; 58
     184:	0c 94 0b 0b 	jmp	0x1616	; 0x1616 <__mulsf3>
     188:	08 95       	ret

0000018a <__vector_29>:
     18a:	1f 92       	push	r1
     18c:	0f 92       	push	r0
     18e:	0f b6       	in	r0, 0x3f	; 63
     190:	0f 92       	push	r0
     192:	11 24       	eor	r1, r1
     194:	0b b6       	in	r0, 0x3b	; 59
     196:	0f 92       	push	r0
     198:	2f 93       	push	r18
     19a:	3f 93       	push	r19
     19c:	4f 93       	push	r20
     19e:	5f 93       	push	r21
     1a0:	6f 93       	push	r22
     1a2:	7f 93       	push	r23
     1a4:	8f 93       	push	r24
     1a6:	9f 93       	push	r25
     1a8:	af 93       	push	r26
     1aa:	bf 93       	push	r27
     1ac:	ef 93       	push	r30
     1ae:	ff 93       	push	r31
     1b0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     1b4:	28 2f       	mov	r18, r24
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	30 93 f3 02 	sts	0x02F3, r19	; 0x8002f3 <readInterrupt+0x1>
     1bc:	20 93 f2 02 	sts	0x02F2, r18	; 0x8002f2 <readInterrupt>
     1c0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	98 2f       	mov	r25, r24
     1c8:	88 27       	eor	r24, r24
     1ca:	82 2b       	or	r24, r18
     1cc:	93 2b       	or	r25, r19
     1ce:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <readInterrupt+0x1>
     1d2:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <readInterrupt>
     1d6:	e0 91 f0 02 	lds	r30, 0x02F0	; 0x8002f0 <__data_end>
     1da:	f0 91 f1 02 	lds	r31, 0x02F1	; 0x8002f1 <__data_end+0x1>
     1de:	19 95       	eicall
     1e0:	ff 91       	pop	r31
     1e2:	ef 91       	pop	r30
     1e4:	bf 91       	pop	r27
     1e6:	af 91       	pop	r26
     1e8:	9f 91       	pop	r25
     1ea:	8f 91       	pop	r24
     1ec:	7f 91       	pop	r23
     1ee:	6f 91       	pop	r22
     1f0:	5f 91       	pop	r21
     1f2:	4f 91       	pop	r20
     1f4:	3f 91       	pop	r19
     1f6:	2f 91       	pop	r18
     1f8:	0f 90       	pop	r0
     1fa:	0b be       	out	0x3b, r0	; 59
     1fc:	0f 90       	pop	r0
     1fe:	0f be       	out	0x3f, r0	; 63
     200:	0f 90       	pop	r0
     202:	1f 90       	pop	r1
     204:	18 95       	reti

00000206 <SM_init>:
// instance pointer to the motor port
static uint8_t * sMotorPort;

/* NOTE: Function implementations */
void SM_init(uint8_t volatile * const pRegister, uint8_t volatile * const pPort)
{
     206:	fc 01       	movw	r30, r24
    // configure port register
    *pRegister |= 0x0f;
     208:	90 81       	ld	r25, Z
     20a:	9f 60       	ori	r25, 0x0F	; 15
     20c:	90 83       	st	Z, r25

    // turn on pullup resisitors on the bottom nibble
    *pPort = (*pPort & 0xf0) | 0x00;
     20e:	fb 01       	movw	r30, r22
     210:	80 81       	ld	r24, Z
     212:	80 7f       	andi	r24, 0xF0	; 240
     214:	80 83       	st	Z, r24

    // save the port pointer to the static var
    sMotorPort = (uint8_t *)pPort;
     216:	70 93 f5 02 	sts	0x02F5, r23	; 0x8002f5 <sMotorPort+0x1>
     21a:	60 93 f4 02 	sts	0x02F4, r22	; 0x8002f4 <sMotorPort>
     21e:	08 95       	ret

00000220 <getModeAndSteps>:
    *sMotorPort = *sMotorPort & 0xf0;
}

/* NOTE: Local function implementations */
StepperMotorModeData_t getModeAndSteps(StepperMotorRunMode_t mode, double rotation)
{
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
     228:	27 97       	sbiw	r28, 0x07	; 7
     22a:	0f b6       	in	r0, 0x3f	; 63
     22c:	f8 94       	cli
     22e:	de bf       	out	0x3e, r29	; 62
     230:	0f be       	out	0x3f, r0	; 63
     232:	cd bf       	out	0x3d, r28	; 61
     234:	28 2f       	mov	r18, r24
     236:	cb 01       	movw	r24, r22
     238:	ba 01       	movw	r22, r20
    uint8_t * pArray;
    uint8_t   size  = 0;
    uint32_t  steps = 0;

    switch(mode)
     23a:	21 30       	cpi	r18, 0x01	; 1
     23c:	81 f0       	breq	.+32     	; 0x25e <getModeAndSteps+0x3e>
     23e:	18 f0       	brcs	.+6      	; 0x246 <getModeAndSteps+0x26>
     240:	22 30       	cpi	r18, 0x02	; 2
     242:	c9 f0       	breq	.+50     	; 0x276 <getModeAndSteps+0x56>
     244:	24 c0       	rjmp	.+72     	; 0x28e <getModeAndSteps+0x6e>
    {
        case stepperModeWave:
        {
            pArray = sWaveStepMap;
            size   = sizeof(sWaveStepMap) / sizeof(sWaveStepMap[0]);
            steps  = (rotation * 2048);
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	40 e0       	ldi	r20, 0x00	; 0
     24c:	55 e4       	ldi	r21, 0x45	; 69
     24e:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
     252:	0e 94 29 0a 	call	0x1452	; 0x1452 <__fixunssfsi>
    switch(mode)
    {
        case stepperModeWave:
        {
            pArray = sWaveStepMap;
            size   = sizeof(sWaveStepMap) / sizeof(sWaveStepMap[0]);
     256:	24 e0       	ldi	r18, 0x04	; 4

    switch(mode)
    {
        case stepperModeWave:
        {
            pArray = sWaveStepMap;
     258:	ec e0       	ldi	r30, 0x0C	; 12
     25a:	f2 e0       	ldi	r31, 0x02	; 2
            size   = sizeof(sWaveStepMap) / sizeof(sWaveStepMap[0]);
            steps  = (rotation * 2048);
        }
        break;
     25c:	1d c0       	rjmp	.+58     	; 0x298 <getModeAndSteps+0x78>
        case stepperModeFull:
        {
            pArray = sFullStepMap;
            size   = sizeof(sFullStepMap) / sizeof(sFullStepMap[0]);
            steps  = (rotation * 2048);
     25e:	20 e0       	ldi	r18, 0x00	; 0
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	40 e0       	ldi	r20, 0x00	; 0
     264:	55 e4       	ldi	r21, 0x45	; 69
     266:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
     26a:	0e 94 29 0a 	call	0x1452	; 0x1452 <__fixunssfsi>
        }
        break;
        case stepperModeFull:
        {
            pArray = sFullStepMap;
            size   = sizeof(sFullStepMap) / sizeof(sFullStepMap[0]);
     26e:	24 e0       	ldi	r18, 0x04	; 4
            steps  = (rotation * 2048);
        }
        break;
        case stepperModeFull:
        {
            pArray = sFullStepMap;
     270:	e8 e0       	ldi	r30, 0x08	; 8
     272:	f2 e0       	ldi	r31, 0x02	; 2
            size   = sizeof(sFullStepMap) / sizeof(sFullStepMap[0]);
            steps  = (rotation * 2048);
        }
        break;
     274:	11 c0       	rjmp	.+34     	; 0x298 <getModeAndSteps+0x78>
        case stepperModeHalf:
        {
            pArray = sHalfStepMap;
            size   = sizeof(sHalfStepMap) / sizeof(sHalfStepMap[0]);
            steps  = (rotation * 4096);
     276:	20 e0       	ldi	r18, 0x00	; 0
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	40 e8       	ldi	r20, 0x80	; 128
     27c:	55 e4       	ldi	r21, 0x45	; 69
     27e:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
     282:	0e 94 29 0a 	call	0x1452	; 0x1452 <__fixunssfsi>
        }
        break;
        case stepperModeHalf:
        {
            pArray = sHalfStepMap;
            size   = sizeof(sHalfStepMap) / sizeof(sHalfStepMap[0]);
     286:	28 e0       	ldi	r18, 0x08	; 8
            steps  = (rotation * 2048);
        }
        break;
        case stepperModeHalf:
        {
            pArray = sHalfStepMap;
     288:	e0 e0       	ldi	r30, 0x00	; 0
     28a:	f2 e0       	ldi	r31, 0x02	; 2
            size   = sizeof(sHalfStepMap) / sizeof(sHalfStepMap[0]);
            steps  = (rotation * 4096);
        }
        break;
     28c:	05 c0       	rjmp	.+10     	; 0x298 <getModeAndSteps+0x78>
/* NOTE: Local function implementations */
StepperMotorModeData_t getModeAndSteps(StepperMotorRunMode_t mode, double rotation)
{
    uint8_t * pArray;
    uint8_t   size  = 0;
    uint32_t  steps = 0;
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	90 e0       	ldi	r25, 0x00	; 0

/* NOTE: Local function implementations */
StepperMotorModeData_t getModeAndSteps(StepperMotorRunMode_t mode, double rotation)
{
    uint8_t * pArray;
    uint8_t   size  = 0;
     296:	20 e0       	ldi	r18, 0x00	; 0
        break;
        default:
            break;
    };

    return (StepperMotorModeData_t){
     298:	fb 83       	std	Y+3, r31	; 0x03
     29a:	ea 83       	std	Y+2, r30	; 0x02
     29c:	3e 2f       	mov	r19, r30
     29e:	4b 81       	ldd	r20, Y+3	; 0x03
     2a0:	56 2f       	mov	r21, r22
     2a2:	67 2f       	mov	r22, r23
     2a4:	78 2f       	mov	r23, r24
        .pArray    = pArray,
        .steps     = steps,
        .arraySize = size,
    };
     2a6:	89 2f       	mov	r24, r25
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	27 96       	adiw	r28, 0x07	; 7
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	f8 94       	cli
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	cd bf       	out	0x3d, r28	; 61
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	08 95       	ret

000002bc <SM_move>:
    // save the port pointer to the static var
    sMotorPort = (uint8_t *)pPort;
}

void SM_move(StepperMotorRunMode_t mode, double distance)
{
     2bc:	cf 92       	push	r12
     2be:	df 92       	push	r13
     2c0:	ef 92       	push	r14
     2c2:	ff 92       	push	r15
     2c4:	0f 93       	push	r16
     2c6:	1f 93       	push	r17
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	cd b7       	in	r28, 0x3d	; 61
     2ce:	de b7       	in	r29, 0x3e	; 62
     2d0:	27 97       	sbiw	r28, 0x07	; 7
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	f8 94       	cli
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	0f be       	out	0x3f, r0	; 63
     2da:	cd bf       	out	0x3d, r28	; 61
    StepperMotorModeData_t data = getModeAndSteps(mode, distance);
     2dc:	a1 df       	rcall	.-190    	; 0x220 <getModeAndSteps>
     2de:	29 83       	std	Y+1, r18	; 0x01
     2e0:	3a 83       	std	Y+2, r19	; 0x02
     2e2:	4b 83       	std	Y+3, r20	; 0x03
     2e4:	5c 83       	std	Y+4, r21	; 0x04
     2e6:	6d 83       	std	Y+5, r22	; 0x05
     2e8:	7e 83       	std	Y+6, r23	; 0x06
     2ea:	8f 83       	std	Y+7, r24	; 0x07

    for(uint32_t i = 0, j = 0; i < data.steps; i++)
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	dc 01       	movw	r26, r24
     2f2:	40 e0       	ldi	r20, 0x00	; 0
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	ba 01       	movw	r22, r20
     2f8:	2d c0       	rjmp	.+90     	; 0x354 <SM_move+0x98>
    {
        *sMotorPort = (*sMotorPort & 0xf0) | data.pArray[j++];
     2fa:	e0 91 f4 02 	lds	r30, 0x02F4	; 0x8002f4 <sMotorPort>
     2fe:	f0 91 f5 02 	lds	r31, 0x02F5	; 0x8002f5 <sMotorPort+0x1>
     302:	10 81       	ld	r17, Z
     304:	2a 81       	ldd	r18, Y+2	; 0x02
     306:	3b 81       	ldd	r19, Y+3	; 0x03
     308:	6c 01       	movw	r12, r24
     30a:	7d 01       	movw	r14, r26
     30c:	0f ef       	ldi	r16, 0xFF	; 255
     30e:	c0 1a       	sub	r12, r16
     310:	d0 0a       	sbc	r13, r16
     312:	e0 0a       	sbc	r14, r16
     314:	f0 0a       	sbc	r15, r16
     316:	d9 01       	movw	r26, r18
     318:	a8 0f       	add	r26, r24
     31a:	b9 1f       	adc	r27, r25
     31c:	9c 91       	ld	r25, X
     31e:	81 2f       	mov	r24, r17
     320:	80 7f       	andi	r24, 0xF0	; 240
     322:	89 2b       	or	r24, r25
     324:	80 83       	st	Z, r24

        if(j >= data.arraySize)
     326:	89 81       	ldd	r24, Y+1	; 0x01
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	a0 e0       	ldi	r26, 0x00	; 0
     32c:	b0 e0       	ldi	r27, 0x00	; 0
     32e:	c8 16       	cp	r12, r24
     330:	d9 06       	cpc	r13, r25
     332:	ea 06       	cpc	r14, r26
     334:	fb 06       	cpc	r15, r27
     336:	18 f4       	brcc	.+6      	; 0x33e <SM_move+0x82>
{
    StepperMotorModeData_t data = getModeAndSteps(mode, distance);

    for(uint32_t i = 0, j = 0; i < data.steps; i++)
    {
        *sMotorPort = (*sMotorPort & 0xf0) | data.pArray[j++];
     338:	d7 01       	movw	r26, r14
     33a:	c6 01       	movw	r24, r12
     33c:	03 c0       	rjmp	.+6      	; 0x344 <SM_move+0x88>

        if(j >= data.arraySize)
        {
            j = 0;
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	dc 01       	movw	r26, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     344:	e0 ee       	ldi	r30, 0xE0	; 224
     346:	fe e2       	ldi	r31, 0x2E	; 46
     348:	31 97       	sbiw	r30, 0x01	; 1
     34a:	f1 f7       	brne	.-4      	; 0x348 <SM_move+0x8c>

void SM_move(StepperMotorRunMode_t mode, double distance)
{
    StepperMotorModeData_t data = getModeAndSteps(mode, distance);

    for(uint32_t i = 0, j = 0; i < data.steps; i++)
     34c:	4f 5f       	subi	r20, 0xFF	; 255
     34e:	5f 4f       	sbci	r21, 0xFF	; 255
     350:	6f 4f       	sbci	r22, 0xFF	; 255
     352:	7f 4f       	sbci	r23, 0xFF	; 255
     354:	cc 80       	ldd	r12, Y+4	; 0x04
     356:	dd 80       	ldd	r13, Y+5	; 0x05
     358:	ee 80       	ldd	r14, Y+6	; 0x06
     35a:	ff 80       	ldd	r15, Y+7	; 0x07
     35c:	4c 15       	cp	r20, r12
     35e:	5d 05       	cpc	r21, r13
     360:	6e 05       	cpc	r22, r14
     362:	7f 05       	cpc	r23, r15
     364:	50 f2       	brcs	.-108    	; 0x2fa <SM_move+0x3e>
        }

        _delay_ms(3);
    }

    *sMotorPort = *sMotorPort & 0xf0;
     366:	e0 91 f4 02 	lds	r30, 0x02F4	; 0x8002f4 <sMotorPort>
     36a:	f0 91 f5 02 	lds	r31, 0x02F5	; 0x8002f5 <sMotorPort+0x1>
     36e:	80 81       	ld	r24, Z
     370:	80 7f       	andi	r24, 0xF0	; 240
     372:	80 83       	st	Z, r24
}
     374:	27 96       	adiw	r28, 0x07	; 7
     376:	0f b6       	in	r0, 0x3f	; 63
     378:	f8 94       	cli
     37a:	de bf       	out	0x3e, r29	; 62
     37c:	0f be       	out	0x3f, r0	; 63
     37e:	cd bf       	out	0x3d, r28	; 61
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	df 90       	pop	r13
     38e:	cf 90       	pop	r12
     390:	08 95       	ret

00000392 <SM_movePosition>:

void SM_movePosition(StepperMotorRunMode_t mode, uint16_t distance)
{
     392:	cf 93       	push	r28
     394:	c8 2f       	mov	r28, r24
    SM_move(mode, ((double)distance / 360));
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__floatunsisf>
     39e:	20 e0       	ldi	r18, 0x00	; 0
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	44 eb       	ldi	r20, 0xB4	; 180
     3a4:	53 e4       	ldi	r21, 0x43	; 67
     3a6:	ed d7       	rcall	.+4058   	; 0x1382 <__divsf3>
     3a8:	ab 01       	movw	r20, r22
     3aa:	bc 01       	movw	r22, r24
     3ac:	8c 2f       	mov	r24, r28
     3ae:	86 df       	rcall	.-244    	; 0x2bc <SM_move>
}
     3b0:	cf 91       	pop	r28
     3b2:	08 95       	ret

000003b4 <SM_moveTime>:

void SM_moveTime(StepperMotorRunMode_t mode, bool direction, double time, double stepTime)
{
     3b4:	3f 92       	push	r3
     3b6:	4f 92       	push	r4
     3b8:	5f 92       	push	r5
     3ba:	6f 92       	push	r6
     3bc:	7f 92       	push	r7
     3be:	8f 92       	push	r8
     3c0:	9f 92       	push	r9
     3c2:	af 92       	push	r10
     3c4:	bf 92       	push	r11
     3c6:	cf 92       	push	r12
     3c8:	df 92       	push	r13
     3ca:	ef 92       	push	r14
     3cc:	ff 92       	push	r15
     3ce:	0f 93       	push	r16
     3d0:	1f 93       	push	r17
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
     3da:	2f 97       	sbiw	r28, 0x0f	; 15
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	cd bf       	out	0x3d, r28	; 61
     3e6:	36 2e       	mov	r3, r22
     3e8:	2c 87       	std	Y+12, r18	; 0x0c
     3ea:	3d 87       	std	Y+13, r19	; 0x0d
     3ec:	4e 87       	std	Y+14, r20	; 0x0e
     3ee:	5f 87       	std	Y+15, r21	; 0x0f
     3f0:	e8 86       	std	Y+8, r14	; 0x08
     3f2:	f9 86       	std	Y+9, r15	; 0x09
     3f4:	0a 87       	std	Y+10, r16	; 0x0a
     3f6:	1b 87       	std	Y+11, r17	; 0x0b
    StepperMotorModeData_t data = getModeAndSteps(mode, 0);
     3f8:	40 e0       	ldi	r20, 0x00	; 0
     3fa:	50 e0       	ldi	r21, 0x00	; 0
     3fc:	ba 01       	movw	r22, r20
     3fe:	10 df       	rcall	.-480    	; 0x220 <getModeAndSteps>
     400:	29 83       	std	Y+1, r18	; 0x01
     402:	3a 83       	std	Y+2, r19	; 0x02
     404:	4b 83       	std	Y+3, r20	; 0x03
     406:	5c 83       	std	Y+4, r21	; 0x04
     408:	6d 83       	std	Y+5, r22	; 0x05
     40a:	7e 83       	std	Y+6, r23	; 0x06
     40c:	8f 83       	std	Y+7, r24	; 0x07

    for(uint32_t i = 0, j = (direction ? data.arraySize : 0); i < (time / stepTime); i++)
     40e:	33 20       	and	r3, r3
     410:	29 f0       	breq	.+10     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     412:	c2 2e       	mov	r12, r18
     414:	d1 2c       	mov	r13, r1
     416:	e1 2c       	mov	r14, r1
     418:	f1 2c       	mov	r15, r1
     41a:	03 c0       	rjmp	.+6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     41c:	c1 2c       	mov	r12, r1
     41e:	d1 2c       	mov	r13, r1
     420:	76 01       	movw	r14, r12

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     422:	81 2c       	mov	r8, r1
     424:	91 2c       	mov	r9, r1
     426:	54 01       	movw	r10, r8
     428:	74 c0       	rjmp	.+232    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
    {
        *sMotorPort = (*sMotorPort & 0xf0) | data.pArray[(direction ? j-- : j++)];
     42a:	e0 91 f4 02 	lds	r30, 0x02F4	; 0x8002f4 <sMotorPort>
     42e:	f0 91 f5 02 	lds	r31, 0x02F5	; 0x8002f5 <sMotorPort+0x1>
     432:	80 81       	ld	r24, Z
     434:	80 7f       	andi	r24, 0xF0	; 240
     436:	2a 81       	ldd	r18, Y+2	; 0x02
     438:	3b 81       	ldd	r19, Y+3	; 0x03
     43a:	33 20       	and	r3, r3
     43c:	39 f0       	breq	.+14     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     43e:	b7 01       	movw	r22, r14
     440:	a6 01       	movw	r20, r12
     442:	41 50       	subi	r20, 0x01	; 1
     444:	51 09       	sbc	r21, r1
     446:	61 09       	sbc	r22, r1
     448:	71 09       	sbc	r23, r1
     44a:	06 c0       	rjmp	.+12     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     44c:	b7 01       	movw	r22, r14
     44e:	a6 01       	movw	r20, r12
     450:	4f 5f       	subi	r20, 0xFF	; 255
     452:	5f 4f       	sbci	r21, 0xFF	; 255
     454:	6f 4f       	sbci	r22, 0xFF	; 255
     456:	7f 4f       	sbci	r23, 0xFF	; 255
     458:	d9 01       	movw	r26, r18
     45a:	ac 0d       	add	r26, r12
     45c:	bd 1d       	adc	r27, r13
     45e:	9c 91       	ld	r25, X
     460:	89 2b       	or	r24, r25
     462:	80 83       	st	Z, r24

        if(j >= data.arraySize || j <= 0)
     464:	c9 80       	ldd	r12, Y+1	; 0x01
     466:	d1 2c       	mov	r13, r1
     468:	e1 2c       	mov	r14, r1
     46a:	f1 2c       	mov	r15, r1
     46c:	4c 15       	cp	r20, r12
     46e:	5d 05       	cpc	r21, r13
     470:	6e 05       	cpc	r22, r14
     472:	7f 05       	cpc	r23, r15
     474:	28 f4       	brcc	.+10     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     476:	41 15       	cp	r20, r1
     478:	51 05       	cpc	r21, r1
     47a:	61 05       	cpc	r22, r1
     47c:	71 05       	cpc	r23, r1
     47e:	31 f4       	brne	.+12     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
        {
            j = (direction ? data.arraySize : 0);
     480:	31 10       	cpse	r3, r1
     482:	06 c0       	rjmp	.+12     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     484:	c1 2c       	mov	r12, r1
     486:	d1 2c       	mov	r13, r1
     488:	76 01       	movw	r14, r12
     48a:	02 c0       	rjmp	.+4      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     48c:	6a 01       	movw	r12, r20
     48e:	7b 01       	movw	r14, r22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     490:	20 e0       	ldi	r18, 0x00	; 0
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	4a e7       	ldi	r20, 0x7A	; 122
     496:	55 e4       	ldi	r21, 0x45	; 69
     498:	68 85       	ldd	r22, Y+8	; 0x08
     49a:	79 85       	ldd	r23, Y+9	; 0x09
     49c:	8a 85       	ldd	r24, Y+10	; 0x0a
     49e:	9b 85       	ldd	r25, Y+11	; 0x0b
     4a0:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
     4a4:	2b 01       	movw	r4, r22
     4a6:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	40 e8       	ldi	r20, 0x80	; 128
     4ae:	5f e3       	ldi	r21, 0x3F	; 63
     4b0:	64 d7       	rcall	.+3784   	; 0x137a <__cmpsf2>
     4b2:	88 23       	and	r24, r24
     4b4:	24 f1       	brlt	.+72     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
		__ticks = 1;
	else if (__tmp > 65535)
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	3f ef       	ldi	r19, 0xFF	; 255
     4ba:	4f e7       	ldi	r20, 0x7F	; 127
     4bc:	57 e4       	ldi	r21, 0x47	; 71
     4be:	c3 01       	movw	r24, r6
     4c0:	b2 01       	movw	r22, r4
     4c2:	0e 94 07 0b 	call	0x160e	; 0x160e <__gesf2>
     4c6:	18 16       	cp	r1, r24
     4c8:	b4 f4       	brge	.+44     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	40 e2       	ldi	r20, 0x20	; 32
     4d0:	51 e4       	ldi	r21, 0x41	; 65
     4d2:	68 85       	ldd	r22, Y+8	; 0x08
     4d4:	79 85       	ldd	r23, Y+9	; 0x09
     4d6:	8a 85       	ldd	r24, Y+10	; 0x0a
     4d8:	9b 85       	ldd	r25, Y+11	; 0x0b
     4da:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
     4de:	b9 d7       	rcall	.+3954   	; 0x1452 <__fixunssfsi>
     4e0:	06 c0       	rjmp	.+12     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4e2:	80 e9       	ldi	r24, 0x90	; 144
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	01 97       	sbiw	r24, 0x01	; 1
     4e8:	f1 f7       	brne	.-4      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4ea:	61 50       	subi	r22, 0x01	; 1
     4ec:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ee:	61 15       	cp	r22, r1
     4f0:	71 05       	cpc	r23, r1
     4f2:	b9 f7       	brne	.-18     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4f4:	09 c0       	rjmp	.+18     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     4f6:	c3 01       	movw	r24, r6
     4f8:	b2 01       	movw	r22, r4
     4fa:	ab d7       	rcall	.+3926   	; 0x1452 <__fixunssfsi>
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     4fe:	61 e0       	ldi	r22, 0x01	; 1
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	cb 01       	movw	r24, r22
     504:	01 97       	sbiw	r24, 0x01	; 1
     506:	f1 f7       	brne	.-4      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>

void SM_moveTime(StepperMotorRunMode_t mode, bool direction, double time, double stepTime)
{
    StepperMotorModeData_t data = getModeAndSteps(mode, 0);

    for(uint32_t i = 0, j = (direction ? data.arraySize : 0); i < (time / stepTime); i++)
     508:	8f ef       	ldi	r24, 0xFF	; 255
     50a:	88 1a       	sub	r8, r24
     50c:	98 0a       	sbc	r9, r24
     50e:	a8 0a       	sbc	r10, r24
     510:	b8 0a       	sbc	r11, r24
     512:	c5 01       	movw	r24, r10
     514:	b4 01       	movw	r22, r8
     516:	c9 d7       	rcall	.+3986   	; 0x14aa <__floatunsisf>
     518:	2b 01       	movw	r4, r22
     51a:	3c 01       	movw	r6, r24
     51c:	28 85       	ldd	r18, Y+8	; 0x08
     51e:	39 85       	ldd	r19, Y+9	; 0x09
     520:	4a 85       	ldd	r20, Y+10	; 0x0a
     522:	5b 85       	ldd	r21, Y+11	; 0x0b
     524:	6c 85       	ldd	r22, Y+12	; 0x0c
     526:	7d 85       	ldd	r23, Y+13	; 0x0d
     528:	8e 85       	ldd	r24, Y+14	; 0x0e
     52a:	9f 85       	ldd	r25, Y+15	; 0x0f
     52c:	2a d7       	rcall	.+3668   	; 0x1382 <__divsf3>
     52e:	9b 01       	movw	r18, r22
     530:	ac 01       	movw	r20, r24
     532:	c3 01       	movw	r24, r6
     534:	b2 01       	movw	r22, r4
     536:	21 d7       	rcall	.+3650   	; 0x137a <__cmpsf2>
     538:	88 23       	and	r24, r24
     53a:	0c f4       	brge	.+2      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     53c:	76 cf       	rjmp	.-276    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
        }

        _delay_ms(stepTime);
    }

    *sMotorPort = *sMotorPort & 0xf0;
     53e:	e0 91 f4 02 	lds	r30, 0x02F4	; 0x8002f4 <sMotorPort>
     542:	f0 91 f5 02 	lds	r31, 0x02F5	; 0x8002f5 <sMotorPort+0x1>
     546:	80 81       	ld	r24, Z
     548:	80 7f       	andi	r24, 0xF0	; 240
     54a:	80 83       	st	Z, r24
}
     54c:	2f 96       	adiw	r28, 0x0f	; 15
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	f8 94       	cli
     552:	de bf       	out	0x3e, r29	; 62
     554:	0f be       	out	0x3f, r0	; 63
     556:	cd bf       	out	0x3d, r28	; 61
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	1f 91       	pop	r17
     55e:	0f 91       	pop	r16
     560:	ff 90       	pop	r15
     562:	ef 90       	pop	r14
     564:	df 90       	pop	r13
     566:	cf 90       	pop	r12
     568:	bf 90       	pop	r11
     56a:	af 90       	pop	r10
     56c:	9f 90       	pop	r9
     56e:	8f 90       	pop	r8
     570:	7f 90       	pop	r7
     572:	6f 90       	pop	r6
     574:	5f 90       	pop	r5
     576:	4f 90       	pop	r4
     578:	3f 90       	pop	r3
     57a:	08 95       	ret

0000057c <SM_moveStepsSigned>:

void SM_moveStepsSigned(StepperMotorRunMode_t mode, bool direction, uint16_t distance)
{
     57c:	4f 92       	push	r4
     57e:	5f 92       	push	r5
     580:	6f 92       	push	r6
     582:	7f 92       	push	r7
     584:	8f 92       	push	r8
     586:	9f 92       	push	r9
     588:	af 92       	push	r10
     58a:	bf 92       	push	r11
     58c:	ff 92       	push	r15
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	27 97       	sbiw	r28, 0x07	; 7
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61
     5a6:	f6 2e       	mov	r15, r22
     5a8:	8a 01       	movw	r16, r20
    StepperMotorModeData_t data = getModeAndSteps(mode, 0);
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	50 e0       	ldi	r21, 0x00	; 0
     5ae:	ba 01       	movw	r22, r20
     5b0:	37 de       	rcall	.-914    	; 0x220 <getModeAndSteps>
     5b2:	29 83       	std	Y+1, r18	; 0x01
     5b4:	3a 83       	std	Y+2, r19	; 0x02
     5b6:	4b 83       	std	Y+3, r20	; 0x03
     5b8:	5c 83       	std	Y+4, r21	; 0x04
     5ba:	6d 83       	std	Y+5, r22	; 0x05
     5bc:	7e 83       	std	Y+6, r23	; 0x06
     5be:	8f 83       	std	Y+7, r24	; 0x07

    for(uint32_t i = 0, j = (direction ? data.arraySize : 0); i < distance; i++)
     5c0:	ff 20       	and	r15, r15
     5c2:	29 f0       	breq	.+10     	; 0x5ce <SM_moveStepsSigned+0x52>
     5c4:	82 2f       	mov	r24, r18
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	a0 e0       	ldi	r26, 0x00	; 0
     5ca:	b0 e0       	ldi	r27, 0x00	; 0
     5cc:	03 c0       	rjmp	.+6      	; 0x5d4 <SM_moveStepsSigned+0x58>
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	dc 01       	movw	r26, r24
    {
        *sMotorPort = (*sMotorPort & 0xf0) | data.pArray[(direction ? j-- : j++)];

        if(j >= data.arraySize || j <= 0)
        {
            j = (direction ? data.arraySize : 0);
     5d4:	81 2c       	mov	r8, r1
     5d6:	91 2c       	mov	r9, r1
     5d8:	54 01       	movw	r10, r8
     5da:	3e c0       	rjmp	.+124    	; 0x658 <SM_moveStepsSigned+0xdc>
{
    StepperMotorModeData_t data = getModeAndSteps(mode, 0);

    for(uint32_t i = 0, j = (direction ? data.arraySize : 0); i < distance; i++)
    {
        *sMotorPort = (*sMotorPort & 0xf0) | data.pArray[(direction ? j-- : j++)];
     5dc:	e0 91 f4 02 	lds	r30, 0x02F4	; 0x8002f4 <sMotorPort>
     5e0:	f0 91 f5 02 	lds	r31, 0x02F5	; 0x8002f5 <sMotorPort+0x1>
     5e4:	20 81       	ld	r18, Z
     5e6:	20 7f       	andi	r18, 0xF0	; 240
     5e8:	4a 81       	ldd	r20, Y+2	; 0x02
     5ea:	5b 81       	ldd	r21, Y+3	; 0x03
     5ec:	ff 20       	and	r15, r15
     5ee:	41 f0       	breq	.+16     	; 0x600 <SM_moveStepsSigned+0x84>
     5f0:	2c 01       	movw	r4, r24
     5f2:	3d 01       	movw	r6, r26
     5f4:	31 e0       	ldi	r19, 0x01	; 1
     5f6:	43 1a       	sub	r4, r19
     5f8:	51 08       	sbc	r5, r1
     5fa:	61 08       	sbc	r6, r1
     5fc:	71 08       	sbc	r7, r1
     5fe:	07 c0       	rjmp	.+14     	; 0x60e <SM_moveStepsSigned+0x92>
     600:	2c 01       	movw	r4, r24
     602:	3d 01       	movw	r6, r26
     604:	3f ef       	ldi	r19, 0xFF	; 255
     606:	43 1a       	sub	r4, r19
     608:	53 0a       	sbc	r5, r19
     60a:	63 0a       	sbc	r6, r19
     60c:	73 0a       	sbc	r7, r19
     60e:	da 01       	movw	r26, r20
     610:	a8 0f       	add	r26, r24
     612:	b9 1f       	adc	r27, r25
     614:	8c 91       	ld	r24, X
     616:	82 2b       	or	r24, r18
     618:	80 83       	st	Z, r24

        if(j >= data.arraySize || j <= 0)
     61a:	89 81       	ldd	r24, Y+1	; 0x01
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	a0 e0       	ldi	r26, 0x00	; 0
     620:	b0 e0       	ldi	r27, 0x00	; 0
     622:	48 16       	cp	r4, r24
     624:	59 06       	cpc	r5, r25
     626:	6a 06       	cpc	r6, r26
     628:	7b 06       	cpc	r7, r27
     62a:	28 f4       	brcc	.+10     	; 0x636 <SM_moveStepsSigned+0xba>
     62c:	41 14       	cp	r4, r1
     62e:	51 04       	cpc	r5, r1
     630:	61 04       	cpc	r6, r1
     632:	71 04       	cpc	r7, r1
     634:	31 f4       	brne	.+12     	; 0x642 <SM_moveStepsSigned+0xc6>
        {
            j = (direction ? data.arraySize : 0);
     636:	f1 10       	cpse	r15, r1
     638:	06 c0       	rjmp	.+12     	; 0x646 <SM_moveStepsSigned+0xca>
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	dc 01       	movw	r26, r24
     640:	02 c0       	rjmp	.+4      	; 0x646 <SM_moveStepsSigned+0xca>
     642:	d3 01       	movw	r26, r6
     644:	c2 01       	movw	r24, r4
     646:	e0 ee       	ldi	r30, 0xE0	; 224
     648:	fe e2       	ldi	r31, 0x2E	; 46
     64a:	31 97       	sbiw	r30, 0x01	; 1
     64c:	f1 f7       	brne	.-4      	; 0x64a <SM_moveStepsSigned+0xce>

void SM_moveStepsSigned(StepperMotorRunMode_t mode, bool direction, uint16_t distance)
{
    StepperMotorModeData_t data = getModeAndSteps(mode, 0);

    for(uint32_t i = 0, j = (direction ? data.arraySize : 0); i < distance; i++)
     64e:	2f ef       	ldi	r18, 0xFF	; 255
     650:	82 1a       	sub	r8, r18
     652:	92 0a       	sbc	r9, r18
     654:	a2 0a       	sbc	r10, r18
     656:	b2 0a       	sbc	r11, r18
     658:	a8 01       	movw	r20, r16
     65a:	60 e0       	ldi	r22, 0x00	; 0
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	84 16       	cp	r8, r20
     660:	95 06       	cpc	r9, r21
     662:	a6 06       	cpc	r10, r22
     664:	b7 06       	cpc	r11, r23
     666:	08 f4       	brcc	.+2      	; 0x66a <SM_moveStepsSigned+0xee>
     668:	b9 cf       	rjmp	.-142    	; 0x5dc <SM_moveStepsSigned+0x60>
        }

        _delay_ms(3);
    }

    *sMotorPort = *sMotorPort & 0xf0;
     66a:	e0 91 f4 02 	lds	r30, 0x02F4	; 0x8002f4 <sMotorPort>
     66e:	f0 91 f5 02 	lds	r31, 0x02F5	; 0x8002f5 <sMotorPort+0x1>
     672:	80 81       	ld	r24, Z
     674:	80 7f       	andi	r24, 0xF0	; 240
     676:	80 83       	st	Z, r24
}
     678:	27 96       	adiw	r28, 0x07	; 7
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	f8 94       	cli
     67e:	de bf       	out	0x3e, r29	; 62
     680:	0f be       	out	0x3f, r0	; 63
     682:	cd bf       	out	0x3d, r28	; 61
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	ff 90       	pop	r15
     68e:	bf 90       	pop	r11
     690:	af 90       	pop	r10
     692:	9f 90       	pop	r9
     694:	8f 90       	pop	r8
     696:	7f 90       	pop	r7
     698:	6f 90       	pop	r6
     69a:	5f 90       	pop	r5
     69c:	4f 90       	pop	r4
     69e:	08 95       	ret

000006a0 <CRANE_initSerial>:
// transmit single byte of data
void BLUETOOTH_out(uint8_t ch);

/* NOTE: Global function implementations */
void CRANE_initSerial(uint16_t baudRate)
{
     6a0:	9c 01       	movw	r18, r24
    // ubrr load
    uint16_t myubr;

    // set up the ucsr0a and ucsr0b and ucsr0c
    UCSR0A = 0x00;
     6a2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
     6a6:	88 e9       	ldi	r24, 0x98	; 152
     6a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
     6ac:	86 e0       	ldi	r24, 0x06	; 6
     6ae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>

    myubr  = (F_CPU / (16UL * (uint16_t)baudRate)) - 1;
     6b2:	c9 01       	movw	r24, r18
     6b4:	a0 e0       	ldi	r26, 0x00	; 0
     6b6:	b0 e0       	ldi	r27, 0x00	; 0
     6b8:	88 0f       	add	r24, r24
     6ba:	99 1f       	adc	r25, r25
     6bc:	aa 1f       	adc	r26, r26
     6be:	bb 1f       	adc	r27, r27
     6c0:	88 0f       	add	r24, r24
     6c2:	99 1f       	adc	r25, r25
     6c4:	aa 1f       	adc	r26, r26
     6c6:	bb 1f       	adc	r27, r27
     6c8:	9c 01       	movw	r18, r24
     6ca:	ad 01       	movw	r20, r26
     6cc:	22 0f       	add	r18, r18
     6ce:	33 1f       	adc	r19, r19
     6d0:	44 1f       	adc	r20, r20
     6d2:	55 1f       	adc	r21, r21
     6d4:	22 0f       	add	r18, r18
     6d6:	33 1f       	adc	r19, r19
     6d8:	44 1f       	adc	r20, r20
     6da:	55 1f       	adc	r21, r21
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	74 e2       	ldi	r23, 0x24	; 36
     6e0:	84 ef       	ldi	r24, 0xF4	; 244
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	fb d7       	rcall	.+4086   	; 0x16dc <__udivmodsi4>
     6e6:	21 50       	subi	r18, 0x01	; 1
     6e8:	31 09       	sbc	r19, r1
    // load ubrr low
    UBRR0L = myubr;
     6ea:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>

    UBRR0H = 0x00;
     6ee:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
     6f2:	08 95       	ret

000006f4 <CRANE_initBluetooth>:
        pWorker++;
    }
}

void CRANE_initBluetooth(uint16_t baudRate)
{
     6f4:	9c 01       	movw	r18, r24
    uint16_t mybur;
    UCSR1A = 0;
     6f6:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>

    // enable receive interrupt
    // enable transmits
    // enable receive
    // 2 stop bits
    UCSR1B = (1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1);
     6fa:	88 e9       	ldi	r24, 0x98	; 152
     6fc:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>

    UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);
     700:	86 e0       	ldi	r24, 0x06	; 6
     702:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>

    // set up baud rate
    mybur = (F_CPU) / (16UL * (uint16_t)baudRate) - 1;
     706:	c9 01       	movw	r24, r18
     708:	a0 e0       	ldi	r26, 0x00	; 0
     70a:	b0 e0       	ldi	r27, 0x00	; 0
     70c:	88 0f       	add	r24, r24
     70e:	99 1f       	adc	r25, r25
     710:	aa 1f       	adc	r26, r26
     712:	bb 1f       	adc	r27, r27
     714:	88 0f       	add	r24, r24
     716:	99 1f       	adc	r25, r25
     718:	aa 1f       	adc	r26, r26
     71a:	bb 1f       	adc	r27, r27
     71c:	9c 01       	movw	r18, r24
     71e:	ad 01       	movw	r20, r26
     720:	22 0f       	add	r18, r18
     722:	33 1f       	adc	r19, r19
     724:	44 1f       	adc	r20, r20
     726:	55 1f       	adc	r21, r21
     728:	22 0f       	add	r18, r18
     72a:	33 1f       	adc	r19, r19
     72c:	44 1f       	adc	r20, r20
     72e:	55 1f       	adc	r21, r21
     730:	60 e0       	ldi	r22, 0x00	; 0
     732:	74 e2       	ldi	r23, 0x24	; 36
     734:	84 ef       	ldi	r24, 0xF4	; 244
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	d1 d7       	rcall	.+4002   	; 0x16dc <__udivmodsi4>
     73a:	21 50       	subi	r18, 0x01	; 1
     73c:	31 09       	sbc	r19, r1

    UBRR1L = mybur;
     73e:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
    UBRR1H = 0x00;
     742:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
     746:	08 95       	ret

00000748 <UART_out>:

/* NOTE: Local function implementations */
void UART_out(uint8_t ch)
{
    // wait to complete transmission and empty udr0
    while((UCSR0A & (1 << UDRE0)) == 0)
     748:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
     74c:	95 ff       	sbrs	r25, 5
     74e:	fc cf       	rjmp	.-8      	; 0x748 <UART_out>
    {
    }

    // load next byte to be transmitted
    UDR0 = ch;
     750:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     754:	08 95       	ret

00000756 <CRANE_sendSerial>:

    UBRR0H = 0x00;
}

void CRANE_sendSerial(char const * const pData)
{
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	ec 01       	movw	r28, r24
    char const * pWorker = (char const *)pData;

    // while we are not at the end of the string
    while(*pWorker != '\0')
     75c:	02 c0       	rjmp	.+4      	; 0x762 <CRANE_sendSerial+0xc>
    {
        // wait for uart tx to be ready then send out uart
        UART_out(*pWorker);
     75e:	f4 df       	rcall	.-24     	; 0x748 <UART_out>

        pWorker++;
     760:	21 96       	adiw	r28, 0x01	; 1
void CRANE_sendSerial(char const * const pData)
{
    char const * pWorker = (char const *)pData;

    // while we are not at the end of the string
    while(*pWorker != '\0')
     762:	88 81       	ld	r24, Y
     764:	81 11       	cpse	r24, r1
     766:	fb cf       	rjmp	.-10     	; 0x75e <CRANE_sendSerial+0x8>
        // wait for uart tx to be ready then send out uart
        UART_out(*pWorker);

        pWorker++;
    }
}
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	08 95       	ret

0000076e <BLUETOOTH_out>:
    UDR0 = ch;
}

void BLUETOOTH_out(uint8_t ch) // transmit single byte of data
{
    while((UCSR1A & (1 << UDRE1)) == 0)
     76e:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
     772:	95 ff       	sbrs	r25, 5
     774:	fc cf       	rjmp	.-8      	; 0x76e <BLUETOOTH_out>
    {
        // wait for completing transmission and empty UDR0
    }

    UDR1 = ch; // load next byte to be transmitted
     776:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
     77a:	08 95       	ret

0000077c <CRANE_sendBluetooth>:
    UBRR1L = mybur;
    UBRR1H = 0x00;
}

void CRANE_sendBluetooth(char const * const pData)
{
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	ec 01       	movw	r28, r24
    char const * pWorker = (char const *)pData;

    // while we are not at the end of the string
    while(*pWorker != '\0')
     782:	02 c0       	rjmp	.+4      	; 0x788 <CRANE_sendBluetooth+0xc>
    {
        // wait for uart tx to be ready then send out uart
        BLUETOOTH_out(*pWorker);
     784:	f4 df       	rcall	.-24     	; 0x76e <BLUETOOTH_out>

        pWorker++;
     786:	21 96       	adiw	r28, 0x01	; 1
void CRANE_sendBluetooth(char const * const pData)
{
    char const * pWorker = (char const *)pData;

    // while we are not at the end of the string
    while(*pWorker != '\0')
     788:	88 81       	ld	r24, Y
     78a:	81 11       	cpse	r24, r1
     78c:	fb cf       	rjmp	.-10     	; 0x784 <CRANE_sendBluetooth+0x8>
        // wait for uart tx to be ready then send out uart
        BLUETOOTH_out(*pWorker);

        pWorker++;
    }
}
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	08 95       	ret

00000794 <CRANE_initTimer>:
}

uint16_t CRANE_tick(void)
{
    return tick;
}
     794:	86 e0       	ldi	r24, 0x06	; 6
     796:	86 bd       	out	0x26, r24	; 38
     798:	14 bc       	out	0x24, r1	; 36
     79a:	83 e0       	ldi	r24, 0x03	; 3
     79c:	85 bd       	out	0x25, r24	; 37
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
     7a4:	08 95       	ret

000007a6 <CRANE_delayMs>:

void CRANE_delayMs(uint16_t ms){
    uint16_t desiredTick = tick + ms;
     7a6:	20 91 00 04 	lds	r18, 0x0400	; 0x800400 <tick>
     7aa:	30 91 01 04 	lds	r19, 0x0401	; 0x800401 <tick+0x1>
     7ae:	82 0f       	add	r24, r18
     7b0:	93 1f       	adc	r25, r19

    while (desiredTick != tick)
     7b2:	20 91 00 04 	lds	r18, 0x0400	; 0x800400 <tick>
     7b6:	30 91 01 04 	lds	r19, 0x0401	; 0x800401 <tick+0x1>
     7ba:	82 17       	cp	r24, r18
     7bc:	93 07       	cpc	r25, r19
     7be:	c9 f7       	brne	.-14     	; 0x7b2 <CRANE_delayMs+0xc>
    {
        // do nothing
    }
}
     7c0:	08 95       	ret

000007c2 <__vector_23>:

/* NOTE: Local function implementations */
ISR(TIMER0_OVF_vect)
{
     7c2:	1f 92       	push	r1
     7c4:	0f 92       	push	r0
     7c6:	0f b6       	in	r0, 0x3f	; 63
     7c8:	0f 92       	push	r0
     7ca:	11 24       	eor	r1, r1
     7cc:	8f 93       	push	r24
     7ce:	9f 93       	push	r25
    TCNT0 = 6;
     7d0:	86 e0       	ldi	r24, 0x06	; 6
     7d2:	86 bd       	out	0x26, r24	; 38
    tick++;
     7d4:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <tick>
     7d8:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <tick+0x1>
     7dc:	01 96       	adiw	r24, 0x01	; 1
     7de:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <tick+0x1>
     7e2:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <tick>
     7e6:	9f 91       	pop	r25
     7e8:	8f 91       	pop	r24
     7ea:	0f 90       	pop	r0
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	0f 90       	pop	r0
     7f0:	1f 90       	pop	r1
     7f2:	18 95       	reti

000007f4 <CRANE_eepromWriteChar>:
#include "CraneEeprom.h"

/* NOTE: Global function implementations */
void CRANE_eepromWriteChar(char ucData, uint16_t uiAddress)
{
    while(EECR & (1 << EEPE))
     7f4:	f9 99       	sbic	0x1f, 1	; 31
     7f6:	fe cf       	rjmp	.-4      	; 0x7f4 <CRANE_eepromWriteChar>
    {
        /* Wait for completion of previous write */
    }

    /* Set up address and Data Registers */
    EEAR = uiAddress;
     7f8:	72 bd       	out	0x22, r23	; 34
     7fa:	61 bd       	out	0x21, r22	; 33
    EEDR = ucData;
     7fc:	80 bd       	out	0x20, r24	; 32

    /* Write logical one to EEMPE */
    // step 5. write 1 to EEMPE and 0 to EEPE
    EECR = (1 << EEMPE);
     7fe:	84 e0       	ldi	r24, 0x04	; 4
     800:	8f bb       	out	0x1f, r24	; 31

    /* Start EEPROM write by setting EEPE */
    // write EEPE within 4 clock cycles
    EECR |= (1 << EEPE);
     802:	8f b3       	in	r24, 0x1f	; 31
     804:	82 60       	ori	r24, 0x02	; 2
     806:	8f bb       	out	0x1f, r24	; 31
     808:	08 95       	ret

0000080a <CRANE_eepromReadChar>:
}

char CRANE_eepromReadChar(uint16_t uiAddress)
{
    while(EECR & (1 << EEPE))
     80a:	f9 99       	sbic	0x1f, 1	; 31
     80c:	fe cf       	rjmp	.-4      	; 0x80a <CRANE_eepromReadChar>
    {
        /* Wait for completion of previous write */
    };

    EEAR = uiAddress;
     80e:	92 bd       	out	0x22, r25	; 34
     810:	81 bd       	out	0x21, r24	; 33
    EECR |= (1 << EERE);
     812:	8f b3       	in	r24, 0x1f	; 31
     814:	81 60       	ori	r24, 0x01	; 1
     816:	8f bb       	out	0x1f, r24	; 31

    return EEDR;
     818:	80 b5       	in	r24, 0x20	; 32
}
     81a:	08 95       	ret

0000081c <CRANE_initServos>:

/* NOTE: Global function implementations */
void CRANE_initServos(void)
{
    // set up PORTB.5 as an output and 0V
    DDRB |= 0x60;
     81c:	84 b1       	in	r24, 0x04	; 4
     81e:	80 66       	ori	r24, 0x60	; 96
     820:	84 b9       	out	0x04, r24	; 4
    PORTB |= PORTB & ~0x60;
     822:	85 b1       	in	r24, 0x05	; 5
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	8f 79       	andi	r24, 0x9F	; 159
     828:	95 b1       	in	r25, 0x05	; 5
     82a:	89 2b       	or	r24, r25
     82c:	85 b9       	out	0x05, r24	; 5

    // 5000 @ 64
    // set frequency to 50hz
    ICR1 = 5000;
     82e:	88 e8       	ldi	r24, 0x88	; 136
     830:	93 e1       	ldi	r25, 0x13	; 19
     832:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7c0087>
     836:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7c0086>

    // fast pwm set on compare
    TCCR1A = 0x02;
     83a:	82 e0       	ldi	r24, 0x02	; 2
     83c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    // prescaler set to 64
    TCCR1B = 0x1B;
     840:	8b e1       	ldi	r24, 0x1B	; 27
     842:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
     846:	08 95       	ret

00000848 <CRANE_setServoPosition>:
}

void CRANE_setServoPosition(uint8_t servo, uint8_t position)
{
    if(servo == 0)
     848:	81 11       	cpse	r24, r1
     84a:	11 c0       	rjmp	.+34     	; 0x86e <CRANE_setServoPosition+0x26>
    {
        OCR1A = (uint32_t)position * 250 / 255 + 250;
     84c:	26 2f       	mov	r18, r22
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	aa ef       	ldi	r26, 0xFA	; 250
     852:	b0 e0       	ldi	r27, 0x00	; 0
     854:	65 d7       	rcall	.+3786   	; 0x1720 <__umulhisi3>
     856:	2f ef       	ldi	r18, 0xFF	; 255
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	3e d7       	rcall	.+3708   	; 0x16dc <__udivmodsi4>
     860:	26 50       	subi	r18, 0x06	; 6
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     868:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     86c:	08 95       	ret
    }
    else if(servo == 1)
     86e:	81 30       	cpi	r24, 0x01	; 1
     870:	81 f4       	brne	.+32     	; 0x892 <CRANE_setServoPosition+0x4a>
    {
        OCR1B = (uint32_t)position * 250 / 255 + 250;
     872:	26 2f       	mov	r18, r22
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	aa ef       	ldi	r26, 0xFA	; 250
     878:	b0 e0       	ldi	r27, 0x00	; 0
     87a:	52 d7       	rcall	.+3748   	; 0x1720 <__umulhisi3>
     87c:	2f ef       	ldi	r18, 0xFF	; 255
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	40 e0       	ldi	r20, 0x00	; 0
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	2b d7       	rcall	.+3670   	; 0x16dc <__udivmodsi4>
     886:	26 50       	subi	r18, 0x06	; 6
     888:	3f 4f       	sbci	r19, 0xFF	; 255
     88a:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
     88e:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
     892:	08 95       	ret

00000894 <CRANE_startServos>:
    }
}

void CRANE_startServos(void)
{
    TCCR1A |= 0xA0;
     894:	e0 e8       	ldi	r30, 0x80	; 128
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	80 81       	ld	r24, Z
     89a:	80 6a       	ori	r24, 0xA0	; 160
     89c:	80 83       	st	Z, r24
     89e:	08 95       	ret

000008a0 <__vector_25>:
    }
}

// interrupt handling for the serial connection
ISR(serialInterrupt)
{
     8a0:	1f 92       	push	r1
     8a2:	0f 92       	push	r0
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	0f 92       	push	r0
     8a8:	11 24       	eor	r1, r1
     8aa:	0b b6       	in	r0, 0x3b	; 59
     8ac:	0f 92       	push	r0
     8ae:	8f 93       	push	r24
     8b0:	af 93       	push	r26
     8b2:	bf 93       	push	r27
     8b4:	ef 93       	push	r30
     8b6:	ff 93       	push	r31
    if(serialData != '\r' && serialData != '\n' && serialData != '\0' && (serialInputData.index < 127))
     8b8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     8bc:	8d 30       	cpi	r24, 0x0D	; 13
     8be:	f1 f0       	breq	.+60     	; 0x8fc <__vector_25+0x5c>
     8c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     8c4:	8a 30       	cpi	r24, 0x0A	; 10
     8c6:	d1 f0       	breq	.+52     	; 0x8fc <__vector_25+0x5c>
     8c8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     8cc:	88 23       	and	r24, r24
     8ce:	b1 f0       	breq	.+44     	; 0x8fc <__vector_25+0x5c>
     8d0:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <serialInputData+0x80>
     8d4:	8f 37       	cpi	r24, 0x7F	; 127
     8d6:	90 f4       	brcc	.+36     	; 0x8fc <__vector_25+0x5c>
    {
        // add to array
        serialInputData.buffer[serialInputData.index]     = serialData;
     8d8:	a8 ef       	ldi	r26, 0xF8	; 248
     8da:	b3 e0       	ldi	r27, 0x03	; 3
     8dc:	ec 91       	ld	r30, X
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     8e4:	e8 58       	subi	r30, 0x88	; 136
     8e6:	fc 4f       	sbci	r31, 0xFC	; 252
     8e8:	80 83       	st	Z, r24
        serialInputData.buffer[serialInputData.index + 1] = '\0';
     8ea:	ec 91       	ld	r30, X
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	e7 58       	subi	r30, 0x87	; 135
     8f0:	fc 4f       	sbci	r31, 0xFC	; 252
     8f2:	10 82       	st	Z, r1

        serialInputData.index++;
     8f4:	8c 91       	ld	r24, X
     8f6:	8f 5f       	subi	r24, 0xFF	; 255
     8f8:	8c 93       	st	X, r24
     8fa:	05 c0       	rjmp	.+10     	; 0x906 <__vector_25+0x66>
    }
    else
    {
        // set update flag
        serialInputData.readFlag = 1;
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <serialInputData+0x81>
        // reset message index
        serialInputData.index    = 0;
     902:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <serialInputData+0x80>
    }
}
     906:	ff 91       	pop	r31
     908:	ef 91       	pop	r30
     90a:	bf 91       	pop	r27
     90c:	af 91       	pop	r26
     90e:	8f 91       	pop	r24
     910:	0f 90       	pop	r0
     912:	0b be       	out	0x3b, r0	; 59
     914:	0f 90       	pop	r0
     916:	0f be       	out	0x3f, r0	; 63
     918:	0f 90       	pop	r0
     91a:	1f 90       	pop	r1
     91c:	18 95       	reti

0000091e <__vector_36>:

// interrupt handling for the bluetooth connection
ISR(bluetoothInterrupt)
{
     91e:	1f 92       	push	r1
     920:	0f 92       	push	r0
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	0f 92       	push	r0
     926:	11 24       	eor	r1, r1
     928:	0b b6       	in	r0, 0x3b	; 59
     92a:	0f 92       	push	r0
     92c:	8f 93       	push	r24
     92e:	af 93       	push	r26
     930:	bf 93       	push	r27
     932:	ef 93       	push	r30
     934:	ff 93       	push	r31
    if(bluetoothData != '\r' && bluetoothData != '\n' && bluetoothData != '\0' && (bluetoothInputData.index < 127))
     936:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
     93a:	8d 30       	cpi	r24, 0x0D	; 13
     93c:	f1 f0       	breq	.+60     	; 0x97a <__vector_36+0x5c>
     93e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
     942:	8a 30       	cpi	r24, 0x0A	; 10
     944:	d1 f0       	breq	.+52     	; 0x97a <__vector_36+0x5c>
     946:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
     94a:	88 23       	and	r24, r24
     94c:	b1 f0       	breq	.+44     	; 0x97a <__vector_36+0x5c>
     94e:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <bluetoothInputData+0x80>
     952:	8f 37       	cpi	r24, 0x7F	; 127
     954:	90 f4       	brcc	.+36     	; 0x97a <__vector_36+0x5c>
    {
        // add to array
        bluetoothInputData.buffer[bluetoothInputData.index]     = bluetoothData;
     956:	a6 e7       	ldi	r26, 0x76	; 118
     958:	b3 e0       	ldi	r27, 0x03	; 3
     95a:	ec 91       	ld	r30, X
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
     962:	ea 50       	subi	r30, 0x0A	; 10
     964:	fd 4f       	sbci	r31, 0xFD	; 253
     966:	80 83       	st	Z, r24
        bluetoothInputData.buffer[bluetoothInputData.index + 1] = '\0';
     968:	ec 91       	ld	r30, X
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	e9 50       	subi	r30, 0x09	; 9
     96e:	fd 4f       	sbci	r31, 0xFD	; 253
     970:	10 82       	st	Z, r1

        bluetoothInputData.index++;
     972:	8c 91       	ld	r24, X
     974:	8f 5f       	subi	r24, 0xFF	; 255
     976:	8c 93       	st	X, r24
     978:	05 c0       	rjmp	.+10     	; 0x984 <__vector_36+0x66>
    }
    else
    {
        // set update flag
        bluetoothInputData.readFlag = 1;
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <bluetoothInputData+0x81>
        // reset message index
        bluetoothInputData.index    = 0;
     980:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <bluetoothInputData+0x80>
    }
}
     984:	ff 91       	pop	r31
     986:	ef 91       	pop	r30
     988:	bf 91       	pop	r27
     98a:	af 91       	pop	r26
     98c:	8f 91       	pop	r24
     98e:	0f 90       	pop	r0
     990:	0b be       	out	0x3b, r0	; 59
     992:	0f 90       	pop	r0
     994:	0f be       	out	0x3f, r0	; 63
     996:	0f 90       	pop	r0
     998:	1f 90       	pop	r1
     99a:	18 95       	reti

0000099c <IO_init>:

/* NOTE: Function implementations */
void IO_init(void)
{
    // port c.4 is the limit switch
    DDRC  = 0x00;
     99c:	17 b8       	out	0x07, r1	; 7
    PORTC = 0x10;
     99e:	80 e1       	ldi	r24, 0x10	; 16
     9a0:	88 b9       	out	0x08, r24	; 8

    // port a.0-1 are for left and right
    DDRA  = 0x00;
     9a2:	11 b8       	out	0x01, r1	; 1
    PORTA = 0xff;
     9a4:	8f ef       	ldi	r24, 0xFF	; 255
     9a6:	82 b9       	out	0x02, r24	; 2

    DDRL  = 0xff;
     9a8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
    PORTL = 0x00;
     9ac:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
     9b0:	08 95       	ret

000009b2 <CRANE_getMovesFromEeprom>:
}

void CRANE_getMovesFromEeprom(uint16_t addr)
{
     9b2:	af 92       	push	r10
     9b4:	bf 92       	push	r11
     9b6:	df 92       	push	r13
     9b8:	ef 92       	push	r14
     9ba:	ff 92       	push	r15
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	8c 01       	movw	r16, r24
    uint16_t address = addr;

    for(uint8_t i = 0; i < recordLength; i++)
     9c6:	d1 2c       	mov	r13, r1
     9c8:	26 c0       	rjmp	.+76     	; 0xa16 <CRANE_getMovesFromEeprom+0x64>
    {
        uint16_t motorTicks = 0;

        // read the motor position
        motorTicks = CRANE_eepromReadChar(address++) << 8;
     9ca:	58 01       	movw	r10, r16
     9cc:	2f ef       	ldi	r18, 0xFF	; 255
     9ce:	a2 1a       	sub	r10, r18
     9d0:	b2 0a       	sbc	r11, r18
     9d2:	c8 01       	movw	r24, r16
     9d4:	1a df       	rcall	.-460    	; 0x80a <CRANE_eepromReadChar>
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	c3 2f       	mov	r28, r19
     9da:	d8 2f       	mov	r29, r24
        motorTicks += CRANE_eepromReadChar(address++);
     9dc:	78 01       	movw	r14, r16
     9de:	82 e0       	ldi	r24, 0x02	; 2
     9e0:	e8 0e       	add	r14, r24
     9e2:	f1 1c       	adc	r15, r1
     9e4:	c5 01       	movw	r24, r10
     9e6:	11 df       	rcall	.-478    	; 0x80a <CRANE_eepromReadChar>
     9e8:	9e 01       	movw	r18, r28
     9ea:	28 0f       	add	r18, r24
     9ec:	31 1d       	adc	r19, r1

        recordedMoves[i].motorTicks = motorTicks;
     9ee:	cd 2d       	mov	r28, r13
     9f0:	d0 e0       	ldi	r29, 0x00	; 0
     9f2:	cc 0f       	add	r28, r28
     9f4:	dd 1f       	adc	r29, r29
     9f6:	cc 0f       	add	r28, r28
     9f8:	dd 1f       	adc	r29, r29
     9fa:	ce 5f       	subi	r28, 0xFE	; 254
     9fc:	db 4f       	sbci	r29, 0xFB	; 251
     9fe:	39 83       	std	Y+1, r19	; 0x01

        // read the arm position
        recordedMoves[i].armTicks = CRANE_eepromReadChar(address++);
     a00:	28 83       	st	Y, r18
     a02:	c7 01       	movw	r24, r14
     a04:	02 df       	rcall	.-508    	; 0x80a <CRANE_eepromReadChar>
     a06:	8a 83       	std	Y+2, r24	; 0x02

        // read the plunger position
        recordedMoves[i].plungerTicks = CRANE_eepromReadChar(address++);
     a08:	c8 01       	movw	r24, r16
     a0a:	03 96       	adiw	r24, 0x03	; 3
     a0c:	0c 5f       	subi	r16, 0xFC	; 252
     a0e:	1f 4f       	sbci	r17, 0xFF	; 255
     a10:	fc de       	rcall	.-520    	; 0x80a <CRANE_eepromReadChar>
     a12:	8b 83       	std	Y+3, r24	; 0x03

void CRANE_getMovesFromEeprom(uint16_t addr)
{
    uint16_t address = addr;

    for(uint8_t i = 0; i < recordLength; i++)
     a14:	d3 94       	inc	r13
     a16:	35 e0       	ldi	r19, 0x05	; 5
     a18:	3d 15       	cp	r19, r13
     a1a:	b8 f6       	brcc	.-82     	; 0x9ca <CRANE_getMovesFromEeprom+0x18>
        recordedMoves[i].armTicks = CRANE_eepromReadChar(address++);

        // read the plunger position
        recordedMoves[i].plungerTicks = CRANE_eepromReadChar(address++);
    }
}
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	ff 90       	pop	r15
     a26:	ef 90       	pop	r14
     a28:	df 90       	pop	r13
     a2a:	bf 90       	pop	r11
     a2c:	af 90       	pop	r10
     a2e:	08 95       	ret

00000a30 <CRANE_saveMovesToEeprom>:

void CRANE_saveMovesToEeprom(uint16_t addr)
{
     a30:	af 92       	push	r10
     a32:	bf 92       	push	r11
     a34:	cf 92       	push	r12
     a36:	df 92       	push	r13
     a38:	ff 92       	push	r15
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	8c 01       	movw	r16, r24
    uint16_t address = addr;

    for(uint8_t i = 0; i < recordLength; i++)
     a44:	f1 2c       	mov	r15, r1
     a46:	2c c0       	rjmp	.+88     	; 0xaa0 <CRANE_saveMovesToEeprom+0x70>
    {
        // cheat by directly moving into our recorded array
        recordedMoves[i] = currentMoves[i];
     a48:	cf 2d       	mov	r28, r15
     a4a:	d0 e0       	ldi	r29, 0x00	; 0
     a4c:	cc 0f       	add	r28, r28
     a4e:	dd 1f       	adc	r29, r29
     a50:	cc 0f       	add	r28, r28
     a52:	dd 1f       	adc	r29, r29
     a54:	fe 01       	movw	r30, r28
     a56:	ee 5f       	subi	r30, 0xFE	; 254
     a58:	fb 4f       	sbci	r31, 0xFB	; 251
     a5a:	c6 5e       	subi	r28, 0xE6	; 230
     a5c:	db 4f       	sbci	r29, 0xFB	; 251
     a5e:	88 81       	ld	r24, Y
     a60:	99 81       	ldd	r25, Y+1	; 0x01
     a62:	aa 81       	ldd	r26, Y+2	; 0x02
     a64:	bb 81       	ldd	r27, Y+3	; 0x03
     a66:	80 83       	st	Z, r24
     a68:	91 83       	std	Z+1, r25	; 0x01
     a6a:	a2 83       	std	Z+2, r26	; 0x02
     a6c:	b3 83       	std	Z+3, r27	; 0x03

        // save the motor position
        CRANE_eepromWriteChar((currentMoves[i].motorTicks & 0xff00) >> 8, address++);
     a6e:	58 01       	movw	r10, r16
     a70:	8f ef       	ldi	r24, 0xFF	; 255
     a72:	a8 1a       	sub	r10, r24
     a74:	b8 0a       	sbc	r11, r24
     a76:	b8 01       	movw	r22, r16
     a78:	89 81       	ldd	r24, Y+1	; 0x01
     a7a:	bc de       	rcall	.-648    	; 0x7f4 <CRANE_eepromWriteChar>
        CRANE_eepromWriteChar((currentMoves[i].motorTicks & 0x00ff), address++);
     a7c:	68 01       	movw	r12, r16
     a7e:	82 e0       	ldi	r24, 0x02	; 2
     a80:	c8 0e       	add	r12, r24
     a82:	d1 1c       	adc	r13, r1
     a84:	b5 01       	movw	r22, r10
     a86:	88 81       	ld	r24, Y
     a88:	b5 de       	rcall	.-662    	; 0x7f4 <CRANE_eepromWriteChar>

        // save the arm position
        CRANE_eepromWriteChar(currentMoves[i].armTicks, address++);
     a8a:	b6 01       	movw	r22, r12
     a8c:	8a 81       	ldd	r24, Y+2	; 0x02
     a8e:	b2 de       	rcall	.-668    	; 0x7f4 <CRANE_eepromWriteChar>

        // save the plunger position
        CRANE_eepromWriteChar(currentMoves[i].plungerTicks, address++);
     a90:	b8 01       	movw	r22, r16
     a92:	6d 5f       	subi	r22, 0xFD	; 253
     a94:	7f 4f       	sbci	r23, 0xFF	; 255
     a96:	0c 5f       	subi	r16, 0xFC	; 252
     a98:	1f 4f       	sbci	r17, 0xFF	; 255
     a9a:	8b 81       	ldd	r24, Y+3	; 0x03
     a9c:	ab de       	rcall	.-682    	; 0x7f4 <CRANE_eepromWriteChar>

void CRANE_saveMovesToEeprom(uint16_t addr)
{
    uint16_t address = addr;

    for(uint8_t i = 0; i < recordLength; i++)
     a9e:	f3 94       	inc	r15
     aa0:	85 e0       	ldi	r24, 0x05	; 5
     aa2:	8f 15       	cp	r24, r15
     aa4:	88 f6       	brcc	.-94     	; 0xa48 <CRANE_saveMovesToEeprom+0x18>
        CRANE_eepromWriteChar(currentMoves[i].armTicks, address++);

        // save the plunger position
        CRANE_eepromWriteChar(currentMoves[i].plungerTicks, address++);
    }
}
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	1f 91       	pop	r17
     aac:	0f 91       	pop	r16
     aae:	ff 90       	pop	r15
     ab0:	df 90       	pop	r13
     ab2:	cf 90       	pop	r12
     ab4:	bf 90       	pop	r11
     ab6:	af 90       	pop	r10
     ab8:	08 95       	ret

00000aba <stringCompare>:

    return 0;
}

uint8_t stringCompare(char const * const pStrOne, char const * const pStrTwo)
{
     aba:	ac 01       	movw	r20, r24
    uint8_t i = 0;
     abc:	90 e0       	ldi	r25, 0x00	; 0

    // while string one still has data
    do
    {
        if(*(pStrOne + i) == *(pStrTwo + i))
     abe:	29 2f       	mov	r18, r25
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	fa 01       	movw	r30, r20
     ac4:	e2 0f       	add	r30, r18
     ac6:	f3 1f       	adc	r31, r19
     ac8:	e0 81       	ld	r30, Z
     aca:	db 01       	movw	r26, r22
     acc:	a2 0f       	add	r26, r18
     ace:	b3 1f       	adc	r27, r19
     ad0:	8c 91       	ld	r24, X
     ad2:	e8 13       	cpse	r30, r24
     ad4:	11 c0       	rjmp	.+34     	; 0xaf8 <stringCompare+0x3e>
        {
            // increment
            i++;
     ad6:	9f 5f       	subi	r25, 0xFF	; 255
        else
        {
            // exit
            return 0;
        }
    } while((*(pStrOne + i) != '\0') && (*(pStrTwo + i) != '\0'));
     ad8:	29 2f       	mov	r18, r25
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	fa 01       	movw	r30, r20
     ade:	e2 0f       	add	r30, r18
     ae0:	f3 1f       	adc	r31, r19
     ae2:	80 81       	ld	r24, Z
     ae4:	88 23       	and	r24, r24
     ae6:	51 f0       	breq	.+20     	; 0xafc <stringCompare+0x42>
     ae8:	fb 01       	movw	r30, r22
     aea:	e2 0f       	add	r30, r18
     aec:	f3 1f       	adc	r31, r19
     aee:	80 81       	ld	r24, Z
     af0:	81 11       	cpse	r24, r1
     af2:	e5 cf       	rjmp	.-54     	; 0xabe <stringCompare+0x4>

    // made it out of the loop
    return 1;
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	08 95       	ret
            i++;
        }
        else
        {
            // exit
            return 0;
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	08 95       	ret
        }
    } while((*(pStrOne + i) != '\0') && (*(pStrTwo + i) != '\0'));

    // made it out of the loop
    return 1;
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	08 95       	ret

00000b00 <doesBufferMatch>:
        CRANE_eepromWriteChar(currentMoves[i].plungerTicks, address++);
    }
}

uint8_t doesBufferMatch(volatile connectionBuffer_t buf, uint8_t strictMode, char const * const pStr)
{
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	00 d0       	rcall	.+0      	; 0xb06 <doesBufferMatch+0x6>
     b06:	cd b7       	in	r28, 0x3d	; 61
     b08:	de b7       	in	r29, 0x3e	; 62
     b0a:	c5 57       	subi	r28, 0x75	; 117
     b0c:	df 4f       	sbci	r29, 0xFF	; 255
     b0e:	88 81       	ld	r24, Y
     b10:	cb 58       	subi	r28, 0x8B	; 139
     b12:	d0 40       	sbci	r29, 0x00	; 0
     b14:	89 83       	std	Y+1, r24	; 0x01
     b16:	c4 57       	subi	r28, 0x74	; 116
     b18:	df 4f       	sbci	r29, 0xFF	; 255
     b1a:	88 81       	ld	r24, Y
     b1c:	99 81       	ldd	r25, Y+1	; 0x01
     b1e:	cc 58       	subi	r28, 0x8C	; 140
     b20:	d0 40       	sbci	r29, 0x00	; 0
     b22:	9b 83       	std	Y+3, r25	; 0x03
     b24:	8a 83       	std	Y+2, r24	; 0x02
    if(buf.readFlag)
     b26:	c6 57       	subi	r28, 0x76	; 118
     b28:	df 4f       	sbci	r29, 0xFF	; 255
     b2a:	88 81       	ld	r24, Y
     b2c:	ca 58       	subi	r28, 0x8A	; 138
     b2e:	d0 40       	sbci	r29, 0x00	; 0
     b30:	88 23       	and	r24, r24
     b32:	a1 f0       	breq	.+40     	; 0xb5c <doesBufferMatch+0x5c>
    {
        // reset read flag
        buf.readFlag = strictMode ? 0 : buf.readFlag;
     b34:	99 81       	ldd	r25, Y+1	; 0x01
     b36:	91 11       	cpse	r25, r1
     b38:	06 c0       	rjmp	.+12     	; 0xb46 <doesBufferMatch+0x46>
     b3a:	c6 57       	subi	r28, 0x76	; 118
     b3c:	df 4f       	sbci	r29, 0xFF	; 255
     b3e:	88 81       	ld	r24, Y
     b40:	ca 58       	subi	r28, 0x8A	; 138
     b42:	d0 40       	sbci	r29, 0x00	; 0
     b44:	01 c0       	rjmp	.+2      	; 0xb48 <doesBufferMatch+0x48>
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	c6 57       	subi	r28, 0x76	; 118
     b4a:	df 4f       	sbci	r29, 0xFF	; 255
     b4c:	88 83       	st	Y, r24
     b4e:	ca 58       	subi	r28, 0x8A	; 138
     b50:	d0 40       	sbci	r29, 0x00	; 0

        return stringCompare(buf.buffer, pStr);
     b52:	6a 81       	ldd	r22, Y+2	; 0x02
     b54:	7b 81       	ldd	r23, Y+3	; 0x03
     b56:	ce 01       	movw	r24, r28
     b58:	09 96       	adiw	r24, 0x09	; 9
     b5a:	af df       	rcall	.-162    	; 0xaba <stringCompare>
    }

    return 0;
}
     b5c:	0f 90       	pop	r0
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	08 95       	ret

00000b68 <main>:
uint8_t stringCompare(char const * const pStrOne, char const * const pStrTwo);

/* NOTE: Application implementation */
// the main loop of the function, provided to us
int main(void)
{
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
     b70:	c0 56       	subi	r28, 0x60	; 96
     b72:	d1 09       	sbc	r29, r1
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	f8 94       	cli
     b78:	de bf       	out	0x3e, r29	; 62
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	cd bf       	out	0x3d, r28	; 61
    // start the gpio
    IO_init();
     b7e:	0e df       	rcall	.-484    	; 0x99c <IO_init>

    // init the ADC and the servo control
    ADC_init();
     b80:	d2 da       	rcall	.-2652   	; 0x126 <ADC_init>
    CRANE_initServos();
     b82:	4c de       	rcall	.-872    	; 0x81c <CRANE_initServos>
     b84:	87 de       	rcall	.-754    	; 0x894 <CRANE_startServos>
    CRANE_startServos();
     b86:	68 e2       	ldi	r22, 0x28	; 40
     b88:	70 e0       	ldi	r23, 0x00	; 0

    // in this case, 1 is CCW, and 0 is CW
    // pass in the port and register we want to use for the motor
    SM_init(&DDRC, &PORTC);
     b8a:	87 e2       	ldi	r24, 0x27	; 39
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	3b db       	rcall	.-2442   	; 0x206 <SM_init>
     b90:	85 e5       	ldi	r24, 0x55	; 85

    // get the stored recorded data from the EEPROM
    CRANE_getMovesFromEeprom(eepromAddress);
     b92:	95 e0       	ldi	r25, 0x05	; 5
     b94:	0e df       	rcall	.-484    	; 0x9b2 <CRANE_getMovesFromEeprom>
     b96:	80 e8       	ldi	r24, 0x80	; 128

    // turn on the serial on port 0 at 9600 baud
    CRANE_initSerial(9600);
     b98:	95 e2       	ldi	r25, 0x25	; 37
     b9a:	82 dd       	rcall	.-1276   	; 0x6a0 <CRANE_initSerial>
     b9c:	80 e1       	ldi	r24, 0x10	; 16
    CRANE_sendSerial("Crane online\r\n");
     b9e:	92 e0       	ldi	r25, 0x02	; 2
     ba0:	da dd       	rcall	.-1100   	; 0x756 <CRANE_sendSerial>

    // turn on the blutooth connection
    CRANE_initBluetooth(9600);
     ba2:	80 e8       	ldi	r24, 0x80	; 128
     ba4:	95 e2       	ldi	r25, 0x25	; 37
     ba6:	a6 dd       	rcall	.-1204   	; 0x6f4 <CRANE_initBluetooth>
     ba8:	80 e1       	ldi	r24, 0x10	; 16
    CRANE_sendBluetooth("Crane online\r\n");
     baa:	92 e0       	ldi	r25, 0x02	; 2
     bac:	e7 dd       	rcall	.-1074   	; 0x77c <CRANE_sendBluetooth>
     bae:	f2 dd       	rcall	.-1052   	; 0x794 <CRANE_initTimer>

    // start the delay timer
    CRANE_initTimer();
     bb0:	78 94       	sei
     bb2:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <bluetoothInputData+0x81>
    // start global interrupts
    sei();

    while(1)
    {
        if(bluetoothInputData.readFlag)
     bb6:	88 23       	and	r24, r24
     bb8:	19 f0       	breq	.+6      	; 0xbc0 <main+0x58>
     bba:	86 ef       	ldi	r24, 0xF6	; 246
     bbc:	92 e0       	ldi	r25, 0x02	; 2
        {
            CRANE_sendSerial(bluetoothInputData.buffer);
     bbe:	cb dd       	rcall	.-1130   	; 0x756 <CRANE_sendSerial>
     bc0:	8f e1       	ldi	r24, 0x1F	; 31
     bc2:	92 e0       	ldi	r25, 0x02	; 2
     bc4:	9f 93       	push	r25
        }

        // DEBUG: get the state
        // if we get the command for record mode and we are not already in record mode
        if((doesBufferMatch(serialInputData, 0, recordModeCommand) && (applicationState != recordState)) || (doesBufferMatch(bluetoothInputData, 0, recordModeCommand) && (applicationState != recordState)) || (recordButton && (applicationState != recordState)))
     bc6:	8f 93       	push	r24
     bc8:	1f 92       	push	r1
     bca:	2d b7       	in	r18, 0x3d	; 61
     bcc:	3e b7       	in	r19, 0x3e	; 62
     bce:	22 58       	subi	r18, 0x82	; 130
     bd0:	31 09       	sbc	r19, r1
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	3e bf       	out	0x3e, r19	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	2d bf       	out	0x3d, r18	; 61
     bdc:	ad b7       	in	r26, 0x3d	; 61
     bde:	be b7       	in	r27, 0x3e	; 62
     be0:	11 96       	adiw	r26, 0x01	; 1
     be2:	82 e8       	ldi	r24, 0x82	; 130
     be4:	e8 e7       	ldi	r30, 0x78	; 120
     be6:	f3 e0       	ldi	r31, 0x03	; 3
     be8:	01 90       	ld	r0, Z+
     bea:	0d 92       	st	X+, r0
     bec:	8a 95       	dec	r24
     bee:	e1 f7       	brne	.-8      	; 0xbe8 <main+0x80>
     bf0:	87 df       	rcall	.-242    	; 0xb00 <doesBufferMatch>
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	f8 94       	cli
     bf6:	de bf       	out	0x3e, r29	; 62
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	cd bf       	out	0x3d, r28	; 61
     bfc:	88 23       	and	r24, r24
     bfe:	21 f0       	breq	.+8      	; 0xc08 <main+0xa0>
     c00:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <applicationState>
     c04:	82 30       	cpi	r24, 0x02	; 2
     c06:	51 f5       	brne	.+84     	; 0xc5c <main+0xf4>
     c08:	8f e1       	ldi	r24, 0x1F	; 31
     c0a:	92 e0       	ldi	r25, 0x02	; 2
     c0c:	9f 93       	push	r25
     c0e:	8f 93       	push	r24
     c10:	1f 92       	push	r1
     c12:	8d b7       	in	r24, 0x3d	; 61
     c14:	9e b7       	in	r25, 0x3e	; 62
     c16:	82 58       	subi	r24, 0x82	; 130
     c18:	91 09       	sbc	r25, r1
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	9e bf       	out	0x3e, r25	; 62
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	8d bf       	out	0x3d, r24	; 61
     c24:	ad b7       	in	r26, 0x3d	; 61
     c26:	be b7       	in	r27, 0x3e	; 62
     c28:	11 96       	adiw	r26, 0x01	; 1
     c2a:	82 e8       	ldi	r24, 0x82	; 130
     c2c:	e6 ef       	ldi	r30, 0xF6	; 246
     c2e:	f2 e0       	ldi	r31, 0x02	; 2
     c30:	01 90       	ld	r0, Z+
     c32:	0d 92       	st	X+, r0
     c34:	8a 95       	dec	r24
     c36:	e1 f7       	brne	.-8      	; 0xc30 <main+0xc8>
     c38:	63 df       	rcall	.-314    	; 0xb00 <doesBufferMatch>
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	88 23       	and	r24, r24
     c46:	21 f0       	breq	.+8      	; 0xc50 <main+0xe8>
     c48:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <applicationState>
     c4c:	82 30       	cpi	r24, 0x02	; 2
     c4e:	31 f4       	brne	.+12     	; 0xc5c <main+0xf4>
     c50:	02 9b       	sbis	0x00, 2	; 0
     c52:	14 c0       	rjmp	.+40     	; 0xc7c <main+0x114>
     c54:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <applicationState>
     c58:	82 30       	cpi	r24, 0x02	; 2
     c5a:	81 f0       	breq	.+32     	; 0xc7c <main+0x114>
     c5c:	89 e2       	ldi	r24, 0x29	; 41
        {
            CRANE_sendSerial("Entering record mode...\r\n");
     c5e:	92 e0       	ldi	r25, 0x02	; 2
     c60:	7a dd       	rcall	.-1292   	; 0x756 <CRANE_sendSerial>
     c62:	89 e2       	ldi	r24, 0x29	; 41
     c64:	92 e0       	ldi	r25, 0x02	; 2
            CRANE_sendBluetooth("Entering record mode...\r\n");
     c66:	8a dd       	rcall	.-1260   	; 0x77c <CRANE_sendBluetooth>
     c68:	82 e0       	ldi	r24, 0x02	; 2
     c6a:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <applicationState>

            applicationState            = recordState;
     c6e:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <serialInputData+0x81>
     c72:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <bluetoothInputData+0x81>
            serialInputData.readFlag    = 0;
     c76:	02 99       	sbic	0x00, 2	; 0
            bluetoothInputData.readFlag = 0;
     c78:	fe cf       	rjmp	.-4      	; 0xc76 <main+0x10e>
     c7a:	5d c0       	rjmp	.+186    	; 0xd36 <main+0x1ce>

            while(recordButton)
     c7c:	83 e4       	ldi	r24, 0x43	; 67
     c7e:	92 e0       	ldi	r25, 0x02	; 2
     c80:	9f 93       	push	r25
            {
                // do nothing until we let go
            }
        }
        // check for reset command
        else if((doesBufferMatch(serialInputData, 0, calibrateModeCommand) && (applicationState != calibrateState)) || (doesBufferMatch(bluetoothInputData, 1, calibrateModeCommand) && (applicationState != calibrateState)) || (calibrateButton && (applicationState != calibrateState)))
     c82:	8f 93       	push	r24
     c84:	1f 92       	push	r1
     c86:	8d b7       	in	r24, 0x3d	; 61
     c88:	9e b7       	in	r25, 0x3e	; 62
     c8a:	82 58       	subi	r24, 0x82	; 130
     c8c:	91 09       	sbc	r25, r1
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	f8 94       	cli
     c92:	9e bf       	out	0x3e, r25	; 62
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	8d bf       	out	0x3d, r24	; 61
     c98:	ad b7       	in	r26, 0x3d	; 61
     c9a:	be b7       	in	r27, 0x3e	; 62
     c9c:	11 96       	adiw	r26, 0x01	; 1
     c9e:	82 e8       	ldi	r24, 0x82	; 130
     ca0:	e8 e7       	ldi	r30, 0x78	; 120
     ca2:	f3 e0       	ldi	r31, 0x03	; 3
     ca4:	01 90       	ld	r0, Z+
     ca6:	0d 92       	st	X+, r0
     ca8:	8a 95       	dec	r24
     caa:	e1 f7       	brne	.-8      	; 0xca4 <main+0x13c>
     cac:	29 df       	rcall	.-430    	; 0xb00 <doesBufferMatch>
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	88 23       	and	r24, r24
     cba:	21 f0       	breq	.+8      	; 0xcc4 <main+0x15c>
     cbc:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <applicationState>
     cc0:	81 11       	cpse	r24, r1
     cc2:	2b c0       	rjmp	.+86     	; 0xd1a <main+0x1b2>
     cc4:	83 e4       	ldi	r24, 0x43	; 67
     cc6:	92 e0       	ldi	r25, 0x02	; 2
     cc8:	9f 93       	push	r25
     cca:	8f 93       	push	r24
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	8f 93       	push	r24
     cd0:	8d b7       	in	r24, 0x3d	; 61
     cd2:	9e b7       	in	r25, 0x3e	; 62
     cd4:	82 58       	subi	r24, 0x82	; 130
     cd6:	91 09       	sbc	r25, r1
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	f8 94       	cli
     cdc:	9e bf       	out	0x3e, r25	; 62
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	8d bf       	out	0x3d, r24	; 61
     ce2:	ad b7       	in	r26, 0x3d	; 61
     ce4:	be b7       	in	r27, 0x3e	; 62
     ce6:	11 96       	adiw	r26, 0x01	; 1
     ce8:	82 e8       	ldi	r24, 0x82	; 130
     cea:	e6 ef       	ldi	r30, 0xF6	; 246
     cec:	f2 e0       	ldi	r31, 0x02	; 2
     cee:	01 90       	ld	r0, Z+
     cf0:	0d 92       	st	X+, r0
     cf2:	8a 95       	dec	r24
     cf4:	e1 f7       	brne	.-8      	; 0xcee <main+0x186>
     cf6:	04 df       	rcall	.-504    	; 0xb00 <doesBufferMatch>
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	88 23       	and	r24, r24
     d04:	21 f0       	breq	.+8      	; 0xd0e <main+0x1a6>
     d06:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <applicationState>
     d0a:	81 11       	cpse	r24, r1
     d0c:	06 c0       	rjmp	.+12     	; 0xd1a <main+0x1b2>
     d0e:	03 9b       	sbis	0x00, 3	; 0
     d10:	12 c0       	rjmp	.+36     	; 0xd36 <main+0x1ce>
     d12:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <applicationState>
     d16:	88 23       	and	r24, r24
     d18:	71 f0       	breq	.+28     	; 0xd36 <main+0x1ce>
     d1a:	89 e4       	ldi	r24, 0x49	; 73
        {
            CRANE_sendSerial("Resetting...\r\n");
     d1c:	92 e0       	ldi	r25, 0x02	; 2
     d1e:	1b dd       	rcall	.-1482   	; 0x756 <CRANE_sendSerial>
     d20:	89 e4       	ldi	r24, 0x49	; 73
     d22:	92 e0       	ldi	r25, 0x02	; 2
            CRANE_sendBluetooth("Resetting...\r\n");
     d24:	2b dd       	rcall	.-1450   	; 0x77c <CRANE_sendBluetooth>
     d26:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <applicationState>
     d2a:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <serialInputData+0x81>

            applicationState            = calibrateState;
     d2e:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <bluetoothInputData+0x81>
            serialInputData.readFlag    = 0;
     d32:	03 99       	sbic	0x00, 3	; 0
            bluetoothInputData.readFlag = 0;
     d34:	fe cf       	rjmp	.-4      	; 0xd32 <main+0x1ca>
     d36:	eb e0       	ldi	r30, 0x0B	; 11

            while(calibrateButton)
     d38:	f1 e0       	ldi	r31, 0x01	; 1
     d3a:	80 81       	ld	r24, Z
                // do nothing until we let go
            }
        }

        // display state on leds
        stateLed = (stateLed & 0xfc) | applicationState;
     d3c:	98 2f       	mov	r25, r24
     d3e:	9c 7f       	andi	r25, 0xFC	; 252
     d40:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <applicationState>
     d44:	89 2b       	or	r24, r25
     d46:	80 83       	st	Z, r24
     d48:	88 e5       	ldi	r24, 0x58	; 88
     d4a:	92 e0       	ldi	r25, 0x02	; 2
     d4c:	9f 93       	push	r25

        // DEBUG: check for the get command
        if(doesBufferMatch(serialInputData, 0, getCommand) || doesBufferMatch(bluetoothInputData, 0, getCommand))
     d4e:	8f 93       	push	r24
     d50:	1f 92       	push	r1
     d52:	8d b7       	in	r24, 0x3d	; 61
     d54:	9e b7       	in	r25, 0x3e	; 62
     d56:	82 58       	subi	r24, 0x82	; 130
     d58:	91 09       	sbc	r25, r1
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	f8 94       	cli
     d5e:	9e bf       	out	0x3e, r25	; 62
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	8d bf       	out	0x3d, r24	; 61
     d64:	ad b7       	in	r26, 0x3d	; 61
     d66:	be b7       	in	r27, 0x3e	; 62
     d68:	11 96       	adiw	r26, 0x01	; 1
     d6a:	82 e8       	ldi	r24, 0x82	; 130
     d6c:	e8 e7       	ldi	r30, 0x78	; 120
     d6e:	f3 e0       	ldi	r31, 0x03	; 3
     d70:	01 90       	ld	r0, Z+
     d72:	0d 92       	st	X+, r0
     d74:	8a 95       	dec	r24
     d76:	e1 f7       	brne	.-8      	; 0xd70 <main+0x208>
     d78:	c3 de       	rcall	.-634    	; 0xb00 <doesBufferMatch>
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	81 11       	cpse	r24, r1
     d86:	20 c0       	rjmp	.+64     	; 0xdc8 <main+0x260>
     d88:	88 e5       	ldi	r24, 0x58	; 88
     d8a:	92 e0       	ldi	r25, 0x02	; 2
     d8c:	9f 93       	push	r25
     d8e:	8f 93       	push	r24
     d90:	1f 92       	push	r1
     d92:	8d b7       	in	r24, 0x3d	; 61
     d94:	9e b7       	in	r25, 0x3e	; 62
     d96:	82 58       	subi	r24, 0x82	; 130
     d98:	91 09       	sbc	r25, r1
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	9e bf       	out	0x3e, r25	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	8d bf       	out	0x3d, r24	; 61
     da4:	ad b7       	in	r26, 0x3d	; 61
     da6:	be b7       	in	r27, 0x3e	; 62
     da8:	11 96       	adiw	r26, 0x01	; 1
     daa:	82 e8       	ldi	r24, 0x82	; 130
     dac:	e6 ef       	ldi	r30, 0xF6	; 246
     dae:	f2 e0       	ldi	r31, 0x02	; 2
     db0:	01 90       	ld	r0, Z+
     db2:	0d 92       	st	X+, r0
     db4:	8a 95       	dec	r24
     db6:	e1 f7       	brne	.-8      	; 0xdb0 <main+0x248>
     db8:	a3 de       	rcall	.-698    	; 0xb00 <doesBufferMatch>
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	88 23       	and	r24, r24
     dc6:	19 f1       	breq	.+70     	; 0xe0e <main+0x2a6>
     dc8:	eb ef       	ldi	r30, 0xFB	; 251
     dca:	f3 e0       	ldi	r31, 0x03	; 3
     dcc:	92 81       	ldd	r25, Z+2	; 0x02
        {
            char response[96];
            sprintf(response, "Motor is at %i, Plunger is at %u, Arm is at %u\r\n", craneState.motorTicks, craneState.plungerTicks, craneState.armTicks);
     dce:	83 81       	ldd	r24, Z+3	; 0x03
     dd0:	1f 92       	push	r1
     dd2:	9f 93       	push	r25
     dd4:	1f 92       	push	r1
     dd6:	8f 93       	push	r24
     dd8:	81 81       	ldd	r24, Z+1	; 0x01
     dda:	8f 93       	push	r24
     ddc:	80 81       	ld	r24, Z
     dde:	8f 93       	push	r24
     de0:	8c e5       	ldi	r24, 0x5C	; 92
     de2:	92 e0       	ldi	r25, 0x02	; 2
     de4:	9f 93       	push	r25
     de6:	8f 93       	push	r24
     de8:	8e 01       	movw	r16, r28
     dea:	0f 5f       	subi	r16, 0xFF	; 255
     dec:	1f 4f       	sbci	r17, 0xFF	; 255
     dee:	1f 93       	push	r17
     df0:	0f 93       	push	r16
     df2:	a5 d4       	rcall	.+2378   	; 0x173e <sprintf>
     df4:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <serialInputData+0x81>

            serialInputData.readFlag    = 0;
     df8:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <bluetoothInputData+0x81>
            bluetoothInputData.readFlag = 0;
     dfc:	c8 01       	movw	r24, r16
     dfe:	ab dc       	rcall	.-1706   	; 0x756 <CRANE_sendSerial>

            CRANE_sendSerial(response);
     e00:	c8 01       	movw	r24, r16
     e02:	bc dc       	rcall	.-1672   	; 0x77c <CRANE_sendBluetooth>
     e04:	0f b6       	in	r0, 0x3f	; 63
            CRANE_sendBluetooth(response);
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <applicationState>
     e12:	81 30       	cpi	r24, 0x01	; 1
     e14:	21 f0       	breq	.+8      	; 0xe1e <main+0x2b6>
        }

        // main application switch case
        switch(applicationState)
     e16:	82 30       	cpi	r24, 0x02	; 2
     e18:	09 f4       	brne	.+2      	; 0xe1c <main+0x2b4>
     e1a:	2b c1       	rjmp	.+598    	; 0x1072 <__EEPROM_REGION_LENGTH__+0x72>
     e1c:	20 c2       	rjmp	.+1088   	; 0x125e <__EEPROM_REGION_LENGTH__+0x25e>
     e1e:	00 99       	sbic	0x00, 0	; 0
     e20:	21 c0       	rjmp	.+66     	; 0xe64 <main+0x2fc>
     e22:	8d e8       	ldi	r24, 0x8D	; 141
     e24:	92 e0       	ldi	r25, 0x02	; 2
        {
            // DEBUG: the action case
            case actionState:
            {
                if(leftButton || doesBufferMatch(serialInputData, 1, runCommand) || doesBufferMatch(serialInputData, 0, getCommand))
     e26:	9f 93       	push	r25
     e28:	8f 93       	push	r24
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	8f 93       	push	r24
     e2e:	2d b7       	in	r18, 0x3d	; 61
     e30:	3e b7       	in	r19, 0x3e	; 62
     e32:	22 58       	subi	r18, 0x82	; 130
     e34:	31 09       	sbc	r19, r1
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	3e bf       	out	0x3e, r19	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	2d bf       	out	0x3d, r18	; 61
     e40:	ad b7       	in	r26, 0x3d	; 61
     e42:	be b7       	in	r27, 0x3e	; 62
     e44:	11 96       	adiw	r26, 0x01	; 1
     e46:	82 e8       	ldi	r24, 0x82	; 130
     e48:	e8 e7       	ldi	r30, 0x78	; 120
     e4a:	f3 e0       	ldi	r31, 0x03	; 3
     e4c:	01 90       	ld	r0, Z+
     e4e:	0d 92       	st	X+, r0
     e50:	8a 95       	dec	r24
     e52:	e1 f7       	brne	.-8      	; 0xe4c <main+0x2e4>
     e54:	55 de       	rcall	.-854    	; 0xb00 <doesBufferMatch>
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	88 23       	and	r24, r24
     e62:	11 f0       	breq	.+4      	; 0xe68 <main+0x300>
     e64:	b1 2c       	mov	r11, r1
     e66:	f9 c0       	rjmp	.+498    	; 0x105a <__EEPROM_REGION_LENGTH__+0x5a>
     e68:	88 e5       	ldi	r24, 0x58	; 88
     e6a:	92 e0       	ldi	r25, 0x02	; 2
     e6c:	9f 93       	push	r25
     e6e:	8f 93       	push	r24
     e70:	1f 92       	push	r1
     e72:	8d b7       	in	r24, 0x3d	; 61
     e74:	9e b7       	in	r25, 0x3e	; 62
     e76:	82 58       	subi	r24, 0x82	; 130
     e78:	91 09       	sbc	r25, r1
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	9e bf       	out	0x3e, r25	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	8d bf       	out	0x3d, r24	; 61
     e84:	ad b7       	in	r26, 0x3d	; 61
     e86:	be b7       	in	r27, 0x3e	; 62
     e88:	11 96       	adiw	r26, 0x01	; 1
     e8a:	82 e8       	ldi	r24, 0x82	; 130
     e8c:	e8 e7       	ldi	r30, 0x78	; 120
     e8e:	f3 e0       	ldi	r31, 0x03	; 3
     e90:	01 90       	ld	r0, Z+
     e92:	0d 92       	st	X+, r0
     e94:	8a 95       	dec	r24
     e96:	e1 f7       	brne	.-8      	; 0xe90 <main+0x328>
     e98:	33 de       	rcall	.-922    	; 0xb00 <doesBufferMatch>
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	cd bf       	out	0x3d, r28	; 61
     ea4:	81 11       	cpse	r24, r1
     ea6:	de cf       	rjmp	.-68     	; 0xe64 <main+0x2fc>
     ea8:	84 ce       	rjmp	.-760    	; 0xbb2 <main+0x4a>
     eaa:	eb 2c       	mov	r14, r11
                    // HACK: potential multiple select

                    for(uint8_t i = 0; i < recordLength; i++)
                    {
                        char response[32];
                        sprintf(response, "Running recorded step %u...\r\n", i + 1);
     eac:	f1 2c       	mov	r15, r1
     eae:	c7 01       	movw	r24, r14
     eb0:	01 96       	adiw	r24, 0x01	; 1
     eb2:	9f 93       	push	r25
     eb4:	8f 93       	push	r24
     eb6:	81 e9       	ldi	r24, 0x91	; 145
     eb8:	92 e0       	ldi	r25, 0x02	; 2
     eba:	9f 93       	push	r25
     ebc:	8f 93       	push	r24
     ebe:	8e 01       	movw	r16, r28
     ec0:	0f 5f       	subi	r16, 0xFF	; 255
     ec2:	1f 4f       	sbci	r17, 0xFF	; 255
     ec4:	1f 93       	push	r17
     ec6:	0f 93       	push	r16
     ec8:	3a d4       	rcall	.+2164   	; 0x173e <sprintf>
     eca:	c8 01       	movw	r24, r16
     ecc:	44 dc       	rcall	.-1912   	; 0x756 <CRANE_sendSerial>

                        CRANE_sendSerial(response);
     ece:	c8 01       	movw	r24, r16
     ed0:	55 dc       	rcall	.-1878   	; 0x77c <CRANE_sendBluetooth>
     ed2:	eb e0       	ldi	r30, 0x0B	; 11
                        CRANE_sendBluetooth(response);
     ed4:	f1 e0       	ldi	r31, 0x01	; 1
     ed6:	20 81       	ld	r18, Z
     ed8:	a7 01       	movw	r20, r14
                        stateLed = (stateLed & 0x03) | 1 << (i + 2);
     eda:	4e 5f       	subi	r20, 0xFE	; 254
     edc:	5f 4f       	sbci	r21, 0xFF	; 255
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <main+0x380>
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	4a 95       	dec	r20
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <main+0x37c>
     eec:	92 2f       	mov	r25, r18
     eee:	93 70       	andi	r25, 0x03	; 3
     ef0:	89 2b       	or	r24, r25
     ef2:	80 83       	st	Z, r24
     ef4:	f7 01       	movw	r30, r14
     ef6:	ee 0f       	add	r30, r30
     ef8:	ff 1f       	adc	r31, r31

                        // calculate the relative movement of the arm
                        int16_t moveSteps = recordedMoves[i].motorTicks - craneState.motorTicks;
     efa:	ee 0f       	add	r30, r30
     efc:	ff 1f       	adc	r31, r31
     efe:	ee 5f       	subi	r30, 0xFE	; 254
     f00:	fb 4f       	sbci	r31, 0xFB	; 251
     f02:	40 81       	ld	r20, Z
     f04:	51 81       	ldd	r21, Z+1	; 0x01
     f06:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <craneState>
     f0a:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <craneState+0x1>
     f0e:	48 1b       	sub	r20, r24
     f10:	59 0b       	sbc	r21, r25
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0

                        // move motor
                        if(moveSteps > 0)
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	14 16       	cp	r1, r20
     f20:	15 06       	cpc	r1, r21
     f22:	24 f4       	brge	.+8      	; 0xf2c <main+0x3c4>
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	82 e0       	ldi	r24, 0x02	; 2
                        {
                            SM_moveStepsSigned(stepperModeHalf, 0, moveSteps);
     f28:	29 db       	rcall	.-2478   	; 0x57c <SM_moveStepsSigned>
     f2a:	08 c0       	rjmp	.+16     	; 0xf3c <main+0x3d4>
     f2c:	55 23       	and	r21, r21
     f2e:	34 f4       	brge	.+12     	; 0xf3c <main+0x3d4>
                        }
                        else if(moveSteps < 0)
     f30:	51 95       	neg	r21
     f32:	41 95       	neg	r20
                        {
                            SM_moveStepsSigned(stepperModeHalf, 1, -1 * moveSteps);
     f34:	51 09       	sbc	r21, r1
     f36:	61 e0       	ldi	r22, 0x01	; 1
     f38:	82 e0       	ldi	r24, 0x02	; 2
     f3a:	20 db       	rcall	.-2496   	; 0x57c <SM_moveStepsSigned>
     f3c:	aa 24       	eor	r10, r10
     f3e:	a3 94       	inc	r10
uint8_t stringCompare(char const * const pStrOne, char const * const pStrTwo);

/* NOTE: Application implementation */
// the main loop of the function, provided to us
int main(void)
{
     f40:	34 c0       	rjmp	.+104    	; 0xfaa <main+0x442>
     f42:	60 91 fd 03 	lds	r22, 0x03FD	; 0x8003fd <craneState+0x2>
                        }

                        // lerp!
                        for(uint8_t j = 1; j < 101; j++)
                        {
                            CRANE_setServoPosition(armServo, craneState.armTicks + ((recordedMoves[i].armTicks - craneState.armTicks) * ((float)j / 100)));
     f46:	c6 2e       	mov	r12, r22
     f48:	d1 2c       	mov	r13, r1
     f4a:	f7 01       	movw	r30, r14
     f4c:	ee 0f       	add	r30, r30
     f4e:	ff 1f       	adc	r31, r31
     f50:	ee 0f       	add	r30, r30
     f52:	ff 1f       	adc	r31, r31
     f54:	ee 5f       	subi	r30, 0xFE	; 254
     f56:	fb 4f       	sbci	r31, 0xFB	; 251
     f58:	02 81       	ldd	r16, Z+2	; 0x02
     f5a:	10 e0       	ldi	r17, 0x00	; 0
     f5c:	0c 19       	sub	r16, r12
     f5e:	1d 09       	sbc	r17, r13
     f60:	6a 2d       	mov	r22, r10
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a0 d2       	rcall	.+1344   	; 0x14aa <__floatunsisf>
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	48 ec       	ldi	r20, 0xC8	; 200
     f70:	52 e4       	ldi	r21, 0x42	; 66
     f72:	07 d2       	rcall	.+1038   	; 0x1382 <__divsf3>
     f74:	2b 01       	movw	r4, r22
     f76:	3c 01       	movw	r6, r24
     f78:	b8 01       	movw	r22, r16
     f7a:	11 0f       	add	r17, r17
     f7c:	88 0b       	sbc	r24, r24
     f7e:	99 0b       	sbc	r25, r25
     f80:	96 d2       	rcall	.+1324   	; 0x14ae <__floatsisf>
     f82:	a3 01       	movw	r20, r6
     f84:	92 01       	movw	r18, r4
     f86:	47 d3       	rcall	.+1678   	; 0x1616 <__mulsf3>
     f88:	2b 01       	movw	r4, r22
     f8a:	3c 01       	movw	r6, r24
     f8c:	b6 01       	movw	r22, r12
     f8e:	dd 0c       	add	r13, r13
     f90:	88 0b       	sbc	r24, r24
     f92:	99 0b       	sbc	r25, r25
     f94:	8c d2       	rcall	.+1304   	; 0x14ae <__floatsisf>
     f96:	a3 01       	movw	r20, r6
     f98:	92 01       	movw	r18, r4
     f9a:	8b d1       	rcall	.+790    	; 0x12b2 <__addsf3>
     f9c:	5a d2       	rcall	.+1204   	; 0x1452 <__fixunssfsi>
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	53 dc       	rcall	.-1882   	; 0x848 <CRANE_setServoPosition>
     fa2:	8a e0       	ldi	r24, 0x0A	; 10
     fa4:	90 e0       	ldi	r25, 0x00	; 0
                            CRANE_delayMs(10);
     fa6:	ff db       	rcall	.-2050   	; 0x7a6 <CRANE_delayMs>
     fa8:	a3 94       	inc	r10
     faa:	34 e6       	ldi	r19, 0x64	; 100
                        {
                            SM_moveStepsSigned(stepperModeHalf, 1, -1 * moveSteps);
                        }

                        // lerp!
                        for(uint8_t j = 1; j < 101; j++)
     fac:	3a 15       	cp	r19, r10
     fae:	08 f0       	brcs	.+2      	; 0xfb2 <main+0x44a>
     fb0:	c8 cf       	rjmp	.-112    	; 0xf42 <main+0x3da>
     fb2:	aa 24       	eor	r10, r10
     fb4:	a3 94       	inc	r10
     fb6:	34 c0       	rjmp	.+104    	; 0x1020 <__EEPROM_REGION_LENGTH__+0x20>
     fb8:	60 91 fe 03 	lds	r22, 0x03FE	; 0x8003fe <craneState+0x3>
                            CRANE_delayMs(10);
                        }

                        for(uint8_t j = 1; j < 101; j++)
                        {
                            CRANE_setServoPosition(plungerServo, craneState.plungerTicks + ((recordedMoves[i].plungerTicks - craneState.plungerTicks) * ((float)j / 100)));
     fbc:	c6 2e       	mov	r12, r22
     fbe:	d1 2c       	mov	r13, r1
     fc0:	f7 01       	movw	r30, r14
     fc2:	ee 0f       	add	r30, r30
     fc4:	ff 1f       	adc	r31, r31
     fc6:	ee 0f       	add	r30, r30
     fc8:	ff 1f       	adc	r31, r31
     fca:	ee 5f       	subi	r30, 0xFE	; 254
     fcc:	fb 4f       	sbci	r31, 0xFB	; 251
     fce:	03 81       	ldd	r16, Z+3	; 0x03
     fd0:	10 e0       	ldi	r17, 0x00	; 0
     fd2:	0c 19       	sub	r16, r12
     fd4:	1d 09       	sbc	r17, r13
     fd6:	6a 2d       	mov	r22, r10
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	65 d2       	rcall	.+1226   	; 0x14aa <__floatunsisf>
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	48 ec       	ldi	r20, 0xC8	; 200
     fe6:	52 e4       	ldi	r21, 0x42	; 66
     fe8:	cc d1       	rcall	.+920    	; 0x1382 <__divsf3>
     fea:	2b 01       	movw	r4, r22
     fec:	3c 01       	movw	r6, r24
     fee:	b8 01       	movw	r22, r16
     ff0:	11 0f       	add	r17, r17
     ff2:	88 0b       	sbc	r24, r24
     ff4:	99 0b       	sbc	r25, r25
     ff6:	5b d2       	rcall	.+1206   	; 0x14ae <__floatsisf>
     ff8:	a3 01       	movw	r20, r6
     ffa:	92 01       	movw	r18, r4
     ffc:	0c d3       	rcall	.+1560   	; 0x1616 <__mulsf3>
     ffe:	2b 01       	movw	r4, r22
    1000:	3c 01       	movw	r6, r24
    1002:	b6 01       	movw	r22, r12
    1004:	dd 0c       	add	r13, r13
    1006:	88 0b       	sbc	r24, r24
    1008:	99 0b       	sbc	r25, r25
    100a:	51 d2       	rcall	.+1186   	; 0x14ae <__floatsisf>
    100c:	a3 01       	movw	r20, r6
    100e:	92 01       	movw	r18, r4
    1010:	50 d1       	rcall	.+672    	; 0x12b2 <__addsf3>
    1012:	1f d2       	rcall	.+1086   	; 0x1452 <__fixunssfsi>
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	18 dc       	rcall	.-2000   	; 0x848 <CRANE_setServoPosition>
    1018:	8a e0       	ldi	r24, 0x0A	; 10
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	c4 db       	rcall	.-2168   	; 0x7a6 <CRANE_delayMs>
                            CRANE_delayMs(10);
    101e:	a3 94       	inc	r10
    1020:	84 e6       	ldi	r24, 0x64	; 100
    1022:	8a 15       	cp	r24, r10
                        {
                            CRANE_setServoPosition(armServo, craneState.armTicks + ((recordedMoves[i].armTicks - craneState.armTicks) * ((float)j / 100)));
                            CRANE_delayMs(10);
                        }

                        for(uint8_t j = 1; j < 101; j++)
    1024:	08 f0       	brcs	.+2      	; 0x1028 <__EEPROM_REGION_LENGTH__+0x28>
    1026:	c8 cf       	rjmp	.-112    	; 0xfb8 <main+0x450>
    1028:	f7 01       	movw	r30, r14
                            CRANE_setServoPosition(plungerServo, craneState.plungerTicks + ((recordedMoves[i].plungerTicks - craneState.plungerTicks) * ((float)j / 100)));
                            CRANE_delayMs(10);
                        }

                        // set our state
                        craneState.motorTicks   = recordedMoves[i].motorTicks;
    102a:	ee 0f       	add	r30, r30
    102c:	ff 1f       	adc	r31, r31
    102e:	ee 0f       	add	r30, r30
    1030:	ff 1f       	adc	r31, r31
    1032:	ee 5f       	subi	r30, 0xFE	; 254
    1034:	fb 4f       	sbci	r31, 0xFB	; 251
    1036:	80 81       	ld	r24, Z
    1038:	91 81       	ldd	r25, Z+1	; 0x01
    103a:	ab ef       	ldi	r26, 0xFB	; 251
    103c:	b3 e0       	ldi	r27, 0x03	; 3
    103e:	11 96       	adiw	r26, 0x01	; 1
    1040:	9c 93       	st	X, r25
                        craneState.armTicks     = recordedMoves[i].armTicks;
    1042:	8e 93       	st	-X, r24
    1044:	82 81       	ldd	r24, Z+2	; 0x02
    1046:	12 96       	adiw	r26, 0x02	; 2
    1048:	8c 93       	st	X, r24
                        craneState.plungerTicks = recordedMoves[i].plungerTicks;
    104a:	12 97       	sbiw	r26, 0x02	; 2
    104c:	83 81       	ldd	r24, Z+3	; 0x03
    104e:	13 96       	adiw	r26, 0x03	; 3

                        CRANE_delayMs(100);
    1050:	8c 93       	st	X, r24
    1052:	84 e6       	ldi	r24, 0x64	; 100
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	a7 db       	rcall	.-2226   	; 0x7a6 <CRANE_delayMs>
            {
                if(leftButton || doesBufferMatch(serialInputData, 1, runCommand) || doesBufferMatch(serialInputData, 0, getCommand))
                {
                    // HACK: potential multiple select

                    for(uint8_t i = 0; i < recordLength; i++)
    1058:	b3 94       	inc	r11
    105a:	95 e0       	ldi	r25, 0x05	; 5
    105c:	9b 15       	cp	r25, r11
    105e:	08 f0       	brcs	.+2      	; 0x1062 <__EEPROM_REGION_LENGTH__+0x62>
    1060:	24 cf       	rjmp	.-440    	; 0xeaa <main+0x342>

                        CRANE_delayMs(100);
                    }

                    // reset state led
                    stateLed = (stateLed & 0x03);
    1062:	eb e0       	ldi	r30, 0x0B	; 11
    1064:	f1 e0       	ldi	r31, 0x01	; 1
    1066:	80 81       	ld	r24, Z
    1068:	83 70       	andi	r24, 0x03	; 3

                    while(leftButton)
    106a:	80 83       	st	Z, r24
    106c:	00 99       	sbic	0x00, 0	; 0
            break;

            // DEBUG: the record case
            case recordState:
            {
                uint8_t armPosition     = 255 * ADC_getTenBitValue(0);
    106e:	fe cf       	rjmp	.-4      	; 0x106c <__EEPROM_REGION_LENGTH__+0x6c>
    1070:	a0 cd       	rjmp	.-1216   	; 0xbb2 <main+0x4a>
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	60 d8       	rcall	.-3904   	; 0x138 <ADC_getTenBitValue>
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	4f e7       	ldi	r20, 0x7F	; 127
    107e:	53 e4       	ldi	r21, 0x43	; 67
    1080:	ca d2       	rcall	.+1428   	; 0x1616 <__mulsf3>
    1082:	e7 d1       	rcall	.+974    	; 0x1452 <__fixunssfsi>
                uint8_t plungerPosition = 255 * ADC_getTenBitValue(1);
    1084:	e6 2e       	mov	r14, r22
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	56 d8       	rcall	.-3924   	; 0x138 <ADC_getTenBitValue>
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	4f e7       	ldi	r20, 0x7F	; 127
    1092:	53 e4       	ldi	r21, 0x43	; 67
    1094:	c0 d2       	rcall	.+1408   	; 0x1616 <__mulsf3>
    1096:	dd d1       	rcall	.+954    	; 0x1452 <__fixunssfsi>
    1098:	f6 2e       	mov	r15, r22
                int16_t moveSteps       = 8;

                // display the step we are recording
                stateLed = (stateLed & 0x03) | 1 << (currentMoveIndex + 2);
    109a:	eb e0       	ldi	r30, 0x0B	; 11
    109c:	f1 e0       	ldi	r31, 0x01	; 1
    109e:	40 81       	ld	r20, Z
    10a0:	20 91 fa 03 	lds	r18, 0x03FA	; 0x8003fa <currentMoveIndex>
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	2e 5f       	subi	r18, 0xFE	; 254
    10a8:	3f 4f       	sbci	r19, 0xFF	; 255
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <__EEPROM_REGION_LENGTH__+0xb4>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	2a 95       	dec	r18
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <__EEPROM_REGION_LENGTH__+0xb0>
    10b8:	94 2f       	mov	r25, r20
    10ba:	93 70       	andi	r25, 0x03	; 3
    10bc:	89 2b       	or	r24, r25
    10be:	80 83       	st	Z, r24

                // manually move the motor
                if(rightButton)
    10c0:	01 9b       	sbis	0x00, 1	; 0
    10c2:	0b c0       	rjmp	.+22     	; 0x10da <__EEPROM_REGION_LENGTH__+0xda>
                {
                    SM_moveStepsSigned(stepperModeHalf, 0, moveSteps);
    10c4:	48 e0       	ldi	r20, 0x08	; 8
    10c6:	50 e0       	ldi	r21, 0x00	; 0
    10c8:	60 e0       	ldi	r22, 0x00	; 0
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	57 da       	rcall	.-2898   	; 0x57c <SM_moveStepsSigned>
    10ce:	8a e0       	ldi	r24, 0x0A	; 10
                    CRANE_delayMs(10);
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	69 db       	rcall	.-2350   	; 0x7a6 <CRANE_delayMs>
    10d4:	08 e0       	ldi	r16, 0x08	; 8
    10d6:	10 e0       	ldi	r17, 0x00	; 0
            // DEBUG: the record case
            case recordState:
            {
                uint8_t armPosition     = 255 * ADC_getTenBitValue(0);
                uint8_t plungerPosition = 255 * ADC_getTenBitValue(1);
                int16_t moveSteps       = 8;
    10d8:	0f c0       	rjmp	.+30     	; 0x10f8 <__EEPROM_REGION_LENGTH__+0xf8>
    10da:	00 9b       	sbis	0x00, 0	; 0
                if(rightButton)
                {
                    SM_moveStepsSigned(stepperModeHalf, 0, moveSteps);
                    CRANE_delayMs(10);
                }
                else if(leftButton)
    10dc:	0b c0       	rjmp	.+22     	; 0x10f4 <__EEPROM_REGION_LENGTH__+0xf4>
    10de:	48 e0       	ldi	r20, 0x08	; 8
                {
                    SM_moveStepsSigned(stepperModeHalf, 1, moveSteps);
    10e0:	50 e0       	ldi	r21, 0x00	; 0
    10e2:	61 e0       	ldi	r22, 0x01	; 1
    10e4:	82 e0       	ldi	r24, 0x02	; 2
    10e6:	4a da       	rcall	.-2924   	; 0x57c <SM_moveStepsSigned>
    10e8:	8a e0       	ldi	r24, 0x0A	; 10
    10ea:	90 e0       	ldi	r25, 0x00	; 0
                    CRANE_delayMs(10);
    10ec:	5c db       	rcall	.-2376   	; 0x7a6 <CRANE_delayMs>
    10ee:	08 ef       	ldi	r16, 0xF8	; 248
    10f0:	1f ef       	ldi	r17, 0xFF	; 255
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <__EEPROM_REGION_LENGTH__+0xf8>

                    // negate for current position
                    moveSteps *= -1;
    10f4:	00 e0       	ldi	r16, 0x00	; 0
    10f6:	10 e0       	ldi	r17, 0x00	; 0
    10f8:	6e 2d       	mov	r22, r14
                }
                else
                {
                    moveSteps = 0;
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	a5 db       	rcall	.-2230   	; 0x848 <CRANE_setServoPosition>
                }

                // manually move the servos
                CRANE_setServoPosition(armServo, armPosition);
    10fe:	6f 2d       	mov	r22, r15
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	a2 db       	rcall	.-2236   	; 0x848 <CRANE_setServoPosition>
    1104:	eb ef       	ldi	r30, 0xFB	; 251
                CRANE_setServoPosition(plungerServo, plungerPosition);
    1106:	f3 e0       	ldi	r31, 0x03	; 3
    1108:	80 81       	ld	r24, Z
    110a:	91 81       	ldd	r25, Z+1	; 0x01
    110c:	08 0f       	add	r16, r24

                // update the current positions
                craneState.motorTicks += moveSteps;
    110e:	19 1f       	adc	r17, r25
    1110:	11 83       	std	Z+1, r17	; 0x01
    1112:	00 83       	st	Z, r16
    1114:	e2 82       	std	Z+2, r14	; 0x02
    1116:	f3 82       	std	Z+3, r15	; 0x03
    1118:	02 99       	sbic	0x00, 2	; 0
    111a:	43 c0       	rjmp	.+134    	; 0x11a2 <__EEPROM_REGION_LENGTH__+0x1a2>
                craneState.armTicks     = armPosition;
    111c:	8f ea       	ldi	r24, 0xAF	; 175
                craneState.plungerTicks = plungerPosition;
    111e:	92 e0       	ldi	r25, 0x02	; 2

                // if we press the record button save the position
                if(recordButton || doesBufferMatch(serialInputData, 1, recordCommand) || doesBufferMatch(bluetoothInputData, 1, recordCommand))
    1120:	9f 93       	push	r25
    1122:	8f 93       	push	r24
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	8f 93       	push	r24
    1128:	2d b7       	in	r18, 0x3d	; 61
    112a:	3e b7       	in	r19, 0x3e	; 62
    112c:	22 58       	subi	r18, 0x82	; 130
    112e:	31 09       	sbc	r19, r1
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	3e bf       	out	0x3e, r19	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	2d bf       	out	0x3d, r18	; 61
    113a:	ad b7       	in	r26, 0x3d	; 61
    113c:	be b7       	in	r27, 0x3e	; 62
    113e:	11 96       	adiw	r26, 0x01	; 1
    1140:	82 e8       	ldi	r24, 0x82	; 130
    1142:	e8 e7       	ldi	r30, 0x78	; 120
    1144:	f3 e0       	ldi	r31, 0x03	; 3
    1146:	01 90       	ld	r0, Z+
    1148:	0d 92       	st	X+, r0
    114a:	8a 95       	dec	r24
    114c:	e1 f7       	brne	.-8      	; 0x1146 <__EEPROM_REGION_LENGTH__+0x146>
    114e:	d8 dc       	rcall	.-1616   	; 0xb00 <doesBufferMatch>
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61
    115a:	81 11       	cpse	r24, r1
    115c:	22 c0       	rjmp	.+68     	; 0x11a2 <__EEPROM_REGION_LENGTH__+0x1a2>
    115e:	8f ea       	ldi	r24, 0xAF	; 175
    1160:	92 e0       	ldi	r25, 0x02	; 2
    1162:	9f 93       	push	r25
    1164:	8f 93       	push	r24
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	8f 93       	push	r24
    116a:	8d b7       	in	r24, 0x3d	; 61
    116c:	9e b7       	in	r25, 0x3e	; 62
    116e:	82 58       	subi	r24, 0x82	; 130
    1170:	91 09       	sbc	r25, r1
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	9e bf       	out	0x3e, r25	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	8d bf       	out	0x3d, r24	; 61
    117c:	ad b7       	in	r26, 0x3d	; 61
    117e:	be b7       	in	r27, 0x3e	; 62
    1180:	11 96       	adiw	r26, 0x01	; 1
    1182:	82 e8       	ldi	r24, 0x82	; 130
    1184:	e6 ef       	ldi	r30, 0xF6	; 246
    1186:	f2 e0       	ldi	r31, 0x02	; 2
    1188:	01 90       	ld	r0, Z+
    118a:	0d 92       	st	X+, r0
    118c:	8a 95       	dec	r24
    118e:	e1 f7       	brne	.-8      	; 0x1188 <__EEPROM_REGION_LENGTH__+0x188>
    1190:	b7 dc       	rcall	.-1682   	; 0xb00 <doesBufferMatch>
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	88 23       	and	r24, r24
    119e:	09 f4       	brne	.+2      	; 0x11a2 <__EEPROM_REGION_LENGTH__+0x1a2>
    11a0:	08 cd       	rjmp	.-1520   	; 0xbb2 <main+0x4a>
                {
                    char response[64];
                    sprintf(response, "Recording step %u out of 6...\r\n", currentMoveIndex + 1);
    11a2:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <currentMoveIndex>
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	9f 93       	push	r25
    11ac:	8f 93       	push	r24
    11ae:	86 eb       	ldi	r24, 0xB6	; 182
    11b0:	92 e0       	ldi	r25, 0x02	; 2
    11b2:	9f 93       	push	r25
    11b4:	8f 93       	push	r24
    11b6:	8e 01       	movw	r16, r28
    11b8:	0f 5f       	subi	r16, 0xFF	; 255
    11ba:	1f 4f       	sbci	r17, 0xFF	; 255
    11bc:	1f 93       	push	r17
    11be:	0f 93       	push	r16
    11c0:	be d2       	rcall	.+1404   	; 0x173e <sprintf>
    11c2:	c8 01       	movw	r24, r16

                    CRANE_sendSerial(response);
    11c4:	c8 da       	rcall	.-2672   	; 0x756 <CRANE_sendSerial>
    11c6:	c8 01       	movw	r24, r16
    11c8:	d9 da       	rcall	.-2638   	; 0x77c <CRANE_sendBluetooth>
                    CRANE_sendBluetooth(response);
    11ca:	eb ef       	ldi	r30, 0xFB	; 251
    11cc:	f3 e0       	ldi	r31, 0x03	; 3

                    sprintf(response, "Recorded {%i,%u,%u}...\r\n", craneState.motorTicks, craneState.plungerTicks, craneState.armTicks);
    11ce:	92 81       	ldd	r25, Z+2	; 0x02
    11d0:	83 81       	ldd	r24, Z+3	; 0x03
    11d2:	1f 92       	push	r1
    11d4:	9f 93       	push	r25
    11d6:	1f 92       	push	r1
    11d8:	8f 93       	push	r24
    11da:	81 81       	ldd	r24, Z+1	; 0x01
    11dc:	8f 93       	push	r24
    11de:	80 81       	ld	r24, Z
    11e0:	8f 93       	push	r24
    11e2:	86 ed       	ldi	r24, 0xD6	; 214
    11e4:	92 e0       	ldi	r25, 0x02	; 2
    11e6:	9f 93       	push	r25
    11e8:	8f 93       	push	r24
    11ea:	1f 93       	push	r17
    11ec:	0f 93       	push	r16
    11ee:	a7 d2       	rcall	.+1358   	; 0x173e <sprintf>
    11f0:	c8 01       	movw	r24, r16

                    CRANE_sendSerial(response);
    11f2:	b1 da       	rcall	.-2718   	; 0x756 <CRANE_sendSerial>
    11f4:	c8 01       	movw	r24, r16
                    CRANE_sendBluetooth(response);
    11f6:	c2 da       	rcall	.-2684   	; 0x77c <CRANE_sendBluetooth>
    11f8:	eb e0       	ldi	r30, 0x0B	; 11
    11fa:	f1 e0       	ldi	r31, 0x01	; 1

                    // reset state led
                    stateLed = (stateLed & 0x03);
    11fc:	80 81       	ld	r24, Z
    11fe:	83 70       	andi	r24, 0x03	; 3
    1200:	80 83       	st	Z, r24
    1202:	e0 91 fa 03 	lds	r30, 0x03FA	; 0x8003fa <currentMoveIndex>

                    if(currentMoveIndex < recordLength)
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	e6 30       	cpi	r30, 0x06	; 6
    1212:	b8 f4       	brcc	.+46     	; 0x1242 <__EEPROM_REGION_LENGTH__+0x242>
                    {
                        currentMoves[currentMoveIndex++] = craneState;
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	8e 0f       	add	r24, r30
    1218:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <currentMoveIndex>
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	ee 0f       	add	r30, r30
    1220:	ff 1f       	adc	r31, r31
    1222:	ee 0f       	add	r30, r30
    1224:	ff 1f       	adc	r31, r31
    1226:	e6 5e       	subi	r30, 0xE6	; 230
    1228:	fb 4f       	sbci	r31, 0xFB	; 251
    122a:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <craneState>
    122e:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <craneState+0x1>
    1232:	a0 91 fd 03 	lds	r26, 0x03FD	; 0x8003fd <craneState+0x2>
    1236:	b0 91 fe 03 	lds	r27, 0x03FE	; 0x8003fe <craneState+0x3>
    123a:	80 83       	st	Z, r24
    123c:	91 83       	std	Z+1, r25	; 0x01
    123e:	a2 83       	std	Z+2, r26	; 0x02
    1240:	b3 83       	std	Z+3, r27	; 0x03
                    }

                    if(currentMoveIndex >= recordLength)
    1242:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <currentMoveIndex>
    1246:	86 30       	cpi	r24, 0x06	; 6
    1248:	38 f0       	brcs	.+14     	; 0x1258 <__EEPROM_REGION_LENGTH__+0x258>
                    {
                        CRANE_saveMovesToEeprom(eepromAddress);
    124a:	85 e5       	ldi	r24, 0x55	; 85
    124c:	95 e0       	ldi	r25, 0x05	; 5
    124e:	f0 db       	rcall	.-2080   	; 0xa30 <CRANE_saveMovesToEeprom>
    1250:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <currentMoveIndex>
                        currentMoveIndex = 0;
    1254:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <applicationState>

                        // done recording, back to action state after zeroing
                        // home ---> action(play)
                        applicationState = calibrateState;
    1258:	02 99       	sbic	0x00, 2	; 0
                    }

                    while(recordButton)
    125a:	fe cf       	rjmp	.-4      	; 0x1258 <__EEPROM_REGION_LENGTH__+0x258>
    125c:	aa cc       	rjmp	.-1708   	; 0xbb2 <main+0x4a>
    125e:	66 e9       	ldi	r22, 0x96	; 150
            // DEBUG: the default case will be the home case
            case calibrateState:
            default:
            {
                // 0 is up 255 is down
                CRANE_setServoPosition(armServo, armStartPosition);
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	f2 da       	rcall	.-2588   	; 0x848 <CRANE_setServoPosition>
    1264:	66 ee       	ldi	r22, 0xE6	; 230
    1266:	81 e0       	ldi	r24, 0x01	; 1
                // 255 is close 0 is open
                CRANE_setServoPosition(plungerServo, plungerStartPosition);
    1268:	ef da       	rcall	.-2594   	; 0x848 <CRANE_setServoPosition>
    126a:	e1 2c       	mov	r14, r1
    126c:	f1 2c       	mov	r15, r1
    126e:	00 e4       	ldi	r16, 0x40	; 64

                // move CW for one second to ensure the limit switch is not set
                SM_moveTime(stepperModeHalf, 0, 1000, 3);
    1270:	10 e4       	ldi	r17, 0x40	; 64
    1272:	20 e0       	ldi	r18, 0x00	; 0
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	4a e7       	ldi	r20, 0x7A	; 122
    1278:	54 e4       	ldi	r21, 0x44	; 68
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	82 e0       	ldi	r24, 0x02	; 2
    127e:	9a d8       	rcall	.-3788   	; 0x3b4 <SM_moveTime>
    1280:	05 c0       	rjmp	.+10     	; 0x128c <__EEPROM_REGION_LENGTH__+0x28c>
    1282:	48 e1       	ldi	r20, 0x18	; 24
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	61 e0       	ldi	r22, 0x01	; 1

                // while not hitting the switch
                while(!limitSwitch)
    1288:	82 e0       	ldi	r24, 0x02	; 2
                {
                    // then move CCW a bit at the time until we hit the limit switch
                    SM_moveStepsSigned(stepperModeHalf, 1, 24);
    128a:	78 d9       	rcall	.-3344   	; 0x57c <SM_moveStepsSigned>
    128c:	34 9b       	sbis	0x06, 4	; 6
    128e:	f9 cf       	rjmp	.-14     	; 0x1282 <__EEPROM_REGION_LENGTH__+0x282>
    1290:	63 e2       	ldi	r22, 0x23	; 35
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	82 e0       	ldi	r24, 0x02	; 2

                // move CW for one second to ensure the limit switch is not set
                SM_moveTime(stepperModeHalf, 0, 1000, 3);

                // while not hitting the switch
                while(!limitSwitch)
    1296:	7d d8       	rcall	.-3846   	; 0x392 <SM_movePosition>
    1298:	eb ef       	ldi	r30, 0xFB	; 251
                    // then move CCW a bit at the time until we hit the limit switch
                    SM_moveStepsSigned(stepperModeHalf, 1, 24);
                }

                // then move 30 degrees back to center the arm
                SM_movePosition(stepperModeHalf, 35);
    129a:	f3 e0       	ldi	r31, 0x03	; 3
    129c:	11 82       	std	Z+1, r1	; 0x01
    129e:	10 82       	st	Z, r1
    12a0:	86 e9       	ldi	r24, 0x96	; 150
    12a2:	82 83       	std	Z+2, r24	; 0x02

                // set the current position
                craneState.motorTicks   = 0;
    12a4:	86 ee       	ldi	r24, 0xE6	; 230
    12a6:	83 83       	std	Z+3, r24	; 0x03
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <applicationState>
                craneState.armTicks     = armStartPosition;
    12ae:	81 cc       	rjmp	.-1790   	; 0xbb2 <main+0x4a>

000012b0 <__subsf3>:
                craneState.plungerTicks = plungerStartPosition;
    12b0:	50 58       	subi	r21, 0x80	; 128

000012b2 <__addsf3>:
    12b2:	bb 27       	eor	r27, r27

                // then set it to action state
                applicationState = actionState;
    12b4:	aa 27       	eor	r26, r26
    12b6:	0e d0       	rcall	.+28     	; 0x12d4 <__addsf3x>
    12b8:	70 c1       	rjmp	.+736    	; 0x159a <__fp_round>
            }
            break;
    12ba:	61 d1       	rcall	.+706    	; 0x157e <__fp_pscA>
    12bc:	30 f0       	brcs	.+12     	; 0x12ca <__addsf3+0x18>
    12be:	66 d1       	rcall	.+716    	; 0x158c <__fp_pscB>
    12c0:	20 f0       	brcs	.+8      	; 0x12ca <__addsf3+0x18>
    12c2:	31 f4       	brne	.+12     	; 0x12d0 <__addsf3+0x1e>
    12c4:	9f 3f       	cpi	r25, 0xFF	; 255
    12c6:	11 f4       	brne	.+4      	; 0x12cc <__addsf3+0x1a>
    12c8:	1e f4       	brtc	.+6      	; 0x12d0 <__addsf3+0x1e>
    12ca:	56 c1       	rjmp	.+684    	; 0x1578 <__fp_nan>
    12cc:	0e f4       	brtc	.+2      	; 0x12d0 <__addsf3+0x1e>
    12ce:	e0 95       	com	r30
    12d0:	e7 fb       	bst	r30, 7
    12d2:	4c c1       	rjmp	.+664    	; 0x156c <__fp_inf>

000012d4 <__addsf3x>:
    12d4:	e9 2f       	mov	r30, r25
    12d6:	72 d1       	rcall	.+740    	; 0x15bc <__fp_split3>
    12d8:	80 f3       	brcs	.-32     	; 0x12ba <__addsf3+0x8>
    12da:	ba 17       	cp	r27, r26
    12dc:	62 07       	cpc	r22, r18
    12de:	73 07       	cpc	r23, r19
    12e0:	84 07       	cpc	r24, r20
    12e2:	95 07       	cpc	r25, r21
    12e4:	18 f0       	brcs	.+6      	; 0x12ec <__addsf3x+0x18>
    12e6:	71 f4       	brne	.+28     	; 0x1304 <__addsf3x+0x30>
    12e8:	9e f5       	brtc	.+102    	; 0x1350 <__addsf3x+0x7c>
    12ea:	8a c1       	rjmp	.+788    	; 0x1600 <__fp_zero>
    12ec:	0e f4       	brtc	.+2      	; 0x12f0 <__addsf3x+0x1c>
    12ee:	e0 95       	com	r30
    12f0:	0b 2e       	mov	r0, r27
    12f2:	ba 2f       	mov	r27, r26
    12f4:	a0 2d       	mov	r26, r0
    12f6:	0b 01       	movw	r0, r22
    12f8:	b9 01       	movw	r22, r18
    12fa:	90 01       	movw	r18, r0
    12fc:	0c 01       	movw	r0, r24
    12fe:	ca 01       	movw	r24, r20
    1300:	a0 01       	movw	r20, r0
    1302:	11 24       	eor	r1, r1
    1304:	ff 27       	eor	r31, r31
    1306:	59 1b       	sub	r21, r25
    1308:	99 f0       	breq	.+38     	; 0x1330 <__addsf3x+0x5c>
    130a:	59 3f       	cpi	r21, 0xF9	; 249
    130c:	50 f4       	brcc	.+20     	; 0x1322 <__addsf3x+0x4e>
    130e:	50 3e       	cpi	r21, 0xE0	; 224
    1310:	68 f1       	brcs	.+90     	; 0x136c <__addsf3x+0x98>
    1312:	1a 16       	cp	r1, r26
    1314:	f0 40       	sbci	r31, 0x00	; 0
    1316:	a2 2f       	mov	r26, r18
    1318:	23 2f       	mov	r18, r19
    131a:	34 2f       	mov	r19, r20
    131c:	44 27       	eor	r20, r20
    131e:	58 5f       	subi	r21, 0xF8	; 248
    1320:	f3 cf       	rjmp	.-26     	; 0x1308 <__addsf3x+0x34>
    1322:	46 95       	lsr	r20
    1324:	37 95       	ror	r19
    1326:	27 95       	ror	r18
    1328:	a7 95       	ror	r26
    132a:	f0 40       	sbci	r31, 0x00	; 0
    132c:	53 95       	inc	r21
    132e:	c9 f7       	brne	.-14     	; 0x1322 <__addsf3x+0x4e>
    1330:	7e f4       	brtc	.+30     	; 0x1350 <__addsf3x+0x7c>
    1332:	1f 16       	cp	r1, r31
    1334:	ba 0b       	sbc	r27, r26
    1336:	62 0b       	sbc	r22, r18
    1338:	73 0b       	sbc	r23, r19
    133a:	84 0b       	sbc	r24, r20
    133c:	ba f0       	brmi	.+46     	; 0x136c <__addsf3x+0x98>
    133e:	91 50       	subi	r25, 0x01	; 1
    1340:	a1 f0       	breq	.+40     	; 0x136a <__addsf3x+0x96>
    1342:	ff 0f       	add	r31, r31
    1344:	bb 1f       	adc	r27, r27
    1346:	66 1f       	adc	r22, r22
    1348:	77 1f       	adc	r23, r23
    134a:	88 1f       	adc	r24, r24
    134c:	c2 f7       	brpl	.-16     	; 0x133e <__addsf3x+0x6a>
    134e:	0e c0       	rjmp	.+28     	; 0x136c <__addsf3x+0x98>
    1350:	ba 0f       	add	r27, r26
    1352:	62 1f       	adc	r22, r18
    1354:	73 1f       	adc	r23, r19
    1356:	84 1f       	adc	r24, r20
    1358:	48 f4       	brcc	.+18     	; 0x136c <__addsf3x+0x98>
    135a:	87 95       	ror	r24
    135c:	77 95       	ror	r23
    135e:	67 95       	ror	r22
    1360:	b7 95       	ror	r27
    1362:	f7 95       	ror	r31
    1364:	9e 3f       	cpi	r25, 0xFE	; 254
    1366:	08 f0       	brcs	.+2      	; 0x136a <__addsf3x+0x96>
    1368:	b3 cf       	rjmp	.-154    	; 0x12d0 <__addsf3+0x1e>
    136a:	93 95       	inc	r25
    136c:	88 0f       	add	r24, r24
    136e:	08 f0       	brcs	.+2      	; 0x1372 <__addsf3x+0x9e>
    1370:	99 27       	eor	r25, r25
    1372:	ee 0f       	add	r30, r30
    1374:	97 95       	ror	r25
    1376:	87 95       	ror	r24
    1378:	08 95       	ret

0000137a <__cmpsf2>:
    137a:	d4 d0       	rcall	.+424    	; 0x1524 <__fp_cmp>
    137c:	08 f4       	brcc	.+2      	; 0x1380 <__cmpsf2+0x6>
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	08 95       	ret

00001382 <__divsf3>:
    1382:	0c d0       	rcall	.+24     	; 0x139c <__divsf3x>
    1384:	0a c1       	rjmp	.+532    	; 0x159a <__fp_round>
    1386:	02 d1       	rcall	.+516    	; 0x158c <__fp_pscB>
    1388:	40 f0       	brcs	.+16     	; 0x139a <__divsf3+0x18>
    138a:	f9 d0       	rcall	.+498    	; 0x157e <__fp_pscA>
    138c:	30 f0       	brcs	.+12     	; 0x139a <__divsf3+0x18>
    138e:	21 f4       	brne	.+8      	; 0x1398 <__divsf3+0x16>
    1390:	5f 3f       	cpi	r21, 0xFF	; 255
    1392:	19 f0       	breq	.+6      	; 0x139a <__divsf3+0x18>
    1394:	eb c0       	rjmp	.+470    	; 0x156c <__fp_inf>
    1396:	51 11       	cpse	r21, r1
    1398:	34 c1       	rjmp	.+616    	; 0x1602 <__fp_szero>
    139a:	ee c0       	rjmp	.+476    	; 0x1578 <__fp_nan>

0000139c <__divsf3x>:
    139c:	0f d1       	rcall	.+542    	; 0x15bc <__fp_split3>
    139e:	98 f3       	brcs	.-26     	; 0x1386 <__divsf3+0x4>

000013a0 <__divsf3_pse>:
    13a0:	99 23       	and	r25, r25
    13a2:	c9 f3       	breq	.-14     	; 0x1396 <__divsf3+0x14>
    13a4:	55 23       	and	r21, r21
    13a6:	b1 f3       	breq	.-20     	; 0x1394 <__divsf3+0x12>
    13a8:	95 1b       	sub	r25, r21
    13aa:	55 0b       	sbc	r21, r21
    13ac:	bb 27       	eor	r27, r27
    13ae:	aa 27       	eor	r26, r26
    13b0:	62 17       	cp	r22, r18
    13b2:	73 07       	cpc	r23, r19
    13b4:	84 07       	cpc	r24, r20
    13b6:	38 f0       	brcs	.+14     	; 0x13c6 <__divsf3_pse+0x26>
    13b8:	9f 5f       	subi	r25, 0xFF	; 255
    13ba:	5f 4f       	sbci	r21, 0xFF	; 255
    13bc:	22 0f       	add	r18, r18
    13be:	33 1f       	adc	r19, r19
    13c0:	44 1f       	adc	r20, r20
    13c2:	aa 1f       	adc	r26, r26
    13c4:	a9 f3       	breq	.-22     	; 0x13b0 <__divsf3_pse+0x10>
    13c6:	33 d0       	rcall	.+102    	; 0x142e <__divsf3_pse+0x8e>
    13c8:	0e 2e       	mov	r0, r30
    13ca:	3a f0       	brmi	.+14     	; 0x13da <__divsf3_pse+0x3a>
    13cc:	e0 e8       	ldi	r30, 0x80	; 128
    13ce:	30 d0       	rcall	.+96     	; 0x1430 <__divsf3_pse+0x90>
    13d0:	91 50       	subi	r25, 0x01	; 1
    13d2:	50 40       	sbci	r21, 0x00	; 0
    13d4:	e6 95       	lsr	r30
    13d6:	00 1c       	adc	r0, r0
    13d8:	ca f7       	brpl	.-14     	; 0x13cc <__divsf3_pse+0x2c>
    13da:	29 d0       	rcall	.+82     	; 0x142e <__divsf3_pse+0x8e>
    13dc:	fe 2f       	mov	r31, r30
    13de:	27 d0       	rcall	.+78     	; 0x142e <__divsf3_pse+0x8e>
    13e0:	66 0f       	add	r22, r22
    13e2:	77 1f       	adc	r23, r23
    13e4:	88 1f       	adc	r24, r24
    13e6:	bb 1f       	adc	r27, r27
    13e8:	26 17       	cp	r18, r22
    13ea:	37 07       	cpc	r19, r23
    13ec:	48 07       	cpc	r20, r24
    13ee:	ab 07       	cpc	r26, r27
    13f0:	b0 e8       	ldi	r27, 0x80	; 128
    13f2:	09 f0       	breq	.+2      	; 0x13f6 <__divsf3_pse+0x56>
    13f4:	bb 0b       	sbc	r27, r27
    13f6:	80 2d       	mov	r24, r0
    13f8:	bf 01       	movw	r22, r30
    13fa:	ff 27       	eor	r31, r31
    13fc:	93 58       	subi	r25, 0x83	; 131
    13fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1400:	2a f0       	brmi	.+10     	; 0x140c <__divsf3_pse+0x6c>
    1402:	9e 3f       	cpi	r25, 0xFE	; 254
    1404:	51 05       	cpc	r21, r1
    1406:	68 f0       	brcs	.+26     	; 0x1422 <__divsf3_pse+0x82>
    1408:	b1 c0       	rjmp	.+354    	; 0x156c <__fp_inf>
    140a:	fb c0       	rjmp	.+502    	; 0x1602 <__fp_szero>
    140c:	5f 3f       	cpi	r21, 0xFF	; 255
    140e:	ec f3       	brlt	.-6      	; 0x140a <__divsf3_pse+0x6a>
    1410:	98 3e       	cpi	r25, 0xE8	; 232
    1412:	dc f3       	brlt	.-10     	; 0x140a <__divsf3_pse+0x6a>
    1414:	86 95       	lsr	r24
    1416:	77 95       	ror	r23
    1418:	67 95       	ror	r22
    141a:	b7 95       	ror	r27
    141c:	f7 95       	ror	r31
    141e:	9f 5f       	subi	r25, 0xFF	; 255
    1420:	c9 f7       	brne	.-14     	; 0x1414 <__divsf3_pse+0x74>
    1422:	88 0f       	add	r24, r24
    1424:	91 1d       	adc	r25, r1
    1426:	96 95       	lsr	r25
    1428:	87 95       	ror	r24
    142a:	97 f9       	bld	r25, 7
    142c:	08 95       	ret
    142e:	e1 e0       	ldi	r30, 0x01	; 1
    1430:	66 0f       	add	r22, r22
    1432:	77 1f       	adc	r23, r23
    1434:	88 1f       	adc	r24, r24
    1436:	bb 1f       	adc	r27, r27
    1438:	62 17       	cp	r22, r18
    143a:	73 07       	cpc	r23, r19
    143c:	84 07       	cpc	r24, r20
    143e:	ba 07       	cpc	r27, r26
    1440:	20 f0       	brcs	.+8      	; 0x144a <__divsf3_pse+0xaa>
    1442:	62 1b       	sub	r22, r18
    1444:	73 0b       	sbc	r23, r19
    1446:	84 0b       	sbc	r24, r20
    1448:	ba 0b       	sbc	r27, r26
    144a:	ee 1f       	adc	r30, r30
    144c:	88 f7       	brcc	.-30     	; 0x1430 <__divsf3_pse+0x90>
    144e:	e0 95       	com	r30
    1450:	08 95       	ret

00001452 <__fixunssfsi>:
    1452:	bc d0       	rcall	.+376    	; 0x15cc <__fp_splitA>
    1454:	88 f0       	brcs	.+34     	; 0x1478 <__fixunssfsi+0x26>
    1456:	9f 57       	subi	r25, 0x7F	; 127
    1458:	90 f0       	brcs	.+36     	; 0x147e <__fixunssfsi+0x2c>
    145a:	b9 2f       	mov	r27, r25
    145c:	99 27       	eor	r25, r25
    145e:	b7 51       	subi	r27, 0x17	; 23
    1460:	a0 f0       	brcs	.+40     	; 0x148a <__fixunssfsi+0x38>
    1462:	d1 f0       	breq	.+52     	; 0x1498 <__fixunssfsi+0x46>
    1464:	66 0f       	add	r22, r22
    1466:	77 1f       	adc	r23, r23
    1468:	88 1f       	adc	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	1a f0       	brmi	.+6      	; 0x1474 <__fixunssfsi+0x22>
    146e:	ba 95       	dec	r27
    1470:	c9 f7       	brne	.-14     	; 0x1464 <__fixunssfsi+0x12>
    1472:	12 c0       	rjmp	.+36     	; 0x1498 <__fixunssfsi+0x46>
    1474:	b1 30       	cpi	r27, 0x01	; 1
    1476:	81 f0       	breq	.+32     	; 0x1498 <__fixunssfsi+0x46>
    1478:	c3 d0       	rcall	.+390    	; 0x1600 <__fp_zero>
    147a:	b1 e0       	ldi	r27, 0x01	; 1
    147c:	08 95       	ret
    147e:	c0 c0       	rjmp	.+384    	; 0x1600 <__fp_zero>
    1480:	67 2f       	mov	r22, r23
    1482:	78 2f       	mov	r23, r24
    1484:	88 27       	eor	r24, r24
    1486:	b8 5f       	subi	r27, 0xF8	; 248
    1488:	39 f0       	breq	.+14     	; 0x1498 <__fixunssfsi+0x46>
    148a:	b9 3f       	cpi	r27, 0xF9	; 249
    148c:	cc f3       	brlt	.-14     	; 0x1480 <__fixunssfsi+0x2e>
    148e:	86 95       	lsr	r24
    1490:	77 95       	ror	r23
    1492:	67 95       	ror	r22
    1494:	b3 95       	inc	r27
    1496:	d9 f7       	brne	.-10     	; 0x148e <__fixunssfsi+0x3c>
    1498:	3e f4       	brtc	.+14     	; 0x14a8 <__fixunssfsi+0x56>
    149a:	90 95       	com	r25
    149c:	80 95       	com	r24
    149e:	70 95       	com	r23
    14a0:	61 95       	neg	r22
    14a2:	7f 4f       	sbci	r23, 0xFF	; 255
    14a4:	8f 4f       	sbci	r24, 0xFF	; 255
    14a6:	9f 4f       	sbci	r25, 0xFF	; 255
    14a8:	08 95       	ret

000014aa <__floatunsisf>:
    14aa:	e8 94       	clt
    14ac:	09 c0       	rjmp	.+18     	; 0x14c0 <__floatsisf+0x12>

000014ae <__floatsisf>:
    14ae:	97 fb       	bst	r25, 7
    14b0:	3e f4       	brtc	.+14     	; 0x14c0 <__floatsisf+0x12>
    14b2:	90 95       	com	r25
    14b4:	80 95       	com	r24
    14b6:	70 95       	com	r23
    14b8:	61 95       	neg	r22
    14ba:	7f 4f       	sbci	r23, 0xFF	; 255
    14bc:	8f 4f       	sbci	r24, 0xFF	; 255
    14be:	9f 4f       	sbci	r25, 0xFF	; 255
    14c0:	99 23       	and	r25, r25
    14c2:	a9 f0       	breq	.+42     	; 0x14ee <__floatsisf+0x40>
    14c4:	f9 2f       	mov	r31, r25
    14c6:	96 e9       	ldi	r25, 0x96	; 150
    14c8:	bb 27       	eor	r27, r27
    14ca:	93 95       	inc	r25
    14cc:	f6 95       	lsr	r31
    14ce:	87 95       	ror	r24
    14d0:	77 95       	ror	r23
    14d2:	67 95       	ror	r22
    14d4:	b7 95       	ror	r27
    14d6:	f1 11       	cpse	r31, r1
    14d8:	f8 cf       	rjmp	.-16     	; 0x14ca <__floatsisf+0x1c>
    14da:	fa f4       	brpl	.+62     	; 0x151a <__floatsisf+0x6c>
    14dc:	bb 0f       	add	r27, r27
    14de:	11 f4       	brne	.+4      	; 0x14e4 <__floatsisf+0x36>
    14e0:	60 ff       	sbrs	r22, 0
    14e2:	1b c0       	rjmp	.+54     	; 0x151a <__floatsisf+0x6c>
    14e4:	6f 5f       	subi	r22, 0xFF	; 255
    14e6:	7f 4f       	sbci	r23, 0xFF	; 255
    14e8:	8f 4f       	sbci	r24, 0xFF	; 255
    14ea:	9f 4f       	sbci	r25, 0xFF	; 255
    14ec:	16 c0       	rjmp	.+44     	; 0x151a <__floatsisf+0x6c>
    14ee:	88 23       	and	r24, r24
    14f0:	11 f0       	breq	.+4      	; 0x14f6 <__floatsisf+0x48>
    14f2:	96 e9       	ldi	r25, 0x96	; 150
    14f4:	11 c0       	rjmp	.+34     	; 0x1518 <__floatsisf+0x6a>
    14f6:	77 23       	and	r23, r23
    14f8:	21 f0       	breq	.+8      	; 0x1502 <__floatsisf+0x54>
    14fa:	9e e8       	ldi	r25, 0x8E	; 142
    14fc:	87 2f       	mov	r24, r23
    14fe:	76 2f       	mov	r23, r22
    1500:	05 c0       	rjmp	.+10     	; 0x150c <__floatsisf+0x5e>
    1502:	66 23       	and	r22, r22
    1504:	71 f0       	breq	.+28     	; 0x1522 <__floatsisf+0x74>
    1506:	96 e8       	ldi	r25, 0x86	; 134
    1508:	86 2f       	mov	r24, r22
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	2a f0       	brmi	.+10     	; 0x151a <__floatsisf+0x6c>
    1510:	9a 95       	dec	r25
    1512:	66 0f       	add	r22, r22
    1514:	77 1f       	adc	r23, r23
    1516:	88 1f       	adc	r24, r24
    1518:	da f7       	brpl	.-10     	; 0x1510 <__floatsisf+0x62>
    151a:	88 0f       	add	r24, r24
    151c:	96 95       	lsr	r25
    151e:	87 95       	ror	r24
    1520:	97 f9       	bld	r25, 7
    1522:	08 95       	ret

00001524 <__fp_cmp>:
    1524:	99 0f       	add	r25, r25
    1526:	00 08       	sbc	r0, r0
    1528:	55 0f       	add	r21, r21
    152a:	aa 0b       	sbc	r26, r26
    152c:	e0 e8       	ldi	r30, 0x80	; 128
    152e:	fe ef       	ldi	r31, 0xFE	; 254
    1530:	16 16       	cp	r1, r22
    1532:	17 06       	cpc	r1, r23
    1534:	e8 07       	cpc	r30, r24
    1536:	f9 07       	cpc	r31, r25
    1538:	c0 f0       	brcs	.+48     	; 0x156a <__fp_cmp+0x46>
    153a:	12 16       	cp	r1, r18
    153c:	13 06       	cpc	r1, r19
    153e:	e4 07       	cpc	r30, r20
    1540:	f5 07       	cpc	r31, r21
    1542:	98 f0       	brcs	.+38     	; 0x156a <__fp_cmp+0x46>
    1544:	62 1b       	sub	r22, r18
    1546:	73 0b       	sbc	r23, r19
    1548:	84 0b       	sbc	r24, r20
    154a:	95 0b       	sbc	r25, r21
    154c:	39 f4       	brne	.+14     	; 0x155c <__fp_cmp+0x38>
    154e:	0a 26       	eor	r0, r26
    1550:	61 f0       	breq	.+24     	; 0x156a <__fp_cmp+0x46>
    1552:	23 2b       	or	r18, r19
    1554:	24 2b       	or	r18, r20
    1556:	25 2b       	or	r18, r21
    1558:	21 f4       	brne	.+8      	; 0x1562 <__fp_cmp+0x3e>
    155a:	08 95       	ret
    155c:	0a 26       	eor	r0, r26
    155e:	09 f4       	brne	.+2      	; 0x1562 <__fp_cmp+0x3e>
    1560:	a1 40       	sbci	r26, 0x01	; 1
    1562:	a6 95       	lsr	r26
    1564:	8f ef       	ldi	r24, 0xFF	; 255
    1566:	81 1d       	adc	r24, r1
    1568:	81 1d       	adc	r24, r1
    156a:	08 95       	ret

0000156c <__fp_inf>:
    156c:	97 f9       	bld	r25, 7
    156e:	9f 67       	ori	r25, 0x7F	; 127
    1570:	80 e8       	ldi	r24, 0x80	; 128
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	08 95       	ret

00001578 <__fp_nan>:
    1578:	9f ef       	ldi	r25, 0xFF	; 255
    157a:	80 ec       	ldi	r24, 0xC0	; 192
    157c:	08 95       	ret

0000157e <__fp_pscA>:
    157e:	00 24       	eor	r0, r0
    1580:	0a 94       	dec	r0
    1582:	16 16       	cp	r1, r22
    1584:	17 06       	cpc	r1, r23
    1586:	18 06       	cpc	r1, r24
    1588:	09 06       	cpc	r0, r25
    158a:	08 95       	ret

0000158c <__fp_pscB>:
    158c:	00 24       	eor	r0, r0
    158e:	0a 94       	dec	r0
    1590:	12 16       	cp	r1, r18
    1592:	13 06       	cpc	r1, r19
    1594:	14 06       	cpc	r1, r20
    1596:	05 06       	cpc	r0, r21
    1598:	08 95       	ret

0000159a <__fp_round>:
    159a:	09 2e       	mov	r0, r25
    159c:	03 94       	inc	r0
    159e:	00 0c       	add	r0, r0
    15a0:	11 f4       	brne	.+4      	; 0x15a6 <__fp_round+0xc>
    15a2:	88 23       	and	r24, r24
    15a4:	52 f0       	brmi	.+20     	; 0x15ba <__fp_round+0x20>
    15a6:	bb 0f       	add	r27, r27
    15a8:	40 f4       	brcc	.+16     	; 0x15ba <__fp_round+0x20>
    15aa:	bf 2b       	or	r27, r31
    15ac:	11 f4       	brne	.+4      	; 0x15b2 <__fp_round+0x18>
    15ae:	60 ff       	sbrs	r22, 0
    15b0:	04 c0       	rjmp	.+8      	; 0x15ba <__fp_round+0x20>
    15b2:	6f 5f       	subi	r22, 0xFF	; 255
    15b4:	7f 4f       	sbci	r23, 0xFF	; 255
    15b6:	8f 4f       	sbci	r24, 0xFF	; 255
    15b8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ba:	08 95       	ret

000015bc <__fp_split3>:
    15bc:	57 fd       	sbrc	r21, 7
    15be:	90 58       	subi	r25, 0x80	; 128
    15c0:	44 0f       	add	r20, r20
    15c2:	55 1f       	adc	r21, r21
    15c4:	59 f0       	breq	.+22     	; 0x15dc <__fp_splitA+0x10>
    15c6:	5f 3f       	cpi	r21, 0xFF	; 255
    15c8:	71 f0       	breq	.+28     	; 0x15e6 <__fp_splitA+0x1a>
    15ca:	47 95       	ror	r20

000015cc <__fp_splitA>:
    15cc:	88 0f       	add	r24, r24
    15ce:	97 fb       	bst	r25, 7
    15d0:	99 1f       	adc	r25, r25
    15d2:	61 f0       	breq	.+24     	; 0x15ec <__fp_splitA+0x20>
    15d4:	9f 3f       	cpi	r25, 0xFF	; 255
    15d6:	79 f0       	breq	.+30     	; 0x15f6 <__fp_splitA+0x2a>
    15d8:	87 95       	ror	r24
    15da:	08 95       	ret
    15dc:	12 16       	cp	r1, r18
    15de:	13 06       	cpc	r1, r19
    15e0:	14 06       	cpc	r1, r20
    15e2:	55 1f       	adc	r21, r21
    15e4:	f2 cf       	rjmp	.-28     	; 0x15ca <__fp_split3+0xe>
    15e6:	46 95       	lsr	r20
    15e8:	f1 df       	rcall	.-30     	; 0x15cc <__fp_splitA>
    15ea:	08 c0       	rjmp	.+16     	; 0x15fc <__fp_splitA+0x30>
    15ec:	16 16       	cp	r1, r22
    15ee:	17 06       	cpc	r1, r23
    15f0:	18 06       	cpc	r1, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	f1 cf       	rjmp	.-30     	; 0x15d8 <__fp_splitA+0xc>
    15f6:	86 95       	lsr	r24
    15f8:	71 05       	cpc	r23, r1
    15fa:	61 05       	cpc	r22, r1
    15fc:	08 94       	sec
    15fe:	08 95       	ret

00001600 <__fp_zero>:
    1600:	e8 94       	clt

00001602 <__fp_szero>:
    1602:	bb 27       	eor	r27, r27
    1604:	66 27       	eor	r22, r22
    1606:	77 27       	eor	r23, r23
    1608:	cb 01       	movw	r24, r22
    160a:	97 f9       	bld	r25, 7
    160c:	08 95       	ret

0000160e <__gesf2>:
    160e:	8a df       	rcall	.-236    	; 0x1524 <__fp_cmp>
    1610:	08 f4       	brcc	.+2      	; 0x1614 <__gesf2+0x6>
    1612:	8f ef       	ldi	r24, 0xFF	; 255
    1614:	08 95       	ret

00001616 <__mulsf3>:
    1616:	0b d0       	rcall	.+22     	; 0x162e <__mulsf3x>
    1618:	c0 cf       	rjmp	.-128    	; 0x159a <__fp_round>
    161a:	b1 df       	rcall	.-158    	; 0x157e <__fp_pscA>
    161c:	28 f0       	brcs	.+10     	; 0x1628 <__mulsf3+0x12>
    161e:	b6 df       	rcall	.-148    	; 0x158c <__fp_pscB>
    1620:	18 f0       	brcs	.+6      	; 0x1628 <__mulsf3+0x12>
    1622:	95 23       	and	r25, r21
    1624:	09 f0       	breq	.+2      	; 0x1628 <__mulsf3+0x12>
    1626:	a2 cf       	rjmp	.-188    	; 0x156c <__fp_inf>
    1628:	a7 cf       	rjmp	.-178    	; 0x1578 <__fp_nan>
    162a:	11 24       	eor	r1, r1
    162c:	ea cf       	rjmp	.-44     	; 0x1602 <__fp_szero>

0000162e <__mulsf3x>:
    162e:	c6 df       	rcall	.-116    	; 0x15bc <__fp_split3>
    1630:	a0 f3       	brcs	.-24     	; 0x161a <__mulsf3+0x4>

00001632 <__mulsf3_pse>:
    1632:	95 9f       	mul	r25, r21
    1634:	d1 f3       	breq	.-12     	; 0x162a <__mulsf3+0x14>
    1636:	95 0f       	add	r25, r21
    1638:	50 e0       	ldi	r21, 0x00	; 0
    163a:	55 1f       	adc	r21, r21
    163c:	62 9f       	mul	r22, r18
    163e:	f0 01       	movw	r30, r0
    1640:	72 9f       	mul	r23, r18
    1642:	bb 27       	eor	r27, r27
    1644:	f0 0d       	add	r31, r0
    1646:	b1 1d       	adc	r27, r1
    1648:	63 9f       	mul	r22, r19
    164a:	aa 27       	eor	r26, r26
    164c:	f0 0d       	add	r31, r0
    164e:	b1 1d       	adc	r27, r1
    1650:	aa 1f       	adc	r26, r26
    1652:	64 9f       	mul	r22, r20
    1654:	66 27       	eor	r22, r22
    1656:	b0 0d       	add	r27, r0
    1658:	a1 1d       	adc	r26, r1
    165a:	66 1f       	adc	r22, r22
    165c:	82 9f       	mul	r24, r18
    165e:	22 27       	eor	r18, r18
    1660:	b0 0d       	add	r27, r0
    1662:	a1 1d       	adc	r26, r1
    1664:	62 1f       	adc	r22, r18
    1666:	73 9f       	mul	r23, r19
    1668:	b0 0d       	add	r27, r0
    166a:	a1 1d       	adc	r26, r1
    166c:	62 1f       	adc	r22, r18
    166e:	83 9f       	mul	r24, r19
    1670:	a0 0d       	add	r26, r0
    1672:	61 1d       	adc	r22, r1
    1674:	22 1f       	adc	r18, r18
    1676:	74 9f       	mul	r23, r20
    1678:	33 27       	eor	r19, r19
    167a:	a0 0d       	add	r26, r0
    167c:	61 1d       	adc	r22, r1
    167e:	23 1f       	adc	r18, r19
    1680:	84 9f       	mul	r24, r20
    1682:	60 0d       	add	r22, r0
    1684:	21 1d       	adc	r18, r1
    1686:	82 2f       	mov	r24, r18
    1688:	76 2f       	mov	r23, r22
    168a:	6a 2f       	mov	r22, r26
    168c:	11 24       	eor	r1, r1
    168e:	9f 57       	subi	r25, 0x7F	; 127
    1690:	50 40       	sbci	r21, 0x00	; 0
    1692:	8a f0       	brmi	.+34     	; 0x16b6 <__mulsf3_pse+0x84>
    1694:	e1 f0       	breq	.+56     	; 0x16ce <__mulsf3_pse+0x9c>
    1696:	88 23       	and	r24, r24
    1698:	4a f0       	brmi	.+18     	; 0x16ac <__mulsf3_pse+0x7a>
    169a:	ee 0f       	add	r30, r30
    169c:	ff 1f       	adc	r31, r31
    169e:	bb 1f       	adc	r27, r27
    16a0:	66 1f       	adc	r22, r22
    16a2:	77 1f       	adc	r23, r23
    16a4:	88 1f       	adc	r24, r24
    16a6:	91 50       	subi	r25, 0x01	; 1
    16a8:	50 40       	sbci	r21, 0x00	; 0
    16aa:	a9 f7       	brne	.-22     	; 0x1696 <__mulsf3_pse+0x64>
    16ac:	9e 3f       	cpi	r25, 0xFE	; 254
    16ae:	51 05       	cpc	r21, r1
    16b0:	70 f0       	brcs	.+28     	; 0x16ce <__mulsf3_pse+0x9c>
    16b2:	5c cf       	rjmp	.-328    	; 0x156c <__fp_inf>
    16b4:	a6 cf       	rjmp	.-180    	; 0x1602 <__fp_szero>
    16b6:	5f 3f       	cpi	r21, 0xFF	; 255
    16b8:	ec f3       	brlt	.-6      	; 0x16b4 <__mulsf3_pse+0x82>
    16ba:	98 3e       	cpi	r25, 0xE8	; 232
    16bc:	dc f3       	brlt	.-10     	; 0x16b4 <__mulsf3_pse+0x82>
    16be:	86 95       	lsr	r24
    16c0:	77 95       	ror	r23
    16c2:	67 95       	ror	r22
    16c4:	b7 95       	ror	r27
    16c6:	f7 95       	ror	r31
    16c8:	e7 95       	ror	r30
    16ca:	9f 5f       	subi	r25, 0xFF	; 255
    16cc:	c1 f7       	brne	.-16     	; 0x16be <__mulsf3_pse+0x8c>
    16ce:	fe 2b       	or	r31, r30
    16d0:	88 0f       	add	r24, r24
    16d2:	91 1d       	adc	r25, r1
    16d4:	96 95       	lsr	r25
    16d6:	87 95       	ror	r24
    16d8:	97 f9       	bld	r25, 7
    16da:	08 95       	ret

000016dc <__udivmodsi4>:
    16dc:	a1 e2       	ldi	r26, 0x21	; 33
    16de:	1a 2e       	mov	r1, r26
    16e0:	aa 1b       	sub	r26, r26
    16e2:	bb 1b       	sub	r27, r27
    16e4:	fd 01       	movw	r30, r26
    16e6:	0d c0       	rjmp	.+26     	; 0x1702 <__udivmodsi4_ep>

000016e8 <__udivmodsi4_loop>:
    16e8:	aa 1f       	adc	r26, r26
    16ea:	bb 1f       	adc	r27, r27
    16ec:	ee 1f       	adc	r30, r30
    16ee:	ff 1f       	adc	r31, r31
    16f0:	a2 17       	cp	r26, r18
    16f2:	b3 07       	cpc	r27, r19
    16f4:	e4 07       	cpc	r30, r20
    16f6:	f5 07       	cpc	r31, r21
    16f8:	20 f0       	brcs	.+8      	; 0x1702 <__udivmodsi4_ep>
    16fa:	a2 1b       	sub	r26, r18
    16fc:	b3 0b       	sbc	r27, r19
    16fe:	e4 0b       	sbc	r30, r20
    1700:	f5 0b       	sbc	r31, r21

00001702 <__udivmodsi4_ep>:
    1702:	66 1f       	adc	r22, r22
    1704:	77 1f       	adc	r23, r23
    1706:	88 1f       	adc	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	1a 94       	dec	r1
    170c:	69 f7       	brne	.-38     	; 0x16e8 <__udivmodsi4_loop>
    170e:	60 95       	com	r22
    1710:	70 95       	com	r23
    1712:	80 95       	com	r24
    1714:	90 95       	com	r25
    1716:	9b 01       	movw	r18, r22
    1718:	ac 01       	movw	r20, r24
    171a:	bd 01       	movw	r22, r26
    171c:	cf 01       	movw	r24, r30
    171e:	08 95       	ret

00001720 <__umulhisi3>:
    1720:	a2 9f       	mul	r26, r18
    1722:	b0 01       	movw	r22, r0
    1724:	b3 9f       	mul	r27, r19
    1726:	c0 01       	movw	r24, r0
    1728:	a3 9f       	mul	r26, r19
    172a:	70 0d       	add	r23, r0
    172c:	81 1d       	adc	r24, r1
    172e:	11 24       	eor	r1, r1
    1730:	91 1d       	adc	r25, r1
    1732:	b2 9f       	mul	r27, r18
    1734:	70 0d       	add	r23, r0
    1736:	81 1d       	adc	r24, r1
    1738:	11 24       	eor	r1, r1
    173a:	91 1d       	adc	r25, r1
    173c:	08 95       	ret

0000173e <sprintf>:
    173e:	0f 93       	push	r16
    1740:	1f 93       	push	r17
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	2e 97       	sbiw	r28, 0x0e	; 14
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	cd bf       	out	0x3d, r28	; 61
    1756:	0e 89       	ldd	r16, Y+22	; 0x16
    1758:	1f 89       	ldd	r17, Y+23	; 0x17
    175a:	86 e0       	ldi	r24, 0x06	; 6
    175c:	8c 83       	std	Y+4, r24	; 0x04
    175e:	1a 83       	std	Y+2, r17	; 0x02
    1760:	09 83       	std	Y+1, r16	; 0x01
    1762:	8f ef       	ldi	r24, 0xFF	; 255
    1764:	9f e7       	ldi	r25, 0x7F	; 127
    1766:	9e 83       	std	Y+6, r25	; 0x06
    1768:	8d 83       	std	Y+5, r24	; 0x05
    176a:	ae 01       	movw	r20, r28
    176c:	46 5e       	subi	r20, 0xE6	; 230
    176e:	5f 4f       	sbci	r21, 0xFF	; 255
    1770:	68 8d       	ldd	r22, Y+24	; 0x18
    1772:	79 8d       	ldd	r23, Y+25	; 0x19
    1774:	ce 01       	movw	r24, r28
    1776:	01 96       	adiw	r24, 0x01	; 1
    1778:	10 d0       	rcall	.+32     	; 0x179a <vfprintf>
    177a:	ef 81       	ldd	r30, Y+7	; 0x07
    177c:	f8 85       	ldd	r31, Y+8	; 0x08
    177e:	e0 0f       	add	r30, r16
    1780:	f1 1f       	adc	r31, r17
    1782:	10 82       	st	Z, r1
    1784:	2e 96       	adiw	r28, 0x0e	; 14
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	f8 94       	cli
    178a:	de bf       	out	0x3e, r29	; 62
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	cd bf       	out	0x3d, r28	; 61
    1790:	df 91       	pop	r29
    1792:	cf 91       	pop	r28
    1794:	1f 91       	pop	r17
    1796:	0f 91       	pop	r16
    1798:	08 95       	ret

0000179a <vfprintf>:
    179a:	2f 92       	push	r2
    179c:	3f 92       	push	r3
    179e:	4f 92       	push	r4
    17a0:	5f 92       	push	r5
    17a2:	6f 92       	push	r6
    17a4:	7f 92       	push	r7
    17a6:	8f 92       	push	r8
    17a8:	9f 92       	push	r9
    17aa:	af 92       	push	r10
    17ac:	bf 92       	push	r11
    17ae:	cf 92       	push	r12
    17b0:	df 92       	push	r13
    17b2:	ef 92       	push	r14
    17b4:	ff 92       	push	r15
    17b6:	0f 93       	push	r16
    17b8:	1f 93       	push	r17
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	2b 97       	sbiw	r28, 0x0b	; 11
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	f8 94       	cli
    17c8:	de bf       	out	0x3e, r29	; 62
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	cd bf       	out	0x3d, r28	; 61
    17ce:	6c 01       	movw	r12, r24
    17d0:	7b 01       	movw	r14, r22
    17d2:	8a 01       	movw	r16, r20
    17d4:	fc 01       	movw	r30, r24
    17d6:	17 82       	std	Z+7, r1	; 0x07
    17d8:	16 82       	std	Z+6, r1	; 0x06
    17da:	83 81       	ldd	r24, Z+3	; 0x03
    17dc:	81 ff       	sbrs	r24, 1
    17de:	bf c1       	rjmp	.+894    	; 0x1b5e <vfprintf+0x3c4>
    17e0:	ce 01       	movw	r24, r28
    17e2:	01 96       	adiw	r24, 0x01	; 1
    17e4:	3c 01       	movw	r6, r24
    17e6:	f6 01       	movw	r30, r12
    17e8:	93 81       	ldd	r25, Z+3	; 0x03
    17ea:	f7 01       	movw	r30, r14
    17ec:	93 fd       	sbrc	r25, 3
    17ee:	85 91       	lpm	r24, Z+
    17f0:	93 ff       	sbrs	r25, 3
    17f2:	81 91       	ld	r24, Z+
    17f4:	7f 01       	movw	r14, r30
    17f6:	88 23       	and	r24, r24
    17f8:	09 f4       	brne	.+2      	; 0x17fc <vfprintf+0x62>
    17fa:	ad c1       	rjmp	.+858    	; 0x1b56 <vfprintf+0x3bc>
    17fc:	85 32       	cpi	r24, 0x25	; 37
    17fe:	39 f4       	brne	.+14     	; 0x180e <vfprintf+0x74>
    1800:	93 fd       	sbrc	r25, 3
    1802:	85 91       	lpm	r24, Z+
    1804:	93 ff       	sbrs	r25, 3
    1806:	81 91       	ld	r24, Z+
    1808:	7f 01       	movw	r14, r30
    180a:	85 32       	cpi	r24, 0x25	; 37
    180c:	21 f4       	brne	.+8      	; 0x1816 <vfprintf+0x7c>
    180e:	b6 01       	movw	r22, r12
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	d6 d1       	rcall	.+940    	; 0x1bc0 <fputc>
    1814:	e8 cf       	rjmp	.-48     	; 0x17e6 <vfprintf+0x4c>
    1816:	91 2c       	mov	r9, r1
    1818:	21 2c       	mov	r2, r1
    181a:	31 2c       	mov	r3, r1
    181c:	ff e1       	ldi	r31, 0x1F	; 31
    181e:	f3 15       	cp	r31, r3
    1820:	d8 f0       	brcs	.+54     	; 0x1858 <vfprintf+0xbe>
    1822:	8b 32       	cpi	r24, 0x2B	; 43
    1824:	79 f0       	breq	.+30     	; 0x1844 <vfprintf+0xaa>
    1826:	38 f4       	brcc	.+14     	; 0x1836 <vfprintf+0x9c>
    1828:	80 32       	cpi	r24, 0x20	; 32
    182a:	79 f0       	breq	.+30     	; 0x184a <vfprintf+0xb0>
    182c:	83 32       	cpi	r24, 0x23	; 35
    182e:	a1 f4       	brne	.+40     	; 0x1858 <vfprintf+0xbe>
    1830:	23 2d       	mov	r18, r3
    1832:	20 61       	ori	r18, 0x10	; 16
    1834:	1d c0       	rjmp	.+58     	; 0x1870 <vfprintf+0xd6>
    1836:	8d 32       	cpi	r24, 0x2D	; 45
    1838:	61 f0       	breq	.+24     	; 0x1852 <vfprintf+0xb8>
    183a:	80 33       	cpi	r24, 0x30	; 48
    183c:	69 f4       	brne	.+26     	; 0x1858 <vfprintf+0xbe>
    183e:	23 2d       	mov	r18, r3
    1840:	21 60       	ori	r18, 0x01	; 1
    1842:	16 c0       	rjmp	.+44     	; 0x1870 <vfprintf+0xd6>
    1844:	83 2d       	mov	r24, r3
    1846:	82 60       	ori	r24, 0x02	; 2
    1848:	38 2e       	mov	r3, r24
    184a:	e3 2d       	mov	r30, r3
    184c:	e4 60       	ori	r30, 0x04	; 4
    184e:	3e 2e       	mov	r3, r30
    1850:	2a c0       	rjmp	.+84     	; 0x18a6 <vfprintf+0x10c>
    1852:	f3 2d       	mov	r31, r3
    1854:	f8 60       	ori	r31, 0x08	; 8
    1856:	1d c0       	rjmp	.+58     	; 0x1892 <vfprintf+0xf8>
    1858:	37 fc       	sbrc	r3, 7
    185a:	2d c0       	rjmp	.+90     	; 0x18b6 <vfprintf+0x11c>
    185c:	20 ed       	ldi	r18, 0xD0	; 208
    185e:	28 0f       	add	r18, r24
    1860:	2a 30       	cpi	r18, 0x0A	; 10
    1862:	40 f0       	brcs	.+16     	; 0x1874 <vfprintf+0xda>
    1864:	8e 32       	cpi	r24, 0x2E	; 46
    1866:	b9 f4       	brne	.+46     	; 0x1896 <vfprintf+0xfc>
    1868:	36 fc       	sbrc	r3, 6
    186a:	75 c1       	rjmp	.+746    	; 0x1b56 <vfprintf+0x3bc>
    186c:	23 2d       	mov	r18, r3
    186e:	20 64       	ori	r18, 0x40	; 64
    1870:	32 2e       	mov	r3, r18
    1872:	19 c0       	rjmp	.+50     	; 0x18a6 <vfprintf+0x10c>
    1874:	36 fe       	sbrs	r3, 6
    1876:	06 c0       	rjmp	.+12     	; 0x1884 <vfprintf+0xea>
    1878:	8a e0       	ldi	r24, 0x0A	; 10
    187a:	98 9e       	mul	r9, r24
    187c:	20 0d       	add	r18, r0
    187e:	11 24       	eor	r1, r1
    1880:	92 2e       	mov	r9, r18
    1882:	11 c0       	rjmp	.+34     	; 0x18a6 <vfprintf+0x10c>
    1884:	ea e0       	ldi	r30, 0x0A	; 10
    1886:	2e 9e       	mul	r2, r30
    1888:	20 0d       	add	r18, r0
    188a:	11 24       	eor	r1, r1
    188c:	22 2e       	mov	r2, r18
    188e:	f3 2d       	mov	r31, r3
    1890:	f0 62       	ori	r31, 0x20	; 32
    1892:	3f 2e       	mov	r3, r31
    1894:	08 c0       	rjmp	.+16     	; 0x18a6 <vfprintf+0x10c>
    1896:	8c 36       	cpi	r24, 0x6C	; 108
    1898:	21 f4       	brne	.+8      	; 0x18a2 <vfprintf+0x108>
    189a:	83 2d       	mov	r24, r3
    189c:	80 68       	ori	r24, 0x80	; 128
    189e:	38 2e       	mov	r3, r24
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <vfprintf+0x10c>
    18a2:	88 36       	cpi	r24, 0x68	; 104
    18a4:	41 f4       	brne	.+16     	; 0x18b6 <vfprintf+0x11c>
    18a6:	f7 01       	movw	r30, r14
    18a8:	93 fd       	sbrc	r25, 3
    18aa:	85 91       	lpm	r24, Z+
    18ac:	93 ff       	sbrs	r25, 3
    18ae:	81 91       	ld	r24, Z+
    18b0:	7f 01       	movw	r14, r30
    18b2:	81 11       	cpse	r24, r1
    18b4:	b3 cf       	rjmp	.-154    	; 0x181c <vfprintf+0x82>
    18b6:	98 2f       	mov	r25, r24
    18b8:	9f 7d       	andi	r25, 0xDF	; 223
    18ba:	95 54       	subi	r25, 0x45	; 69
    18bc:	93 30       	cpi	r25, 0x03	; 3
    18be:	28 f4       	brcc	.+10     	; 0x18ca <vfprintf+0x130>
    18c0:	0c 5f       	subi	r16, 0xFC	; 252
    18c2:	1f 4f       	sbci	r17, 0xFF	; 255
    18c4:	9f e3       	ldi	r25, 0x3F	; 63
    18c6:	99 83       	std	Y+1, r25	; 0x01
    18c8:	0d c0       	rjmp	.+26     	; 0x18e4 <vfprintf+0x14a>
    18ca:	83 36       	cpi	r24, 0x63	; 99
    18cc:	31 f0       	breq	.+12     	; 0x18da <vfprintf+0x140>
    18ce:	83 37       	cpi	r24, 0x73	; 115
    18d0:	71 f0       	breq	.+28     	; 0x18ee <vfprintf+0x154>
    18d2:	83 35       	cpi	r24, 0x53	; 83
    18d4:	09 f0       	breq	.+2      	; 0x18d8 <vfprintf+0x13e>
    18d6:	55 c0       	rjmp	.+170    	; 0x1982 <vfprintf+0x1e8>
    18d8:	20 c0       	rjmp	.+64     	; 0x191a <vfprintf+0x180>
    18da:	f8 01       	movw	r30, r16
    18dc:	80 81       	ld	r24, Z
    18de:	89 83       	std	Y+1, r24	; 0x01
    18e0:	0e 5f       	subi	r16, 0xFE	; 254
    18e2:	1f 4f       	sbci	r17, 0xFF	; 255
    18e4:	88 24       	eor	r8, r8
    18e6:	83 94       	inc	r8
    18e8:	91 2c       	mov	r9, r1
    18ea:	53 01       	movw	r10, r6
    18ec:	12 c0       	rjmp	.+36     	; 0x1912 <vfprintf+0x178>
    18ee:	28 01       	movw	r4, r16
    18f0:	f2 e0       	ldi	r31, 0x02	; 2
    18f2:	4f 0e       	add	r4, r31
    18f4:	51 1c       	adc	r5, r1
    18f6:	f8 01       	movw	r30, r16
    18f8:	a0 80       	ld	r10, Z
    18fa:	b1 80       	ldd	r11, Z+1	; 0x01
    18fc:	36 fe       	sbrs	r3, 6
    18fe:	03 c0       	rjmp	.+6      	; 0x1906 <vfprintf+0x16c>
    1900:	69 2d       	mov	r22, r9
    1902:	70 e0       	ldi	r23, 0x00	; 0
    1904:	02 c0       	rjmp	.+4      	; 0x190a <vfprintf+0x170>
    1906:	6f ef       	ldi	r22, 0xFF	; 255
    1908:	7f ef       	ldi	r23, 0xFF	; 255
    190a:	c5 01       	movw	r24, r10
    190c:	4e d1       	rcall	.+668    	; 0x1baa <strnlen>
    190e:	4c 01       	movw	r8, r24
    1910:	82 01       	movw	r16, r4
    1912:	f3 2d       	mov	r31, r3
    1914:	ff 77       	andi	r31, 0x7F	; 127
    1916:	3f 2e       	mov	r3, r31
    1918:	15 c0       	rjmp	.+42     	; 0x1944 <vfprintf+0x1aa>
    191a:	28 01       	movw	r4, r16
    191c:	22 e0       	ldi	r18, 0x02	; 2
    191e:	42 0e       	add	r4, r18
    1920:	51 1c       	adc	r5, r1
    1922:	f8 01       	movw	r30, r16
    1924:	a0 80       	ld	r10, Z
    1926:	b1 80       	ldd	r11, Z+1	; 0x01
    1928:	36 fe       	sbrs	r3, 6
    192a:	03 c0       	rjmp	.+6      	; 0x1932 <vfprintf+0x198>
    192c:	69 2d       	mov	r22, r9
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <vfprintf+0x19c>
    1932:	6f ef       	ldi	r22, 0xFF	; 255
    1934:	7f ef       	ldi	r23, 0xFF	; 255
    1936:	c5 01       	movw	r24, r10
    1938:	2d d1       	rcall	.+602    	; 0x1b94 <strnlen_P>
    193a:	4c 01       	movw	r8, r24
    193c:	f3 2d       	mov	r31, r3
    193e:	f0 68       	ori	r31, 0x80	; 128
    1940:	3f 2e       	mov	r3, r31
    1942:	82 01       	movw	r16, r4
    1944:	33 fc       	sbrc	r3, 3
    1946:	19 c0       	rjmp	.+50     	; 0x197a <vfprintf+0x1e0>
    1948:	82 2d       	mov	r24, r2
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	88 16       	cp	r8, r24
    194e:	99 06       	cpc	r9, r25
    1950:	a0 f4       	brcc	.+40     	; 0x197a <vfprintf+0x1e0>
    1952:	b6 01       	movw	r22, r12
    1954:	80 e2       	ldi	r24, 0x20	; 32
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	33 d1       	rcall	.+614    	; 0x1bc0 <fputc>
    195a:	2a 94       	dec	r2
    195c:	f5 cf       	rjmp	.-22     	; 0x1948 <vfprintf+0x1ae>
    195e:	f5 01       	movw	r30, r10
    1960:	37 fc       	sbrc	r3, 7
    1962:	85 91       	lpm	r24, Z+
    1964:	37 fe       	sbrs	r3, 7
    1966:	81 91       	ld	r24, Z+
    1968:	5f 01       	movw	r10, r30
    196a:	b6 01       	movw	r22, r12
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	28 d1       	rcall	.+592    	; 0x1bc0 <fputc>
    1970:	21 10       	cpse	r2, r1
    1972:	2a 94       	dec	r2
    1974:	21 e0       	ldi	r18, 0x01	; 1
    1976:	82 1a       	sub	r8, r18
    1978:	91 08       	sbc	r9, r1
    197a:	81 14       	cp	r8, r1
    197c:	91 04       	cpc	r9, r1
    197e:	79 f7       	brne	.-34     	; 0x195e <vfprintf+0x1c4>
    1980:	e1 c0       	rjmp	.+450    	; 0x1b44 <vfprintf+0x3aa>
    1982:	84 36       	cpi	r24, 0x64	; 100
    1984:	11 f0       	breq	.+4      	; 0x198a <vfprintf+0x1f0>
    1986:	89 36       	cpi	r24, 0x69	; 105
    1988:	39 f5       	brne	.+78     	; 0x19d8 <vfprintf+0x23e>
    198a:	f8 01       	movw	r30, r16
    198c:	37 fe       	sbrs	r3, 7
    198e:	07 c0       	rjmp	.+14     	; 0x199e <vfprintf+0x204>
    1990:	60 81       	ld	r22, Z
    1992:	71 81       	ldd	r23, Z+1	; 0x01
    1994:	82 81       	ldd	r24, Z+2	; 0x02
    1996:	93 81       	ldd	r25, Z+3	; 0x03
    1998:	0c 5f       	subi	r16, 0xFC	; 252
    199a:	1f 4f       	sbci	r17, 0xFF	; 255
    199c:	08 c0       	rjmp	.+16     	; 0x19ae <vfprintf+0x214>
    199e:	60 81       	ld	r22, Z
    19a0:	71 81       	ldd	r23, Z+1	; 0x01
    19a2:	07 2e       	mov	r0, r23
    19a4:	00 0c       	add	r0, r0
    19a6:	88 0b       	sbc	r24, r24
    19a8:	99 0b       	sbc	r25, r25
    19aa:	0e 5f       	subi	r16, 0xFE	; 254
    19ac:	1f 4f       	sbci	r17, 0xFF	; 255
    19ae:	f3 2d       	mov	r31, r3
    19b0:	ff 76       	andi	r31, 0x6F	; 111
    19b2:	3f 2e       	mov	r3, r31
    19b4:	97 ff       	sbrs	r25, 7
    19b6:	09 c0       	rjmp	.+18     	; 0x19ca <vfprintf+0x230>
    19b8:	90 95       	com	r25
    19ba:	80 95       	com	r24
    19bc:	70 95       	com	r23
    19be:	61 95       	neg	r22
    19c0:	7f 4f       	sbci	r23, 0xFF	; 255
    19c2:	8f 4f       	sbci	r24, 0xFF	; 255
    19c4:	9f 4f       	sbci	r25, 0xFF	; 255
    19c6:	f0 68       	ori	r31, 0x80	; 128
    19c8:	3f 2e       	mov	r3, r31
    19ca:	2a e0       	ldi	r18, 0x0A	; 10
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	a3 01       	movw	r20, r6
    19d0:	33 d1       	rcall	.+614    	; 0x1c38 <__ultoa_invert>
    19d2:	88 2e       	mov	r8, r24
    19d4:	86 18       	sub	r8, r6
    19d6:	44 c0       	rjmp	.+136    	; 0x1a60 <vfprintf+0x2c6>
    19d8:	85 37       	cpi	r24, 0x75	; 117
    19da:	31 f4       	brne	.+12     	; 0x19e8 <vfprintf+0x24e>
    19dc:	23 2d       	mov	r18, r3
    19de:	2f 7e       	andi	r18, 0xEF	; 239
    19e0:	b2 2e       	mov	r11, r18
    19e2:	2a e0       	ldi	r18, 0x0A	; 10
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	25 c0       	rjmp	.+74     	; 0x1a32 <vfprintf+0x298>
    19e8:	93 2d       	mov	r25, r3
    19ea:	99 7f       	andi	r25, 0xF9	; 249
    19ec:	b9 2e       	mov	r11, r25
    19ee:	8f 36       	cpi	r24, 0x6F	; 111
    19f0:	c1 f0       	breq	.+48     	; 0x1a22 <vfprintf+0x288>
    19f2:	18 f4       	brcc	.+6      	; 0x19fa <vfprintf+0x260>
    19f4:	88 35       	cpi	r24, 0x58	; 88
    19f6:	79 f0       	breq	.+30     	; 0x1a16 <vfprintf+0x27c>
    19f8:	ae c0       	rjmp	.+348    	; 0x1b56 <vfprintf+0x3bc>
    19fa:	80 37       	cpi	r24, 0x70	; 112
    19fc:	19 f0       	breq	.+6      	; 0x1a04 <vfprintf+0x26a>
    19fe:	88 37       	cpi	r24, 0x78	; 120
    1a00:	21 f0       	breq	.+8      	; 0x1a0a <vfprintf+0x270>
    1a02:	a9 c0       	rjmp	.+338    	; 0x1b56 <vfprintf+0x3bc>
    1a04:	e9 2f       	mov	r30, r25
    1a06:	e0 61       	ori	r30, 0x10	; 16
    1a08:	be 2e       	mov	r11, r30
    1a0a:	b4 fe       	sbrs	r11, 4
    1a0c:	0d c0       	rjmp	.+26     	; 0x1a28 <vfprintf+0x28e>
    1a0e:	fb 2d       	mov	r31, r11
    1a10:	f4 60       	ori	r31, 0x04	; 4
    1a12:	bf 2e       	mov	r11, r31
    1a14:	09 c0       	rjmp	.+18     	; 0x1a28 <vfprintf+0x28e>
    1a16:	34 fe       	sbrs	r3, 4
    1a18:	0a c0       	rjmp	.+20     	; 0x1a2e <vfprintf+0x294>
    1a1a:	29 2f       	mov	r18, r25
    1a1c:	26 60       	ori	r18, 0x06	; 6
    1a1e:	b2 2e       	mov	r11, r18
    1a20:	06 c0       	rjmp	.+12     	; 0x1a2e <vfprintf+0x294>
    1a22:	28 e0       	ldi	r18, 0x08	; 8
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	05 c0       	rjmp	.+10     	; 0x1a32 <vfprintf+0x298>
    1a28:	20 e1       	ldi	r18, 0x10	; 16
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <vfprintf+0x298>
    1a2e:	20 e1       	ldi	r18, 0x10	; 16
    1a30:	32 e0       	ldi	r19, 0x02	; 2
    1a32:	f8 01       	movw	r30, r16
    1a34:	b7 fe       	sbrs	r11, 7
    1a36:	07 c0       	rjmp	.+14     	; 0x1a46 <vfprintf+0x2ac>
    1a38:	60 81       	ld	r22, Z
    1a3a:	71 81       	ldd	r23, Z+1	; 0x01
    1a3c:	82 81       	ldd	r24, Z+2	; 0x02
    1a3e:	93 81       	ldd	r25, Z+3	; 0x03
    1a40:	0c 5f       	subi	r16, 0xFC	; 252
    1a42:	1f 4f       	sbci	r17, 0xFF	; 255
    1a44:	06 c0       	rjmp	.+12     	; 0x1a52 <vfprintf+0x2b8>
    1a46:	60 81       	ld	r22, Z
    1a48:	71 81       	ldd	r23, Z+1	; 0x01
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	0e 5f       	subi	r16, 0xFE	; 254
    1a50:	1f 4f       	sbci	r17, 0xFF	; 255
    1a52:	a3 01       	movw	r20, r6
    1a54:	f1 d0       	rcall	.+482    	; 0x1c38 <__ultoa_invert>
    1a56:	88 2e       	mov	r8, r24
    1a58:	86 18       	sub	r8, r6
    1a5a:	fb 2d       	mov	r31, r11
    1a5c:	ff 77       	andi	r31, 0x7F	; 127
    1a5e:	3f 2e       	mov	r3, r31
    1a60:	36 fe       	sbrs	r3, 6
    1a62:	0d c0       	rjmp	.+26     	; 0x1a7e <vfprintf+0x2e4>
    1a64:	23 2d       	mov	r18, r3
    1a66:	2e 7f       	andi	r18, 0xFE	; 254
    1a68:	a2 2e       	mov	r10, r18
    1a6a:	89 14       	cp	r8, r9
    1a6c:	58 f4       	brcc	.+22     	; 0x1a84 <vfprintf+0x2ea>
    1a6e:	34 fe       	sbrs	r3, 4
    1a70:	0b c0       	rjmp	.+22     	; 0x1a88 <vfprintf+0x2ee>
    1a72:	32 fc       	sbrc	r3, 2
    1a74:	09 c0       	rjmp	.+18     	; 0x1a88 <vfprintf+0x2ee>
    1a76:	83 2d       	mov	r24, r3
    1a78:	8e 7e       	andi	r24, 0xEE	; 238
    1a7a:	a8 2e       	mov	r10, r24
    1a7c:	05 c0       	rjmp	.+10     	; 0x1a88 <vfprintf+0x2ee>
    1a7e:	b8 2c       	mov	r11, r8
    1a80:	a3 2c       	mov	r10, r3
    1a82:	03 c0       	rjmp	.+6      	; 0x1a8a <vfprintf+0x2f0>
    1a84:	b8 2c       	mov	r11, r8
    1a86:	01 c0       	rjmp	.+2      	; 0x1a8a <vfprintf+0x2f0>
    1a88:	b9 2c       	mov	r11, r9
    1a8a:	a4 fe       	sbrs	r10, 4
    1a8c:	0f c0       	rjmp	.+30     	; 0x1aac <vfprintf+0x312>
    1a8e:	fe 01       	movw	r30, r28
    1a90:	e8 0d       	add	r30, r8
    1a92:	f1 1d       	adc	r31, r1
    1a94:	80 81       	ld	r24, Z
    1a96:	80 33       	cpi	r24, 0x30	; 48
    1a98:	21 f4       	brne	.+8      	; 0x1aa2 <vfprintf+0x308>
    1a9a:	9a 2d       	mov	r25, r10
    1a9c:	99 7e       	andi	r25, 0xE9	; 233
    1a9e:	a9 2e       	mov	r10, r25
    1aa0:	09 c0       	rjmp	.+18     	; 0x1ab4 <vfprintf+0x31a>
    1aa2:	a2 fe       	sbrs	r10, 2
    1aa4:	06 c0       	rjmp	.+12     	; 0x1ab2 <vfprintf+0x318>
    1aa6:	b3 94       	inc	r11
    1aa8:	b3 94       	inc	r11
    1aaa:	04 c0       	rjmp	.+8      	; 0x1ab4 <vfprintf+0x31a>
    1aac:	8a 2d       	mov	r24, r10
    1aae:	86 78       	andi	r24, 0x86	; 134
    1ab0:	09 f0       	breq	.+2      	; 0x1ab4 <vfprintf+0x31a>
    1ab2:	b3 94       	inc	r11
    1ab4:	a3 fc       	sbrc	r10, 3
    1ab6:	10 c0       	rjmp	.+32     	; 0x1ad8 <vfprintf+0x33e>
    1ab8:	a0 fe       	sbrs	r10, 0
    1aba:	06 c0       	rjmp	.+12     	; 0x1ac8 <vfprintf+0x32e>
    1abc:	b2 14       	cp	r11, r2
    1abe:	80 f4       	brcc	.+32     	; 0x1ae0 <vfprintf+0x346>
    1ac0:	28 0c       	add	r2, r8
    1ac2:	92 2c       	mov	r9, r2
    1ac4:	9b 18       	sub	r9, r11
    1ac6:	0d c0       	rjmp	.+26     	; 0x1ae2 <vfprintf+0x348>
    1ac8:	b2 14       	cp	r11, r2
    1aca:	58 f4       	brcc	.+22     	; 0x1ae2 <vfprintf+0x348>
    1acc:	b6 01       	movw	r22, r12
    1ace:	80 e2       	ldi	r24, 0x20	; 32
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	76 d0       	rcall	.+236    	; 0x1bc0 <fputc>
    1ad4:	b3 94       	inc	r11
    1ad6:	f8 cf       	rjmp	.-16     	; 0x1ac8 <vfprintf+0x32e>
    1ad8:	b2 14       	cp	r11, r2
    1ada:	18 f4       	brcc	.+6      	; 0x1ae2 <vfprintf+0x348>
    1adc:	2b 18       	sub	r2, r11
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <vfprintf+0x34a>
    1ae0:	98 2c       	mov	r9, r8
    1ae2:	21 2c       	mov	r2, r1
    1ae4:	a4 fe       	sbrs	r10, 4
    1ae6:	0f c0       	rjmp	.+30     	; 0x1b06 <vfprintf+0x36c>
    1ae8:	b6 01       	movw	r22, r12
    1aea:	80 e3       	ldi	r24, 0x30	; 48
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	68 d0       	rcall	.+208    	; 0x1bc0 <fputc>
    1af0:	a2 fe       	sbrs	r10, 2
    1af2:	16 c0       	rjmp	.+44     	; 0x1b20 <vfprintf+0x386>
    1af4:	a1 fc       	sbrc	r10, 1
    1af6:	03 c0       	rjmp	.+6      	; 0x1afe <vfprintf+0x364>
    1af8:	88 e7       	ldi	r24, 0x78	; 120
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <vfprintf+0x368>
    1afe:	88 e5       	ldi	r24, 0x58	; 88
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	b6 01       	movw	r22, r12
    1b04:	0c c0       	rjmp	.+24     	; 0x1b1e <vfprintf+0x384>
    1b06:	8a 2d       	mov	r24, r10
    1b08:	86 78       	andi	r24, 0x86	; 134
    1b0a:	51 f0       	breq	.+20     	; 0x1b20 <vfprintf+0x386>
    1b0c:	a1 fe       	sbrs	r10, 1
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <vfprintf+0x37a>
    1b10:	8b e2       	ldi	r24, 0x2B	; 43
    1b12:	01 c0       	rjmp	.+2      	; 0x1b16 <vfprintf+0x37c>
    1b14:	80 e2       	ldi	r24, 0x20	; 32
    1b16:	a7 fc       	sbrc	r10, 7
    1b18:	8d e2       	ldi	r24, 0x2D	; 45
    1b1a:	b6 01       	movw	r22, r12
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	50 d0       	rcall	.+160    	; 0x1bc0 <fputc>
    1b20:	89 14       	cp	r8, r9
    1b22:	30 f4       	brcc	.+12     	; 0x1b30 <vfprintf+0x396>
    1b24:	b6 01       	movw	r22, r12
    1b26:	80 e3       	ldi	r24, 0x30	; 48
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	4a d0       	rcall	.+148    	; 0x1bc0 <fputc>
    1b2c:	9a 94       	dec	r9
    1b2e:	f8 cf       	rjmp	.-16     	; 0x1b20 <vfprintf+0x386>
    1b30:	8a 94       	dec	r8
    1b32:	f3 01       	movw	r30, r6
    1b34:	e8 0d       	add	r30, r8
    1b36:	f1 1d       	adc	r31, r1
    1b38:	80 81       	ld	r24, Z
    1b3a:	b6 01       	movw	r22, r12
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	40 d0       	rcall	.+128    	; 0x1bc0 <fputc>
    1b40:	81 10       	cpse	r8, r1
    1b42:	f6 cf       	rjmp	.-20     	; 0x1b30 <vfprintf+0x396>
    1b44:	22 20       	and	r2, r2
    1b46:	09 f4       	brne	.+2      	; 0x1b4a <vfprintf+0x3b0>
    1b48:	4e ce       	rjmp	.-868    	; 0x17e6 <vfprintf+0x4c>
    1b4a:	b6 01       	movw	r22, r12
    1b4c:	80 e2       	ldi	r24, 0x20	; 32
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	37 d0       	rcall	.+110    	; 0x1bc0 <fputc>
    1b52:	2a 94       	dec	r2
    1b54:	f7 cf       	rjmp	.-18     	; 0x1b44 <vfprintf+0x3aa>
    1b56:	f6 01       	movw	r30, r12
    1b58:	86 81       	ldd	r24, Z+6	; 0x06
    1b5a:	97 81       	ldd	r25, Z+7	; 0x07
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <vfprintf+0x3c8>
    1b5e:	8f ef       	ldi	r24, 0xFF	; 255
    1b60:	9f ef       	ldi	r25, 0xFF	; 255
    1b62:	2b 96       	adiw	r28, 0x0b	; 11
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	df 91       	pop	r29
    1b70:	cf 91       	pop	r28
    1b72:	1f 91       	pop	r17
    1b74:	0f 91       	pop	r16
    1b76:	ff 90       	pop	r15
    1b78:	ef 90       	pop	r14
    1b7a:	df 90       	pop	r13
    1b7c:	cf 90       	pop	r12
    1b7e:	bf 90       	pop	r11
    1b80:	af 90       	pop	r10
    1b82:	9f 90       	pop	r9
    1b84:	8f 90       	pop	r8
    1b86:	7f 90       	pop	r7
    1b88:	6f 90       	pop	r6
    1b8a:	5f 90       	pop	r5
    1b8c:	4f 90       	pop	r4
    1b8e:	3f 90       	pop	r3
    1b90:	2f 90       	pop	r2
    1b92:	08 95       	ret

00001b94 <strnlen_P>:
    1b94:	fc 01       	movw	r30, r24
    1b96:	05 90       	lpm	r0, Z+
    1b98:	61 50       	subi	r22, 0x01	; 1
    1b9a:	70 40       	sbci	r23, 0x00	; 0
    1b9c:	01 10       	cpse	r0, r1
    1b9e:	d8 f7       	brcc	.-10     	; 0x1b96 <strnlen_P+0x2>
    1ba0:	80 95       	com	r24
    1ba2:	90 95       	com	r25
    1ba4:	8e 0f       	add	r24, r30
    1ba6:	9f 1f       	adc	r25, r31
    1ba8:	08 95       	ret

00001baa <strnlen>:
    1baa:	fc 01       	movw	r30, r24
    1bac:	61 50       	subi	r22, 0x01	; 1
    1bae:	70 40       	sbci	r23, 0x00	; 0
    1bb0:	01 90       	ld	r0, Z+
    1bb2:	01 10       	cpse	r0, r1
    1bb4:	d8 f7       	brcc	.-10     	; 0x1bac <strnlen+0x2>
    1bb6:	80 95       	com	r24
    1bb8:	90 95       	com	r25
    1bba:	8e 0f       	add	r24, r30
    1bbc:	9f 1f       	adc	r25, r31
    1bbe:	08 95       	ret

00001bc0 <fputc>:
    1bc0:	0f 93       	push	r16
    1bc2:	1f 93       	push	r17
    1bc4:	cf 93       	push	r28
    1bc6:	df 93       	push	r29
    1bc8:	fb 01       	movw	r30, r22
    1bca:	23 81       	ldd	r18, Z+3	; 0x03
    1bcc:	21 fd       	sbrc	r18, 1
    1bce:	03 c0       	rjmp	.+6      	; 0x1bd6 <fputc+0x16>
    1bd0:	8f ef       	ldi	r24, 0xFF	; 255
    1bd2:	9f ef       	ldi	r25, 0xFF	; 255
    1bd4:	2c c0       	rjmp	.+88     	; 0x1c2e <fputc+0x6e>
    1bd6:	22 ff       	sbrs	r18, 2
    1bd8:	16 c0       	rjmp	.+44     	; 0x1c06 <fputc+0x46>
    1bda:	46 81       	ldd	r20, Z+6	; 0x06
    1bdc:	57 81       	ldd	r21, Z+7	; 0x07
    1bde:	24 81       	ldd	r18, Z+4	; 0x04
    1be0:	35 81       	ldd	r19, Z+5	; 0x05
    1be2:	42 17       	cp	r20, r18
    1be4:	53 07       	cpc	r21, r19
    1be6:	44 f4       	brge	.+16     	; 0x1bf8 <fputc+0x38>
    1be8:	a0 81       	ld	r26, Z
    1bea:	b1 81       	ldd	r27, Z+1	; 0x01
    1bec:	9d 01       	movw	r18, r26
    1bee:	2f 5f       	subi	r18, 0xFF	; 255
    1bf0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf2:	31 83       	std	Z+1, r19	; 0x01
    1bf4:	20 83       	st	Z, r18
    1bf6:	8c 93       	st	X, r24
    1bf8:	26 81       	ldd	r18, Z+6	; 0x06
    1bfa:	37 81       	ldd	r19, Z+7	; 0x07
    1bfc:	2f 5f       	subi	r18, 0xFF	; 255
    1bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1c00:	37 83       	std	Z+7, r19	; 0x07
    1c02:	26 83       	std	Z+6, r18	; 0x06
    1c04:	14 c0       	rjmp	.+40     	; 0x1c2e <fputc+0x6e>
    1c06:	8b 01       	movw	r16, r22
    1c08:	ec 01       	movw	r28, r24
    1c0a:	fb 01       	movw	r30, r22
    1c0c:	00 84       	ldd	r0, Z+8	; 0x08
    1c0e:	f1 85       	ldd	r31, Z+9	; 0x09
    1c10:	e0 2d       	mov	r30, r0
    1c12:	19 95       	eicall
    1c14:	89 2b       	or	r24, r25
    1c16:	e1 f6       	brne	.-72     	; 0x1bd0 <fputc+0x10>
    1c18:	d8 01       	movw	r26, r16
    1c1a:	16 96       	adiw	r26, 0x06	; 6
    1c1c:	8d 91       	ld	r24, X+
    1c1e:	9c 91       	ld	r25, X
    1c20:	17 97       	sbiw	r26, 0x07	; 7
    1c22:	01 96       	adiw	r24, 0x01	; 1
    1c24:	17 96       	adiw	r26, 0x07	; 7
    1c26:	9c 93       	st	X, r25
    1c28:	8e 93       	st	-X, r24
    1c2a:	16 97       	sbiw	r26, 0x06	; 6
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	1f 91       	pop	r17
    1c34:	0f 91       	pop	r16
    1c36:	08 95       	ret

00001c38 <__ultoa_invert>:
    1c38:	fa 01       	movw	r30, r20
    1c3a:	aa 27       	eor	r26, r26
    1c3c:	28 30       	cpi	r18, 0x08	; 8
    1c3e:	51 f1       	breq	.+84     	; 0x1c94 <__ultoa_invert+0x5c>
    1c40:	20 31       	cpi	r18, 0x10	; 16
    1c42:	81 f1       	breq	.+96     	; 0x1ca4 <__ultoa_invert+0x6c>
    1c44:	e8 94       	clt
    1c46:	6f 93       	push	r22
    1c48:	6e 7f       	andi	r22, 0xFE	; 254
    1c4a:	6e 5f       	subi	r22, 0xFE	; 254
    1c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c50:	9f 4f       	sbci	r25, 0xFF	; 255
    1c52:	af 4f       	sbci	r26, 0xFF	; 255
    1c54:	b1 e0       	ldi	r27, 0x01	; 1
    1c56:	3e d0       	rcall	.+124    	; 0x1cd4 <__ultoa_invert+0x9c>
    1c58:	b4 e0       	ldi	r27, 0x04	; 4
    1c5a:	3c d0       	rcall	.+120    	; 0x1cd4 <__ultoa_invert+0x9c>
    1c5c:	67 0f       	add	r22, r23
    1c5e:	78 1f       	adc	r23, r24
    1c60:	89 1f       	adc	r24, r25
    1c62:	9a 1f       	adc	r25, r26
    1c64:	a1 1d       	adc	r26, r1
    1c66:	68 0f       	add	r22, r24
    1c68:	79 1f       	adc	r23, r25
    1c6a:	8a 1f       	adc	r24, r26
    1c6c:	91 1d       	adc	r25, r1
    1c6e:	a1 1d       	adc	r26, r1
    1c70:	6a 0f       	add	r22, r26
    1c72:	71 1d       	adc	r23, r1
    1c74:	81 1d       	adc	r24, r1
    1c76:	91 1d       	adc	r25, r1
    1c78:	a1 1d       	adc	r26, r1
    1c7a:	20 d0       	rcall	.+64     	; 0x1cbc <__ultoa_invert+0x84>
    1c7c:	09 f4       	brne	.+2      	; 0x1c80 <__ultoa_invert+0x48>
    1c7e:	68 94       	set
    1c80:	3f 91       	pop	r19
    1c82:	2a e0       	ldi	r18, 0x0A	; 10
    1c84:	26 9f       	mul	r18, r22
    1c86:	11 24       	eor	r1, r1
    1c88:	30 19       	sub	r19, r0
    1c8a:	30 5d       	subi	r19, 0xD0	; 208
    1c8c:	31 93       	st	Z+, r19
    1c8e:	de f6       	brtc	.-74     	; 0x1c46 <__ultoa_invert+0xe>
    1c90:	cf 01       	movw	r24, r30
    1c92:	08 95       	ret
    1c94:	46 2f       	mov	r20, r22
    1c96:	47 70       	andi	r20, 0x07	; 7
    1c98:	40 5d       	subi	r20, 0xD0	; 208
    1c9a:	41 93       	st	Z+, r20
    1c9c:	b3 e0       	ldi	r27, 0x03	; 3
    1c9e:	0f d0       	rcall	.+30     	; 0x1cbe <__ultoa_invert+0x86>
    1ca0:	c9 f7       	brne	.-14     	; 0x1c94 <__ultoa_invert+0x5c>
    1ca2:	f6 cf       	rjmp	.-20     	; 0x1c90 <__ultoa_invert+0x58>
    1ca4:	46 2f       	mov	r20, r22
    1ca6:	4f 70       	andi	r20, 0x0F	; 15
    1ca8:	40 5d       	subi	r20, 0xD0	; 208
    1caa:	4a 33       	cpi	r20, 0x3A	; 58
    1cac:	18 f0       	brcs	.+6      	; 0x1cb4 <__ultoa_invert+0x7c>
    1cae:	49 5d       	subi	r20, 0xD9	; 217
    1cb0:	31 fd       	sbrc	r19, 1
    1cb2:	40 52       	subi	r20, 0x20	; 32
    1cb4:	41 93       	st	Z+, r20
    1cb6:	02 d0       	rcall	.+4      	; 0x1cbc <__ultoa_invert+0x84>
    1cb8:	a9 f7       	brne	.-22     	; 0x1ca4 <__ultoa_invert+0x6c>
    1cba:	ea cf       	rjmp	.-44     	; 0x1c90 <__ultoa_invert+0x58>
    1cbc:	b4 e0       	ldi	r27, 0x04	; 4
    1cbe:	a6 95       	lsr	r26
    1cc0:	97 95       	ror	r25
    1cc2:	87 95       	ror	r24
    1cc4:	77 95       	ror	r23
    1cc6:	67 95       	ror	r22
    1cc8:	ba 95       	dec	r27
    1cca:	c9 f7       	brne	.-14     	; 0x1cbe <__ultoa_invert+0x86>
    1ccc:	00 97       	sbiw	r24, 0x00	; 0
    1cce:	61 05       	cpc	r22, r1
    1cd0:	71 05       	cpc	r23, r1
    1cd2:	08 95       	ret
    1cd4:	9b 01       	movw	r18, r22
    1cd6:	ac 01       	movw	r20, r24
    1cd8:	0a 2e       	mov	r0, r26
    1cda:	06 94       	lsr	r0
    1cdc:	57 95       	ror	r21
    1cde:	47 95       	ror	r20
    1ce0:	37 95       	ror	r19
    1ce2:	27 95       	ror	r18
    1ce4:	ba 95       	dec	r27
    1ce6:	c9 f7       	brne	.-14     	; 0x1cda <__ultoa_invert+0xa2>
    1ce8:	62 0f       	add	r22, r18
    1cea:	73 1f       	adc	r23, r19
    1cec:	84 1f       	adc	r24, r20
    1cee:	95 1f       	adc	r25, r21
    1cf0:	a0 1d       	adc	r26, r0
    1cf2:	08 95       	ret

00001cf4 <_exit>:
    1cf4:	f8 94       	cli

00001cf6 <__stop_program>:
    1cf6:	ff cf       	rjmp	.-2      	; 0x1cf6 <__stop_program>
