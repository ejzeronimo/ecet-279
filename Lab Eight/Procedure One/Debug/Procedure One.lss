
Procedure One.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800200  00000466  000004fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000466  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800270  00800270  0000056a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000056a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000059c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001383  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e62  00000000  00000000  00001a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ea  00000000  00000000  000028b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  0000319c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b7  00000000  00000000  000033e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000405  00000000  00000000  00003a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003ea0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	da c1       	rjmp	.+948    	; 0x40a <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	5f c1       	rjmp	.+702    	; 0x388 <__vector_50>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e6       	ldi	r30, 0x66	; 102
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 37       	cpi	r26, 0x70	; 112
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e7       	ldi	r26, 0x70	; 112
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 37       	cpi	r26, 0x72	; 114
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	91 d1       	rcall	.+802    	; 0x442 <main>
 120:	a0 c1       	rjmp	.+832    	; 0x462 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initDebugTimer>:
	Uses Timer5 with a prescaler of 256, and enables overflow interrupt
*/
void initDebugTimer()
{
	//Prescaler 256
	TCCR5B |= (1<<CS52) | (1<<CS50);
 124:	e1 e2       	ldi	r30, 0x21	; 33
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	80 81       	ld	r24, Z
 12a:	85 60       	ori	r24, 0x05	; 5
 12c:	80 83       	st	Z, r24
	
	//15625 TOP Value for UPDATE_FREQUENCY
	TCNT5 = 65535 - (F_CPU / (1024*UPDATE_FREQUENCY));
 12e:	85 ee       	ldi	r24, 0xE5	; 229
 130:	99 ef       	ldi	r25, 0xF9	; 249
 132:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
 136:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
	
	//Enable Timer Overflow Interrupt
	TIMSK5 = (1<<TOIE5);
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7c0073>
 140:	08 95       	ret

00000142 <initDebugUSART>:
	8-bits, 25000 Baud Rate
*/
void initDebugUSART()
{
	//Enable RX and TX
	UCSR0B = (1<<TXEN0) | (1<<RXEN0);
 142:	88 e1       	ldi	r24, 0x18	; 24
 144:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	
	//Set Communication Modes
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);	//8 Data bits
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
	UBRR0 = 3;							//250000 Baud Rate	
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 156:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 15a:	08 95       	ret

0000015c <initDebug>:
	Configures the USART registers for data transmission, Configures the
	Timer registers, and enables interrupts.
*/
void initDebug()
{
	initDebugUSART();
 15c:	f2 df       	rcall	.-28     	; 0x142 <initDebugUSART>
	initDebugTimer();
 15e:	e2 df       	rcall	.-60     	; 0x124 <initDebugTimer>
 160:	78 94       	sei
	sei();
 162:	08 95       	ret

00000164 <UART0Out>:
 164:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	Sends 8-bit unsigned integer out UART0
*/
void UART0Out(uint8_t data) 
{
	//Wait for previous transmission to be done
	while(!(UCSR0A & (1<<UDRE0)));
 168:	95 ff       	sbrs	r25, 5
 16a:	fc cf       	rjmp	.-8      	; 0x164 <UART0Out>
	
	//Set register for next transmission
	UDR0 = data;	
 16c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 170:	08 95       	ret

00000172 <sendStopBit>:
	Sends 0x0A to signify stop
*/
void sendStopBit()
{
	//Wait for previous transmission to be done
	while(!(UCSR0A & (1<<UDRE0)));
 172:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 176:	85 ff       	sbrs	r24, 5
 178:	fc cf       	rjmp	.-8      	; 0x172 <sendStopBit>
	
	//Set register for next transmission
	UDR0 = 0x0A;
 17a:	8a e0       	ldi	r24, 0x0A	; 10
 17c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 180:	08 95       	ret

00000182 <UART0PrintString>:

Description:
	Continues to send data until reaching null character
*/
void UART0PrintString(char *strPtr)
{
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	ec 01       	movw	r28, r24
	while(*strPtr != 0x00) 
 188:	02 c0       	rjmp	.+4      	; 0x18e <UART0PrintString+0xc>
	{
		UART0Out(*strPtr);
 18a:	ec df       	rcall	.-40     	; 0x164 <UART0Out>
		strPtr ++;
 18c:	21 96       	adiw	r28, 0x01	; 1
Description:
	Continues to send data until reaching null character
*/
void UART0PrintString(char *strPtr)
{
	while(*strPtr != 0x00) 
 18e:	88 81       	ld	r24, Y
 190:	81 11       	cpse	r24, r1
 192:	fb cf       	rjmp	.-10     	; 0x18a <UART0PrintString+0x8>
	{
		UART0Out(*strPtr);
		strPtr ++;
	}
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <sendPortData>:
Description:
	Loops through portAddr array and sends
	out data at each address
*/
void sendPortData()
{	
 19a:	cf 93       	push	r28
	for (uint8_t i=0; i<18; i++)
 19c:	c0 e0       	ldi	r28, 0x00	; 0
 19e:	0c c0       	rjmp	.+24     	; 0x1b8 <sendPortData+0x1e>
	{
		UART0Out(*portAddr[i]);
 1a0:	ec 2f       	mov	r30, r28
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	ec 5b       	subi	r30, 0xBC	; 188
 1aa:	fd 4f       	sbci	r31, 0xFD	; 253
 1ac:	01 90       	ld	r0, Z+
 1ae:	f0 81       	ld	r31, Z
 1b0:	e0 2d       	mov	r30, r0
 1b2:	80 81       	ld	r24, Z
 1b4:	d7 df       	rcall	.-82     	; 0x164 <UART0Out>
	Loops through portAddr array and sends
	out data at each address
*/
void sendPortData()
{	
	for (uint8_t i=0; i<18; i++)
 1b6:	cf 5f       	subi	r28, 0xFF	; 255
 1b8:	c2 31       	cpi	r28, 0x12	; 18
 1ba:	90 f3       	brcs	.-28     	; 0x1a0 <sendPortData+0x6>
	{
		UART0Out(*portAddr[i]);
	}
}
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <sendTimerData>:
Description:
	Loops though timerAddr array and sends
	out data at each address
*/
void sendTimerData()
{
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
	//Timer 0
	for (uint8_t i=0; i<3; i++) 
 1c4:	c0 e0       	ldi	r28, 0x00	; 0
 1c6:	0c c0       	rjmp	.+24     	; 0x1e0 <sendTimerData+0x20>
	{
		UART0Out(*timerAddr[i]);
 1c8:	ec 2f       	mov	r30, r28
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	ee 0f       	add	r30, r30
 1ce:	ff 1f       	adc	r31, r31
 1d0:	e8 5e       	subi	r30, 0xE8	; 232
 1d2:	fd 4f       	sbci	r31, 0xFD	; 253
 1d4:	01 90       	ld	r0, Z+
 1d6:	f0 81       	ld	r31, Z
 1d8:	e0 2d       	mov	r30, r0
 1da:	80 81       	ld	r24, Z
 1dc:	c3 df       	rcall	.-122    	; 0x164 <UART0Out>
	out data at each address
*/
void sendTimerData()
{
	//Timer 0
	for (uint8_t i=0; i<3; i++) 
 1de:	cf 5f       	subi	r28, 0xFF	; 255
 1e0:	c3 30       	cpi	r28, 0x03	; 3
 1e2:	90 f3       	brcs	.-28     	; 0x1c8 <sendTimerData+0x8>
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR0A
	UART0Out(*timerAddr[3]);
 1e4:	c8 e1       	ldi	r28, 0x18	; 24
 1e6:	d2 e0       	ldi	r29, 0x02	; 2
 1e8:	ee 81       	ldd	r30, Y+6	; 0x06
 1ea:	ff 81       	ldd	r31, Y+7	; 0x07
 1ec:	80 81       	ld	r24, Z
 1ee:	ba df       	rcall	.-140    	; 0x164 <UART0Out>
	UART0Out(*(timerAddr[3]+1));
 1f0:	ee 81       	ldd	r30, Y+6	; 0x06
 1f2:	ff 81       	ldd	r31, Y+7	; 0x07
 1f4:	81 81       	ldd	r24, Z+1	; 0x01
 1f6:	b6 df       	rcall	.-148    	; 0x164 <UART0Out>
	
	//OCR0B
	UART0Out(*timerAddr[4]);
 1f8:	e8 85       	ldd	r30, Y+8	; 0x08
 1fa:	f9 85       	ldd	r31, Y+9	; 0x09
 1fc:	80 81       	ld	r24, Z
 1fe:	b2 df       	rcall	.-156    	; 0x164 <UART0Out>
	UART0Out(*(timerAddr[4]+1));
 200:	e8 85       	ldd	r30, Y+8	; 0x08
 202:	f9 85       	ldd	r31, Y+9	; 0x09
 204:	81 81       	ldd	r24, Z+1	; 0x01
 206:	ae df       	rcall	.-164    	; 0x164 <UART0Out>
 208:	c5 e0       	ldi	r28, 0x05	; 5
	
	//Timer 1
	for (uint8_t i=5; i<8; i++)
 20a:	0c c0       	rjmp	.+24     	; 0x224 <sendTimerData+0x64>
 20c:	ec 2f       	mov	r30, r28
	{
		UART0Out(*timerAddr[i]);
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	ee 0f       	add	r30, r30
 212:	ff 1f       	adc	r31, r31
 214:	e8 5e       	subi	r30, 0xE8	; 232
 216:	fd 4f       	sbci	r31, 0xFD	; 253
 218:	01 90       	ld	r0, Z+
 21a:	f0 81       	ld	r31, Z
 21c:	e0 2d       	mov	r30, r0
 21e:	80 81       	ld	r24, Z
 220:	a1 df       	rcall	.-190    	; 0x164 <UART0Out>
 222:	cf 5f       	subi	r28, 0xFF	; 255
	//OCR0B
	UART0Out(*timerAddr[4]);
	UART0Out(*(timerAddr[4]+1));
	
	//Timer 1
	for (uint8_t i=5; i<8; i++)
 224:	c8 30       	cpi	r28, 0x08	; 8
 226:	90 f3       	brcs	.-28     	; 0x20c <sendTimerData+0x4c>
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR1A
	UART0Out(*timerAddr[8]);
 228:	c8 e1       	ldi	r28, 0x18	; 24
 22a:	d2 e0       	ldi	r29, 0x02	; 2
 22c:	e8 89       	ldd	r30, Y+16	; 0x10
 22e:	f9 89       	ldd	r31, Y+17	; 0x11
 230:	80 81       	ld	r24, Z
 232:	98 df       	rcall	.-208    	; 0x164 <UART0Out>
	UART0Out(*(timerAddr[8]+1));
 234:	e8 89       	ldd	r30, Y+16	; 0x10
 236:	f9 89       	ldd	r31, Y+17	; 0x11
 238:	81 81       	ldd	r24, Z+1	; 0x01
 23a:	94 df       	rcall	.-216    	; 0x164 <UART0Out>
	
	//OCR1B
	UART0Out(*timerAddr[9]);
 23c:	ea 89       	ldd	r30, Y+18	; 0x12
 23e:	fb 89       	ldd	r31, Y+19	; 0x13
 240:	80 81       	ld	r24, Z
 242:	90 df       	rcall	.-224    	; 0x164 <UART0Out>
	UART0Out(*(timerAddr[9]+1));
 244:	ea 89       	ldd	r30, Y+18	; 0x12
 246:	fb 89       	ldd	r31, Y+19	; 0x13
 248:	81 81       	ldd	r24, Z+1	; 0x01
 24a:	8c df       	rcall	.-232    	; 0x164 <UART0Out>
	
	//OCR1C
	UART0Out(*timerAddr[10]);
 24c:	ec 89       	ldd	r30, Y+20	; 0x14
 24e:	fd 89       	ldd	r31, Y+21	; 0x15
 250:	80 81       	ld	r24, Z
 252:	88 df       	rcall	.-240    	; 0x164 <UART0Out>
 254:	ec 89       	ldd	r30, Y+20	; 0x14
	UART0Out(*(timerAddr[10]+1));
 256:	fd 89       	ldd	r31, Y+21	; 0x15
 258:	81 81       	ldd	r24, Z+1	; 0x01
 25a:	84 df       	rcall	.-248    	; 0x164 <UART0Out>
 25c:	cb e0       	ldi	r28, 0x0B	; 11
 25e:	0c c0       	rjmp	.+24     	; 0x278 <sendTimerData+0xb8>
	
	//Timer 2
	for (uint8_t i=11; i<14; i++)
 260:	ec 2f       	mov	r30, r28
	{
		UART0Out(*timerAddr[i]);
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	ee 0f       	add	r30, r30
 266:	ff 1f       	adc	r31, r31
 268:	e8 5e       	subi	r30, 0xE8	; 232
 26a:	fd 4f       	sbci	r31, 0xFD	; 253
 26c:	01 90       	ld	r0, Z+
 26e:	f0 81       	ld	r31, Z
 270:	e0 2d       	mov	r30, r0
 272:	80 81       	ld	r24, Z
 274:	77 df       	rcall	.-274    	; 0x164 <UART0Out>
 276:	cf 5f       	subi	r28, 0xFF	; 255
	//OCR1C
	UART0Out(*timerAddr[10]);
	UART0Out(*(timerAddr[10]+1));
	
	//Timer 2
	for (uint8_t i=11; i<14; i++)
 278:	ce 30       	cpi	r28, 0x0E	; 14
 27a:	90 f3       	brcs	.-28     	; 0x260 <sendTimerData+0xa0>
 27c:	c8 e1       	ldi	r28, 0x18	; 24
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR2A
	UART0Out(*timerAddr[14]);
 27e:	d2 e0       	ldi	r29, 0x02	; 2
 280:	ec 8d       	ldd	r30, Y+28	; 0x1c
 282:	fd 8d       	ldd	r31, Y+29	; 0x1d
 284:	80 81       	ld	r24, Z
 286:	6e df       	rcall	.-292    	; 0x164 <UART0Out>
	UART0Out(*(timerAddr[14]+1));
 288:	ec 8d       	ldd	r30, Y+28	; 0x1c
 28a:	fd 8d       	ldd	r31, Y+29	; 0x1d
 28c:	81 81       	ldd	r24, Z+1	; 0x01
 28e:	6a df       	rcall	.-300    	; 0x164 <UART0Out>
 290:	ee 8d       	ldd	r30, Y+30	; 0x1e
	
	//OCR2B
	UART0Out(*timerAddr[15]);
 292:	ff 8d       	ldd	r31, Y+31	; 0x1f
 294:	80 81       	ld	r24, Z
 296:	66 df       	rcall	.-308    	; 0x164 <UART0Out>
 298:	ee 8d       	ldd	r30, Y+30	; 0x1e
 29a:	ff 8d       	ldd	r31, Y+31	; 0x1f
	UART0Out(*(timerAddr[15]+1));
 29c:	81 81       	ldd	r24, Z+1	; 0x01
 29e:	62 df       	rcall	.-316    	; 0x164 <UART0Out>
 2a0:	c0 e1       	ldi	r28, 0x10	; 16
 2a2:	0c c0       	rjmp	.+24     	; 0x2bc <sendTimerData+0xfc>
	
	//Timer 3
	for (uint8_t i=16; i<19; i++)
 2a4:	ec 2f       	mov	r30, r28
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
	{
		UART0Out(*timerAddr[i]);
 2a8:	ee 0f       	add	r30, r30
 2aa:	ff 1f       	adc	r31, r31
 2ac:	e8 5e       	subi	r30, 0xE8	; 232
 2ae:	fd 4f       	sbci	r31, 0xFD	; 253
 2b0:	01 90       	ld	r0, Z+
 2b2:	f0 81       	ld	r31, Z
 2b4:	e0 2d       	mov	r30, r0
 2b6:	80 81       	ld	r24, Z
 2b8:	55 df       	rcall	.-342    	; 0x164 <UART0Out>
 2ba:	cf 5f       	subi	r28, 0xFF	; 255
	//OCR2B
	UART0Out(*timerAddr[15]);
	UART0Out(*(timerAddr[15]+1));
	
	//Timer 3
	for (uint8_t i=16; i<19; i++)
 2bc:	c3 31       	cpi	r28, 0x13	; 19
 2be:	90 f3       	brcs	.-28     	; 0x2a4 <sendTimerData+0xe4>
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR3A
	UART0Out(*timerAddr[19]);
 2c0:	c8 e1       	ldi	r28, 0x18	; 24
 2c2:	d2 e0       	ldi	r29, 0x02	; 2
 2c4:	ee a1       	ldd	r30, Y+38	; 0x26
 2c6:	ff a1       	ldd	r31, Y+39	; 0x27
 2c8:	80 81       	ld	r24, Z
 2ca:	4c df       	rcall	.-360    	; 0x164 <UART0Out>
	UART0Out(*(timerAddr[19]+1));
 2cc:	ee a1       	ldd	r30, Y+38	; 0x26
 2ce:	ff a1       	ldd	r31, Y+39	; 0x27
 2d0:	81 81       	ldd	r24, Z+1	; 0x01
 2d2:	48 df       	rcall	.-368    	; 0x164 <UART0Out>
	
	//OCR3B
	UART0Out(*timerAddr[20]);
 2d4:	e8 a5       	ldd	r30, Y+40	; 0x28
 2d6:	f9 a5       	ldd	r31, Y+41	; 0x29
 2d8:	80 81       	ld	r24, Z
 2da:	44 df       	rcall	.-376    	; 0x164 <UART0Out>
 2dc:	e8 a5       	ldd	r30, Y+40	; 0x28
	UART0Out(*(timerAddr[20]+1));
 2de:	f9 a5       	ldd	r31, Y+41	; 0x29
 2e0:	81 81       	ldd	r24, Z+1	; 0x01
 2e2:	40 df       	rcall	.-384    	; 0x164 <UART0Out>
 2e4:	ea a5       	ldd	r30, Y+42	; 0x2a
 2e6:	fb a5       	ldd	r31, Y+43	; 0x2b
	
	//OCR3C
	UART0Out(*timerAddr[21]);
 2e8:	80 81       	ld	r24, Z
 2ea:	3c df       	rcall	.-392    	; 0x164 <UART0Out>
 2ec:	ea a5       	ldd	r30, Y+42	; 0x2a
 2ee:	fb a5       	ldd	r31, Y+43	; 0x2b
 2f0:	81 81       	ldd	r24, Z+1	; 0x01
	UART0Out(*(timerAddr[21]+1));
 2f2:	38 df       	rcall	.-400    	; 0x164 <UART0Out>
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <sendUSARTData>:
 2fa:	cf 93       	push	r28
}
 2fc:	c0 e0       	ldi	r28, 0x00	; 0
 2fe:	0c c0       	rjmp	.+24     	; 0x318 <sendUSARTData+0x1e>
 300:	ec 2f       	mov	r30, r28
*/
void sendUSARTData()
{
	for (uint8_t i=0; i<6; i++)
	{
		UART0Out(*USARTAddr[i]);
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	ee 0f       	add	r30, r30
 306:	ff 1f       	adc	r31, r31
 308:	e4 5f       	subi	r30, 0xF4	; 244
 30a:	fd 4f       	sbci	r31, 0xFD	; 253
 30c:	01 90       	ld	r0, Z+
 30e:	f0 81       	ld	r31, Z
 310:	e0 2d       	mov	r30, r0
 312:	80 81       	ld	r24, Z
 314:	27 df       	rcall	.-434    	; 0x164 <UART0Out>
	Loops though USARTAddr array and sends
	out data at each address
*/
void sendUSARTData()
{
	for (uint8_t i=0; i<6; i++)
 316:	cf 5f       	subi	r28, 0xFF	; 255
 318:	c6 30       	cpi	r28, 0x06	; 6
 31a:	90 f3       	brcs	.-28     	; 0x300 <sendUSARTData+0x6>
	{
		UART0Out(*USARTAddr[i]);
	}
}
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <sendADCData>:
Description:
	Loops though ADCAddr array and sends
	out data at each address
*/
void sendADCData()
{
 320:	cf 93       	push	r28
	for (uint8_t i=0; i<3; i++)
 322:	c0 e0       	ldi	r28, 0x00	; 0
 324:	0c c0       	rjmp	.+24     	; 0x33e <sendADCData+0x1e>
	{
		UART0Out(*ADCAddr[i]);
 326:	ec 2f       	mov	r30, r28
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	ee 0f       	add	r30, r30
 32c:	ff 1f       	adc	r31, r31
 32e:	ea 5f       	subi	r30, 0xFA	; 250
 330:	fd 4f       	sbci	r31, 0xFD	; 253
 332:	01 90       	ld	r0, Z+
 334:	f0 81       	ld	r31, Z
 336:	e0 2d       	mov	r30, r0
 338:	80 81       	ld	r24, Z
 33a:	14 df       	rcall	.-472    	; 0x164 <UART0Out>
	Loops though ADCAddr array and sends
	out data at each address
*/
void sendADCData()
{
	for (uint8_t i=0; i<3; i++)
 33c:	cf 5f       	subi	r28, 0xFF	; 255
 33e:	c3 30       	cpi	r28, 0x03	; 3
 340:	90 f3       	brcs	.-28     	; 0x326 <sendADCData+0x6>
	{
		UART0Out(*ADCAddr[i]);
	}
}
 342:	cf 91       	pop	r28
 344:	08 95       	ret

00000346 <sendINTData>:
Description:
	Loops though intAddr array and sends
	out data at each address
*/
void sendINTData()
{
 346:	cf 93       	push	r28
	for (uint8_t i=0; i<3; i++)
 348:	c0 e0       	ldi	r28, 0x00	; 0
 34a:	0c c0       	rjmp	.+24     	; 0x364 <sendINTData+0x1e>
	{
		UART0Out(*intAddr[i]);
 34c:	ec 2f       	mov	r30, r28
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	ee 0f       	add	r30, r30
 352:	ff 1f       	adc	r31, r31
 354:	e0 50       	subi	r30, 0x00	; 0
 356:	fe 4f       	sbci	r31, 0xFE	; 254
 358:	01 90       	ld	r0, Z+
 35a:	f0 81       	ld	r31, Z
 35c:	e0 2d       	mov	r30, r0
 35e:	80 81       	ld	r24, Z
 360:	01 df       	rcall	.-510    	; 0x164 <UART0Out>
	Loops though intAddr array and sends
	out data at each address
*/
void sendINTData()
{
	for (uint8_t i=0; i<3; i++)
 362:	cf 5f       	subi	r28, 0xFF	; 255
 364:	c3 30       	cpi	r28, 0x03	; 3
 366:	90 f3       	brcs	.-28     	; 0x34c <sendINTData+0x6>
	{
		UART0Out(*intAddr[i]);
	}
}
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <sendRegisterData>:
Description:
	Calls each send___Data() function
*/
void sendRegisterData() 
{
	UART0PrintString(st);
 36c:	8c e6       	ldi	r24, 0x6C	; 108
 36e:	92 e0       	ldi	r25, 0x02	; 2
 370:	08 df       	rcall	.-496    	; 0x182 <UART0PrintString>
	sendStopBit();
 372:	ff de       	rcall	.-514    	; 0x172 <sendStopBit>
	
	sendPortData();
 374:	12 df       	rcall	.-476    	; 0x19a <sendPortData>
	sendTimerData();
 376:	24 df       	rcall	.-440    	; 0x1c0 <sendTimerData>
	sendUSARTData();
 378:	c0 df       	rcall	.-128    	; 0x2fa <sendUSARTData>
	sendADCData();
 37a:	d2 df       	rcall	.-92     	; 0x320 <sendADCData>
	sendINTData();
 37c:	e4 df       	rcall	.-56     	; 0x346 <sendINTData>
 37e:	88 e6       	ldi	r24, 0x68	; 104
	
	UART0PrintString(en);
 380:	92 e0       	ldi	r25, 0x02	; 2
 382:	ff de       	rcall	.-514    	; 0x182 <UART0PrintString>
 384:	f6 ce       	rjmp	.-532    	; 0x172 <sendStopBit>
 386:	08 95       	ret

00000388 <__vector_50>:
	sendStopBit();
 388:	1f 92       	push	r1
 38a:	0f 92       	push	r0
 38c:	0f b6       	in	r0, 0x3f	; 63

Description:
	Resets counter value then sends register data
*/
ISR(TIMER5_OVF_vect) 
{
 38e:	0f 92       	push	r0
 390:	11 24       	eor	r1, r1
 392:	0b b6       	in	r0, 0x3b	; 59
 394:	0f 92       	push	r0
 396:	2f 93       	push	r18
 398:	3f 93       	push	r19
 39a:	4f 93       	push	r20
 39c:	5f 93       	push	r21
 39e:	6f 93       	push	r22
 3a0:	7f 93       	push	r23
 3a2:	8f 93       	push	r24
 3a4:	9f 93       	push	r25
 3a6:	af 93       	push	r26
 3a8:	bf 93       	push	r27
 3aa:	ef 93       	push	r30
 3ac:	ff 93       	push	r31
	TCNT5 = 65535 - (F_CPU / (1024*UPDATE_FREQUENCY));
 3ae:	85 ee       	ldi	r24, 0xE5	; 229
 3b0:	99 ef       	ldi	r25, 0xF9	; 249
 3b2:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
 3b6:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
	sendRegisterData();
 3ba:	d8 df       	rcall	.-80     	; 0x36c <sendRegisterData>
}
 3bc:	ff 91       	pop	r31
 3be:	ef 91       	pop	r30
 3c0:	bf 91       	pop	r27
 3c2:	af 91       	pop	r26
 3c4:	9f 91       	pop	r25
 3c6:	8f 91       	pop	r24
 3c8:	7f 91       	pop	r23
 3ca:	6f 91       	pop	r22
 3cc:	5f 91       	pop	r21
 3ce:	4f 91       	pop	r20
 3d0:	3f 91       	pop	r19
 3d2:	2f 91       	pop	r18
 3d4:	0f 90       	pop	r0
 3d6:	0b be       	out	0x3b, r0	; 59
 3d8:	0f 90       	pop	r0
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	0f 90       	pop	r0
 3de:	1f 90       	pop	r1
 3e0:	18 95       	reti

000003e2 <DLY_initInterrupt>:
            TCNT0 = 0;
        }

        OCR0A = 0;
    }
}
 3e2:	14 bc       	out	0x24, r1	; 36
 3e4:	84 e0       	ldi	r24, 0x04	; 4
 3e6:	85 bd       	out	0x25, r24	; 37
 3e8:	16 bc       	out	0x26, r1	; 38
 3ea:	8e e3       	ldi	r24, 0x3E	; 62
 3ec:	87 bd       	out	0x27, r24	; 39
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
 3f4:	08 95       	ret

000003f6 <DLY_getTick>:

uint16_t DLY_getTick(void)
{
    return tick;
}
 3f6:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <__data_end>
 3fa:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <__data_end+0x1>
 3fe:	08 95       	ret

00000400 <DLY_setTick>:

void DLY_setTick(uint16_t t){
    tick = t;
 400:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <__data_end+0x1>
 404:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <__data_end>
 408:	08 95       	ret

0000040a <__vector_21>:
}

ISR(TIMER0_COMPA_vect)
{
 40a:	1f 92       	push	r1
 40c:	0f 92       	push	r0
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	0f 92       	push	r0
 412:	11 24       	eor	r1, r1
 414:	8f 93       	push	r24
 416:	9f 93       	push	r25
    TCNT0 = 0;
 418:	16 bc       	out	0x26, r1	; 38
    tick++;
 41a:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <__data_end>
 41e:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <__data_end+0x1>
 422:	01 96       	adiw	r24, 0x01	; 1
 424:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <__data_end+0x1>
 428:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <__data_end>
}
 42c:	9f 91       	pop	r25
 42e:	8f 91       	pop	r24
 430:	0f 90       	pop	r0
 432:	0f be       	out	0x3f, r0	; 63
 434:	0f 90       	pop	r0
 436:	1f 90       	pop	r1
 438:	18 95       	reti

0000043a <IO_init>:

/* NOTE: Function implementations */
void IO_init(void)
{
    // set port B.7 as an output
    DDRB  = 0x80;
 43a:	80 e8       	ldi	r24, 0x80	; 128
 43c:	84 b9       	out	0x04, r24	; 4
    PORTB = 0x00;
 43e:	15 b8       	out	0x05, r1	; 5
 440:	08 95       	ret

00000442 <main>:

/* NOTE: Application implementation */
// the main loop of the function, provided to us
int main(void)
{
    DLY_initInterrupt();
 442:	cf df       	rcall	.-98     	; 0x3e2 <DLY_initInterrupt>

    IO_init();
 444:	fa df       	rcall	.-12     	; 0x43a <IO_init>

    initDebug();
 446:	8a de       	rcall	.-748    	; 0x15c <initDebug>

    sei();
 448:	78 94       	sei

    while(1)
    {
        if(DLY_getTick() > 500)
 44a:	d5 df       	rcall	.-86     	; 0x3f6 <DLY_getTick>
 44c:	85 3f       	cpi	r24, 0xF5	; 245
 44e:	91 40       	sbci	r25, 0x01	; 1
 450:	e0 f3       	brcs	.-8      	; 0x44a <main+0x8>
 452:	85 b1       	in	r24, 0x05	; 5
        {
            PORTB = ~PORTB & 0x80;
 454:	80 95       	com	r24
 456:	80 78       	andi	r24, 0x80	; 128
 458:	85 b9       	out	0x05, r24	; 5

            DLY_setTick(0);
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	d0 df       	rcall	.-96     	; 0x400 <DLY_setTick>
 460:	f4 cf       	rjmp	.-24     	; 0x44a <main+0x8>

00000462 <_exit>:
 462:	f8 94       	cli

00000464 <__stop_program>:
 464:	ff cf       	rjmp	.-2      	; 0x464 <__stop_program>
