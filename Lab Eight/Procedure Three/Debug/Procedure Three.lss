
Procedure Three.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  0000021e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dc0  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c7e  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043e  00000000  00000000  00001d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  0000216c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000590  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000005a  00000000  00000000  00002794  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000027ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	92 c0       	rjmp	.+292    	; 0x132 <__vector_3>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a2 30       	cpi	r26, 0x02	; 2
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	3d d0       	rcall	.+122    	; 0x180 <main>
 106:	4f c0       	rjmp	.+158    	; 0x1a6 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <ENC_init>:
}

uint8_t ENC_getValue(void)
{
    return value;
}
 10a:	8a b1       	in	r24, 0x0a	; 10
 10c:	86 60       	ori	r24, 0x06	; 6
 10e:	8a b9       	out	0x0a, r24	; 10
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	86 60       	ori	r24, 0x06	; 6
 114:	8b b9       	out	0x0b, r24	; 11
 116:	8d b3       	in	r24, 0x1d	; 29
 118:	84 60       	ori	r24, 0x04	; 4
 11a:	8d bb       	out	0x1d, r24	; 29
 11c:	e9 e6       	ldi	r30, 0x69	; 105
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	80 62       	ori	r24, 0x20	; 32
 124:	80 83       	st	Z, r24
 126:	08 95       	ret

00000128 <ENC_getDirection>:

uint8_t ENC_getDirection(void)
{
    // cache the flag state
    uint8_t dir = direction;
 128:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>

    // reset the flag in the global
    direction = 0x00;
 12c:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>

    // return the cached state
    return dir;
}
 130:	08 95       	ret

00000132 <__vector_3>:

ISR(INT2_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
    // if pin is high
    if(PIND & 0x02)
 13e:	49 9b       	sbis	0x09, 1	; 9
 140:	0b c0       	rjmp	.+22     	; 0x158 <__vector_3+0x26>
    {
        // set the flag
        direction = 0x11;
 142:	81 e1       	ldi	r24, 0x11	; 17
 144:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>

        // increment if it won't overflow
        if(value < 255)
 148:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <value>
 14c:	8f 3f       	cpi	r24, 0xFF	; 255
 14e:	71 f0       	breq	.+28     	; 0x16c <__vector_3+0x3a>
        {
            value++;
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <value>
 156:	0a c0       	rjmp	.+20     	; 0x16c <__vector_3+0x3a>
        }
    }
    else
    {
        // set the flag
        direction = 0x10;
 158:	80 e1       	ldi	r24, 0x10	; 16
 15a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>

        // decrement if it won't overflow
        if(value > 0)
 15e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <value>
 162:	88 23       	and	r24, r24
 164:	19 f0       	breq	.+6      	; 0x16c <__vector_3+0x3a>
        {
            value--;
 166:	81 50       	subi	r24, 0x01	; 1
 168:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <value>
        }
    }
 16c:	8f 91       	pop	r24
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <IO_init>:

/* NOTE: Function implementations */
void IO_init(void)
{
    // set portA as an output
    DDRA  = 0xFF;
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	81 b9       	out	0x01, r24	; 1
    PORTA = 0x00;
 17c:	12 b8       	out	0x02, r1	; 2
 17e:	08 95       	ret

00000180 <main>:

/* NOTE: Application implementation */
// the main loop of the function, provided to us
int main(void)
{
    ENC_init();
 180:	c4 df       	rcall	.-120    	; 0x10a <ENC_init>

    IO_init();
 182:	fa df       	rcall	.-12     	; 0x178 <IO_init>

    sei();
 184:	78 94       	sei

    while(1)
    {
        // get the flagged byte
        uint8_t directionFlag = ENC_getDirection();
 186:	d0 df       	rcall	.-96     	; 0x128 <ENC_getDirection>
 188:	84 ff       	sbrs	r24, 4

        // if the flag has been set
        if(directionFlag & 0x10)
 18a:	fd cf       	rjmp	.-6      	; 0x186 <main+0x6>
 18c:	80 ff       	sbrs	r24, 0
        {
            // get the driection flag
            if((directionFlag & 0x01))
 18e:	07 c0       	rjmp	.+14     	; 0x19e <main+0x1e>
 190:	82 b1       	in	r24, 0x02	; 2
            {
                // move the bar left one
                PORTA = PORTA << 1 | 0x01;
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	81 60       	ori	r24, 0x01	; 1
 19a:	82 b9       	out	0x02, r24	; 2
 19c:	f4 cf       	rjmp	.-24     	; 0x186 <main+0x6>
 19e:	82 b1       	in	r24, 0x02	; 2
            }
            else
            {
                // move the bar right one
                PORTA = PORTA >> 1;
 1a0:	86 95       	lsr	r24
 1a2:	82 b9       	out	0x02, r24	; 2
 1a4:	f0 cf       	rjmp	.-32     	; 0x186 <main+0x6>

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
