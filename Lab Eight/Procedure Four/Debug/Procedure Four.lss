
Procedure Four.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000039e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800200  00800200  0000039e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000113c  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ec5  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008b2  00000000  00000000  00002501  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00002db4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c3  00000000  00000000  00002f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000028d  00000000  00000000  0000365b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000038e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	0d c1       	rjmp	.+538    	; 0x228 <__vector_3>
   e:	00 00       	nop
  10:	2e c1       	rjmp	.+604    	; 0x26e <__vector_4>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	bd c0       	rjmp	.+378    	; 0x1d0 <__vector_21>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	75 c0       	rjmp	.+234    	; 0x160 <__vector_29>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a7 30       	cpi	r26, 0x07	; 7
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	d8 d0       	rcall	.+432    	; 0x2b6 <main>
 106:	0f c1       	rjmp	.+542    	; 0x326 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <ADC_init>:
    // save result
    result = ADCL;
    result = result | (ADCH << 8);

    return result / 1024.0;
}
 10a:	83 e8       	ldi	r24, 0x83	; 131
 10c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 110:	80 e4       	ldi	r24, 0x40	; 64
 112:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
 116:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
 11a:	08 95       	ret

0000011c <ADC_initInterrupt>:
 11c:	f6 df       	rcall	.-20     	; 0x10a <ADC_init>
 11e:	ea e7       	ldi	r30, 0x7A	; 122
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	88 60       	ori	r24, 0x08	; 8
 126:	80 83       	st	Z, r24
 128:	08 95       	ret

0000012a <ADC_getTenBitValueInterrupt>:

uint16_t ADC_getTenBitValueInterrupt(uint16_t channel)
{
    // select the channel
    ADMUX  = (ADMUX & 0xe0) | channel;
 12a:	ec e7       	ldi	r30, 0x7C	; 124
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	20 81       	ld	r18, Z
 130:	20 7e       	andi	r18, 0xE0	; 224
 132:	28 2b       	or	r18, r24
 134:	20 83       	st	Z, r18
    ADCSRB = (ADCSRB & 0xf7) | (channel >> 2);
 136:	eb e7       	ldi	r30, 0x7B	; 123
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	20 81       	ld	r18, Z
 13c:	96 95       	lsr	r25
 13e:	87 95       	ror	r24
 140:	96 95       	lsr	r25
 142:	87 95       	ror	r24
 144:	92 2f       	mov	r25, r18
 146:	97 7f       	andi	r25, 0xF7	; 247
 148:	89 2b       	or	r24, r25
 14a:	80 83       	st	Z, r24

    // start conversion
    ADCSRA |= (1 << ADSC);
 14c:	ea e7       	ldi	r30, 0x7A	; 122
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	80 64       	ori	r24, 0x40	; 64
 154:	80 83       	st	Z, r24

    return readInterrupt;
}
 156:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 15a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 15e:	08 95       	ret

00000160 <__vector_29>:

ISR(ADC_vect)
{
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	2f 93       	push	r18
 16c:	3f 93       	push	r19
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
    readInterrupt = ADCL;
 172:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 17c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    readInterrupt = readInterrupt | (ADCH << 8);
 180:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	32 2f       	mov	r19, r18
 188:	22 27       	eor	r18, r18
 18a:	82 2b       	or	r24, r18
 18c:	93 2b       	or	r25, r19
 18e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 192:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	3f 91       	pop	r19
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <DLY_initInterrupt>:
            TCNT0 = 0;
        }

        OCR0A = 0;
    }
}
 1a8:	14 bc       	out	0x24, r1	; 36
 1aa:	84 e0       	ldi	r24, 0x04	; 4
 1ac:	85 bd       	out	0x25, r24	; 37
 1ae:	16 bc       	out	0x26, r1	; 38
 1b0:	8e e3       	ldi	r24, 0x3E	; 62
 1b2:	87 bd       	out	0x27, r24	; 39
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
 1ba:	08 95       	ret

000001bc <DLY_getTick>:

uint16_t DLY_getTick(void)
{
    return tick;
}
 1bc:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <tick>
 1c0:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <tick+0x1>
 1c4:	08 95       	ret

000001c6 <DLY_setTick>:

void DLY_setTick(uint16_t t){
    tick = t;
 1c6:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <tick+0x1>
 1ca:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <tick>
 1ce:	08 95       	ret

000001d0 <__vector_21>:
}

ISR(TIMER0_COMPA_vect)
{
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	8f 93       	push	r24
 1dc:	9f 93       	push	r25
    TCNT0 = 0;
 1de:	16 bc       	out	0x26, r1	; 38
    tick++;
 1e0:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <tick>
 1e4:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <tick+0x1>
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <tick+0x1>
 1ee:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <tick>
}
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <ENC_init>:
}

uint8_t ENC_getValue(void)
{
    return value;
}
 200:	8a b1       	in	r24, 0x0a	; 10
 202:	86 60       	ori	r24, 0x06	; 6
 204:	8a b9       	out	0x0a, r24	; 10
 206:	8b b1       	in	r24, 0x0b	; 11
 208:	86 60       	ori	r24, 0x06	; 6
 20a:	8b b9       	out	0x0b, r24	; 11
 20c:	8d b3       	in	r24, 0x1d	; 29
 20e:	84 60       	ori	r24, 0x04	; 4
 210:	8d bb       	out	0x1d, r24	; 29
 212:	e9 e6       	ldi	r30, 0x69	; 105
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	80 62       	ori	r24, 0x20	; 32
 21a:	80 83       	st	Z, r24
 21c:	08 95       	ret

0000021e <ENC_getDirection>:

uint8_t ENC_getDirection(void)
{
    // cache the flag state
    uint8_t dir = direction;
 21e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <direction>

    // reset the flag in the global
    direction = 0x00;
 222:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <direction>

    // return the cached state
    return dir;
}
 226:	08 95       	ret

00000228 <__vector_3>:

ISR(INT2_vect)
{
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	8f 93       	push	r24
    // if pin is high
    if(PIND & 0x02)
 234:	49 9b       	sbis	0x09, 1	; 9
 236:	0b c0       	rjmp	.+22     	; 0x24e <__vector_3+0x26>
    {
        // set the flag
        direction = 0x11;
 238:	81 e1       	ldi	r24, 0x11	; 17
 23a:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <direction>

        // increment if it won't overflow
        if(value < 255)
 23e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <value>
 242:	8f 3f       	cpi	r24, 0xFF	; 255
 244:	71 f0       	breq	.+28     	; 0x262 <__vector_3+0x3a>
        {
            value++;
 246:	8f 5f       	subi	r24, 0xFF	; 255
 248:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <value>
 24c:	0a c0       	rjmp	.+20     	; 0x262 <__vector_3+0x3a>
        }
    }
    else
    {
        // set the flag
        direction = 0x10;
 24e:	80 e1       	ldi	r24, 0x10	; 16
 250:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <direction>

        // decrement if it won't overflow
        if(value > 0)
 254:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <value>
 258:	88 23       	and	r24, r24
 25a:	19 f0       	breq	.+6      	; 0x262 <__vector_3+0x3a>
        {
            value--;
 25c:	81 50       	subi	r24, 0x01	; 1
 25e:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <value>
        }
    }
 262:	8f 91       	pop	r24
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <__vector_4>:
    }
}

// the mode button interupt
ISR(INT3_vect)
{
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	8f 93       	push	r24
    if(modeFlag < 2)
 27a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <modeFlag>
 27e:	82 30       	cpi	r24, 0x02	; 2
 280:	20 f4       	brcc	.+8      	; 0x28a <__vector_4+0x1c>
    {
        modeFlag++;
 282:	8f 5f       	subi	r24, 0xFF	; 255
 284:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <modeFlag>
 288:	02 c0       	rjmp	.+4      	; 0x28e <__vector_4+0x20>
    }
    else
    {
        modeFlag = 0;
 28a:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <modeFlag>
    }

    PORTA = 0x00;
 28e:	12 b8       	out	0x02, r1	; 2
}
 290:	8f 91       	pop	r24
 292:	0f 90       	pop	r0
 294:	0f be       	out	0x3f, r0	; 63
 296:	0f 90       	pop	r0
 298:	1f 90       	pop	r1
 29a:	18 95       	reti

0000029c <IO_init>:

/* NOTE: Function implementations */
void IO_init(void)
{
    // set port B.7 as an output
    DDRB  = 0x80;
 29c:	80 e8       	ldi	r24, 0x80	; 128
 29e:	84 b9       	out	0x04, r24	; 4
    PORTB = 0x00;
 2a0:	15 b8       	out	0x05, r1	; 5

    // set port A.7 as an output
    DDRA  = 0xFF;
 2a2:	9f ef       	ldi	r25, 0xFF	; 255
 2a4:	91 b9       	out	0x01, r25	; 1
    PORTA = 0x00;
 2a6:	12 b8       	out	0x02, r1	; 2

    // set port D.3 as an input
    DDRD  = 0x00;
 2a8:	1a b8       	out	0x0a, r1	; 10
    PORTD = 0x08;
 2aa:	98 e0       	ldi	r25, 0x08	; 8
 2ac:	9b b9       	out	0x0b, r25	; 11

    // set interrupt 3 to on rising edge
    EIMSK = (1 << INT3);
 2ae:	9d bb       	out	0x1d, r25	; 29
    EICRA = (1 << ISC31);
 2b0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
 2b4:	08 95       	ret

000002b6 <main>:

/* NOTE: Application implementation */
// the main loop of the function, provided to us
int main(void)
{
    IO_init();
 2b6:	f2 df       	rcall	.-28     	; 0x29c <IO_init>
    
    ENC_init();
 2b8:	a3 df       	rcall	.-186    	; 0x200 <ENC_init>
    ADC_initInterrupt();
 2ba:	30 df       	rcall	.-416    	; 0x11c <ADC_initInterrupt>
    DLY_initInterrupt();
 2bc:	75 df       	rcall	.-278    	; 0x1a8 <DLY_initInterrupt>
 2be:	78 94       	sei

    sei();
 2c0:	7d df       	rcall	.-262    	; 0x1bc <DLY_getTick>

    while(1)
    {
        // the watchdog led
        if(DLY_getTick() > 500)
 2c2:	85 3f       	cpi	r24, 0xF5	; 245
 2c4:	91 40       	sbci	r25, 0x01	; 1
 2c6:	80 f0       	brcs	.+32     	; 0x2e8 <main+0x32>
 2c8:	85 b1       	in	r24, 0x05	; 5
 2ca:	80 95       	com	r24
        {
            PORTB = ~PORTB & 0x80;
 2cc:	80 78       	andi	r24, 0x80	; 128
 2ce:	85 b9       	out	0x05, r24	; 5
 2d0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <modeFlag>

            if(modeFlag == 0)
 2d4:	81 11       	cpse	r24, r1
 2d6:	05 c0       	rjmp	.+10     	; 0x2e2 <main+0x2c>
 2d8:	92 b1       	in	r25, 0x02	; 2
 2da:	81 e0       	ldi	r24, 0x01	; 1
            {
                PORTA = ~PORTA & 0x01;
 2dc:	89 27       	eor	r24, r25
 2de:	81 70       	andi	r24, 0x01	; 1
 2e0:	82 b9       	out	0x02, r24	; 2
 2e2:	80 e0       	ldi	r24, 0x00	; 0
            }

            DLY_setTick(0);
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	6f df       	rcall	.-290    	; 0x1c6 <DLY_setTick>
 2e8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <modeFlag>
        }

        // the mode switcher
        if(modeFlag == 1)
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	49 f4       	brne	.+18     	; 0x302 <main+0x4c>
 2f0:	80 e0       	ldi	r24, 0x00	; 0
        {
            // get the value and bit shift it right 2
            PORTA = ADC_getTenBitValueInterrupt(0) >> 2;
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	1a df       	rcall	.-460    	; 0x12a <ADC_getTenBitValueInterrupt>
 2f6:	96 95       	lsr	r25
 2f8:	87 95       	ror	r24
 2fa:	96 95       	lsr	r25
 2fc:	87 95       	ror	r24
 2fe:	82 b9       	out	0x02, r24	; 2
 300:	df cf       	rjmp	.-66     	; 0x2c0 <main+0xa>
 302:	82 30       	cpi	r24, 0x02	; 2
        }
        else if(modeFlag == 2)
 304:	e9 f6       	brne	.-70     	; 0x2c0 <main+0xa>
 306:	8b df       	rcall	.-234    	; 0x21e <ENC_getDirection>
        {
            // get the flagged byte
            uint8_t directionFlag = ENC_getDirection();
 308:	84 ff       	sbrs	r24, 4
 30a:	da cf       	rjmp	.-76     	; 0x2c0 <main+0xa>

            // if the flag has been set
            if(directionFlag & 0x10)
 30c:	80 ff       	sbrs	r24, 0
 30e:	07 c0       	rjmp	.+14     	; 0x31e <main+0x68>
            {
                // get the driection flag
                if((directionFlag & 0x01))
 310:	82 b1       	in	r24, 0x02	; 2
 312:	90 e0       	ldi	r25, 0x00	; 0
                {
                    // move the bar left one
                    PORTA = PORTA << 1 | 0x01;
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	81 60       	ori	r24, 0x01	; 1
 31a:	82 b9       	out	0x02, r24	; 2
 31c:	d1 cf       	rjmp	.-94     	; 0x2c0 <main+0xa>
 31e:	82 b1       	in	r24, 0x02	; 2
 320:	86 95       	lsr	r24
                }
                else
                {
                    // move the bar right one
                    PORTA = PORTA >> 1;
 322:	82 b9       	out	0x02, r24	; 2
 324:	cd cf       	rjmp	.-102    	; 0x2c0 <main+0xa>

00000326 <_exit>:
 326:	f8 94       	cli

00000328 <__stop_program>:
 328:	ff cf       	rjmp	.-2      	; 0x328 <__stop_program>
