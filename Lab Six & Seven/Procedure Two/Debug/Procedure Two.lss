
Procedure Two.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800200  00000804  00000878  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000804  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000918  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012fa  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000df8  00000000  00000000  00001d22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008d7  00000000  00000000  00002b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ec  00000000  00000000  000033f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000680  00000000  00000000  000035e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000039c  00000000  00000000  00003c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00003ffc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	57 c1       	rjmp	.+686    	; 0x378 <__vector_50>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e0       	ldi	r30, 0x04	; 4
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 37       	cpi	r26, 0x70	; 112
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	ba d1       	rcall	.+884    	; 0x484 <main>
 110:	77 c3       	rjmp	.+1774   	; 0x800 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <initDebugTimer>:
	Uses Timer5 with a prescaler of 256, and enables overflow interrupt
*/
void initDebugTimer()
{
	//Prescaler 256
	TCCR5B |= (1<<CS52) | (1<<CS50);
 114:	e1 e2       	ldi	r30, 0x21	; 33
 116:	f1 e0       	ldi	r31, 0x01	; 1
 118:	80 81       	ld	r24, Z
 11a:	85 60       	ori	r24, 0x05	; 5
 11c:	80 83       	st	Z, r24
	
	//15625 TOP Value for UPDATE_FREQUENCY
	TCNT5 = 65535 - (F_CPU / (1024*UPDATE_FREQUENCY));
 11e:	85 ee       	ldi	r24, 0xE5	; 229
 120:	99 ef       	ldi	r25, 0xF9	; 249
 122:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
 126:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
	
	//Enable Timer Overflow Interrupt
	TIMSK5 = (1<<TOIE5);
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7c0073>
 130:	08 95       	ret

00000132 <initDebugUSART>:
	8-bits, 25000 Baud Rate
*/
void initDebugUSART()
{
	//Enable RX and TX
	UCSR0B = (1<<TXEN0) | (1<<RXEN0);
 132:	88 e1       	ldi	r24, 0x18	; 24
 134:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	
	//Set Communication Modes
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);	//8 Data bits
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
	UBRR0 = 3;							//250000 Baud Rate	
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 146:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 14a:	08 95       	ret

0000014c <initDebug>:
	Configures the USART registers for data transmission, Configures the
	Timer registers, and enables interrupts.
*/
void initDebug()
{
	initDebugUSART();
 14c:	f2 df       	rcall	.-28     	; 0x132 <initDebugUSART>
	initDebugTimer();
 14e:	e2 df       	rcall	.-60     	; 0x114 <initDebugTimer>
 150:	78 94       	sei
	sei();
 152:	08 95       	ret

00000154 <UART0Out>:
 154:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	Sends 8-bit unsigned integer out UART0
*/
void UART0Out(uint8_t data) 
{
	//Wait for previous transmission to be done
	while(!(UCSR0A & (1<<UDRE0)));
 158:	95 ff       	sbrs	r25, 5
 15a:	fc cf       	rjmp	.-8      	; 0x154 <UART0Out>
	
	//Set register for next transmission
	UDR0 = data;	
 15c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 160:	08 95       	ret

00000162 <sendStopBit>:
	Sends 0x0A to signify stop
*/
void sendStopBit()
{
	//Wait for previous transmission to be done
	while(!(UCSR0A & (1<<UDRE0)));
 162:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 166:	85 ff       	sbrs	r24, 5
 168:	fc cf       	rjmp	.-8      	; 0x162 <sendStopBit>
	
	//Set register for next transmission
	UDR0 = 0x0A;
 16a:	8a e0       	ldi	r24, 0x0A	; 10
 16c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 170:	08 95       	ret

00000172 <UART0PrintString>:

Description:
	Continues to send data until reaching null character
*/
void UART0PrintString(char *strPtr)
{
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ec 01       	movw	r28, r24
	while(*strPtr != 0x00) 
 178:	02 c0       	rjmp	.+4      	; 0x17e <UART0PrintString+0xc>
	{
		UART0Out(*strPtr);
 17a:	ec df       	rcall	.-40     	; 0x154 <UART0Out>
		strPtr ++;
 17c:	21 96       	adiw	r28, 0x01	; 1
Description:
	Continues to send data until reaching null character
*/
void UART0PrintString(char *strPtr)
{
	while(*strPtr != 0x00) 
 17e:	88 81       	ld	r24, Y
 180:	81 11       	cpse	r24, r1
 182:	fb cf       	rjmp	.-10     	; 0x17a <UART0PrintString+0x8>
	{
		UART0Out(*strPtr);
		strPtr ++;
	}
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <sendPortData>:
Description:
	Loops through portAddr array and sends
	out data at each address
*/
void sendPortData()
{	
 18a:	cf 93       	push	r28
	for (uint8_t i=0; i<18; i++)
 18c:	c0 e0       	ldi	r28, 0x00	; 0
 18e:	0c c0       	rjmp	.+24     	; 0x1a8 <sendPortData+0x1e>
	{
		UART0Out(*portAddr[i]);
 190:	ec 2f       	mov	r30, r28
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	ec 5b       	subi	r30, 0xBC	; 188
 19a:	fd 4f       	sbci	r31, 0xFD	; 253
 19c:	01 90       	ld	r0, Z+
 19e:	f0 81       	ld	r31, Z
 1a0:	e0 2d       	mov	r30, r0
 1a2:	80 81       	ld	r24, Z
 1a4:	d7 df       	rcall	.-82     	; 0x154 <UART0Out>
	Loops through portAddr array and sends
	out data at each address
*/
void sendPortData()
{	
	for (uint8_t i=0; i<18; i++)
 1a6:	cf 5f       	subi	r28, 0xFF	; 255
 1a8:	c2 31       	cpi	r28, 0x12	; 18
 1aa:	90 f3       	brcs	.-28     	; 0x190 <sendPortData+0x6>
	{
		UART0Out(*portAddr[i]);
	}
}
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <sendTimerData>:
Description:
	Loops though timerAddr array and sends
	out data at each address
*/
void sendTimerData()
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
	//Timer 0
	for (uint8_t i=0; i<3; i++) 
 1b4:	c0 e0       	ldi	r28, 0x00	; 0
 1b6:	0c c0       	rjmp	.+24     	; 0x1d0 <sendTimerData+0x20>
	{
		UART0Out(*timerAddr[i]);
 1b8:	ec 2f       	mov	r30, r28
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	ee 0f       	add	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	e8 5e       	subi	r30, 0xE8	; 232
 1c2:	fd 4f       	sbci	r31, 0xFD	; 253
 1c4:	01 90       	ld	r0, Z+
 1c6:	f0 81       	ld	r31, Z
 1c8:	e0 2d       	mov	r30, r0
 1ca:	80 81       	ld	r24, Z
 1cc:	c3 df       	rcall	.-122    	; 0x154 <UART0Out>
	out data at each address
*/
void sendTimerData()
{
	//Timer 0
	for (uint8_t i=0; i<3; i++) 
 1ce:	cf 5f       	subi	r28, 0xFF	; 255
 1d0:	c3 30       	cpi	r28, 0x03	; 3
 1d2:	90 f3       	brcs	.-28     	; 0x1b8 <sendTimerData+0x8>
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR0A
	UART0Out(*timerAddr[3]);
 1d4:	c8 e1       	ldi	r28, 0x18	; 24
 1d6:	d2 e0       	ldi	r29, 0x02	; 2
 1d8:	ee 81       	ldd	r30, Y+6	; 0x06
 1da:	ff 81       	ldd	r31, Y+7	; 0x07
 1dc:	80 81       	ld	r24, Z
 1de:	ba df       	rcall	.-140    	; 0x154 <UART0Out>
	UART0Out(*(timerAddr[3]+1));
 1e0:	ee 81       	ldd	r30, Y+6	; 0x06
 1e2:	ff 81       	ldd	r31, Y+7	; 0x07
 1e4:	81 81       	ldd	r24, Z+1	; 0x01
 1e6:	b6 df       	rcall	.-148    	; 0x154 <UART0Out>
	
	//OCR0B
	UART0Out(*timerAddr[4]);
 1e8:	e8 85       	ldd	r30, Y+8	; 0x08
 1ea:	f9 85       	ldd	r31, Y+9	; 0x09
 1ec:	80 81       	ld	r24, Z
 1ee:	b2 df       	rcall	.-156    	; 0x154 <UART0Out>
	UART0Out(*(timerAddr[4]+1));
 1f0:	e8 85       	ldd	r30, Y+8	; 0x08
 1f2:	f9 85       	ldd	r31, Y+9	; 0x09
 1f4:	81 81       	ldd	r24, Z+1	; 0x01
 1f6:	ae df       	rcall	.-164    	; 0x154 <UART0Out>
 1f8:	c5 e0       	ldi	r28, 0x05	; 5
	
	//Timer 1
	for (uint8_t i=5; i<8; i++)
 1fa:	0c c0       	rjmp	.+24     	; 0x214 <sendTimerData+0x64>
 1fc:	ec 2f       	mov	r30, r28
	{
		UART0Out(*timerAddr[i]);
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	ee 0f       	add	r30, r30
 202:	ff 1f       	adc	r31, r31
 204:	e8 5e       	subi	r30, 0xE8	; 232
 206:	fd 4f       	sbci	r31, 0xFD	; 253
 208:	01 90       	ld	r0, Z+
 20a:	f0 81       	ld	r31, Z
 20c:	e0 2d       	mov	r30, r0
 20e:	80 81       	ld	r24, Z
 210:	a1 df       	rcall	.-190    	; 0x154 <UART0Out>
 212:	cf 5f       	subi	r28, 0xFF	; 255
	//OCR0B
	UART0Out(*timerAddr[4]);
	UART0Out(*(timerAddr[4]+1));
	
	//Timer 1
	for (uint8_t i=5; i<8; i++)
 214:	c8 30       	cpi	r28, 0x08	; 8
 216:	90 f3       	brcs	.-28     	; 0x1fc <sendTimerData+0x4c>
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR1A
	UART0Out(*timerAddr[8]);
 218:	c8 e1       	ldi	r28, 0x18	; 24
 21a:	d2 e0       	ldi	r29, 0x02	; 2
 21c:	e8 89       	ldd	r30, Y+16	; 0x10
 21e:	f9 89       	ldd	r31, Y+17	; 0x11
 220:	80 81       	ld	r24, Z
 222:	98 df       	rcall	.-208    	; 0x154 <UART0Out>
	UART0Out(*(timerAddr[8]+1));
 224:	e8 89       	ldd	r30, Y+16	; 0x10
 226:	f9 89       	ldd	r31, Y+17	; 0x11
 228:	81 81       	ldd	r24, Z+1	; 0x01
 22a:	94 df       	rcall	.-216    	; 0x154 <UART0Out>
	
	//OCR1B
	UART0Out(*timerAddr[9]);
 22c:	ea 89       	ldd	r30, Y+18	; 0x12
 22e:	fb 89       	ldd	r31, Y+19	; 0x13
 230:	80 81       	ld	r24, Z
 232:	90 df       	rcall	.-224    	; 0x154 <UART0Out>
	UART0Out(*(timerAddr[9]+1));
 234:	ea 89       	ldd	r30, Y+18	; 0x12
 236:	fb 89       	ldd	r31, Y+19	; 0x13
 238:	81 81       	ldd	r24, Z+1	; 0x01
 23a:	8c df       	rcall	.-232    	; 0x154 <UART0Out>
	
	//OCR1C
	UART0Out(*timerAddr[10]);
 23c:	ec 89       	ldd	r30, Y+20	; 0x14
 23e:	fd 89       	ldd	r31, Y+21	; 0x15
 240:	80 81       	ld	r24, Z
 242:	88 df       	rcall	.-240    	; 0x154 <UART0Out>
 244:	ec 89       	ldd	r30, Y+20	; 0x14
	UART0Out(*(timerAddr[10]+1));
 246:	fd 89       	ldd	r31, Y+21	; 0x15
 248:	81 81       	ldd	r24, Z+1	; 0x01
 24a:	84 df       	rcall	.-248    	; 0x154 <UART0Out>
 24c:	cb e0       	ldi	r28, 0x0B	; 11
 24e:	0c c0       	rjmp	.+24     	; 0x268 <sendTimerData+0xb8>
	
	//Timer 2
	for (uint8_t i=11; i<14; i++)
 250:	ec 2f       	mov	r30, r28
	{
		UART0Out(*timerAddr[i]);
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	ee 0f       	add	r30, r30
 256:	ff 1f       	adc	r31, r31
 258:	e8 5e       	subi	r30, 0xE8	; 232
 25a:	fd 4f       	sbci	r31, 0xFD	; 253
 25c:	01 90       	ld	r0, Z+
 25e:	f0 81       	ld	r31, Z
 260:	e0 2d       	mov	r30, r0
 262:	80 81       	ld	r24, Z
 264:	77 df       	rcall	.-274    	; 0x154 <UART0Out>
 266:	cf 5f       	subi	r28, 0xFF	; 255
	//OCR1C
	UART0Out(*timerAddr[10]);
	UART0Out(*(timerAddr[10]+1));
	
	//Timer 2
	for (uint8_t i=11; i<14; i++)
 268:	ce 30       	cpi	r28, 0x0E	; 14
 26a:	90 f3       	brcs	.-28     	; 0x250 <sendTimerData+0xa0>
 26c:	c8 e1       	ldi	r28, 0x18	; 24
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR2A
	UART0Out(*timerAddr[14]);
 26e:	d2 e0       	ldi	r29, 0x02	; 2
 270:	ec 8d       	ldd	r30, Y+28	; 0x1c
 272:	fd 8d       	ldd	r31, Y+29	; 0x1d
 274:	80 81       	ld	r24, Z
 276:	6e df       	rcall	.-292    	; 0x154 <UART0Out>
	UART0Out(*(timerAddr[14]+1));
 278:	ec 8d       	ldd	r30, Y+28	; 0x1c
 27a:	fd 8d       	ldd	r31, Y+29	; 0x1d
 27c:	81 81       	ldd	r24, Z+1	; 0x01
 27e:	6a df       	rcall	.-300    	; 0x154 <UART0Out>
 280:	ee 8d       	ldd	r30, Y+30	; 0x1e
	
	//OCR2B
	UART0Out(*timerAddr[15]);
 282:	ff 8d       	ldd	r31, Y+31	; 0x1f
 284:	80 81       	ld	r24, Z
 286:	66 df       	rcall	.-308    	; 0x154 <UART0Out>
 288:	ee 8d       	ldd	r30, Y+30	; 0x1e
 28a:	ff 8d       	ldd	r31, Y+31	; 0x1f
	UART0Out(*(timerAddr[15]+1));
 28c:	81 81       	ldd	r24, Z+1	; 0x01
 28e:	62 df       	rcall	.-316    	; 0x154 <UART0Out>
 290:	c0 e1       	ldi	r28, 0x10	; 16
 292:	0c c0       	rjmp	.+24     	; 0x2ac <sendTimerData+0xfc>
	
	//Timer 3
	for (uint8_t i=16; i<19; i++)
 294:	ec 2f       	mov	r30, r28
 296:	f0 e0       	ldi	r31, 0x00	; 0
	{
		UART0Out(*timerAddr[i]);
 298:	ee 0f       	add	r30, r30
 29a:	ff 1f       	adc	r31, r31
 29c:	e8 5e       	subi	r30, 0xE8	; 232
 29e:	fd 4f       	sbci	r31, 0xFD	; 253
 2a0:	01 90       	ld	r0, Z+
 2a2:	f0 81       	ld	r31, Z
 2a4:	e0 2d       	mov	r30, r0
 2a6:	80 81       	ld	r24, Z
 2a8:	55 df       	rcall	.-342    	; 0x154 <UART0Out>
 2aa:	cf 5f       	subi	r28, 0xFF	; 255
	//OCR2B
	UART0Out(*timerAddr[15]);
	UART0Out(*(timerAddr[15]+1));
	
	//Timer 3
	for (uint8_t i=16; i<19; i++)
 2ac:	c3 31       	cpi	r28, 0x13	; 19
 2ae:	90 f3       	brcs	.-28     	; 0x294 <sendTimerData+0xe4>
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR3A
	UART0Out(*timerAddr[19]);
 2b0:	c8 e1       	ldi	r28, 0x18	; 24
 2b2:	d2 e0       	ldi	r29, 0x02	; 2
 2b4:	ee a1       	ldd	r30, Y+38	; 0x26
 2b6:	ff a1       	ldd	r31, Y+39	; 0x27
 2b8:	80 81       	ld	r24, Z
 2ba:	4c df       	rcall	.-360    	; 0x154 <UART0Out>
	UART0Out(*(timerAddr[19]+1));
 2bc:	ee a1       	ldd	r30, Y+38	; 0x26
 2be:	ff a1       	ldd	r31, Y+39	; 0x27
 2c0:	81 81       	ldd	r24, Z+1	; 0x01
 2c2:	48 df       	rcall	.-368    	; 0x154 <UART0Out>
	
	//OCR3B
	UART0Out(*timerAddr[20]);
 2c4:	e8 a5       	ldd	r30, Y+40	; 0x28
 2c6:	f9 a5       	ldd	r31, Y+41	; 0x29
 2c8:	80 81       	ld	r24, Z
 2ca:	44 df       	rcall	.-376    	; 0x154 <UART0Out>
 2cc:	e8 a5       	ldd	r30, Y+40	; 0x28
	UART0Out(*(timerAddr[20]+1));
 2ce:	f9 a5       	ldd	r31, Y+41	; 0x29
 2d0:	81 81       	ldd	r24, Z+1	; 0x01
 2d2:	40 df       	rcall	.-384    	; 0x154 <UART0Out>
 2d4:	ea a5       	ldd	r30, Y+42	; 0x2a
 2d6:	fb a5       	ldd	r31, Y+43	; 0x2b
	
	//OCR3C
	UART0Out(*timerAddr[21]);
 2d8:	80 81       	ld	r24, Z
 2da:	3c df       	rcall	.-392    	; 0x154 <UART0Out>
 2dc:	ea a5       	ldd	r30, Y+42	; 0x2a
 2de:	fb a5       	ldd	r31, Y+43	; 0x2b
 2e0:	81 81       	ldd	r24, Z+1	; 0x01
	UART0Out(*(timerAddr[21]+1));
 2e2:	38 df       	rcall	.-400    	; 0x154 <UART0Out>
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <sendUSARTData>:
 2ea:	cf 93       	push	r28
}
 2ec:	c0 e0       	ldi	r28, 0x00	; 0
 2ee:	0c c0       	rjmp	.+24     	; 0x308 <sendUSARTData+0x1e>
 2f0:	ec 2f       	mov	r30, r28
*/
void sendUSARTData()
{
	for (uint8_t i=0; i<6; i++)
	{
		UART0Out(*USARTAddr[i]);
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	ee 0f       	add	r30, r30
 2f6:	ff 1f       	adc	r31, r31
 2f8:	e4 5f       	subi	r30, 0xF4	; 244
 2fa:	fd 4f       	sbci	r31, 0xFD	; 253
 2fc:	01 90       	ld	r0, Z+
 2fe:	f0 81       	ld	r31, Z
 300:	e0 2d       	mov	r30, r0
 302:	80 81       	ld	r24, Z
 304:	27 df       	rcall	.-434    	; 0x154 <UART0Out>
	Loops though USARTAddr array and sends
	out data at each address
*/
void sendUSARTData()
{
	for (uint8_t i=0; i<6; i++)
 306:	cf 5f       	subi	r28, 0xFF	; 255
 308:	c6 30       	cpi	r28, 0x06	; 6
 30a:	90 f3       	brcs	.-28     	; 0x2f0 <sendUSARTData+0x6>
	{
		UART0Out(*USARTAddr[i]);
	}
}
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <sendADCData>:
Description:
	Loops though ADCAddr array and sends
	out data at each address
*/
void sendADCData()
{
 310:	cf 93       	push	r28
	for (uint8_t i=0; i<3; i++)
 312:	c0 e0       	ldi	r28, 0x00	; 0
 314:	0c c0       	rjmp	.+24     	; 0x32e <sendADCData+0x1e>
	{
		UART0Out(*ADCAddr[i]);
 316:	ec 2f       	mov	r30, r28
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	ee 0f       	add	r30, r30
 31c:	ff 1f       	adc	r31, r31
 31e:	ea 5f       	subi	r30, 0xFA	; 250
 320:	fd 4f       	sbci	r31, 0xFD	; 253
 322:	01 90       	ld	r0, Z+
 324:	f0 81       	ld	r31, Z
 326:	e0 2d       	mov	r30, r0
 328:	80 81       	ld	r24, Z
 32a:	14 df       	rcall	.-472    	; 0x154 <UART0Out>
	Loops though ADCAddr array and sends
	out data at each address
*/
void sendADCData()
{
	for (uint8_t i=0; i<3; i++)
 32c:	cf 5f       	subi	r28, 0xFF	; 255
 32e:	c3 30       	cpi	r28, 0x03	; 3
 330:	90 f3       	brcs	.-28     	; 0x316 <sendADCData+0x6>
	{
		UART0Out(*ADCAddr[i]);
	}
}
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <sendINTData>:
Description:
	Loops though intAddr array and sends
	out data at each address
*/
void sendINTData()
{
 336:	cf 93       	push	r28
	for (uint8_t i=0; i<3; i++)
 338:	c0 e0       	ldi	r28, 0x00	; 0
 33a:	0c c0       	rjmp	.+24     	; 0x354 <sendINTData+0x1e>
	{
		UART0Out(*intAddr[i]);
 33c:	ec 2f       	mov	r30, r28
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	ee 0f       	add	r30, r30
 342:	ff 1f       	adc	r31, r31
 344:	e0 50       	subi	r30, 0x00	; 0
 346:	fe 4f       	sbci	r31, 0xFE	; 254
 348:	01 90       	ld	r0, Z+
 34a:	f0 81       	ld	r31, Z
 34c:	e0 2d       	mov	r30, r0
 34e:	80 81       	ld	r24, Z
 350:	01 df       	rcall	.-510    	; 0x154 <UART0Out>
	Loops though intAddr array and sends
	out data at each address
*/
void sendINTData()
{
	for (uint8_t i=0; i<3; i++)
 352:	cf 5f       	subi	r28, 0xFF	; 255
 354:	c3 30       	cpi	r28, 0x03	; 3
 356:	90 f3       	brcs	.-28     	; 0x33c <sendINTData+0x6>
	{
		UART0Out(*intAddr[i]);
	}
}
 358:	cf 91       	pop	r28
 35a:	08 95       	ret

0000035c <sendRegisterData>:
Description:
	Calls each send___Data() function
*/
void sendRegisterData() 
{
	UART0PrintString(st);
 35c:	8c e6       	ldi	r24, 0x6C	; 108
 35e:	92 e0       	ldi	r25, 0x02	; 2
 360:	08 df       	rcall	.-496    	; 0x172 <UART0PrintString>
	sendStopBit();
 362:	ff de       	rcall	.-514    	; 0x162 <sendStopBit>
	
	sendPortData();
 364:	12 df       	rcall	.-476    	; 0x18a <sendPortData>
	sendTimerData();
 366:	24 df       	rcall	.-440    	; 0x1b0 <sendTimerData>
	sendUSARTData();
 368:	c0 df       	rcall	.-128    	; 0x2ea <sendUSARTData>
	sendADCData();
 36a:	d2 df       	rcall	.-92     	; 0x310 <sendADCData>
	sendINTData();
 36c:	e4 df       	rcall	.-56     	; 0x336 <sendINTData>
 36e:	88 e6       	ldi	r24, 0x68	; 104
	
	UART0PrintString(en);
 370:	92 e0       	ldi	r25, 0x02	; 2
 372:	ff de       	rcall	.-514    	; 0x172 <UART0PrintString>
 374:	f6 ce       	rjmp	.-532    	; 0x162 <sendStopBit>
 376:	08 95       	ret

00000378 <__vector_50>:
	sendStopBit();
 378:	1f 92       	push	r1
 37a:	0f 92       	push	r0
 37c:	0f b6       	in	r0, 0x3f	; 63

Description:
	Resets counter value then sends register data
*/
ISR(TIMER5_OVF_vect) 
{
 37e:	0f 92       	push	r0
 380:	11 24       	eor	r1, r1
 382:	0b b6       	in	r0, 0x3b	; 59
 384:	0f 92       	push	r0
 386:	2f 93       	push	r18
 388:	3f 93       	push	r19
 38a:	4f 93       	push	r20
 38c:	5f 93       	push	r21
 38e:	6f 93       	push	r22
 390:	7f 93       	push	r23
 392:	8f 93       	push	r24
 394:	9f 93       	push	r25
 396:	af 93       	push	r26
 398:	bf 93       	push	r27
 39a:	ef 93       	push	r30
 39c:	ff 93       	push	r31
	TCNT5 = 65535 - (F_CPU / (1024*UPDATE_FREQUENCY));
 39e:	85 ee       	ldi	r24, 0xE5	; 229
 3a0:	99 ef       	ldi	r25, 0xF9	; 249
 3a2:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
 3a6:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
	sendRegisterData();
 3aa:	d8 df       	rcall	.-80     	; 0x35c <sendRegisterData>
}
 3ac:	ff 91       	pop	r31
 3ae:	ef 91       	pop	r30
 3b0:	bf 91       	pop	r27
 3b2:	af 91       	pop	r26
 3b4:	9f 91       	pop	r25
 3b6:	8f 91       	pop	r24
 3b8:	7f 91       	pop	r23
 3ba:	6f 91       	pop	r22
 3bc:	5f 91       	pop	r21
 3be:	4f 91       	pop	r20
 3c0:	3f 91       	pop	r19
 3c2:	2f 91       	pop	r18
 3c4:	0f 90       	pop	r0
 3c6:	0b be       	out	0x3b, r0	; 59
 3c8:	0f 90       	pop	r0
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	0f 90       	pop	r0
 3ce:	1f 90       	pop	r1
 3d0:	18 95       	reti

000003d2 <DLY_init>:

/* NOTE: Local function implementations */
void DLY_init(void)
{
    // reset counter to 0
    TCNT0 = 0;
 3d2:	16 bc       	out	0x26, r1	; 38

    // normal mode
    TCCR0A = 0x00;
 3d4:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
 3d6:	15 bc       	out	0x25, r1	; 37

    OCR0A = 0;
 3d8:	17 bc       	out	0x27, r1	; 39
 3da:	08 95       	ret

000003dc <DLY_ms>:
}

void DLY_ms(double ms)
{
 3dc:	cf 92       	push	r12
 3de:	df 92       	push	r13
 3e0:	ef 92       	push	r14
 3e2:	ff 92       	push	r15
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	6b 01       	movw	r12, r22
 3ea:	7c 01       	movw	r14, r24
    size_t time = (((ms / 1000.0) * F_CPU) / 1024);
 3ec:	20 e0       	ldi	r18, 0x00	; 0
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	4a e7       	ldi	r20, 0x7A	; 122
 3f2:	54 e4       	ldi	r21, 0x44	; 68
 3f4:	58 d0       	rcall	.+176    	; 0x4a6 <__divsf3>
 3f6:	20 e0       	ldi	r18, 0x00	; 0
 3f8:	34 e2       	ldi	r19, 0x24	; 36
 3fa:	44 e7       	ldi	r20, 0x74	; 116
 3fc:	5b e4       	ldi	r21, 0x4B	; 75
 3fe:	9d d1       	rcall	.+826    	; 0x73a <__mulsf3>
 400:	20 e0       	ldi	r18, 0x00	; 0
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	40 e8       	ldi	r20, 0x80	; 128
 406:	5a e3       	ldi	r21, 0x3A	; 58
 408:	98 d1       	rcall	.+816    	; 0x73a <__mulsf3>
 40a:	b5 d0       	rcall	.+362    	; 0x576 <__fixunssfsi>
 40c:	c6 2f       	mov	r28, r22

    if(ms <= 16)
 40e:	20 e0       	ldi	r18, 0x00	; 0
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	40 e8       	ldi	r20, 0x80	; 128
 414:	51 e4       	ldi	r21, 0x41	; 65
 416:	c7 01       	movw	r24, r14
 418:	b6 01       	movw	r22, r12
 41a:	41 d0       	rcall	.+130    	; 0x49e <__cmpsf2>
 41c:	18 16       	cp	r1, r24
 41e:	64 f0       	brlt	.+24     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
    {
        OCR0A = time;
 420:	c7 bd       	out	0x27, r28	; 39

        // prescalar of 1024
        TCCR0B = 0x05;
 422:	85 e0       	ldi	r24, 0x05	; 5
 424:	85 bd       	out	0x25, r24	; 37

        while((TIFR0 & (1 << OCF0A)) == 0)
 426:	a9 9b       	sbis	0x15, 1	; 21
 428:	fe cf       	rjmp	.-4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
        {
            // do nothing
        }

        // stop the timer
        TCCR0B = 0x00;
 42a:	15 bc       	out	0x25, r1	; 37
        // clear the overflow flag
        TIFR0 |= (1 << OCF0A);
 42c:	85 b3       	in	r24, 0x15	; 21
 42e:	82 60       	ori	r24, 0x02	; 2
 430:	85 bb       	out	0x15, r24	; 21
        TCNT0 = 0;
 432:	16 bc       	out	0x26, r1	; 38
        OCR0A = 0;
 434:	17 bc       	out	0x27, r1	; 39
 436:	1b c0       	rjmp	.+54     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
    }
    else
    {
        OCR0A = (((1 / 1000.0) * F_CPU) / 1024);
 438:	8f e0       	ldi	r24, 0x0F	; 15
 43a:	87 bd       	out	0x27, r24	; 39

        for(size_t i = 0; i < ms; i++)
 43c:	c0 e0       	ldi	r28, 0x00	; 0
 43e:	d0 e0       	ldi	r29, 0x00	; 0
 440:	0a c0       	rjmp	.+20     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
        {
            // prescalar of 1024
            TCCR0B = 0x05;
 442:	85 e0       	ldi	r24, 0x05	; 5
 444:	85 bd       	out	0x25, r24	; 37

            while((TIFR0 & (1 << OCF0A)) == 0)
 446:	a9 9b       	sbis	0x15, 1	; 21
 448:	fe cf       	rjmp	.-4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
            {
                // do nothing
            }

            // stop the timer
            TCCR0B = 0x00;
 44a:	15 bc       	out	0x25, r1	; 37
            // clear the overflow flag
            TIFR0 |= (1 << OCF0A);
 44c:	85 b3       	in	r24, 0x15	; 21
 44e:	82 60       	ori	r24, 0x02	; 2
 450:	85 bb       	out	0x15, r24	; 21
    }
    else
    {
        OCR0A = (((1 / 1000.0) * F_CPU) / 1024);

        for(size_t i = 0; i < ms; i++)
 452:	16 bc       	out	0x26, r1	; 38
 454:	21 96       	adiw	r28, 0x01	; 1
 456:	be 01       	movw	r22, r28
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	b8 d0       	rcall	.+368    	; 0x5ce <__floatunsisf>
 45e:	9b 01       	movw	r18, r22
 460:	ac 01       	movw	r20, r24
 462:	c7 01       	movw	r24, r14
 464:	b6 01       	movw	r22, r12
 466:	65 d1       	rcall	.+714    	; 0x732 <__gesf2>
 468:	18 16       	cp	r1, r24
 46a:	5c f3       	brlt	.-42     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
            // clear the overflow flag
            TIFR0 |= (1 << OCF0A);
            TCNT0 = 0;
        }

        OCR0A = 0;
 46c:	17 bc       	out	0x27, r1	; 39
    }
}
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	ff 90       	pop	r15
 474:	ef 90       	pop	r14
 476:	df 90       	pop	r13
 478:	cf 90       	pop	r12
 47a:	08 95       	ret

0000047c <IO_init>:

/* NOTE: Function implementations */
void IO_init(void)
{
    // set port B.7 as an output
    DDRB  = 0x80;
 47c:	80 e8       	ldi	r24, 0x80	; 128
 47e:	84 b9       	out	0x04, r24	; 4
    PORTB = 0x00;
 480:	15 b8       	out	0x05, r1	; 5
 482:	08 95       	ret

00000484 <main>:

/* NOTE: Application implementation */
// the main loop of the function, provided to us
int main(void)
{
    DLY_init();
 484:	a6 df       	rcall	.-180    	; 0x3d2 <DLY_init>

    IO_init();
 486:	fa df       	rcall	.-12     	; 0x47c <IO_init>

    initDebug();
 488:	61 de       	rcall	.-830    	; 0x14c <initDebug>
 48a:	60 e0       	ldi	r22, 0x00	; 0

    while(1)
    {
        DLY_ms(500);
 48c:	70 e0       	ldi	r23, 0x00	; 0
 48e:	8a ef       	ldi	r24, 0xFA	; 250
 490:	93 e4       	ldi	r25, 0x43	; 67
 492:	a4 df       	rcall	.-184    	; 0x3dc <DLY_ms>
 494:	85 b1       	in	r24, 0x05	; 5

        PORTB = ~(0x80 & PORTB);
 496:	80 78       	andi	r24, 0x80	; 128
 498:	80 95       	com	r24
 49a:	85 b9       	out	0x05, r24	; 5
 49c:	f6 cf       	rjmp	.-20     	; 0x48a <main+0x6>

0000049e <__cmpsf2>:
 49e:	d4 d0       	rcall	.+424    	; 0x648 <__fp_cmp>
 4a0:	08 f4       	brcc	.+2      	; 0x4a4 <__cmpsf2+0x6>
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	08 95       	ret

000004a6 <__divsf3>:
 4a6:	0c d0       	rcall	.+24     	; 0x4c0 <__divsf3x>
 4a8:	0a c1       	rjmp	.+532    	; 0x6be <__fp_round>
 4aa:	02 d1       	rcall	.+516    	; 0x6b0 <__fp_pscB>
 4ac:	40 f0       	brcs	.+16     	; 0x4be <__divsf3+0x18>
 4ae:	f9 d0       	rcall	.+498    	; 0x6a2 <__fp_pscA>
 4b0:	30 f0       	brcs	.+12     	; 0x4be <__divsf3+0x18>
 4b2:	21 f4       	brne	.+8      	; 0x4bc <__divsf3+0x16>
 4b4:	5f 3f       	cpi	r21, 0xFF	; 255
 4b6:	19 f0       	breq	.+6      	; 0x4be <__divsf3+0x18>
 4b8:	eb c0       	rjmp	.+470    	; 0x690 <__fp_inf>
 4ba:	51 11       	cpse	r21, r1
 4bc:	34 c1       	rjmp	.+616    	; 0x726 <__fp_szero>
 4be:	ee c0       	rjmp	.+476    	; 0x69c <__fp_nan>

000004c0 <__divsf3x>:
 4c0:	0f d1       	rcall	.+542    	; 0x6e0 <__fp_split3>
 4c2:	98 f3       	brcs	.-26     	; 0x4aa <__divsf3+0x4>

000004c4 <__divsf3_pse>:
 4c4:	99 23       	and	r25, r25
 4c6:	c9 f3       	breq	.-14     	; 0x4ba <__divsf3+0x14>
 4c8:	55 23       	and	r21, r21
 4ca:	b1 f3       	breq	.-20     	; 0x4b8 <__divsf3+0x12>
 4cc:	95 1b       	sub	r25, r21
 4ce:	55 0b       	sbc	r21, r21
 4d0:	bb 27       	eor	r27, r27
 4d2:	aa 27       	eor	r26, r26
 4d4:	62 17       	cp	r22, r18
 4d6:	73 07       	cpc	r23, r19
 4d8:	84 07       	cpc	r24, r20
 4da:	38 f0       	brcs	.+14     	; 0x4ea <__divsf3_pse+0x26>
 4dc:	9f 5f       	subi	r25, 0xFF	; 255
 4de:	5f 4f       	sbci	r21, 0xFF	; 255
 4e0:	22 0f       	add	r18, r18
 4e2:	33 1f       	adc	r19, r19
 4e4:	44 1f       	adc	r20, r20
 4e6:	aa 1f       	adc	r26, r26
 4e8:	a9 f3       	breq	.-22     	; 0x4d4 <__divsf3_pse+0x10>
 4ea:	33 d0       	rcall	.+102    	; 0x552 <__divsf3_pse+0x8e>
 4ec:	0e 2e       	mov	r0, r30
 4ee:	3a f0       	brmi	.+14     	; 0x4fe <__divsf3_pse+0x3a>
 4f0:	e0 e8       	ldi	r30, 0x80	; 128
 4f2:	30 d0       	rcall	.+96     	; 0x554 <__divsf3_pse+0x90>
 4f4:	91 50       	subi	r25, 0x01	; 1
 4f6:	50 40       	sbci	r21, 0x00	; 0
 4f8:	e6 95       	lsr	r30
 4fa:	00 1c       	adc	r0, r0
 4fc:	ca f7       	brpl	.-14     	; 0x4f0 <__divsf3_pse+0x2c>
 4fe:	29 d0       	rcall	.+82     	; 0x552 <__divsf3_pse+0x8e>
 500:	fe 2f       	mov	r31, r30
 502:	27 d0       	rcall	.+78     	; 0x552 <__divsf3_pse+0x8e>
 504:	66 0f       	add	r22, r22
 506:	77 1f       	adc	r23, r23
 508:	88 1f       	adc	r24, r24
 50a:	bb 1f       	adc	r27, r27
 50c:	26 17       	cp	r18, r22
 50e:	37 07       	cpc	r19, r23
 510:	48 07       	cpc	r20, r24
 512:	ab 07       	cpc	r26, r27
 514:	b0 e8       	ldi	r27, 0x80	; 128
 516:	09 f0       	breq	.+2      	; 0x51a <__divsf3_pse+0x56>
 518:	bb 0b       	sbc	r27, r27
 51a:	80 2d       	mov	r24, r0
 51c:	bf 01       	movw	r22, r30
 51e:	ff 27       	eor	r31, r31
 520:	93 58       	subi	r25, 0x83	; 131
 522:	5f 4f       	sbci	r21, 0xFF	; 255
 524:	2a f0       	brmi	.+10     	; 0x530 <__divsf3_pse+0x6c>
 526:	9e 3f       	cpi	r25, 0xFE	; 254
 528:	51 05       	cpc	r21, r1
 52a:	68 f0       	brcs	.+26     	; 0x546 <__divsf3_pse+0x82>
 52c:	b1 c0       	rjmp	.+354    	; 0x690 <__fp_inf>
 52e:	fb c0       	rjmp	.+502    	; 0x726 <__fp_szero>
 530:	5f 3f       	cpi	r21, 0xFF	; 255
 532:	ec f3       	brlt	.-6      	; 0x52e <__divsf3_pse+0x6a>
 534:	98 3e       	cpi	r25, 0xE8	; 232
 536:	dc f3       	brlt	.-10     	; 0x52e <__divsf3_pse+0x6a>
 538:	86 95       	lsr	r24
 53a:	77 95       	ror	r23
 53c:	67 95       	ror	r22
 53e:	b7 95       	ror	r27
 540:	f7 95       	ror	r31
 542:	9f 5f       	subi	r25, 0xFF	; 255
 544:	c9 f7       	brne	.-14     	; 0x538 <__divsf3_pse+0x74>
 546:	88 0f       	add	r24, r24
 548:	91 1d       	adc	r25, r1
 54a:	96 95       	lsr	r25
 54c:	87 95       	ror	r24
 54e:	97 f9       	bld	r25, 7
 550:	08 95       	ret
 552:	e1 e0       	ldi	r30, 0x01	; 1
 554:	66 0f       	add	r22, r22
 556:	77 1f       	adc	r23, r23
 558:	88 1f       	adc	r24, r24
 55a:	bb 1f       	adc	r27, r27
 55c:	62 17       	cp	r22, r18
 55e:	73 07       	cpc	r23, r19
 560:	84 07       	cpc	r24, r20
 562:	ba 07       	cpc	r27, r26
 564:	20 f0       	brcs	.+8      	; 0x56e <__divsf3_pse+0xaa>
 566:	62 1b       	sub	r22, r18
 568:	73 0b       	sbc	r23, r19
 56a:	84 0b       	sbc	r24, r20
 56c:	ba 0b       	sbc	r27, r26
 56e:	ee 1f       	adc	r30, r30
 570:	88 f7       	brcc	.-30     	; 0x554 <__divsf3_pse+0x90>
 572:	e0 95       	com	r30
 574:	08 95       	ret

00000576 <__fixunssfsi>:
 576:	bc d0       	rcall	.+376    	; 0x6f0 <__fp_splitA>
 578:	88 f0       	brcs	.+34     	; 0x59c <__fixunssfsi+0x26>
 57a:	9f 57       	subi	r25, 0x7F	; 127
 57c:	90 f0       	brcs	.+36     	; 0x5a2 <__fixunssfsi+0x2c>
 57e:	b9 2f       	mov	r27, r25
 580:	99 27       	eor	r25, r25
 582:	b7 51       	subi	r27, 0x17	; 23
 584:	a0 f0       	brcs	.+40     	; 0x5ae <__fixunssfsi+0x38>
 586:	d1 f0       	breq	.+52     	; 0x5bc <__fixunssfsi+0x46>
 588:	66 0f       	add	r22, r22
 58a:	77 1f       	adc	r23, r23
 58c:	88 1f       	adc	r24, r24
 58e:	99 1f       	adc	r25, r25
 590:	1a f0       	brmi	.+6      	; 0x598 <__fixunssfsi+0x22>
 592:	ba 95       	dec	r27
 594:	c9 f7       	brne	.-14     	; 0x588 <__fixunssfsi+0x12>
 596:	12 c0       	rjmp	.+36     	; 0x5bc <__fixunssfsi+0x46>
 598:	b1 30       	cpi	r27, 0x01	; 1
 59a:	81 f0       	breq	.+32     	; 0x5bc <__fixunssfsi+0x46>
 59c:	c3 d0       	rcall	.+390    	; 0x724 <__fp_zero>
 59e:	b1 e0       	ldi	r27, 0x01	; 1
 5a0:	08 95       	ret
 5a2:	c0 c0       	rjmp	.+384    	; 0x724 <__fp_zero>
 5a4:	67 2f       	mov	r22, r23
 5a6:	78 2f       	mov	r23, r24
 5a8:	88 27       	eor	r24, r24
 5aa:	b8 5f       	subi	r27, 0xF8	; 248
 5ac:	39 f0       	breq	.+14     	; 0x5bc <__fixunssfsi+0x46>
 5ae:	b9 3f       	cpi	r27, 0xF9	; 249
 5b0:	cc f3       	brlt	.-14     	; 0x5a4 <__fixunssfsi+0x2e>
 5b2:	86 95       	lsr	r24
 5b4:	77 95       	ror	r23
 5b6:	67 95       	ror	r22
 5b8:	b3 95       	inc	r27
 5ba:	d9 f7       	brne	.-10     	; 0x5b2 <__fixunssfsi+0x3c>
 5bc:	3e f4       	brtc	.+14     	; 0x5cc <__fixunssfsi+0x56>
 5be:	90 95       	com	r25
 5c0:	80 95       	com	r24
 5c2:	70 95       	com	r23
 5c4:	61 95       	neg	r22
 5c6:	7f 4f       	sbci	r23, 0xFF	; 255
 5c8:	8f 4f       	sbci	r24, 0xFF	; 255
 5ca:	9f 4f       	sbci	r25, 0xFF	; 255
 5cc:	08 95       	ret

000005ce <__floatunsisf>:
 5ce:	e8 94       	clt
 5d0:	09 c0       	rjmp	.+18     	; 0x5e4 <__floatsisf+0x12>

000005d2 <__floatsisf>:
 5d2:	97 fb       	bst	r25, 7
 5d4:	3e f4       	brtc	.+14     	; 0x5e4 <__floatsisf+0x12>
 5d6:	90 95       	com	r25
 5d8:	80 95       	com	r24
 5da:	70 95       	com	r23
 5dc:	61 95       	neg	r22
 5de:	7f 4f       	sbci	r23, 0xFF	; 255
 5e0:	8f 4f       	sbci	r24, 0xFF	; 255
 5e2:	9f 4f       	sbci	r25, 0xFF	; 255
 5e4:	99 23       	and	r25, r25
 5e6:	a9 f0       	breq	.+42     	; 0x612 <__floatsisf+0x40>
 5e8:	f9 2f       	mov	r31, r25
 5ea:	96 e9       	ldi	r25, 0x96	; 150
 5ec:	bb 27       	eor	r27, r27
 5ee:	93 95       	inc	r25
 5f0:	f6 95       	lsr	r31
 5f2:	87 95       	ror	r24
 5f4:	77 95       	ror	r23
 5f6:	67 95       	ror	r22
 5f8:	b7 95       	ror	r27
 5fa:	f1 11       	cpse	r31, r1
 5fc:	f8 cf       	rjmp	.-16     	; 0x5ee <__floatsisf+0x1c>
 5fe:	fa f4       	brpl	.+62     	; 0x63e <__floatsisf+0x6c>
 600:	bb 0f       	add	r27, r27
 602:	11 f4       	brne	.+4      	; 0x608 <__floatsisf+0x36>
 604:	60 ff       	sbrs	r22, 0
 606:	1b c0       	rjmp	.+54     	; 0x63e <__floatsisf+0x6c>
 608:	6f 5f       	subi	r22, 0xFF	; 255
 60a:	7f 4f       	sbci	r23, 0xFF	; 255
 60c:	8f 4f       	sbci	r24, 0xFF	; 255
 60e:	9f 4f       	sbci	r25, 0xFF	; 255
 610:	16 c0       	rjmp	.+44     	; 0x63e <__floatsisf+0x6c>
 612:	88 23       	and	r24, r24
 614:	11 f0       	breq	.+4      	; 0x61a <__floatsisf+0x48>
 616:	96 e9       	ldi	r25, 0x96	; 150
 618:	11 c0       	rjmp	.+34     	; 0x63c <__floatsisf+0x6a>
 61a:	77 23       	and	r23, r23
 61c:	21 f0       	breq	.+8      	; 0x626 <__floatsisf+0x54>
 61e:	9e e8       	ldi	r25, 0x8E	; 142
 620:	87 2f       	mov	r24, r23
 622:	76 2f       	mov	r23, r22
 624:	05 c0       	rjmp	.+10     	; 0x630 <__floatsisf+0x5e>
 626:	66 23       	and	r22, r22
 628:	71 f0       	breq	.+28     	; 0x646 <__floatsisf+0x74>
 62a:	96 e8       	ldi	r25, 0x86	; 134
 62c:	86 2f       	mov	r24, r22
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	60 e0       	ldi	r22, 0x00	; 0
 632:	2a f0       	brmi	.+10     	; 0x63e <__floatsisf+0x6c>
 634:	9a 95       	dec	r25
 636:	66 0f       	add	r22, r22
 638:	77 1f       	adc	r23, r23
 63a:	88 1f       	adc	r24, r24
 63c:	da f7       	brpl	.-10     	; 0x634 <__floatsisf+0x62>
 63e:	88 0f       	add	r24, r24
 640:	96 95       	lsr	r25
 642:	87 95       	ror	r24
 644:	97 f9       	bld	r25, 7
 646:	08 95       	ret

00000648 <__fp_cmp>:
 648:	99 0f       	add	r25, r25
 64a:	00 08       	sbc	r0, r0
 64c:	55 0f       	add	r21, r21
 64e:	aa 0b       	sbc	r26, r26
 650:	e0 e8       	ldi	r30, 0x80	; 128
 652:	fe ef       	ldi	r31, 0xFE	; 254
 654:	16 16       	cp	r1, r22
 656:	17 06       	cpc	r1, r23
 658:	e8 07       	cpc	r30, r24
 65a:	f9 07       	cpc	r31, r25
 65c:	c0 f0       	brcs	.+48     	; 0x68e <__fp_cmp+0x46>
 65e:	12 16       	cp	r1, r18
 660:	13 06       	cpc	r1, r19
 662:	e4 07       	cpc	r30, r20
 664:	f5 07       	cpc	r31, r21
 666:	98 f0       	brcs	.+38     	; 0x68e <__fp_cmp+0x46>
 668:	62 1b       	sub	r22, r18
 66a:	73 0b       	sbc	r23, r19
 66c:	84 0b       	sbc	r24, r20
 66e:	95 0b       	sbc	r25, r21
 670:	39 f4       	brne	.+14     	; 0x680 <__fp_cmp+0x38>
 672:	0a 26       	eor	r0, r26
 674:	61 f0       	breq	.+24     	; 0x68e <__fp_cmp+0x46>
 676:	23 2b       	or	r18, r19
 678:	24 2b       	or	r18, r20
 67a:	25 2b       	or	r18, r21
 67c:	21 f4       	brne	.+8      	; 0x686 <__fp_cmp+0x3e>
 67e:	08 95       	ret
 680:	0a 26       	eor	r0, r26
 682:	09 f4       	brne	.+2      	; 0x686 <__fp_cmp+0x3e>
 684:	a1 40       	sbci	r26, 0x01	; 1
 686:	a6 95       	lsr	r26
 688:	8f ef       	ldi	r24, 0xFF	; 255
 68a:	81 1d       	adc	r24, r1
 68c:	81 1d       	adc	r24, r1
 68e:	08 95       	ret

00000690 <__fp_inf>:
 690:	97 f9       	bld	r25, 7
 692:	9f 67       	ori	r25, 0x7F	; 127
 694:	80 e8       	ldi	r24, 0x80	; 128
 696:	70 e0       	ldi	r23, 0x00	; 0
 698:	60 e0       	ldi	r22, 0x00	; 0
 69a:	08 95       	ret

0000069c <__fp_nan>:
 69c:	9f ef       	ldi	r25, 0xFF	; 255
 69e:	80 ec       	ldi	r24, 0xC0	; 192
 6a0:	08 95       	ret

000006a2 <__fp_pscA>:
 6a2:	00 24       	eor	r0, r0
 6a4:	0a 94       	dec	r0
 6a6:	16 16       	cp	r1, r22
 6a8:	17 06       	cpc	r1, r23
 6aa:	18 06       	cpc	r1, r24
 6ac:	09 06       	cpc	r0, r25
 6ae:	08 95       	ret

000006b0 <__fp_pscB>:
 6b0:	00 24       	eor	r0, r0
 6b2:	0a 94       	dec	r0
 6b4:	12 16       	cp	r1, r18
 6b6:	13 06       	cpc	r1, r19
 6b8:	14 06       	cpc	r1, r20
 6ba:	05 06       	cpc	r0, r21
 6bc:	08 95       	ret

000006be <__fp_round>:
 6be:	09 2e       	mov	r0, r25
 6c0:	03 94       	inc	r0
 6c2:	00 0c       	add	r0, r0
 6c4:	11 f4       	brne	.+4      	; 0x6ca <__fp_round+0xc>
 6c6:	88 23       	and	r24, r24
 6c8:	52 f0       	brmi	.+20     	; 0x6de <__fp_round+0x20>
 6ca:	bb 0f       	add	r27, r27
 6cc:	40 f4       	brcc	.+16     	; 0x6de <__fp_round+0x20>
 6ce:	bf 2b       	or	r27, r31
 6d0:	11 f4       	brne	.+4      	; 0x6d6 <__fp_round+0x18>
 6d2:	60 ff       	sbrs	r22, 0
 6d4:	04 c0       	rjmp	.+8      	; 0x6de <__fp_round+0x20>
 6d6:	6f 5f       	subi	r22, 0xFF	; 255
 6d8:	7f 4f       	sbci	r23, 0xFF	; 255
 6da:	8f 4f       	sbci	r24, 0xFF	; 255
 6dc:	9f 4f       	sbci	r25, 0xFF	; 255
 6de:	08 95       	ret

000006e0 <__fp_split3>:
 6e0:	57 fd       	sbrc	r21, 7
 6e2:	90 58       	subi	r25, 0x80	; 128
 6e4:	44 0f       	add	r20, r20
 6e6:	55 1f       	adc	r21, r21
 6e8:	59 f0       	breq	.+22     	; 0x700 <__fp_splitA+0x10>
 6ea:	5f 3f       	cpi	r21, 0xFF	; 255
 6ec:	71 f0       	breq	.+28     	; 0x70a <__fp_splitA+0x1a>
 6ee:	47 95       	ror	r20

000006f0 <__fp_splitA>:
 6f0:	88 0f       	add	r24, r24
 6f2:	97 fb       	bst	r25, 7
 6f4:	99 1f       	adc	r25, r25
 6f6:	61 f0       	breq	.+24     	; 0x710 <__fp_splitA+0x20>
 6f8:	9f 3f       	cpi	r25, 0xFF	; 255
 6fa:	79 f0       	breq	.+30     	; 0x71a <__fp_splitA+0x2a>
 6fc:	87 95       	ror	r24
 6fe:	08 95       	ret
 700:	12 16       	cp	r1, r18
 702:	13 06       	cpc	r1, r19
 704:	14 06       	cpc	r1, r20
 706:	55 1f       	adc	r21, r21
 708:	f2 cf       	rjmp	.-28     	; 0x6ee <__fp_split3+0xe>
 70a:	46 95       	lsr	r20
 70c:	f1 df       	rcall	.-30     	; 0x6f0 <__fp_splitA>
 70e:	08 c0       	rjmp	.+16     	; 0x720 <__fp_splitA+0x30>
 710:	16 16       	cp	r1, r22
 712:	17 06       	cpc	r1, r23
 714:	18 06       	cpc	r1, r24
 716:	99 1f       	adc	r25, r25
 718:	f1 cf       	rjmp	.-30     	; 0x6fc <__fp_splitA+0xc>
 71a:	86 95       	lsr	r24
 71c:	71 05       	cpc	r23, r1
 71e:	61 05       	cpc	r22, r1
 720:	08 94       	sec
 722:	08 95       	ret

00000724 <__fp_zero>:
 724:	e8 94       	clt

00000726 <__fp_szero>:
 726:	bb 27       	eor	r27, r27
 728:	66 27       	eor	r22, r22
 72a:	77 27       	eor	r23, r23
 72c:	cb 01       	movw	r24, r22
 72e:	97 f9       	bld	r25, 7
 730:	08 95       	ret

00000732 <__gesf2>:
 732:	8a df       	rcall	.-236    	; 0x648 <__fp_cmp>
 734:	08 f4       	brcc	.+2      	; 0x738 <__gesf2+0x6>
 736:	8f ef       	ldi	r24, 0xFF	; 255
 738:	08 95       	ret

0000073a <__mulsf3>:
 73a:	0b d0       	rcall	.+22     	; 0x752 <__mulsf3x>
 73c:	c0 cf       	rjmp	.-128    	; 0x6be <__fp_round>
 73e:	b1 df       	rcall	.-158    	; 0x6a2 <__fp_pscA>
 740:	28 f0       	brcs	.+10     	; 0x74c <__mulsf3+0x12>
 742:	b6 df       	rcall	.-148    	; 0x6b0 <__fp_pscB>
 744:	18 f0       	brcs	.+6      	; 0x74c <__mulsf3+0x12>
 746:	95 23       	and	r25, r21
 748:	09 f0       	breq	.+2      	; 0x74c <__mulsf3+0x12>
 74a:	a2 cf       	rjmp	.-188    	; 0x690 <__fp_inf>
 74c:	a7 cf       	rjmp	.-178    	; 0x69c <__fp_nan>
 74e:	11 24       	eor	r1, r1
 750:	ea cf       	rjmp	.-44     	; 0x726 <__fp_szero>

00000752 <__mulsf3x>:
 752:	c6 df       	rcall	.-116    	; 0x6e0 <__fp_split3>
 754:	a0 f3       	brcs	.-24     	; 0x73e <__mulsf3+0x4>

00000756 <__mulsf3_pse>:
 756:	95 9f       	mul	r25, r21
 758:	d1 f3       	breq	.-12     	; 0x74e <__mulsf3+0x14>
 75a:	95 0f       	add	r25, r21
 75c:	50 e0       	ldi	r21, 0x00	; 0
 75e:	55 1f       	adc	r21, r21
 760:	62 9f       	mul	r22, r18
 762:	f0 01       	movw	r30, r0
 764:	72 9f       	mul	r23, r18
 766:	bb 27       	eor	r27, r27
 768:	f0 0d       	add	r31, r0
 76a:	b1 1d       	adc	r27, r1
 76c:	63 9f       	mul	r22, r19
 76e:	aa 27       	eor	r26, r26
 770:	f0 0d       	add	r31, r0
 772:	b1 1d       	adc	r27, r1
 774:	aa 1f       	adc	r26, r26
 776:	64 9f       	mul	r22, r20
 778:	66 27       	eor	r22, r22
 77a:	b0 0d       	add	r27, r0
 77c:	a1 1d       	adc	r26, r1
 77e:	66 1f       	adc	r22, r22
 780:	82 9f       	mul	r24, r18
 782:	22 27       	eor	r18, r18
 784:	b0 0d       	add	r27, r0
 786:	a1 1d       	adc	r26, r1
 788:	62 1f       	adc	r22, r18
 78a:	73 9f       	mul	r23, r19
 78c:	b0 0d       	add	r27, r0
 78e:	a1 1d       	adc	r26, r1
 790:	62 1f       	adc	r22, r18
 792:	83 9f       	mul	r24, r19
 794:	a0 0d       	add	r26, r0
 796:	61 1d       	adc	r22, r1
 798:	22 1f       	adc	r18, r18
 79a:	74 9f       	mul	r23, r20
 79c:	33 27       	eor	r19, r19
 79e:	a0 0d       	add	r26, r0
 7a0:	61 1d       	adc	r22, r1
 7a2:	23 1f       	adc	r18, r19
 7a4:	84 9f       	mul	r24, r20
 7a6:	60 0d       	add	r22, r0
 7a8:	21 1d       	adc	r18, r1
 7aa:	82 2f       	mov	r24, r18
 7ac:	76 2f       	mov	r23, r22
 7ae:	6a 2f       	mov	r22, r26
 7b0:	11 24       	eor	r1, r1
 7b2:	9f 57       	subi	r25, 0x7F	; 127
 7b4:	50 40       	sbci	r21, 0x00	; 0
 7b6:	8a f0       	brmi	.+34     	; 0x7da <__mulsf3_pse+0x84>
 7b8:	e1 f0       	breq	.+56     	; 0x7f2 <__mulsf3_pse+0x9c>
 7ba:	88 23       	and	r24, r24
 7bc:	4a f0       	brmi	.+18     	; 0x7d0 <__mulsf3_pse+0x7a>
 7be:	ee 0f       	add	r30, r30
 7c0:	ff 1f       	adc	r31, r31
 7c2:	bb 1f       	adc	r27, r27
 7c4:	66 1f       	adc	r22, r22
 7c6:	77 1f       	adc	r23, r23
 7c8:	88 1f       	adc	r24, r24
 7ca:	91 50       	subi	r25, 0x01	; 1
 7cc:	50 40       	sbci	r21, 0x00	; 0
 7ce:	a9 f7       	brne	.-22     	; 0x7ba <__mulsf3_pse+0x64>
 7d0:	9e 3f       	cpi	r25, 0xFE	; 254
 7d2:	51 05       	cpc	r21, r1
 7d4:	70 f0       	brcs	.+28     	; 0x7f2 <__mulsf3_pse+0x9c>
 7d6:	5c cf       	rjmp	.-328    	; 0x690 <__fp_inf>
 7d8:	a6 cf       	rjmp	.-180    	; 0x726 <__fp_szero>
 7da:	5f 3f       	cpi	r21, 0xFF	; 255
 7dc:	ec f3       	brlt	.-6      	; 0x7d8 <__mulsf3_pse+0x82>
 7de:	98 3e       	cpi	r25, 0xE8	; 232
 7e0:	dc f3       	brlt	.-10     	; 0x7d8 <__mulsf3_pse+0x82>
 7e2:	86 95       	lsr	r24
 7e4:	77 95       	ror	r23
 7e6:	67 95       	ror	r22
 7e8:	b7 95       	ror	r27
 7ea:	f7 95       	ror	r31
 7ec:	e7 95       	ror	r30
 7ee:	9f 5f       	subi	r25, 0xFF	; 255
 7f0:	c1 f7       	brne	.-16     	; 0x7e2 <__mulsf3_pse+0x8c>
 7f2:	fe 2b       	or	r31, r30
 7f4:	88 0f       	add	r24, r24
 7f6:	91 1d       	adc	r25, r1
 7f8:	96 95       	lsr	r25
 7fa:	87 95       	ror	r24
 7fc:	97 f9       	bld	r25, 7
 7fe:	08 95       	ret

00000800 <_exit>:
 800:	f8 94       	cli

00000802 <__stop_program>:
 802:	ff cf       	rjmp	.-2      	; 0x802 <__stop_program>
