
Procedure Three.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800200  00000a0c  00000a80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a0c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b20  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001519  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ed3  00000000  00000000  00002189  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ae6  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000294  00000000  00000000  00003b44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000071e  00000000  00000000  00003dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005a1  00000000  00000000  000044f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00004a97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	57 c1       	rjmp	.+686    	; 0x378 <__vector_50>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e0       	ldi	r30, 0x0C	; 12
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 37       	cpi	r26, 0x70	; 112
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	39 d2       	rcall	.+1138   	; 0x582 <main>
 110:	7b c4       	rjmp	.+2294   	; 0xa08 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <initDebugTimer>:
	Uses Timer5 with a prescaler of 256, and enables overflow interrupt
*/
void initDebugTimer()
{
	//Prescaler 256
	TCCR5B |= (1<<CS52) | (1<<CS50);
 114:	e1 e2       	ldi	r30, 0x21	; 33
 116:	f1 e0       	ldi	r31, 0x01	; 1
 118:	80 81       	ld	r24, Z
 11a:	85 60       	ori	r24, 0x05	; 5
 11c:	80 83       	st	Z, r24
	
	//15625 TOP Value for UPDATE_FREQUENCY
	TCNT5 = 65535 - (F_CPU / (1024*UPDATE_FREQUENCY));
 11e:	85 ee       	ldi	r24, 0xE5	; 229
 120:	99 ef       	ldi	r25, 0xF9	; 249
 122:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
 126:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
	
	//Enable Timer Overflow Interrupt
	TIMSK5 = (1<<TOIE5);
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7c0073>
 130:	08 95       	ret

00000132 <initDebugUSART>:
	8-bits, 25000 Baud Rate
*/
void initDebugUSART()
{
	//Enable RX and TX
	UCSR0B = (1<<TXEN0) | (1<<RXEN0);
 132:	88 e1       	ldi	r24, 0x18	; 24
 134:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	
	//Set Communication Modes
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);	//8 Data bits
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
	UBRR0 = 3;							//250000 Baud Rate	
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 146:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 14a:	08 95       	ret

0000014c <initDebug>:
	Configures the USART registers for data transmission, Configures the
	Timer registers, and enables interrupts.
*/
void initDebug()
{
	initDebugUSART();
 14c:	f2 df       	rcall	.-28     	; 0x132 <initDebugUSART>
	initDebugTimer();
 14e:	e2 df       	rcall	.-60     	; 0x114 <initDebugTimer>
 150:	78 94       	sei
	sei();
 152:	08 95       	ret

00000154 <UART0Out>:
 154:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	Sends 8-bit unsigned integer out UART0
*/
void UART0Out(uint8_t data) 
{
	//Wait for previous transmission to be done
	while(!(UCSR0A & (1<<UDRE0)));
 158:	95 ff       	sbrs	r25, 5
 15a:	fc cf       	rjmp	.-8      	; 0x154 <UART0Out>
	
	//Set register for next transmission
	UDR0 = data;	
 15c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 160:	08 95       	ret

00000162 <sendStopBit>:
	Sends 0x0A to signify stop
*/
void sendStopBit()
{
	//Wait for previous transmission to be done
	while(!(UCSR0A & (1<<UDRE0)));
 162:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 166:	85 ff       	sbrs	r24, 5
 168:	fc cf       	rjmp	.-8      	; 0x162 <sendStopBit>
	
	//Set register for next transmission
	UDR0 = 0x0A;
 16a:	8a e0       	ldi	r24, 0x0A	; 10
 16c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 170:	08 95       	ret

00000172 <UART0PrintString>:

Description:
	Continues to send data until reaching null character
*/
void UART0PrintString(char *strPtr)
{
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ec 01       	movw	r28, r24
	while(*strPtr != 0x00) 
 178:	02 c0       	rjmp	.+4      	; 0x17e <UART0PrintString+0xc>
	{
		UART0Out(*strPtr);
 17a:	ec df       	rcall	.-40     	; 0x154 <UART0Out>
		strPtr ++;
 17c:	21 96       	adiw	r28, 0x01	; 1
Description:
	Continues to send data until reaching null character
*/
void UART0PrintString(char *strPtr)
{
	while(*strPtr != 0x00) 
 17e:	88 81       	ld	r24, Y
 180:	81 11       	cpse	r24, r1
 182:	fb cf       	rjmp	.-10     	; 0x17a <UART0PrintString+0x8>
	{
		UART0Out(*strPtr);
		strPtr ++;
	}
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <sendPortData>:
Description:
	Loops through portAddr array and sends
	out data at each address
*/
void sendPortData()
{	
 18a:	cf 93       	push	r28
	for (uint8_t i=0; i<18; i++)
 18c:	c0 e0       	ldi	r28, 0x00	; 0
 18e:	0c c0       	rjmp	.+24     	; 0x1a8 <sendPortData+0x1e>
	{
		UART0Out(*portAddr[i]);
 190:	ec 2f       	mov	r30, r28
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	ec 5b       	subi	r30, 0xBC	; 188
 19a:	fd 4f       	sbci	r31, 0xFD	; 253
 19c:	01 90       	ld	r0, Z+
 19e:	f0 81       	ld	r31, Z
 1a0:	e0 2d       	mov	r30, r0
 1a2:	80 81       	ld	r24, Z
 1a4:	d7 df       	rcall	.-82     	; 0x154 <UART0Out>
	Loops through portAddr array and sends
	out data at each address
*/
void sendPortData()
{	
	for (uint8_t i=0; i<18; i++)
 1a6:	cf 5f       	subi	r28, 0xFF	; 255
 1a8:	c2 31       	cpi	r28, 0x12	; 18
 1aa:	90 f3       	brcs	.-28     	; 0x190 <sendPortData+0x6>
	{
		UART0Out(*portAddr[i]);
	}
}
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <sendTimerData>:
Description:
	Loops though timerAddr array and sends
	out data at each address
*/
void sendTimerData()
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
	//Timer 0
	for (uint8_t i=0; i<3; i++) 
 1b4:	c0 e0       	ldi	r28, 0x00	; 0
 1b6:	0c c0       	rjmp	.+24     	; 0x1d0 <sendTimerData+0x20>
	{
		UART0Out(*timerAddr[i]);
 1b8:	ec 2f       	mov	r30, r28
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	ee 0f       	add	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	e8 5e       	subi	r30, 0xE8	; 232
 1c2:	fd 4f       	sbci	r31, 0xFD	; 253
 1c4:	01 90       	ld	r0, Z+
 1c6:	f0 81       	ld	r31, Z
 1c8:	e0 2d       	mov	r30, r0
 1ca:	80 81       	ld	r24, Z
 1cc:	c3 df       	rcall	.-122    	; 0x154 <UART0Out>
	out data at each address
*/
void sendTimerData()
{
	//Timer 0
	for (uint8_t i=0; i<3; i++) 
 1ce:	cf 5f       	subi	r28, 0xFF	; 255
 1d0:	c3 30       	cpi	r28, 0x03	; 3
 1d2:	90 f3       	brcs	.-28     	; 0x1b8 <sendTimerData+0x8>
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR0A
	UART0Out(*timerAddr[3]);
 1d4:	c8 e1       	ldi	r28, 0x18	; 24
 1d6:	d2 e0       	ldi	r29, 0x02	; 2
 1d8:	ee 81       	ldd	r30, Y+6	; 0x06
 1da:	ff 81       	ldd	r31, Y+7	; 0x07
 1dc:	80 81       	ld	r24, Z
 1de:	ba df       	rcall	.-140    	; 0x154 <UART0Out>
	UART0Out(*(timerAddr[3]+1));
 1e0:	ee 81       	ldd	r30, Y+6	; 0x06
 1e2:	ff 81       	ldd	r31, Y+7	; 0x07
 1e4:	81 81       	ldd	r24, Z+1	; 0x01
 1e6:	b6 df       	rcall	.-148    	; 0x154 <UART0Out>
	
	//OCR0B
	UART0Out(*timerAddr[4]);
 1e8:	e8 85       	ldd	r30, Y+8	; 0x08
 1ea:	f9 85       	ldd	r31, Y+9	; 0x09
 1ec:	80 81       	ld	r24, Z
 1ee:	b2 df       	rcall	.-156    	; 0x154 <UART0Out>
	UART0Out(*(timerAddr[4]+1));
 1f0:	e8 85       	ldd	r30, Y+8	; 0x08
 1f2:	f9 85       	ldd	r31, Y+9	; 0x09
 1f4:	81 81       	ldd	r24, Z+1	; 0x01
 1f6:	ae df       	rcall	.-164    	; 0x154 <UART0Out>
 1f8:	c5 e0       	ldi	r28, 0x05	; 5
	
	//Timer 1
	for (uint8_t i=5; i<8; i++)
 1fa:	0c c0       	rjmp	.+24     	; 0x214 <sendTimerData+0x64>
 1fc:	ec 2f       	mov	r30, r28
	{
		UART0Out(*timerAddr[i]);
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	ee 0f       	add	r30, r30
 202:	ff 1f       	adc	r31, r31
 204:	e8 5e       	subi	r30, 0xE8	; 232
 206:	fd 4f       	sbci	r31, 0xFD	; 253
 208:	01 90       	ld	r0, Z+
 20a:	f0 81       	ld	r31, Z
 20c:	e0 2d       	mov	r30, r0
 20e:	80 81       	ld	r24, Z
 210:	a1 df       	rcall	.-190    	; 0x154 <UART0Out>
 212:	cf 5f       	subi	r28, 0xFF	; 255
	//OCR0B
	UART0Out(*timerAddr[4]);
	UART0Out(*(timerAddr[4]+1));
	
	//Timer 1
	for (uint8_t i=5; i<8; i++)
 214:	c8 30       	cpi	r28, 0x08	; 8
 216:	90 f3       	brcs	.-28     	; 0x1fc <sendTimerData+0x4c>
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR1A
	UART0Out(*timerAddr[8]);
 218:	c8 e1       	ldi	r28, 0x18	; 24
 21a:	d2 e0       	ldi	r29, 0x02	; 2
 21c:	e8 89       	ldd	r30, Y+16	; 0x10
 21e:	f9 89       	ldd	r31, Y+17	; 0x11
 220:	80 81       	ld	r24, Z
 222:	98 df       	rcall	.-208    	; 0x154 <UART0Out>
	UART0Out(*(timerAddr[8]+1));
 224:	e8 89       	ldd	r30, Y+16	; 0x10
 226:	f9 89       	ldd	r31, Y+17	; 0x11
 228:	81 81       	ldd	r24, Z+1	; 0x01
 22a:	94 df       	rcall	.-216    	; 0x154 <UART0Out>
	
	//OCR1B
	UART0Out(*timerAddr[9]);
 22c:	ea 89       	ldd	r30, Y+18	; 0x12
 22e:	fb 89       	ldd	r31, Y+19	; 0x13
 230:	80 81       	ld	r24, Z
 232:	90 df       	rcall	.-224    	; 0x154 <UART0Out>
	UART0Out(*(timerAddr[9]+1));
 234:	ea 89       	ldd	r30, Y+18	; 0x12
 236:	fb 89       	ldd	r31, Y+19	; 0x13
 238:	81 81       	ldd	r24, Z+1	; 0x01
 23a:	8c df       	rcall	.-232    	; 0x154 <UART0Out>
	
	//OCR1C
	UART0Out(*timerAddr[10]);
 23c:	ec 89       	ldd	r30, Y+20	; 0x14
 23e:	fd 89       	ldd	r31, Y+21	; 0x15
 240:	80 81       	ld	r24, Z
 242:	88 df       	rcall	.-240    	; 0x154 <UART0Out>
 244:	ec 89       	ldd	r30, Y+20	; 0x14
	UART0Out(*(timerAddr[10]+1));
 246:	fd 89       	ldd	r31, Y+21	; 0x15
 248:	81 81       	ldd	r24, Z+1	; 0x01
 24a:	84 df       	rcall	.-248    	; 0x154 <UART0Out>
 24c:	cb e0       	ldi	r28, 0x0B	; 11
 24e:	0c c0       	rjmp	.+24     	; 0x268 <sendTimerData+0xb8>
	
	//Timer 2
	for (uint8_t i=11; i<14; i++)
 250:	ec 2f       	mov	r30, r28
	{
		UART0Out(*timerAddr[i]);
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	ee 0f       	add	r30, r30
 256:	ff 1f       	adc	r31, r31
 258:	e8 5e       	subi	r30, 0xE8	; 232
 25a:	fd 4f       	sbci	r31, 0xFD	; 253
 25c:	01 90       	ld	r0, Z+
 25e:	f0 81       	ld	r31, Z
 260:	e0 2d       	mov	r30, r0
 262:	80 81       	ld	r24, Z
 264:	77 df       	rcall	.-274    	; 0x154 <UART0Out>
 266:	cf 5f       	subi	r28, 0xFF	; 255
	//OCR1C
	UART0Out(*timerAddr[10]);
	UART0Out(*(timerAddr[10]+1));
	
	//Timer 2
	for (uint8_t i=11; i<14; i++)
 268:	ce 30       	cpi	r28, 0x0E	; 14
 26a:	90 f3       	brcs	.-28     	; 0x250 <sendTimerData+0xa0>
 26c:	c8 e1       	ldi	r28, 0x18	; 24
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR2A
	UART0Out(*timerAddr[14]);
 26e:	d2 e0       	ldi	r29, 0x02	; 2
 270:	ec 8d       	ldd	r30, Y+28	; 0x1c
 272:	fd 8d       	ldd	r31, Y+29	; 0x1d
 274:	80 81       	ld	r24, Z
 276:	6e df       	rcall	.-292    	; 0x154 <UART0Out>
	UART0Out(*(timerAddr[14]+1));
 278:	ec 8d       	ldd	r30, Y+28	; 0x1c
 27a:	fd 8d       	ldd	r31, Y+29	; 0x1d
 27c:	81 81       	ldd	r24, Z+1	; 0x01
 27e:	6a df       	rcall	.-300    	; 0x154 <UART0Out>
 280:	ee 8d       	ldd	r30, Y+30	; 0x1e
	
	//OCR2B
	UART0Out(*timerAddr[15]);
 282:	ff 8d       	ldd	r31, Y+31	; 0x1f
 284:	80 81       	ld	r24, Z
 286:	66 df       	rcall	.-308    	; 0x154 <UART0Out>
 288:	ee 8d       	ldd	r30, Y+30	; 0x1e
 28a:	ff 8d       	ldd	r31, Y+31	; 0x1f
	UART0Out(*(timerAddr[15]+1));
 28c:	81 81       	ldd	r24, Z+1	; 0x01
 28e:	62 df       	rcall	.-316    	; 0x154 <UART0Out>
 290:	c0 e1       	ldi	r28, 0x10	; 16
 292:	0c c0       	rjmp	.+24     	; 0x2ac <sendTimerData+0xfc>
	
	//Timer 3
	for (uint8_t i=16; i<19; i++)
 294:	ec 2f       	mov	r30, r28
 296:	f0 e0       	ldi	r31, 0x00	; 0
	{
		UART0Out(*timerAddr[i]);
 298:	ee 0f       	add	r30, r30
 29a:	ff 1f       	adc	r31, r31
 29c:	e8 5e       	subi	r30, 0xE8	; 232
 29e:	fd 4f       	sbci	r31, 0xFD	; 253
 2a0:	01 90       	ld	r0, Z+
 2a2:	f0 81       	ld	r31, Z
 2a4:	e0 2d       	mov	r30, r0
 2a6:	80 81       	ld	r24, Z
 2a8:	55 df       	rcall	.-342    	; 0x154 <UART0Out>
 2aa:	cf 5f       	subi	r28, 0xFF	; 255
	//OCR2B
	UART0Out(*timerAddr[15]);
	UART0Out(*(timerAddr[15]+1));
	
	//Timer 3
	for (uint8_t i=16; i<19; i++)
 2ac:	c3 31       	cpi	r28, 0x13	; 19
 2ae:	90 f3       	brcs	.-28     	; 0x294 <sendTimerData+0xe4>
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR3A
	UART0Out(*timerAddr[19]);
 2b0:	c8 e1       	ldi	r28, 0x18	; 24
 2b2:	d2 e0       	ldi	r29, 0x02	; 2
 2b4:	ee a1       	ldd	r30, Y+38	; 0x26
 2b6:	ff a1       	ldd	r31, Y+39	; 0x27
 2b8:	80 81       	ld	r24, Z
 2ba:	4c df       	rcall	.-360    	; 0x154 <UART0Out>
	UART0Out(*(timerAddr[19]+1));
 2bc:	ee a1       	ldd	r30, Y+38	; 0x26
 2be:	ff a1       	ldd	r31, Y+39	; 0x27
 2c0:	81 81       	ldd	r24, Z+1	; 0x01
 2c2:	48 df       	rcall	.-368    	; 0x154 <UART0Out>
	
	//OCR3B
	UART0Out(*timerAddr[20]);
 2c4:	e8 a5       	ldd	r30, Y+40	; 0x28
 2c6:	f9 a5       	ldd	r31, Y+41	; 0x29
 2c8:	80 81       	ld	r24, Z
 2ca:	44 df       	rcall	.-376    	; 0x154 <UART0Out>
 2cc:	e8 a5       	ldd	r30, Y+40	; 0x28
	UART0Out(*(timerAddr[20]+1));
 2ce:	f9 a5       	ldd	r31, Y+41	; 0x29
 2d0:	81 81       	ldd	r24, Z+1	; 0x01
 2d2:	40 df       	rcall	.-384    	; 0x154 <UART0Out>
 2d4:	ea a5       	ldd	r30, Y+42	; 0x2a
 2d6:	fb a5       	ldd	r31, Y+43	; 0x2b
	
	//OCR3C
	UART0Out(*timerAddr[21]);
 2d8:	80 81       	ld	r24, Z
 2da:	3c df       	rcall	.-392    	; 0x154 <UART0Out>
 2dc:	ea a5       	ldd	r30, Y+42	; 0x2a
 2de:	fb a5       	ldd	r31, Y+43	; 0x2b
 2e0:	81 81       	ldd	r24, Z+1	; 0x01
	UART0Out(*(timerAddr[21]+1));
 2e2:	38 df       	rcall	.-400    	; 0x154 <UART0Out>
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <sendUSARTData>:
 2ea:	cf 93       	push	r28
}
 2ec:	c0 e0       	ldi	r28, 0x00	; 0
 2ee:	0c c0       	rjmp	.+24     	; 0x308 <sendUSARTData+0x1e>
 2f0:	ec 2f       	mov	r30, r28
*/
void sendUSARTData()
{
	for (uint8_t i=0; i<6; i++)
	{
		UART0Out(*USARTAddr[i]);
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	ee 0f       	add	r30, r30
 2f6:	ff 1f       	adc	r31, r31
 2f8:	e4 5f       	subi	r30, 0xF4	; 244
 2fa:	fd 4f       	sbci	r31, 0xFD	; 253
 2fc:	01 90       	ld	r0, Z+
 2fe:	f0 81       	ld	r31, Z
 300:	e0 2d       	mov	r30, r0
 302:	80 81       	ld	r24, Z
 304:	27 df       	rcall	.-434    	; 0x154 <UART0Out>
	Loops though USARTAddr array and sends
	out data at each address
*/
void sendUSARTData()
{
	for (uint8_t i=0; i<6; i++)
 306:	cf 5f       	subi	r28, 0xFF	; 255
 308:	c6 30       	cpi	r28, 0x06	; 6
 30a:	90 f3       	brcs	.-28     	; 0x2f0 <sendUSARTData+0x6>
	{
		UART0Out(*USARTAddr[i]);
	}
}
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <sendADCData>:
Description:
	Loops though ADCAddr array and sends
	out data at each address
*/
void sendADCData()
{
 310:	cf 93       	push	r28
	for (uint8_t i=0; i<3; i++)
 312:	c0 e0       	ldi	r28, 0x00	; 0
 314:	0c c0       	rjmp	.+24     	; 0x32e <sendADCData+0x1e>
	{
		UART0Out(*ADCAddr[i]);
 316:	ec 2f       	mov	r30, r28
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	ee 0f       	add	r30, r30
 31c:	ff 1f       	adc	r31, r31
 31e:	ea 5f       	subi	r30, 0xFA	; 250
 320:	fd 4f       	sbci	r31, 0xFD	; 253
 322:	01 90       	ld	r0, Z+
 324:	f0 81       	ld	r31, Z
 326:	e0 2d       	mov	r30, r0
 328:	80 81       	ld	r24, Z
 32a:	14 df       	rcall	.-472    	; 0x154 <UART0Out>
	Loops though ADCAddr array and sends
	out data at each address
*/
void sendADCData()
{
	for (uint8_t i=0; i<3; i++)
 32c:	cf 5f       	subi	r28, 0xFF	; 255
 32e:	c3 30       	cpi	r28, 0x03	; 3
 330:	90 f3       	brcs	.-28     	; 0x316 <sendADCData+0x6>
	{
		UART0Out(*ADCAddr[i]);
	}
}
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <sendINTData>:
Description:
	Loops though intAddr array and sends
	out data at each address
*/
void sendINTData()
{
 336:	cf 93       	push	r28
	for (uint8_t i=0; i<3; i++)
 338:	c0 e0       	ldi	r28, 0x00	; 0
 33a:	0c c0       	rjmp	.+24     	; 0x354 <sendINTData+0x1e>
	{
		UART0Out(*intAddr[i]);
 33c:	ec 2f       	mov	r30, r28
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	ee 0f       	add	r30, r30
 342:	ff 1f       	adc	r31, r31
 344:	e0 50       	subi	r30, 0x00	; 0
 346:	fe 4f       	sbci	r31, 0xFE	; 254
 348:	01 90       	ld	r0, Z+
 34a:	f0 81       	ld	r31, Z
 34c:	e0 2d       	mov	r30, r0
 34e:	80 81       	ld	r24, Z
 350:	01 df       	rcall	.-510    	; 0x154 <UART0Out>
	Loops though intAddr array and sends
	out data at each address
*/
void sendINTData()
{
	for (uint8_t i=0; i<3; i++)
 352:	cf 5f       	subi	r28, 0xFF	; 255
 354:	c3 30       	cpi	r28, 0x03	; 3
 356:	90 f3       	brcs	.-28     	; 0x33c <sendINTData+0x6>
	{
		UART0Out(*intAddr[i]);
	}
}
 358:	cf 91       	pop	r28
 35a:	08 95       	ret

0000035c <sendRegisterData>:
Description:
	Calls each send___Data() function
*/
void sendRegisterData() 
{
	UART0PrintString(st);
 35c:	8c e6       	ldi	r24, 0x6C	; 108
 35e:	92 e0       	ldi	r25, 0x02	; 2
 360:	08 df       	rcall	.-496    	; 0x172 <UART0PrintString>
	sendStopBit();
 362:	ff de       	rcall	.-514    	; 0x162 <sendStopBit>
	
	sendPortData();
 364:	12 df       	rcall	.-476    	; 0x18a <sendPortData>
	sendTimerData();
 366:	24 df       	rcall	.-440    	; 0x1b0 <sendTimerData>
	sendUSARTData();
 368:	c0 df       	rcall	.-128    	; 0x2ea <sendUSARTData>
	sendADCData();
 36a:	d2 df       	rcall	.-92     	; 0x310 <sendADCData>
	sendINTData();
 36c:	e4 df       	rcall	.-56     	; 0x336 <sendINTData>
 36e:	88 e6       	ldi	r24, 0x68	; 104
	
	UART0PrintString(en);
 370:	92 e0       	ldi	r25, 0x02	; 2
 372:	ff de       	rcall	.-514    	; 0x172 <UART0PrintString>
 374:	f6 ce       	rjmp	.-532    	; 0x162 <sendStopBit>
 376:	08 95       	ret

00000378 <__vector_50>:
	sendStopBit();
 378:	1f 92       	push	r1
 37a:	0f 92       	push	r0
 37c:	0f b6       	in	r0, 0x3f	; 63

Description:
	Resets counter value then sends register data
*/
ISR(TIMER5_OVF_vect) 
{
 37e:	0f 92       	push	r0
 380:	11 24       	eor	r1, r1
 382:	0b b6       	in	r0, 0x3b	; 59
 384:	0f 92       	push	r0
 386:	2f 93       	push	r18
 388:	3f 93       	push	r19
 38a:	4f 93       	push	r20
 38c:	5f 93       	push	r21
 38e:	6f 93       	push	r22
 390:	7f 93       	push	r23
 392:	8f 93       	push	r24
 394:	9f 93       	push	r25
 396:	af 93       	push	r26
 398:	bf 93       	push	r27
 39a:	ef 93       	push	r30
 39c:	ff 93       	push	r31
	TCNT5 = 65535 - (F_CPU / (1024*UPDATE_FREQUENCY));
 39e:	85 ee       	ldi	r24, 0xE5	; 229
 3a0:	99 ef       	ldi	r25, 0xF9	; 249
 3a2:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
 3a6:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
	sendRegisterData();
 3aa:	d8 df       	rcall	.-80     	; 0x35c <sendRegisterData>
}
 3ac:	ff 91       	pop	r31
 3ae:	ef 91       	pop	r30
 3b0:	bf 91       	pop	r27
 3b2:	af 91       	pop	r26
 3b4:	9f 91       	pop	r25
 3b6:	8f 91       	pop	r24
 3b8:	7f 91       	pop	r23
 3ba:	6f 91       	pop	r22
 3bc:	5f 91       	pop	r21
 3be:	4f 91       	pop	r20
 3c0:	3f 91       	pop	r19
 3c2:	2f 91       	pop	r18
 3c4:	0f 90       	pop	r0
 3c6:	0b be       	out	0x3b, r0	; 59
 3c8:	0f 90       	pop	r0
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	0f 90       	pop	r0
 3ce:	1f 90       	pop	r1
 3d0:	18 95       	reti

000003d2 <DLY_init>:

/* NOTE: Local function implementations */
void DLY_init(void)
{
    // reset counter to 0
    TCNT0 = 0;
 3d2:	16 bc       	out	0x26, r1	; 38

    // normal mode
    TCCR0A = 0x00;
 3d4:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
 3d6:	15 bc       	out	0x25, r1	; 37

    OCR0A = 0;
 3d8:	17 bc       	out	0x27, r1	; 39
 3da:	08 95       	ret

000003dc <DLY_ms>:
}

void DLY_ms(double ms)
{
 3dc:	cf 92       	push	r12
 3de:	df 92       	push	r13
 3e0:	ef 92       	push	r14
 3e2:	ff 92       	push	r15
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	6b 01       	movw	r12, r22
 3ea:	7c 01       	movw	r14, r24
    size_t time = (((ms / 1000.0) * F_CPU) / 1024);
 3ec:	20 e0       	ldi	r18, 0x00	; 0
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	4a e7       	ldi	r20, 0x7A	; 122
 3f2:	54 e4       	ldi	r21, 0x44	; 68
 3f4:	48 d1       	rcall	.+656    	; 0x686 <__divsf3>
 3f6:	20 e0       	ldi	r18, 0x00	; 0
 3f8:	34 e2       	ldi	r19, 0x24	; 36
 3fa:	44 e7       	ldi	r20, 0x74	; 116
 3fc:	5b e4       	ldi	r21, 0x4B	; 75
 3fe:	8d d2       	rcall	.+1306   	; 0x91a <__mulsf3>
 400:	20 e0       	ldi	r18, 0x00	; 0
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	40 e8       	ldi	r20, 0x80	; 128
 406:	5a e3       	ldi	r21, 0x3A	; 58
 408:	88 d2       	rcall	.+1296   	; 0x91a <__mulsf3>
 40a:	a5 d1       	rcall	.+842    	; 0x756 <__fixunssfsi>
 40c:	c6 2f       	mov	r28, r22

    if(ms <= 16)
 40e:	20 e0       	ldi	r18, 0x00	; 0
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	40 e8       	ldi	r20, 0x80	; 128
 414:	51 e4       	ldi	r21, 0x41	; 65
 416:	c7 01       	movw	r24, r14
 418:	b6 01       	movw	r22, r12
 41a:	31 d1       	rcall	.+610    	; 0x67e <__cmpsf2>
 41c:	18 16       	cp	r1, r24
 41e:	64 f0       	brlt	.+24     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
    {
        OCR0A = time;
 420:	c7 bd       	out	0x27, r28	; 39

        // prescalar of 1024
        TCCR0B = 0x05;
 422:	85 e0       	ldi	r24, 0x05	; 5
 424:	85 bd       	out	0x25, r24	; 37

        while((TIFR0 & (1 << OCF0A)) == 0)
 426:	a9 9b       	sbis	0x15, 1	; 21
 428:	fe cf       	rjmp	.-4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
        {
            // do nothing
        }

        // stop the timer
        TCCR0B = 0x00;
 42a:	15 bc       	out	0x25, r1	; 37
        // clear the overflow flag
        TIFR0 |= (1 << OCF0A);
 42c:	85 b3       	in	r24, 0x15	; 21
 42e:	82 60       	ori	r24, 0x02	; 2
 430:	85 bb       	out	0x15, r24	; 21
        TCNT0 = 0;
 432:	16 bc       	out	0x26, r1	; 38
        OCR0A = 0;
 434:	17 bc       	out	0x27, r1	; 39
 436:	1b c0       	rjmp	.+54     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
    }
    else
    {
        OCR0A = (((1 / 1000.0) * F_CPU) / 1024);
 438:	8f e0       	ldi	r24, 0x0F	; 15
 43a:	87 bd       	out	0x27, r24	; 39

        for(size_t i = 0; i < ms; i++)
 43c:	c0 e0       	ldi	r28, 0x00	; 0
 43e:	d0 e0       	ldi	r29, 0x00	; 0
 440:	0a c0       	rjmp	.+20     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
        {
            // prescalar of 1024
            TCCR0B = 0x05;
 442:	85 e0       	ldi	r24, 0x05	; 5
 444:	85 bd       	out	0x25, r24	; 37

            while((TIFR0 & (1 << OCF0A)) == 0)
 446:	a9 9b       	sbis	0x15, 1	; 21
 448:	fe cf       	rjmp	.-4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
            {
                // do nothing
            }

            // stop the timer
            TCCR0B = 0x00;
 44a:	15 bc       	out	0x25, r1	; 37
            // clear the overflow flag
            TIFR0 |= (1 << OCF0A);
 44c:	85 b3       	in	r24, 0x15	; 21
 44e:	82 60       	ori	r24, 0x02	; 2
 450:	85 bb       	out	0x15, r24	; 21
    }
    else
    {
        OCR0A = (((1 / 1000.0) * F_CPU) / 1024);

        for(size_t i = 0; i < ms; i++)
 452:	16 bc       	out	0x26, r1	; 38
 454:	21 96       	adiw	r28, 0x01	; 1
 456:	be 01       	movw	r22, r28
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	a8 d1       	rcall	.+848    	; 0x7ae <__floatunsisf>
 45e:	9b 01       	movw	r18, r22
 460:	ac 01       	movw	r20, r24
 462:	c7 01       	movw	r24, r14
 464:	b6 01       	movw	r22, r12
 466:	55 d2       	rcall	.+1194   	; 0x912 <__gesf2>
 468:	18 16       	cp	r1, r24
 46a:	5c f3       	brlt	.-42     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
            // clear the overflow flag
            TIFR0 |= (1 << OCF0A);
            TCNT0 = 0;
        }

        OCR0A = 0;
 46c:	17 bc       	out	0x27, r1	; 39
    }
}
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	ff 90       	pop	r15
 474:	ef 90       	pop	r14
 476:	df 90       	pop	r13
 478:	cf 90       	pop	r12
 47a:	08 95       	ret

0000047c <PWM_init>:

/* NOTE: Local function implementations */
void PWM_init(void)
{
    // set up PORTB.5 as an output and 0V
    DDRB |= 1 << 5;
 47c:	84 b1       	in	r24, 0x04	; 4
 47e:	80 62       	ori	r24, 0x20	; 32
 480:	84 b9       	out	0x04, r24	; 4
    PORTB |= PORTB & ~(1 << 5);
 482:	85 b1       	in	r24, 0x05	; 5
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	8f 7d       	andi	r24, 0xDF	; 223
 488:	95 b1       	in	r25, 0x05	; 5
 48a:	89 2b       	or	r24, r25
 48c:	85 b9       	out	0x05, r24	; 5

    // 512 @ 8
    // set frequency to 3900hz
    ICR1 = 512;
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	92 e0       	ldi	r25, 0x02	; 2
 492:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7c0087>
 496:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7c0086>

    // fast pwm set on compare
    TCCR1A = 0x02;
 49a:	82 e0       	ldi	r24, 0x02	; 2
 49c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    // prescaler set to 8
    TCCR1B = 0x1a;
 4a0:	8a e1       	ldi	r24, 0x1A	; 26
 4a2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 4a6:	08 95       	ret

000004a8 <PWM_dutyCycle>:
}

void PWM_dutyCycle(double percent)
{
    OCR1A = percent * 512;
 4a8:	20 e0       	ldi	r18, 0x00	; 0
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	40 e0       	ldi	r20, 0x00	; 0
 4ae:	54 e4       	ldi	r21, 0x44	; 68
 4b0:	34 d2       	rcall	.+1128   	; 0x91a <__mulsf3>
 4b2:	51 d1       	rcall	.+674    	; 0x756 <__fixunssfsi>
 4b4:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 4b8:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 4bc:	08 95       	ret

000004be <PWM_enable>:
}

void PWM_enable(void)
{
    TCCR1A |= 0x80;
 4be:	e0 e8       	ldi	r30, 0x80	; 128
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	80 68       	ori	r24, 0x80	; 128
 4c6:	80 83       	st	Z, r24
 4c8:	08 95       	ret

000004ca <PWM_disable>:
}

void PWM_disable(void)
{
    TCCR1A = (TCCR1A & ~0x80);
 4ca:	e0 e8       	ldi	r30, 0x80	; 128
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	80 81       	ld	r24, Z
 4d0:	8f 77       	andi	r24, 0x7F	; 127
 4d2:	80 83       	st	Z, r24
 4d4:	08 95       	ret

000004d6 <IO_init>:

/* NOTE: Function implementations */
void IO_init(void)
{
    // set port B.7 as an output
    DDRA  = ~0x30;
 4d6:	8f ec       	ldi	r24, 0xCF	; 207
 4d8:	81 b9       	out	0x01, r24	; 1
    PORTA = 0x30;
 4da:	80 e3       	ldi	r24, 0x30	; 48
 4dc:	82 b9       	out	0x02, r24	; 2
 4de:	08 95       	ret

000004e0 <rampUpDelayWithSteps>:
}

void rampUpDelayWithSteps(double start, double end, uint16_t duration, uint8_t stepCount)
{
 4e0:	7f 92       	push	r7
 4e2:	8f 92       	push	r8
 4e4:	9f 92       	push	r9
 4e6:	af 92       	push	r10
 4e8:	bf 92       	push	r11
 4ea:	cf 92       	push	r12
 4ec:	df 92       	push	r13
 4ee:	ef 92       	push	r14
 4f0:	ff 92       	push	r15
 4f2:	0f 93       	push	r16
 4f4:	1f 93       	push	r17
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
 4fa:	4b 01       	movw	r8, r22
 4fc:	5c 01       	movw	r10, r24
 4fe:	ca 01       	movw	r24, r20
 500:	b9 01       	movw	r22, r18
 502:	7e 2c       	mov	r7, r14
    double stepIncrement = (end - start) / (stepCount - 1);
 504:	a5 01       	movw	r20, r10
 506:	94 01       	movw	r18, r8
 508:	55 d0       	rcall	.+170    	; 0x5b4 <__subsf3>
 50a:	6b 01       	movw	r12, r22
 50c:	7c 01       	movw	r14, r24
 50e:	67 2d       	mov	r22, r7
 510:	70 e0       	ldi	r23, 0x00	; 0
 512:	61 50       	subi	r22, 0x01	; 1
 514:	71 09       	sbc	r23, r1
 516:	07 2e       	mov	r0, r23
 518:	00 0c       	add	r0, r0
 51a:	88 0b       	sbc	r24, r24
 51c:	99 0b       	sbc	r25, r25
 51e:	49 d1       	rcall	.+658    	; 0x7b2 <__floatsisf>
 520:	9b 01       	movw	r18, r22
 522:	ac 01       	movw	r20, r24
 524:	c7 01       	movw	r24, r14
 526:	b6 01       	movw	r22, r12
 528:	ae d0       	rcall	.+348    	; 0x686 <__divsf3>
 52a:	6b 01       	movw	r12, r22
 52c:	7c 01       	movw	r14, r24

    for(size_t i = 0; i < stepCount; i++)
 52e:	c0 e0       	ldi	r28, 0x00	; 0
 530:	d0 e0       	ldi	r29, 0x00	; 0
    {
        DLY_ms(duration / stepCount);
 532:	14 c0       	rjmp	.+40     	; 0x55c <rampUpDelayWithSteps+0x7c>
 534:	c8 01       	movw	r24, r16
 536:	54 d2       	rcall	.+1192   	; 0x9e0 <__udivmodhi4>
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	38 d1       	rcall	.+624    	; 0x7ae <__floatunsisf>
        PWM_dutyCycle((stepIncrement * i) + start);
 53e:	4e df       	rcall	.-356    	; 0x3dc <DLY_ms>
 540:	be 01       	movw	r22, r28
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	33 d1       	rcall	.+614    	; 0x7ae <__floatunsisf>
 548:	a7 01       	movw	r20, r14
 54a:	96 01       	movw	r18, r12
 54c:	e6 d1       	rcall	.+972    	; 0x91a <__mulsf3>
 54e:	9b 01       	movw	r18, r22
 550:	ac 01       	movw	r20, r24
 552:	c5 01       	movw	r24, r10
 554:	b4 01       	movw	r22, r8
 556:	2f d0       	rcall	.+94     	; 0x5b6 <__addsf3>
 558:	a7 df       	rcall	.-178    	; 0x4a8 <PWM_dutyCycle>

void rampUpDelayWithSteps(double start, double end, uint16_t duration, uint8_t stepCount)
{
    double stepIncrement = (end - start) / (stepCount - 1);

    for(size_t i = 0; i < stepCount; i++)
 55a:	21 96       	adiw	r28, 0x01	; 1
 55c:	67 2d       	mov	r22, r7
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	c6 17       	cp	r28, r22
 562:	d7 07       	cpc	r29, r23
 564:	38 f3       	brcs	.-50     	; 0x534 <rampUpDelayWithSteps+0x54>
    {
        DLY_ms(duration / stepCount);
        PWM_dutyCycle((stepIncrement * i) + start);
    }
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	1f 91       	pop	r17
 56c:	0f 91       	pop	r16
 56e:	ff 90       	pop	r15
 570:	ef 90       	pop	r14
 572:	df 90       	pop	r13
 574:	cf 90       	pop	r12
 576:	bf 90       	pop	r11
 578:	af 90       	pop	r10
 57a:	9f 90       	pop	r9
 57c:	8f 90       	pop	r8
 57e:	7f 90       	pop	r7
 580:	08 95       	ret

00000582 <main>:

/* NOTE: Application implementation */
// the main loop of the function, provided to us
int main(void)
{
    IO_init();
 582:	a9 df       	rcall	.-174    	; 0x4d6 <IO_init>
    PWM_init();
 584:	7b df       	rcall	.-266    	; 0x47c <PWM_init>
    DLY_init();
 586:	25 df       	rcall	.-438    	; 0x3d2 <DLY_init>
 588:	e1 dd       	rcall	.-1086   	; 0x14c <initDebug>

    initDebug();
 58a:	04 9b       	sbis	0x00, 4	; 0

    while(1)
    {
        while((PINA & 0x10) == 0)
 58c:	fe cf       	rjmp	.-4      	; 0x58a <main+0x8>
 58e:	97 df       	rcall	.-210    	; 0x4be <PWM_enable>
        {
            // do nothing
        }

        PWM_enable();
 590:	68 94       	set
 592:	ee 24       	eor	r14, r14

        rampUpDelayWithSteps(.1, .9, 8000, 8);
 594:	e3 f8       	bld	r14, 3
 596:	00 e4       	ldi	r16, 0x40	; 64
 598:	1f e1       	ldi	r17, 0x1F	; 31
 59a:	26 e6       	ldi	r18, 0x66	; 102
 59c:	36 e6       	ldi	r19, 0x66	; 102
 59e:	46 e6       	ldi	r20, 0x66	; 102
 5a0:	5f e3       	ldi	r21, 0x3F	; 63
 5a2:	6d ec       	ldi	r22, 0xCD	; 205
 5a4:	7c ec       	ldi	r23, 0xCC	; 204
 5a6:	8c ec       	ldi	r24, 0xCC	; 204
 5a8:	9d e3       	ldi	r25, 0x3D	; 61
 5aa:	9a df       	rcall	.-204    	; 0x4e0 <rampUpDelayWithSteps>
 5ac:	05 9b       	sbis	0x00, 5	; 0

        while((PINA & 0x20) == 0)
 5ae:	fe cf       	rjmp	.-4      	; 0x5ac <main+0x2a>
 5b0:	8c df       	rcall	.-232    	; 0x4ca <PWM_disable>
        {
            // do nothing
        }

        PWM_disable();
 5b2:	eb cf       	rjmp	.-42     	; 0x58a <main+0x8>

000005b4 <__subsf3>:
 5b4:	50 58       	subi	r21, 0x80	; 128

000005b6 <__addsf3>:
    }
 5b6:	bb 27       	eor	r27, r27
 5b8:	aa 27       	eor	r26, r26
 5ba:	0e d0       	rcall	.+28     	; 0x5d8 <__addsf3x>
 5bc:	70 c1       	rjmp	.+736    	; 0x89e <__fp_round>
 5be:	61 d1       	rcall	.+706    	; 0x882 <__fp_pscA>
 5c0:	30 f0       	brcs	.+12     	; 0x5ce <__addsf3+0x18>
 5c2:	66 d1       	rcall	.+716    	; 0x890 <__fp_pscB>
 5c4:	20 f0       	brcs	.+8      	; 0x5ce <__addsf3+0x18>
 5c6:	31 f4       	brne	.+12     	; 0x5d4 <__addsf3+0x1e>
 5c8:	9f 3f       	cpi	r25, 0xFF	; 255
 5ca:	11 f4       	brne	.+4      	; 0x5d0 <__addsf3+0x1a>
 5cc:	1e f4       	brtc	.+6      	; 0x5d4 <__addsf3+0x1e>
 5ce:	56 c1       	rjmp	.+684    	; 0x87c <__fp_nan>
 5d0:	0e f4       	brtc	.+2      	; 0x5d4 <__addsf3+0x1e>
 5d2:	e0 95       	com	r30
 5d4:	e7 fb       	bst	r30, 7
 5d6:	4c c1       	rjmp	.+664    	; 0x870 <__fp_inf>

000005d8 <__addsf3x>:
 5d8:	e9 2f       	mov	r30, r25
 5da:	72 d1       	rcall	.+740    	; 0x8c0 <__fp_split3>
 5dc:	80 f3       	brcs	.-32     	; 0x5be <__addsf3+0x8>
 5de:	ba 17       	cp	r27, r26
 5e0:	62 07       	cpc	r22, r18
 5e2:	73 07       	cpc	r23, r19
 5e4:	84 07       	cpc	r24, r20
 5e6:	95 07       	cpc	r25, r21
 5e8:	18 f0       	brcs	.+6      	; 0x5f0 <__addsf3x+0x18>
 5ea:	71 f4       	brne	.+28     	; 0x608 <__addsf3x+0x30>
 5ec:	9e f5       	brtc	.+102    	; 0x654 <__addsf3x+0x7c>
 5ee:	8a c1       	rjmp	.+788    	; 0x904 <__fp_zero>
 5f0:	0e f4       	brtc	.+2      	; 0x5f4 <__addsf3x+0x1c>
 5f2:	e0 95       	com	r30
 5f4:	0b 2e       	mov	r0, r27
 5f6:	ba 2f       	mov	r27, r26
 5f8:	a0 2d       	mov	r26, r0
 5fa:	0b 01       	movw	r0, r22
 5fc:	b9 01       	movw	r22, r18
 5fe:	90 01       	movw	r18, r0
 600:	0c 01       	movw	r0, r24
 602:	ca 01       	movw	r24, r20
 604:	a0 01       	movw	r20, r0
 606:	11 24       	eor	r1, r1
 608:	ff 27       	eor	r31, r31
 60a:	59 1b       	sub	r21, r25
 60c:	99 f0       	breq	.+38     	; 0x634 <__addsf3x+0x5c>
 60e:	59 3f       	cpi	r21, 0xF9	; 249
 610:	50 f4       	brcc	.+20     	; 0x626 <__addsf3x+0x4e>
 612:	50 3e       	cpi	r21, 0xE0	; 224
 614:	68 f1       	brcs	.+90     	; 0x670 <__addsf3x+0x98>
 616:	1a 16       	cp	r1, r26
 618:	f0 40       	sbci	r31, 0x00	; 0
 61a:	a2 2f       	mov	r26, r18
 61c:	23 2f       	mov	r18, r19
 61e:	34 2f       	mov	r19, r20
 620:	44 27       	eor	r20, r20
 622:	58 5f       	subi	r21, 0xF8	; 248
 624:	f3 cf       	rjmp	.-26     	; 0x60c <__addsf3x+0x34>
 626:	46 95       	lsr	r20
 628:	37 95       	ror	r19
 62a:	27 95       	ror	r18
 62c:	a7 95       	ror	r26
 62e:	f0 40       	sbci	r31, 0x00	; 0
 630:	53 95       	inc	r21
 632:	c9 f7       	brne	.-14     	; 0x626 <__addsf3x+0x4e>
 634:	7e f4       	brtc	.+30     	; 0x654 <__addsf3x+0x7c>
 636:	1f 16       	cp	r1, r31
 638:	ba 0b       	sbc	r27, r26
 63a:	62 0b       	sbc	r22, r18
 63c:	73 0b       	sbc	r23, r19
 63e:	84 0b       	sbc	r24, r20
 640:	ba f0       	brmi	.+46     	; 0x670 <__addsf3x+0x98>
 642:	91 50       	subi	r25, 0x01	; 1
 644:	a1 f0       	breq	.+40     	; 0x66e <__addsf3x+0x96>
 646:	ff 0f       	add	r31, r31
 648:	bb 1f       	adc	r27, r27
 64a:	66 1f       	adc	r22, r22
 64c:	77 1f       	adc	r23, r23
 64e:	88 1f       	adc	r24, r24
 650:	c2 f7       	brpl	.-16     	; 0x642 <__addsf3x+0x6a>
 652:	0e c0       	rjmp	.+28     	; 0x670 <__addsf3x+0x98>
 654:	ba 0f       	add	r27, r26
 656:	62 1f       	adc	r22, r18
 658:	73 1f       	adc	r23, r19
 65a:	84 1f       	adc	r24, r20
 65c:	48 f4       	brcc	.+18     	; 0x670 <__addsf3x+0x98>
 65e:	87 95       	ror	r24
 660:	77 95       	ror	r23
 662:	67 95       	ror	r22
 664:	b7 95       	ror	r27
 666:	f7 95       	ror	r31
 668:	9e 3f       	cpi	r25, 0xFE	; 254
 66a:	08 f0       	brcs	.+2      	; 0x66e <__addsf3x+0x96>
 66c:	b3 cf       	rjmp	.-154    	; 0x5d4 <__addsf3+0x1e>
 66e:	93 95       	inc	r25
 670:	88 0f       	add	r24, r24
 672:	08 f0       	brcs	.+2      	; 0x676 <__addsf3x+0x9e>
 674:	99 27       	eor	r25, r25
 676:	ee 0f       	add	r30, r30
 678:	97 95       	ror	r25
 67a:	87 95       	ror	r24
 67c:	08 95       	ret

0000067e <__cmpsf2>:
 67e:	d4 d0       	rcall	.+424    	; 0x828 <__fp_cmp>
 680:	08 f4       	brcc	.+2      	; 0x684 <__cmpsf2+0x6>
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	08 95       	ret

00000686 <__divsf3>:
 686:	0c d0       	rcall	.+24     	; 0x6a0 <__divsf3x>
 688:	0a c1       	rjmp	.+532    	; 0x89e <__fp_round>
 68a:	02 d1       	rcall	.+516    	; 0x890 <__fp_pscB>
 68c:	40 f0       	brcs	.+16     	; 0x69e <__divsf3+0x18>
 68e:	f9 d0       	rcall	.+498    	; 0x882 <__fp_pscA>
 690:	30 f0       	brcs	.+12     	; 0x69e <__divsf3+0x18>
 692:	21 f4       	brne	.+8      	; 0x69c <__divsf3+0x16>
 694:	5f 3f       	cpi	r21, 0xFF	; 255
 696:	19 f0       	breq	.+6      	; 0x69e <__divsf3+0x18>
 698:	eb c0       	rjmp	.+470    	; 0x870 <__fp_inf>
 69a:	51 11       	cpse	r21, r1
 69c:	34 c1       	rjmp	.+616    	; 0x906 <__fp_szero>
 69e:	ee c0       	rjmp	.+476    	; 0x87c <__fp_nan>

000006a0 <__divsf3x>:
 6a0:	0f d1       	rcall	.+542    	; 0x8c0 <__fp_split3>
 6a2:	98 f3       	brcs	.-26     	; 0x68a <__divsf3+0x4>

000006a4 <__divsf3_pse>:
 6a4:	99 23       	and	r25, r25
 6a6:	c9 f3       	breq	.-14     	; 0x69a <__divsf3+0x14>
 6a8:	55 23       	and	r21, r21
 6aa:	b1 f3       	breq	.-20     	; 0x698 <__divsf3+0x12>
 6ac:	95 1b       	sub	r25, r21
 6ae:	55 0b       	sbc	r21, r21
 6b0:	bb 27       	eor	r27, r27
 6b2:	aa 27       	eor	r26, r26
 6b4:	62 17       	cp	r22, r18
 6b6:	73 07       	cpc	r23, r19
 6b8:	84 07       	cpc	r24, r20
 6ba:	38 f0       	brcs	.+14     	; 0x6ca <__divsf3_pse+0x26>
 6bc:	9f 5f       	subi	r25, 0xFF	; 255
 6be:	5f 4f       	sbci	r21, 0xFF	; 255
 6c0:	22 0f       	add	r18, r18
 6c2:	33 1f       	adc	r19, r19
 6c4:	44 1f       	adc	r20, r20
 6c6:	aa 1f       	adc	r26, r26
 6c8:	a9 f3       	breq	.-22     	; 0x6b4 <__divsf3_pse+0x10>
 6ca:	33 d0       	rcall	.+102    	; 0x732 <__divsf3_pse+0x8e>
 6cc:	0e 2e       	mov	r0, r30
 6ce:	3a f0       	brmi	.+14     	; 0x6de <__divsf3_pse+0x3a>
 6d0:	e0 e8       	ldi	r30, 0x80	; 128
 6d2:	30 d0       	rcall	.+96     	; 0x734 <__divsf3_pse+0x90>
 6d4:	91 50       	subi	r25, 0x01	; 1
 6d6:	50 40       	sbci	r21, 0x00	; 0
 6d8:	e6 95       	lsr	r30
 6da:	00 1c       	adc	r0, r0
 6dc:	ca f7       	brpl	.-14     	; 0x6d0 <__divsf3_pse+0x2c>
 6de:	29 d0       	rcall	.+82     	; 0x732 <__divsf3_pse+0x8e>
 6e0:	fe 2f       	mov	r31, r30
 6e2:	27 d0       	rcall	.+78     	; 0x732 <__divsf3_pse+0x8e>
 6e4:	66 0f       	add	r22, r22
 6e6:	77 1f       	adc	r23, r23
 6e8:	88 1f       	adc	r24, r24
 6ea:	bb 1f       	adc	r27, r27
 6ec:	26 17       	cp	r18, r22
 6ee:	37 07       	cpc	r19, r23
 6f0:	48 07       	cpc	r20, r24
 6f2:	ab 07       	cpc	r26, r27
 6f4:	b0 e8       	ldi	r27, 0x80	; 128
 6f6:	09 f0       	breq	.+2      	; 0x6fa <__divsf3_pse+0x56>
 6f8:	bb 0b       	sbc	r27, r27
 6fa:	80 2d       	mov	r24, r0
 6fc:	bf 01       	movw	r22, r30
 6fe:	ff 27       	eor	r31, r31
 700:	93 58       	subi	r25, 0x83	; 131
 702:	5f 4f       	sbci	r21, 0xFF	; 255
 704:	2a f0       	brmi	.+10     	; 0x710 <__divsf3_pse+0x6c>
 706:	9e 3f       	cpi	r25, 0xFE	; 254
 708:	51 05       	cpc	r21, r1
 70a:	68 f0       	brcs	.+26     	; 0x726 <__divsf3_pse+0x82>
 70c:	b1 c0       	rjmp	.+354    	; 0x870 <__fp_inf>
 70e:	fb c0       	rjmp	.+502    	; 0x906 <__fp_szero>
 710:	5f 3f       	cpi	r21, 0xFF	; 255
 712:	ec f3       	brlt	.-6      	; 0x70e <__divsf3_pse+0x6a>
 714:	98 3e       	cpi	r25, 0xE8	; 232
 716:	dc f3       	brlt	.-10     	; 0x70e <__divsf3_pse+0x6a>
 718:	86 95       	lsr	r24
 71a:	77 95       	ror	r23
 71c:	67 95       	ror	r22
 71e:	b7 95       	ror	r27
 720:	f7 95       	ror	r31
 722:	9f 5f       	subi	r25, 0xFF	; 255
 724:	c9 f7       	brne	.-14     	; 0x718 <__divsf3_pse+0x74>
 726:	88 0f       	add	r24, r24
 728:	91 1d       	adc	r25, r1
 72a:	96 95       	lsr	r25
 72c:	87 95       	ror	r24
 72e:	97 f9       	bld	r25, 7
 730:	08 95       	ret
 732:	e1 e0       	ldi	r30, 0x01	; 1
 734:	66 0f       	add	r22, r22
 736:	77 1f       	adc	r23, r23
 738:	88 1f       	adc	r24, r24
 73a:	bb 1f       	adc	r27, r27
 73c:	62 17       	cp	r22, r18
 73e:	73 07       	cpc	r23, r19
 740:	84 07       	cpc	r24, r20
 742:	ba 07       	cpc	r27, r26
 744:	20 f0       	brcs	.+8      	; 0x74e <__divsf3_pse+0xaa>
 746:	62 1b       	sub	r22, r18
 748:	73 0b       	sbc	r23, r19
 74a:	84 0b       	sbc	r24, r20
 74c:	ba 0b       	sbc	r27, r26
 74e:	ee 1f       	adc	r30, r30
 750:	88 f7       	brcc	.-30     	; 0x734 <__divsf3_pse+0x90>
 752:	e0 95       	com	r30
 754:	08 95       	ret

00000756 <__fixunssfsi>:
 756:	bc d0       	rcall	.+376    	; 0x8d0 <__fp_splitA>
 758:	88 f0       	brcs	.+34     	; 0x77c <__fixunssfsi+0x26>
 75a:	9f 57       	subi	r25, 0x7F	; 127
 75c:	90 f0       	brcs	.+36     	; 0x782 <__fixunssfsi+0x2c>
 75e:	b9 2f       	mov	r27, r25
 760:	99 27       	eor	r25, r25
 762:	b7 51       	subi	r27, 0x17	; 23
 764:	a0 f0       	brcs	.+40     	; 0x78e <__fixunssfsi+0x38>
 766:	d1 f0       	breq	.+52     	; 0x79c <__fixunssfsi+0x46>
 768:	66 0f       	add	r22, r22
 76a:	77 1f       	adc	r23, r23
 76c:	88 1f       	adc	r24, r24
 76e:	99 1f       	adc	r25, r25
 770:	1a f0       	brmi	.+6      	; 0x778 <__fixunssfsi+0x22>
 772:	ba 95       	dec	r27
 774:	c9 f7       	brne	.-14     	; 0x768 <__fixunssfsi+0x12>
 776:	12 c0       	rjmp	.+36     	; 0x79c <__fixunssfsi+0x46>
 778:	b1 30       	cpi	r27, 0x01	; 1
 77a:	81 f0       	breq	.+32     	; 0x79c <__fixunssfsi+0x46>
 77c:	c3 d0       	rcall	.+390    	; 0x904 <__fp_zero>
 77e:	b1 e0       	ldi	r27, 0x01	; 1
 780:	08 95       	ret
 782:	c0 c0       	rjmp	.+384    	; 0x904 <__fp_zero>
 784:	67 2f       	mov	r22, r23
 786:	78 2f       	mov	r23, r24
 788:	88 27       	eor	r24, r24
 78a:	b8 5f       	subi	r27, 0xF8	; 248
 78c:	39 f0       	breq	.+14     	; 0x79c <__fixunssfsi+0x46>
 78e:	b9 3f       	cpi	r27, 0xF9	; 249
 790:	cc f3       	brlt	.-14     	; 0x784 <__fixunssfsi+0x2e>
 792:	86 95       	lsr	r24
 794:	77 95       	ror	r23
 796:	67 95       	ror	r22
 798:	b3 95       	inc	r27
 79a:	d9 f7       	brne	.-10     	; 0x792 <__fixunssfsi+0x3c>
 79c:	3e f4       	brtc	.+14     	; 0x7ac <__fixunssfsi+0x56>
 79e:	90 95       	com	r25
 7a0:	80 95       	com	r24
 7a2:	70 95       	com	r23
 7a4:	61 95       	neg	r22
 7a6:	7f 4f       	sbci	r23, 0xFF	; 255
 7a8:	8f 4f       	sbci	r24, 0xFF	; 255
 7aa:	9f 4f       	sbci	r25, 0xFF	; 255
 7ac:	08 95       	ret

000007ae <__floatunsisf>:
 7ae:	e8 94       	clt
 7b0:	09 c0       	rjmp	.+18     	; 0x7c4 <__floatsisf+0x12>

000007b2 <__floatsisf>:
 7b2:	97 fb       	bst	r25, 7
 7b4:	3e f4       	brtc	.+14     	; 0x7c4 <__floatsisf+0x12>
 7b6:	90 95       	com	r25
 7b8:	80 95       	com	r24
 7ba:	70 95       	com	r23
 7bc:	61 95       	neg	r22
 7be:	7f 4f       	sbci	r23, 0xFF	; 255
 7c0:	8f 4f       	sbci	r24, 0xFF	; 255
 7c2:	9f 4f       	sbci	r25, 0xFF	; 255
 7c4:	99 23       	and	r25, r25
 7c6:	a9 f0       	breq	.+42     	; 0x7f2 <__floatsisf+0x40>
 7c8:	f9 2f       	mov	r31, r25
 7ca:	96 e9       	ldi	r25, 0x96	; 150
 7cc:	bb 27       	eor	r27, r27
 7ce:	93 95       	inc	r25
 7d0:	f6 95       	lsr	r31
 7d2:	87 95       	ror	r24
 7d4:	77 95       	ror	r23
 7d6:	67 95       	ror	r22
 7d8:	b7 95       	ror	r27
 7da:	f1 11       	cpse	r31, r1
 7dc:	f8 cf       	rjmp	.-16     	; 0x7ce <__floatsisf+0x1c>
 7de:	fa f4       	brpl	.+62     	; 0x81e <__floatsisf+0x6c>
 7e0:	bb 0f       	add	r27, r27
 7e2:	11 f4       	brne	.+4      	; 0x7e8 <__floatsisf+0x36>
 7e4:	60 ff       	sbrs	r22, 0
 7e6:	1b c0       	rjmp	.+54     	; 0x81e <__floatsisf+0x6c>
 7e8:	6f 5f       	subi	r22, 0xFF	; 255
 7ea:	7f 4f       	sbci	r23, 0xFF	; 255
 7ec:	8f 4f       	sbci	r24, 0xFF	; 255
 7ee:	9f 4f       	sbci	r25, 0xFF	; 255
 7f0:	16 c0       	rjmp	.+44     	; 0x81e <__floatsisf+0x6c>
 7f2:	88 23       	and	r24, r24
 7f4:	11 f0       	breq	.+4      	; 0x7fa <__floatsisf+0x48>
 7f6:	96 e9       	ldi	r25, 0x96	; 150
 7f8:	11 c0       	rjmp	.+34     	; 0x81c <__floatsisf+0x6a>
 7fa:	77 23       	and	r23, r23
 7fc:	21 f0       	breq	.+8      	; 0x806 <__floatsisf+0x54>
 7fe:	9e e8       	ldi	r25, 0x8E	; 142
 800:	87 2f       	mov	r24, r23
 802:	76 2f       	mov	r23, r22
 804:	05 c0       	rjmp	.+10     	; 0x810 <__floatsisf+0x5e>
 806:	66 23       	and	r22, r22
 808:	71 f0       	breq	.+28     	; 0x826 <__floatsisf+0x74>
 80a:	96 e8       	ldi	r25, 0x86	; 134
 80c:	86 2f       	mov	r24, r22
 80e:	70 e0       	ldi	r23, 0x00	; 0
 810:	60 e0       	ldi	r22, 0x00	; 0
 812:	2a f0       	brmi	.+10     	; 0x81e <__floatsisf+0x6c>
 814:	9a 95       	dec	r25
 816:	66 0f       	add	r22, r22
 818:	77 1f       	adc	r23, r23
 81a:	88 1f       	adc	r24, r24
 81c:	da f7       	brpl	.-10     	; 0x814 <__floatsisf+0x62>
 81e:	88 0f       	add	r24, r24
 820:	96 95       	lsr	r25
 822:	87 95       	ror	r24
 824:	97 f9       	bld	r25, 7
 826:	08 95       	ret

00000828 <__fp_cmp>:
 828:	99 0f       	add	r25, r25
 82a:	00 08       	sbc	r0, r0
 82c:	55 0f       	add	r21, r21
 82e:	aa 0b       	sbc	r26, r26
 830:	e0 e8       	ldi	r30, 0x80	; 128
 832:	fe ef       	ldi	r31, 0xFE	; 254
 834:	16 16       	cp	r1, r22
 836:	17 06       	cpc	r1, r23
 838:	e8 07       	cpc	r30, r24
 83a:	f9 07       	cpc	r31, r25
 83c:	c0 f0       	brcs	.+48     	; 0x86e <__fp_cmp+0x46>
 83e:	12 16       	cp	r1, r18
 840:	13 06       	cpc	r1, r19
 842:	e4 07       	cpc	r30, r20
 844:	f5 07       	cpc	r31, r21
 846:	98 f0       	brcs	.+38     	; 0x86e <__fp_cmp+0x46>
 848:	62 1b       	sub	r22, r18
 84a:	73 0b       	sbc	r23, r19
 84c:	84 0b       	sbc	r24, r20
 84e:	95 0b       	sbc	r25, r21
 850:	39 f4       	brne	.+14     	; 0x860 <__fp_cmp+0x38>
 852:	0a 26       	eor	r0, r26
 854:	61 f0       	breq	.+24     	; 0x86e <__fp_cmp+0x46>
 856:	23 2b       	or	r18, r19
 858:	24 2b       	or	r18, r20
 85a:	25 2b       	or	r18, r21
 85c:	21 f4       	brne	.+8      	; 0x866 <__fp_cmp+0x3e>
 85e:	08 95       	ret
 860:	0a 26       	eor	r0, r26
 862:	09 f4       	brne	.+2      	; 0x866 <__fp_cmp+0x3e>
 864:	a1 40       	sbci	r26, 0x01	; 1
 866:	a6 95       	lsr	r26
 868:	8f ef       	ldi	r24, 0xFF	; 255
 86a:	81 1d       	adc	r24, r1
 86c:	81 1d       	adc	r24, r1
 86e:	08 95       	ret

00000870 <__fp_inf>:
 870:	97 f9       	bld	r25, 7
 872:	9f 67       	ori	r25, 0x7F	; 127
 874:	80 e8       	ldi	r24, 0x80	; 128
 876:	70 e0       	ldi	r23, 0x00	; 0
 878:	60 e0       	ldi	r22, 0x00	; 0
 87a:	08 95       	ret

0000087c <__fp_nan>:
 87c:	9f ef       	ldi	r25, 0xFF	; 255
 87e:	80 ec       	ldi	r24, 0xC0	; 192
 880:	08 95       	ret

00000882 <__fp_pscA>:
 882:	00 24       	eor	r0, r0
 884:	0a 94       	dec	r0
 886:	16 16       	cp	r1, r22
 888:	17 06       	cpc	r1, r23
 88a:	18 06       	cpc	r1, r24
 88c:	09 06       	cpc	r0, r25
 88e:	08 95       	ret

00000890 <__fp_pscB>:
 890:	00 24       	eor	r0, r0
 892:	0a 94       	dec	r0
 894:	12 16       	cp	r1, r18
 896:	13 06       	cpc	r1, r19
 898:	14 06       	cpc	r1, r20
 89a:	05 06       	cpc	r0, r21
 89c:	08 95       	ret

0000089e <__fp_round>:
 89e:	09 2e       	mov	r0, r25
 8a0:	03 94       	inc	r0
 8a2:	00 0c       	add	r0, r0
 8a4:	11 f4       	brne	.+4      	; 0x8aa <__fp_round+0xc>
 8a6:	88 23       	and	r24, r24
 8a8:	52 f0       	brmi	.+20     	; 0x8be <__fp_round+0x20>
 8aa:	bb 0f       	add	r27, r27
 8ac:	40 f4       	brcc	.+16     	; 0x8be <__fp_round+0x20>
 8ae:	bf 2b       	or	r27, r31
 8b0:	11 f4       	brne	.+4      	; 0x8b6 <__fp_round+0x18>
 8b2:	60 ff       	sbrs	r22, 0
 8b4:	04 c0       	rjmp	.+8      	; 0x8be <__fp_round+0x20>
 8b6:	6f 5f       	subi	r22, 0xFF	; 255
 8b8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ba:	8f 4f       	sbci	r24, 0xFF	; 255
 8bc:	9f 4f       	sbci	r25, 0xFF	; 255
 8be:	08 95       	ret

000008c0 <__fp_split3>:
 8c0:	57 fd       	sbrc	r21, 7
 8c2:	90 58       	subi	r25, 0x80	; 128
 8c4:	44 0f       	add	r20, r20
 8c6:	55 1f       	adc	r21, r21
 8c8:	59 f0       	breq	.+22     	; 0x8e0 <__fp_splitA+0x10>
 8ca:	5f 3f       	cpi	r21, 0xFF	; 255
 8cc:	71 f0       	breq	.+28     	; 0x8ea <__fp_splitA+0x1a>
 8ce:	47 95       	ror	r20

000008d0 <__fp_splitA>:
 8d0:	88 0f       	add	r24, r24
 8d2:	97 fb       	bst	r25, 7
 8d4:	99 1f       	adc	r25, r25
 8d6:	61 f0       	breq	.+24     	; 0x8f0 <__fp_splitA+0x20>
 8d8:	9f 3f       	cpi	r25, 0xFF	; 255
 8da:	79 f0       	breq	.+30     	; 0x8fa <__fp_splitA+0x2a>
 8dc:	87 95       	ror	r24
 8de:	08 95       	ret
 8e0:	12 16       	cp	r1, r18
 8e2:	13 06       	cpc	r1, r19
 8e4:	14 06       	cpc	r1, r20
 8e6:	55 1f       	adc	r21, r21
 8e8:	f2 cf       	rjmp	.-28     	; 0x8ce <__fp_split3+0xe>
 8ea:	46 95       	lsr	r20
 8ec:	f1 df       	rcall	.-30     	; 0x8d0 <__fp_splitA>
 8ee:	08 c0       	rjmp	.+16     	; 0x900 <__fp_splitA+0x30>
 8f0:	16 16       	cp	r1, r22
 8f2:	17 06       	cpc	r1, r23
 8f4:	18 06       	cpc	r1, r24
 8f6:	99 1f       	adc	r25, r25
 8f8:	f1 cf       	rjmp	.-30     	; 0x8dc <__fp_splitA+0xc>
 8fa:	86 95       	lsr	r24
 8fc:	71 05       	cpc	r23, r1
 8fe:	61 05       	cpc	r22, r1
 900:	08 94       	sec
 902:	08 95       	ret

00000904 <__fp_zero>:
 904:	e8 94       	clt

00000906 <__fp_szero>:
 906:	bb 27       	eor	r27, r27
 908:	66 27       	eor	r22, r22
 90a:	77 27       	eor	r23, r23
 90c:	cb 01       	movw	r24, r22
 90e:	97 f9       	bld	r25, 7
 910:	08 95       	ret

00000912 <__gesf2>:
 912:	8a df       	rcall	.-236    	; 0x828 <__fp_cmp>
 914:	08 f4       	brcc	.+2      	; 0x918 <__gesf2+0x6>
 916:	8f ef       	ldi	r24, 0xFF	; 255
 918:	08 95       	ret

0000091a <__mulsf3>:
 91a:	0b d0       	rcall	.+22     	; 0x932 <__mulsf3x>
 91c:	c0 cf       	rjmp	.-128    	; 0x89e <__fp_round>
 91e:	b1 df       	rcall	.-158    	; 0x882 <__fp_pscA>
 920:	28 f0       	brcs	.+10     	; 0x92c <__mulsf3+0x12>
 922:	b6 df       	rcall	.-148    	; 0x890 <__fp_pscB>
 924:	18 f0       	brcs	.+6      	; 0x92c <__mulsf3+0x12>
 926:	95 23       	and	r25, r21
 928:	09 f0       	breq	.+2      	; 0x92c <__mulsf3+0x12>
 92a:	a2 cf       	rjmp	.-188    	; 0x870 <__fp_inf>
 92c:	a7 cf       	rjmp	.-178    	; 0x87c <__fp_nan>
 92e:	11 24       	eor	r1, r1
 930:	ea cf       	rjmp	.-44     	; 0x906 <__fp_szero>

00000932 <__mulsf3x>:
 932:	c6 df       	rcall	.-116    	; 0x8c0 <__fp_split3>
 934:	a0 f3       	brcs	.-24     	; 0x91e <__mulsf3+0x4>

00000936 <__mulsf3_pse>:
 936:	95 9f       	mul	r25, r21
 938:	d1 f3       	breq	.-12     	; 0x92e <__mulsf3+0x14>
 93a:	95 0f       	add	r25, r21
 93c:	50 e0       	ldi	r21, 0x00	; 0
 93e:	55 1f       	adc	r21, r21
 940:	62 9f       	mul	r22, r18
 942:	f0 01       	movw	r30, r0
 944:	72 9f       	mul	r23, r18
 946:	bb 27       	eor	r27, r27
 948:	f0 0d       	add	r31, r0
 94a:	b1 1d       	adc	r27, r1
 94c:	63 9f       	mul	r22, r19
 94e:	aa 27       	eor	r26, r26
 950:	f0 0d       	add	r31, r0
 952:	b1 1d       	adc	r27, r1
 954:	aa 1f       	adc	r26, r26
 956:	64 9f       	mul	r22, r20
 958:	66 27       	eor	r22, r22
 95a:	b0 0d       	add	r27, r0
 95c:	a1 1d       	adc	r26, r1
 95e:	66 1f       	adc	r22, r22
 960:	82 9f       	mul	r24, r18
 962:	22 27       	eor	r18, r18
 964:	b0 0d       	add	r27, r0
 966:	a1 1d       	adc	r26, r1
 968:	62 1f       	adc	r22, r18
 96a:	73 9f       	mul	r23, r19
 96c:	b0 0d       	add	r27, r0
 96e:	a1 1d       	adc	r26, r1
 970:	62 1f       	adc	r22, r18
 972:	83 9f       	mul	r24, r19
 974:	a0 0d       	add	r26, r0
 976:	61 1d       	adc	r22, r1
 978:	22 1f       	adc	r18, r18
 97a:	74 9f       	mul	r23, r20
 97c:	33 27       	eor	r19, r19
 97e:	a0 0d       	add	r26, r0
 980:	61 1d       	adc	r22, r1
 982:	23 1f       	adc	r18, r19
 984:	84 9f       	mul	r24, r20
 986:	60 0d       	add	r22, r0
 988:	21 1d       	adc	r18, r1
 98a:	82 2f       	mov	r24, r18
 98c:	76 2f       	mov	r23, r22
 98e:	6a 2f       	mov	r22, r26
 990:	11 24       	eor	r1, r1
 992:	9f 57       	subi	r25, 0x7F	; 127
 994:	50 40       	sbci	r21, 0x00	; 0
 996:	8a f0       	brmi	.+34     	; 0x9ba <__mulsf3_pse+0x84>
 998:	e1 f0       	breq	.+56     	; 0x9d2 <__mulsf3_pse+0x9c>
 99a:	88 23       	and	r24, r24
 99c:	4a f0       	brmi	.+18     	; 0x9b0 <__mulsf3_pse+0x7a>
 99e:	ee 0f       	add	r30, r30
 9a0:	ff 1f       	adc	r31, r31
 9a2:	bb 1f       	adc	r27, r27
 9a4:	66 1f       	adc	r22, r22
 9a6:	77 1f       	adc	r23, r23
 9a8:	88 1f       	adc	r24, r24
 9aa:	91 50       	subi	r25, 0x01	; 1
 9ac:	50 40       	sbci	r21, 0x00	; 0
 9ae:	a9 f7       	brne	.-22     	; 0x99a <__mulsf3_pse+0x64>
 9b0:	9e 3f       	cpi	r25, 0xFE	; 254
 9b2:	51 05       	cpc	r21, r1
 9b4:	70 f0       	brcs	.+28     	; 0x9d2 <__mulsf3_pse+0x9c>
 9b6:	5c cf       	rjmp	.-328    	; 0x870 <__fp_inf>
 9b8:	a6 cf       	rjmp	.-180    	; 0x906 <__fp_szero>
 9ba:	5f 3f       	cpi	r21, 0xFF	; 255
 9bc:	ec f3       	brlt	.-6      	; 0x9b8 <__mulsf3_pse+0x82>
 9be:	98 3e       	cpi	r25, 0xE8	; 232
 9c0:	dc f3       	brlt	.-10     	; 0x9b8 <__mulsf3_pse+0x82>
 9c2:	86 95       	lsr	r24
 9c4:	77 95       	ror	r23
 9c6:	67 95       	ror	r22
 9c8:	b7 95       	ror	r27
 9ca:	f7 95       	ror	r31
 9cc:	e7 95       	ror	r30
 9ce:	9f 5f       	subi	r25, 0xFF	; 255
 9d0:	c1 f7       	brne	.-16     	; 0x9c2 <__mulsf3_pse+0x8c>
 9d2:	fe 2b       	or	r31, r30
 9d4:	88 0f       	add	r24, r24
 9d6:	91 1d       	adc	r25, r1
 9d8:	96 95       	lsr	r25
 9da:	87 95       	ror	r24
 9dc:	97 f9       	bld	r25, 7
 9de:	08 95       	ret

000009e0 <__udivmodhi4>:
 9e0:	aa 1b       	sub	r26, r26
 9e2:	bb 1b       	sub	r27, r27
 9e4:	51 e1       	ldi	r21, 0x11	; 17
 9e6:	07 c0       	rjmp	.+14     	; 0x9f6 <__udivmodhi4_ep>

000009e8 <__udivmodhi4_loop>:
 9e8:	aa 1f       	adc	r26, r26
 9ea:	bb 1f       	adc	r27, r27
 9ec:	a6 17       	cp	r26, r22
 9ee:	b7 07       	cpc	r27, r23
 9f0:	10 f0       	brcs	.+4      	; 0x9f6 <__udivmodhi4_ep>
 9f2:	a6 1b       	sub	r26, r22
 9f4:	b7 0b       	sbc	r27, r23

000009f6 <__udivmodhi4_ep>:
 9f6:	88 1f       	adc	r24, r24
 9f8:	99 1f       	adc	r25, r25
 9fa:	5a 95       	dec	r21
 9fc:	a9 f7       	brne	.-22     	; 0x9e8 <__udivmodhi4_loop>
 9fe:	80 95       	com	r24
 a00:	90 95       	com	r25
 a02:	bc 01       	movw	r22, r24
 a04:	cd 01       	movw	r24, r26
 a06:	08 95       	ret

00000a08 <_exit>:
 a08:	f8 94       	cli

00000a0a <__stop_program>:
 a0a:	ff cf       	rjmp	.-2      	; 0xa0a <__stop_program>
