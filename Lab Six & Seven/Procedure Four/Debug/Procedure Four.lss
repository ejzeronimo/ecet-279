
Procedure Four.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800200  000009b2  00000a46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800270  00800270  00000ab6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ab6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ae8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016b8  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001004  00000000  00000000  00002350  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c09  00000000  00000000  00003354  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  00003f60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f8  00000000  00000000  000042b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000057e  00000000  00000000  00004ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  0000502e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	91 c2       	rjmp	.+1314   	; 0x578 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	87 c0       	rjmp	.+270    	; 0x184 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	cd c1       	rjmp	.+922    	; 0x464 <__vector_50>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 eb       	ldi	r30, 0xB2	; 178
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 37       	cpi	r26, 0x70	; 112
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e7       	ldi	r26, 0x70	; 112
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 37       	cpi	r26, 0x76	; 118
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	7e d2       	rcall	.+1276   	; 0x61c <main>
 120:	46 c4       	rjmp	.+2188   	; 0x9ae <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <ADC_init>:
    return readInterrupt;
}

void ADC_setInterruptHandler(AnalogAsyncGetHandler_t cb)
{
    interruptCallback = cb;
 124:	83 e8       	ldi	r24, 0x83	; 131
 126:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 12a:	80 e4       	ldi	r24, 0x40	; 64
 12c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
 130:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
 134:	08 95       	ret

00000136 <ADC_getTenBitValue>:
 136:	ec e7       	ldi	r30, 0x7C	; 124
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	20 81       	ld	r18, Z
 13c:	20 7e       	andi	r18, 0xE0	; 224
 13e:	28 2b       	or	r18, r24
 140:	20 83       	st	Z, r18
 142:	eb e7       	ldi	r30, 0x7B	; 123
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	20 81       	ld	r18, Z
 148:	96 95       	lsr	r25
 14a:	87 95       	ror	r24
 14c:	96 95       	lsr	r25
 14e:	87 95       	ror	r24
 150:	92 2f       	mov	r25, r18
 152:	97 7f       	andi	r25, 0xF7	; 247
 154:	89 2b       	or	r24, r25
 156:	80 83       	st	Z, r24
 158:	ea e7       	ldi	r30, 0x7A	; 122
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	80 64       	ori	r24, 0x40	; 64
 160:	80 83       	st	Z, r24
 162:	80 81       	ld	r24, Z
 164:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 168:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	79 2f       	mov	r23, r25
 170:	68 2b       	or	r22, r24
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 d3       	rcall	.+1540   	; 0x77c <__floatunsisf>
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	40 e8       	ldi	r20, 0x80	; 128
 17e:	5a e3       	ldi	r21, 0x3A	; 58
 180:	b3 c3       	rjmp	.+1894   	; 0x8e8 <__mulsf3>
 182:	08 95       	ret

00000184 <__vector_29>:
}

/* NOTE: Local function implementations */
ISR(ADC_vect)
{
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	0b b6       	in	r0, 0x3b	; 59
 190:	0f 92       	push	r0
 192:	2f 93       	push	r18
 194:	3f 93       	push	r19
 196:	4f 93       	push	r20
 198:	5f 93       	push	r21
 19a:	6f 93       	push	r22
 19c:	7f 93       	push	r23
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
 1a2:	af 93       	push	r26
 1a4:	bf 93       	push	r27
 1a6:	ef 93       	push	r30
 1a8:	ff 93       	push	r31
    readInterrupt = ADCL;
 1aa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 1ae:	28 2f       	mov	r18, r24
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	30 93 73 02 	sts	0x0273, r19	; 0x800273 <readInterrupt+0x1>
 1b6:	20 93 72 02 	sts	0x0272, r18	; 0x800272 <readInterrupt>
    readInterrupt = readInterrupt | (ADCH << 8);
 1ba:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	98 2f       	mov	r25, r24
 1c2:	88 27       	eor	r24, r24
 1c4:	82 2b       	or	r24, r18
 1c6:	93 2b       	or	r25, r19
 1c8:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <readInterrupt+0x1>
 1cc:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <readInterrupt>

    interruptCallback(readInterrupt);
 1d0:	e0 91 70 02 	lds	r30, 0x0270	; 0x800270 <__data_end>
 1d4:	f0 91 71 02 	lds	r31, 0x0271	; 0x800271 <__data_end+0x1>
 1d8:	19 95       	eicall
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	7f 91       	pop	r23
 1e8:	6f 91       	pop	r22
 1ea:	5f 91       	pop	r21
 1ec:	4f 91       	pop	r20
 1ee:	3f 91       	pop	r19
 1f0:	2f 91       	pop	r18
 1f2:	0f 90       	pop	r0
 1f4:	0b be       	out	0x3b, r0	; 59
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <initDebugTimer>:
	Uses Timer5 with a prescaler of 256, and enables overflow interrupt
*/
void initDebugTimer()
{
	//Prescaler 256
	TCCR5B |= (1<<CS52) | (1<<CS50);
 200:	e1 e2       	ldi	r30, 0x21	; 33
 202:	f1 e0       	ldi	r31, 0x01	; 1
 204:	80 81       	ld	r24, Z
 206:	85 60       	ori	r24, 0x05	; 5
 208:	80 83       	st	Z, r24
	
	//15625 TOP Value for UPDATE_FREQUENCY
	TCNT5 = 65535 - (F_CPU / (1024*UPDATE_FREQUENCY));
 20a:	85 ee       	ldi	r24, 0xE5	; 229
 20c:	99 ef       	ldi	r25, 0xF9	; 249
 20e:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
 212:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
	
	//Enable Timer Overflow Interrupt
	TIMSK5 = (1<<TOIE5);
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7c0073>
 21c:	08 95       	ret

0000021e <initDebugUSART>:
	8-bits, 25000 Baud Rate
*/
void initDebugUSART()
{
	//Enable RX and TX
	UCSR0B = (1<<TXEN0) | (1<<RXEN0);
 21e:	88 e1       	ldi	r24, 0x18	; 24
 220:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	
	//Set Communication Modes
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);	//8 Data bits
 224:	86 e0       	ldi	r24, 0x06	; 6
 226:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
	UBRR0 = 3;							//250000 Baud Rate	
 22a:	83 e0       	ldi	r24, 0x03	; 3
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 232:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 236:	08 95       	ret

00000238 <initDebug>:
	Configures the USART registers for data transmission, Configures the
	Timer registers, and enables interrupts.
*/
void initDebug()
{
	initDebugUSART();
 238:	f2 df       	rcall	.-28     	; 0x21e <initDebugUSART>
	initDebugTimer();
 23a:	e2 df       	rcall	.-60     	; 0x200 <initDebugTimer>
 23c:	78 94       	sei
	sei();
 23e:	08 95       	ret

00000240 <UART0Out>:
 240:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	Sends 8-bit unsigned integer out UART0
*/
void UART0Out(uint8_t data) 
{
	//Wait for previous transmission to be done
	while(!(UCSR0A & (1<<UDRE0)));
 244:	95 ff       	sbrs	r25, 5
 246:	fc cf       	rjmp	.-8      	; 0x240 <UART0Out>
	
	//Set register for next transmission
	UDR0 = data;	
 248:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 24c:	08 95       	ret

0000024e <sendStopBit>:
	Sends 0x0A to signify stop
*/
void sendStopBit()
{
	//Wait for previous transmission to be done
	while(!(UCSR0A & (1<<UDRE0)));
 24e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 252:	85 ff       	sbrs	r24, 5
 254:	fc cf       	rjmp	.-8      	; 0x24e <sendStopBit>
	
	//Set register for next transmission
	UDR0 = 0x0A;
 256:	8a e0       	ldi	r24, 0x0A	; 10
 258:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 25c:	08 95       	ret

0000025e <UART0PrintString>:

Description:
	Continues to send data until reaching null character
*/
void UART0PrintString(char *strPtr)
{
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	ec 01       	movw	r28, r24
	while(*strPtr != 0x00) 
 264:	02 c0       	rjmp	.+4      	; 0x26a <UART0PrintString+0xc>
	{
		UART0Out(*strPtr);
 266:	ec df       	rcall	.-40     	; 0x240 <UART0Out>
		strPtr ++;
 268:	21 96       	adiw	r28, 0x01	; 1
Description:
	Continues to send data until reaching null character
*/
void UART0PrintString(char *strPtr)
{
	while(*strPtr != 0x00) 
 26a:	88 81       	ld	r24, Y
 26c:	81 11       	cpse	r24, r1
 26e:	fb cf       	rjmp	.-10     	; 0x266 <UART0PrintString+0x8>
	{
		UART0Out(*strPtr);
		strPtr ++;
	}
}
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <sendPortData>:
Description:
	Loops through portAddr array and sends
	out data at each address
*/
void sendPortData()
{	
 276:	cf 93       	push	r28
	for (uint8_t i=0; i<18; i++)
 278:	c0 e0       	ldi	r28, 0x00	; 0
 27a:	0c c0       	rjmp	.+24     	; 0x294 <sendPortData+0x1e>
	{
		UART0Out(*portAddr[i]);
 27c:	ec 2f       	mov	r30, r28
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	ee 0f       	add	r30, r30
 282:	ff 1f       	adc	r31, r31
 284:	ec 5b       	subi	r30, 0xBC	; 188
 286:	fd 4f       	sbci	r31, 0xFD	; 253
 288:	01 90       	ld	r0, Z+
 28a:	f0 81       	ld	r31, Z
 28c:	e0 2d       	mov	r30, r0
 28e:	80 81       	ld	r24, Z
 290:	d7 df       	rcall	.-82     	; 0x240 <UART0Out>
	Loops through portAddr array and sends
	out data at each address
*/
void sendPortData()
{	
	for (uint8_t i=0; i<18; i++)
 292:	cf 5f       	subi	r28, 0xFF	; 255
 294:	c2 31       	cpi	r28, 0x12	; 18
 296:	90 f3       	brcs	.-28     	; 0x27c <sendPortData+0x6>
	{
		UART0Out(*portAddr[i]);
	}
}
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <sendTimerData>:
Description:
	Loops though timerAddr array and sends
	out data at each address
*/
void sendTimerData()
{
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
	//Timer 0
	for (uint8_t i=0; i<3; i++) 
 2a0:	c0 e0       	ldi	r28, 0x00	; 0
 2a2:	0c c0       	rjmp	.+24     	; 0x2bc <sendTimerData+0x20>
	{
		UART0Out(*timerAddr[i]);
 2a4:	ec 2f       	mov	r30, r28
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	ee 0f       	add	r30, r30
 2aa:	ff 1f       	adc	r31, r31
 2ac:	e8 5e       	subi	r30, 0xE8	; 232
 2ae:	fd 4f       	sbci	r31, 0xFD	; 253
 2b0:	01 90       	ld	r0, Z+
 2b2:	f0 81       	ld	r31, Z
 2b4:	e0 2d       	mov	r30, r0
 2b6:	80 81       	ld	r24, Z
 2b8:	c3 df       	rcall	.-122    	; 0x240 <UART0Out>
	out data at each address
*/
void sendTimerData()
{
	//Timer 0
	for (uint8_t i=0; i<3; i++) 
 2ba:	cf 5f       	subi	r28, 0xFF	; 255
 2bc:	c3 30       	cpi	r28, 0x03	; 3
 2be:	90 f3       	brcs	.-28     	; 0x2a4 <sendTimerData+0x8>
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR0A
	UART0Out(*timerAddr[3]);
 2c0:	c8 e1       	ldi	r28, 0x18	; 24
 2c2:	d2 e0       	ldi	r29, 0x02	; 2
 2c4:	ee 81       	ldd	r30, Y+6	; 0x06
 2c6:	ff 81       	ldd	r31, Y+7	; 0x07
 2c8:	80 81       	ld	r24, Z
 2ca:	ba df       	rcall	.-140    	; 0x240 <UART0Out>
	UART0Out(*(timerAddr[3]+1));
 2cc:	ee 81       	ldd	r30, Y+6	; 0x06
 2ce:	ff 81       	ldd	r31, Y+7	; 0x07
 2d0:	81 81       	ldd	r24, Z+1	; 0x01
 2d2:	b6 df       	rcall	.-148    	; 0x240 <UART0Out>
	
	//OCR0B
	UART0Out(*timerAddr[4]);
 2d4:	e8 85       	ldd	r30, Y+8	; 0x08
 2d6:	f9 85       	ldd	r31, Y+9	; 0x09
 2d8:	80 81       	ld	r24, Z
 2da:	b2 df       	rcall	.-156    	; 0x240 <UART0Out>
	UART0Out(*(timerAddr[4]+1));
 2dc:	e8 85       	ldd	r30, Y+8	; 0x08
 2de:	f9 85       	ldd	r31, Y+9	; 0x09
 2e0:	81 81       	ldd	r24, Z+1	; 0x01
 2e2:	ae df       	rcall	.-164    	; 0x240 <UART0Out>
 2e4:	c5 e0       	ldi	r28, 0x05	; 5
	
	//Timer 1
	for (uint8_t i=5; i<8; i++)
 2e6:	0c c0       	rjmp	.+24     	; 0x300 <sendTimerData+0x64>
 2e8:	ec 2f       	mov	r30, r28
	{
		UART0Out(*timerAddr[i]);
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	ee 0f       	add	r30, r30
 2ee:	ff 1f       	adc	r31, r31
 2f0:	e8 5e       	subi	r30, 0xE8	; 232
 2f2:	fd 4f       	sbci	r31, 0xFD	; 253
 2f4:	01 90       	ld	r0, Z+
 2f6:	f0 81       	ld	r31, Z
 2f8:	e0 2d       	mov	r30, r0
 2fa:	80 81       	ld	r24, Z
 2fc:	a1 df       	rcall	.-190    	; 0x240 <UART0Out>
 2fe:	cf 5f       	subi	r28, 0xFF	; 255
	//OCR0B
	UART0Out(*timerAddr[4]);
	UART0Out(*(timerAddr[4]+1));
	
	//Timer 1
	for (uint8_t i=5; i<8; i++)
 300:	c8 30       	cpi	r28, 0x08	; 8
 302:	90 f3       	brcs	.-28     	; 0x2e8 <sendTimerData+0x4c>
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR1A
	UART0Out(*timerAddr[8]);
 304:	c8 e1       	ldi	r28, 0x18	; 24
 306:	d2 e0       	ldi	r29, 0x02	; 2
 308:	e8 89       	ldd	r30, Y+16	; 0x10
 30a:	f9 89       	ldd	r31, Y+17	; 0x11
 30c:	80 81       	ld	r24, Z
 30e:	98 df       	rcall	.-208    	; 0x240 <UART0Out>
	UART0Out(*(timerAddr[8]+1));
 310:	e8 89       	ldd	r30, Y+16	; 0x10
 312:	f9 89       	ldd	r31, Y+17	; 0x11
 314:	81 81       	ldd	r24, Z+1	; 0x01
 316:	94 df       	rcall	.-216    	; 0x240 <UART0Out>
	
	//OCR1B
	UART0Out(*timerAddr[9]);
 318:	ea 89       	ldd	r30, Y+18	; 0x12
 31a:	fb 89       	ldd	r31, Y+19	; 0x13
 31c:	80 81       	ld	r24, Z
 31e:	90 df       	rcall	.-224    	; 0x240 <UART0Out>
	UART0Out(*(timerAddr[9]+1));
 320:	ea 89       	ldd	r30, Y+18	; 0x12
 322:	fb 89       	ldd	r31, Y+19	; 0x13
 324:	81 81       	ldd	r24, Z+1	; 0x01
 326:	8c df       	rcall	.-232    	; 0x240 <UART0Out>
	
	//OCR1C
	UART0Out(*timerAddr[10]);
 328:	ec 89       	ldd	r30, Y+20	; 0x14
 32a:	fd 89       	ldd	r31, Y+21	; 0x15
 32c:	80 81       	ld	r24, Z
 32e:	88 df       	rcall	.-240    	; 0x240 <UART0Out>
 330:	ec 89       	ldd	r30, Y+20	; 0x14
	UART0Out(*(timerAddr[10]+1));
 332:	fd 89       	ldd	r31, Y+21	; 0x15
 334:	81 81       	ldd	r24, Z+1	; 0x01
 336:	84 df       	rcall	.-248    	; 0x240 <UART0Out>
 338:	cb e0       	ldi	r28, 0x0B	; 11
 33a:	0c c0       	rjmp	.+24     	; 0x354 <sendTimerData+0xb8>
	
	//Timer 2
	for (uint8_t i=11; i<14; i++)
 33c:	ec 2f       	mov	r30, r28
	{
		UART0Out(*timerAddr[i]);
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	ee 0f       	add	r30, r30
 342:	ff 1f       	adc	r31, r31
 344:	e8 5e       	subi	r30, 0xE8	; 232
 346:	fd 4f       	sbci	r31, 0xFD	; 253
 348:	01 90       	ld	r0, Z+
 34a:	f0 81       	ld	r31, Z
 34c:	e0 2d       	mov	r30, r0
 34e:	80 81       	ld	r24, Z
 350:	77 df       	rcall	.-274    	; 0x240 <UART0Out>
 352:	cf 5f       	subi	r28, 0xFF	; 255
	//OCR1C
	UART0Out(*timerAddr[10]);
	UART0Out(*(timerAddr[10]+1));
	
	//Timer 2
	for (uint8_t i=11; i<14; i++)
 354:	ce 30       	cpi	r28, 0x0E	; 14
 356:	90 f3       	brcs	.-28     	; 0x33c <sendTimerData+0xa0>
 358:	c8 e1       	ldi	r28, 0x18	; 24
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR2A
	UART0Out(*timerAddr[14]);
 35a:	d2 e0       	ldi	r29, 0x02	; 2
 35c:	ec 8d       	ldd	r30, Y+28	; 0x1c
 35e:	fd 8d       	ldd	r31, Y+29	; 0x1d
 360:	80 81       	ld	r24, Z
 362:	6e df       	rcall	.-292    	; 0x240 <UART0Out>
	UART0Out(*(timerAddr[14]+1));
 364:	ec 8d       	ldd	r30, Y+28	; 0x1c
 366:	fd 8d       	ldd	r31, Y+29	; 0x1d
 368:	81 81       	ldd	r24, Z+1	; 0x01
 36a:	6a df       	rcall	.-300    	; 0x240 <UART0Out>
 36c:	ee 8d       	ldd	r30, Y+30	; 0x1e
	
	//OCR2B
	UART0Out(*timerAddr[15]);
 36e:	ff 8d       	ldd	r31, Y+31	; 0x1f
 370:	80 81       	ld	r24, Z
 372:	66 df       	rcall	.-308    	; 0x240 <UART0Out>
 374:	ee 8d       	ldd	r30, Y+30	; 0x1e
 376:	ff 8d       	ldd	r31, Y+31	; 0x1f
	UART0Out(*(timerAddr[15]+1));
 378:	81 81       	ldd	r24, Z+1	; 0x01
 37a:	62 df       	rcall	.-316    	; 0x240 <UART0Out>
 37c:	c0 e1       	ldi	r28, 0x10	; 16
 37e:	0c c0       	rjmp	.+24     	; 0x398 <sendTimerData+0xfc>
	
	//Timer 3
	for (uint8_t i=16; i<19; i++)
 380:	ec 2f       	mov	r30, r28
 382:	f0 e0       	ldi	r31, 0x00	; 0
	{
		UART0Out(*timerAddr[i]);
 384:	ee 0f       	add	r30, r30
 386:	ff 1f       	adc	r31, r31
 388:	e8 5e       	subi	r30, 0xE8	; 232
 38a:	fd 4f       	sbci	r31, 0xFD	; 253
 38c:	01 90       	ld	r0, Z+
 38e:	f0 81       	ld	r31, Z
 390:	e0 2d       	mov	r30, r0
 392:	80 81       	ld	r24, Z
 394:	55 df       	rcall	.-342    	; 0x240 <UART0Out>
 396:	cf 5f       	subi	r28, 0xFF	; 255
	//OCR2B
	UART0Out(*timerAddr[15]);
	UART0Out(*(timerAddr[15]+1));
	
	//Timer 3
	for (uint8_t i=16; i<19; i++)
 398:	c3 31       	cpi	r28, 0x13	; 19
 39a:	90 f3       	brcs	.-28     	; 0x380 <sendTimerData+0xe4>
	{
		UART0Out(*timerAddr[i]);
	}
	
	//OCR3A
	UART0Out(*timerAddr[19]);
 39c:	c8 e1       	ldi	r28, 0x18	; 24
 39e:	d2 e0       	ldi	r29, 0x02	; 2
 3a0:	ee a1       	ldd	r30, Y+38	; 0x26
 3a2:	ff a1       	ldd	r31, Y+39	; 0x27
 3a4:	80 81       	ld	r24, Z
 3a6:	4c df       	rcall	.-360    	; 0x240 <UART0Out>
	UART0Out(*(timerAddr[19]+1));
 3a8:	ee a1       	ldd	r30, Y+38	; 0x26
 3aa:	ff a1       	ldd	r31, Y+39	; 0x27
 3ac:	81 81       	ldd	r24, Z+1	; 0x01
 3ae:	48 df       	rcall	.-368    	; 0x240 <UART0Out>
	
	//OCR3B
	UART0Out(*timerAddr[20]);
 3b0:	e8 a5       	ldd	r30, Y+40	; 0x28
 3b2:	f9 a5       	ldd	r31, Y+41	; 0x29
 3b4:	80 81       	ld	r24, Z
 3b6:	44 df       	rcall	.-376    	; 0x240 <UART0Out>
 3b8:	e8 a5       	ldd	r30, Y+40	; 0x28
	UART0Out(*(timerAddr[20]+1));
 3ba:	f9 a5       	ldd	r31, Y+41	; 0x29
 3bc:	81 81       	ldd	r24, Z+1	; 0x01
 3be:	40 df       	rcall	.-384    	; 0x240 <UART0Out>
 3c0:	ea a5       	ldd	r30, Y+42	; 0x2a
 3c2:	fb a5       	ldd	r31, Y+43	; 0x2b
	
	//OCR3C
	UART0Out(*timerAddr[21]);
 3c4:	80 81       	ld	r24, Z
 3c6:	3c df       	rcall	.-392    	; 0x240 <UART0Out>
 3c8:	ea a5       	ldd	r30, Y+42	; 0x2a
 3ca:	fb a5       	ldd	r31, Y+43	; 0x2b
 3cc:	81 81       	ldd	r24, Z+1	; 0x01
	UART0Out(*(timerAddr[21]+1));
 3ce:	38 df       	rcall	.-400    	; 0x240 <UART0Out>
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	08 95       	ret

000003d6 <sendUSARTData>:
 3d6:	cf 93       	push	r28
}
 3d8:	c0 e0       	ldi	r28, 0x00	; 0
 3da:	0c c0       	rjmp	.+24     	; 0x3f4 <sendUSARTData+0x1e>
 3dc:	ec 2f       	mov	r30, r28
*/
void sendUSARTData()
{
	for (uint8_t i=0; i<6; i++)
	{
		UART0Out(*USARTAddr[i]);
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	ee 0f       	add	r30, r30
 3e2:	ff 1f       	adc	r31, r31
 3e4:	e4 5f       	subi	r30, 0xF4	; 244
 3e6:	fd 4f       	sbci	r31, 0xFD	; 253
 3e8:	01 90       	ld	r0, Z+
 3ea:	f0 81       	ld	r31, Z
 3ec:	e0 2d       	mov	r30, r0
 3ee:	80 81       	ld	r24, Z
 3f0:	27 df       	rcall	.-434    	; 0x240 <UART0Out>
	Loops though USARTAddr array and sends
	out data at each address
*/
void sendUSARTData()
{
	for (uint8_t i=0; i<6; i++)
 3f2:	cf 5f       	subi	r28, 0xFF	; 255
 3f4:	c6 30       	cpi	r28, 0x06	; 6
 3f6:	90 f3       	brcs	.-28     	; 0x3dc <sendUSARTData+0x6>
	{
		UART0Out(*USARTAddr[i]);
	}
}
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

000003fc <sendADCData>:
Description:
	Loops though ADCAddr array and sends
	out data at each address
*/
void sendADCData()
{
 3fc:	cf 93       	push	r28
	for (uint8_t i=0; i<3; i++)
 3fe:	c0 e0       	ldi	r28, 0x00	; 0
 400:	0c c0       	rjmp	.+24     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	{
		UART0Out(*ADCAddr[i]);
 402:	ec 2f       	mov	r30, r28
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	ee 0f       	add	r30, r30
 408:	ff 1f       	adc	r31, r31
 40a:	ea 5f       	subi	r30, 0xFA	; 250
 40c:	fd 4f       	sbci	r31, 0xFD	; 253
 40e:	01 90       	ld	r0, Z+
 410:	f0 81       	ld	r31, Z
 412:	e0 2d       	mov	r30, r0
 414:	80 81       	ld	r24, Z
 416:	14 df       	rcall	.-472    	; 0x240 <UART0Out>
	Loops though ADCAddr array and sends
	out data at each address
*/
void sendADCData()
{
	for (uint8_t i=0; i<3; i++)
 418:	cf 5f       	subi	r28, 0xFF	; 255
 41a:	c3 30       	cpi	r28, 0x03	; 3
 41c:	90 f3       	brcs	.-28     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	{
		UART0Out(*ADCAddr[i]);
	}
}
 41e:	cf 91       	pop	r28
 420:	08 95       	ret

00000422 <sendINTData>:
Description:
	Loops though intAddr array and sends
	out data at each address
*/
void sendINTData()
{
 422:	cf 93       	push	r28
	for (uint8_t i=0; i<3; i++)
 424:	c0 e0       	ldi	r28, 0x00	; 0
 426:	0c c0       	rjmp	.+24     	; 0x440 <sendINTData+0x1e>
	{
		UART0Out(*intAddr[i]);
 428:	ec 2f       	mov	r30, r28
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	ee 0f       	add	r30, r30
 42e:	ff 1f       	adc	r31, r31
 430:	e0 50       	subi	r30, 0x00	; 0
 432:	fe 4f       	sbci	r31, 0xFE	; 254
 434:	01 90       	ld	r0, Z+
 436:	f0 81       	ld	r31, Z
 438:	e0 2d       	mov	r30, r0
 43a:	80 81       	ld	r24, Z
 43c:	01 df       	rcall	.-510    	; 0x240 <UART0Out>
	Loops though intAddr array and sends
	out data at each address
*/
void sendINTData()
{
	for (uint8_t i=0; i<3; i++)
 43e:	cf 5f       	subi	r28, 0xFF	; 255
 440:	c3 30       	cpi	r28, 0x03	; 3
 442:	90 f3       	brcs	.-28     	; 0x428 <sendINTData+0x6>
	{
		UART0Out(*intAddr[i]);
	}
}
 444:	cf 91       	pop	r28
 446:	08 95       	ret

00000448 <sendRegisterData>:
Description:
	Calls each send___Data() function
*/
void sendRegisterData() 
{
	UART0PrintString(st);
 448:	8c e6       	ldi	r24, 0x6C	; 108
 44a:	92 e0       	ldi	r25, 0x02	; 2
 44c:	08 df       	rcall	.-496    	; 0x25e <UART0PrintString>
	sendStopBit();
 44e:	ff de       	rcall	.-514    	; 0x24e <sendStopBit>
	
	sendPortData();
 450:	12 df       	rcall	.-476    	; 0x276 <sendPortData>
	sendTimerData();
 452:	24 df       	rcall	.-440    	; 0x29c <sendTimerData>
	sendUSARTData();
 454:	c0 df       	rcall	.-128    	; 0x3d6 <sendUSARTData>
	sendADCData();
 456:	d2 df       	rcall	.-92     	; 0x3fc <sendADCData>
	sendINTData();
 458:	e4 df       	rcall	.-56     	; 0x422 <sendINTData>
 45a:	88 e6       	ldi	r24, 0x68	; 104
	
	UART0PrintString(en);
 45c:	92 e0       	ldi	r25, 0x02	; 2
 45e:	ff de       	rcall	.-514    	; 0x25e <UART0PrintString>
 460:	f6 ce       	rjmp	.-532    	; 0x24e <sendStopBit>
 462:	08 95       	ret

00000464 <__vector_50>:
	sendStopBit();
 464:	1f 92       	push	r1
 466:	0f 92       	push	r0
 468:	0f b6       	in	r0, 0x3f	; 63

Description:
	Resets counter value then sends register data
*/
ISR(TIMER5_OVF_vect) 
{
 46a:	0f 92       	push	r0
 46c:	11 24       	eor	r1, r1
 46e:	0b b6       	in	r0, 0x3b	; 59
 470:	0f 92       	push	r0
 472:	2f 93       	push	r18
 474:	3f 93       	push	r19
 476:	4f 93       	push	r20
 478:	5f 93       	push	r21
 47a:	6f 93       	push	r22
 47c:	7f 93       	push	r23
 47e:	8f 93       	push	r24
 480:	9f 93       	push	r25
 482:	af 93       	push	r26
 484:	bf 93       	push	r27
 486:	ef 93       	push	r30
 488:	ff 93       	push	r31
	TCNT5 = 65535 - (F_CPU / (1024*UPDATE_FREQUENCY));
 48a:	85 ee       	ldi	r24, 0xE5	; 229
 48c:	99 ef       	ldi	r25, 0xF9	; 249
 48e:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
 492:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
	sendRegisterData();
 496:	d8 df       	rcall	.-80     	; 0x448 <sendRegisterData>
}
 498:	ff 91       	pop	r31
 49a:	ef 91       	pop	r30
 49c:	bf 91       	pop	r27
 49e:	af 91       	pop	r26
 4a0:	9f 91       	pop	r25
 4a2:	8f 91       	pop	r24
 4a4:	7f 91       	pop	r23
 4a6:	6f 91       	pop	r22
 4a8:	5f 91       	pop	r21
 4aa:	4f 91       	pop	r20
 4ac:	3f 91       	pop	r19
 4ae:	2f 91       	pop	r18
 4b0:	0f 90       	pop	r0
 4b2:	0b be       	out	0x3b, r0	; 59
 4b4:	0f 90       	pop	r0
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	0f 90       	pop	r0
 4ba:	1f 90       	pop	r1
 4bc:	18 95       	reti

000004be <DLY_init>:
{
    return tick;
}

void DLY_setTick(uint16_t t){
    tick = t;
 4be:	16 bc       	out	0x26, r1	; 38
 4c0:	14 bc       	out	0x24, r1	; 36
 4c2:	15 bc       	out	0x25, r1	; 37
 4c4:	17 bc       	out	0x27, r1	; 39
 4c6:	08 95       	ret

000004c8 <DLY_ms>:
 4c8:	8f 92       	push	r8
 4ca:	9f 92       	push	r9
 4cc:	af 92       	push	r10
 4ce:	bf 92       	push	r11
 4d0:	cf 92       	push	r12
 4d2:	df 92       	push	r13
 4d4:	ef 92       	push	r14
 4d6:	ff 92       	push	r15
 4d8:	4b 01       	movw	r8, r22
 4da:	5c 01       	movw	r10, r24
 4dc:	20 e0       	ldi	r18, 0x00	; 0
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	4a e7       	ldi	r20, 0x7A	; 122
 4e2:	54 e4       	ldi	r21, 0x44	; 68
 4e4:	b7 d0       	rcall	.+366    	; 0x654 <__divsf3>
 4e6:	20 e0       	ldi	r18, 0x00	; 0
 4e8:	34 e2       	ldi	r19, 0x24	; 36
 4ea:	44 e7       	ldi	r20, 0x74	; 116
 4ec:	5b e4       	ldi	r21, 0x4B	; 75
 4ee:	fc d1       	rcall	.+1016   	; 0x8e8 <__mulsf3>
 4f0:	20 e0       	ldi	r18, 0x00	; 0
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	40 e8       	ldi	r20, 0x80	; 128
 4f6:	5a e3       	ldi	r21, 0x3A	; 58
 4f8:	f7 d1       	rcall	.+1006   	; 0x8e8 <__mulsf3>
 4fa:	14 d1       	rcall	.+552    	; 0x724 <__fixunssfsi>
 4fc:	f6 2e       	mov	r15, r22
 4fe:	20 e0       	ldi	r18, 0x00	; 0
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	40 e8       	ldi	r20, 0x80	; 128
 504:	51 e4       	ldi	r21, 0x41	; 65
 506:	c5 01       	movw	r24, r10
 508:	b4 01       	movw	r22, r8
 50a:	a0 d0       	rcall	.+320    	; 0x64c <__cmpsf2>
 50c:	18 16       	cp	r1, r24
 50e:	64 f0       	brlt	.+24     	; 0x528 <DLY_ms+0x60>
 510:	f7 bc       	out	0x27, r15	; 39
 512:	85 e0       	ldi	r24, 0x05	; 5
 514:	85 bd       	out	0x25, r24	; 37
 516:	a9 9b       	sbis	0x15, 1	; 21
 518:	fe cf       	rjmp	.-4      	; 0x516 <DLY_ms+0x4e>
 51a:	15 bc       	out	0x25, r1	; 37
 51c:	85 b3       	in	r24, 0x15	; 21
 51e:	82 60       	ori	r24, 0x02	; 2
 520:	85 bb       	out	0x15, r24	; 21
 522:	16 bc       	out	0x26, r1	; 38
 524:	17 bc       	out	0x27, r1	; 39
 526:	1f c0       	rjmp	.+62     	; 0x566 <DLY_ms+0x9e>
 528:	8f e0       	ldi	r24, 0x0F	; 15
 52a:	87 bd       	out	0x27, r24	; 39
 52c:	c1 2c       	mov	r12, r1
 52e:	d1 2c       	mov	r13, r1
 530:	76 01       	movw	r14, r12
 532:	0e c0       	rjmp	.+28     	; 0x550 <DLY_ms+0x88>
 534:	85 e0       	ldi	r24, 0x05	; 5
 536:	85 bd       	out	0x25, r24	; 37
 538:	a9 9b       	sbis	0x15, 1	; 21
 53a:	fe cf       	rjmp	.-4      	; 0x538 <DLY_ms+0x70>
 53c:	15 bc       	out	0x25, r1	; 37
 53e:	85 b3       	in	r24, 0x15	; 21
 540:	82 60       	ori	r24, 0x02	; 2
 542:	85 bb       	out	0x15, r24	; 21
 544:	16 bc       	out	0x26, r1	; 38
 546:	8f ef       	ldi	r24, 0xFF	; 255
 548:	c8 1a       	sub	r12, r24
 54a:	d8 0a       	sbc	r13, r24
 54c:	e8 0a       	sbc	r14, r24
 54e:	f8 0a       	sbc	r15, r24
 550:	c7 01       	movw	r24, r14
 552:	b6 01       	movw	r22, r12
 554:	13 d1       	rcall	.+550    	; 0x77c <__floatunsisf>
 556:	9b 01       	movw	r18, r22
 558:	ac 01       	movw	r20, r24
 55a:	c5 01       	movw	r24, r10
 55c:	b4 01       	movw	r22, r8
 55e:	c0 d1       	rcall	.+896    	; 0x8e0 <__gesf2>
 560:	18 16       	cp	r1, r24
 562:	44 f3       	brlt	.-48     	; 0x534 <DLY_ms+0x6c>
 564:	17 bc       	out	0x27, r1	; 39
 566:	ff 90       	pop	r15
 568:	ef 90       	pop	r14
 56a:	df 90       	pop	r13
 56c:	cf 90       	pop	r12
 56e:	bf 90       	pop	r11
 570:	af 90       	pop	r10
 572:	9f 90       	pop	r9
 574:	8f 90       	pop	r8
 576:	08 95       	ret

00000578 <__vector_21>:
}

ISR(TIMER0_COMPA_vect)
{
 578:	1f 92       	push	r1
 57a:	0f 92       	push	r0
 57c:	0f b6       	in	r0, 0x3f	; 63
 57e:	0f 92       	push	r0
 580:	11 24       	eor	r1, r1
 582:	8f 93       	push	r24
 584:	9f 93       	push	r25
    TCNT0 = 0;
 586:	16 bc       	out	0x26, r1	; 38
    tick++;
 588:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <tick>
 58c:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <tick+0x1>
 590:	01 96       	adiw	r24, 0x01	; 1
 592:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <tick+0x1>
 596:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <tick>
}
 59a:	9f 91       	pop	r25
 59c:	8f 91       	pop	r24
 59e:	0f 90       	pop	r0
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	0f 90       	pop	r0
 5a4:	1f 90       	pop	r1
 5a6:	18 95       	reti

000005a8 <PWM_init>:

/* NOTE: Local function implementations */
void PWM_init(void)
{
    // set up PORTB.5 as an output and 0V
    DDRB |= 0x20;
 5a8:	84 b1       	in	r24, 0x04	; 4
 5aa:	80 62       	ori	r24, 0x20	; 32
 5ac:	84 b9       	out	0x04, r24	; 4
    PORTB |= PORTB & ~0x20;
 5ae:	85 b1       	in	r24, 0x05	; 5
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	8f 7d       	andi	r24, 0xDF	; 223
 5b4:	95 b1       	in	r25, 0x05	; 5
 5b6:	89 2b       	or	r24, r25
 5b8:	85 b9       	out	0x05, r24	; 5

    // 512 @ 8
    // set frequency to 3900hz
    ICR1 = 512;
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	92 e0       	ldi	r25, 0x02	; 2
 5be:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7c0087>
 5c2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7c0086>

    // fast pwm set on compare
    TCCR1A = 0x02;
 5c6:	82 e0       	ldi	r24, 0x02	; 2
 5c8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    // prescaler set to 8
    TCCR1B = 0x1a;
 5cc:	8a e1       	ldi	r24, 0x1A	; 26
 5ce:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 5d2:	08 95       	ret

000005d4 <PWM_dutyCycle>:
}

void PWM_dutyCycle(double percent)
{
    OCR1A = percent * 512;
 5d4:	20 e0       	ldi	r18, 0x00	; 0
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	40 e0       	ldi	r20, 0x00	; 0
 5da:	54 e4       	ldi	r21, 0x44	; 68
 5dc:	85 d1       	rcall	.+778    	; 0x8e8 <__mulsf3>
 5de:	a2 d0       	rcall	.+324    	; 0x724 <__fixunssfsi>
 5e0:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 5e4:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 5e8:	08 95       	ret

000005ea <PWM_enable>:
}

void PWM_enable(void)
{
    TCCR1A |= 0x80;
 5ea:	e0 e8       	ldi	r30, 0x80	; 128
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	80 81       	ld	r24, Z
 5f0:	80 68       	ori	r24, 0x80	; 128
 5f2:	80 83       	st	Z, r24
 5f4:	08 95       	ret

000005f6 <PWM_disable>:
}

void PWM_disable(void)
{
    OCR1A = 0x00;
 5f6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 5fa:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>

    TCCR1A = (TCCR1A & ~0x80);
 5fe:	e0 e8       	ldi	r30, 0x80	; 128
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	80 81       	ld	r24, Z
 604:	8f 77       	andi	r24, 0x7F	; 127
 606:	80 83       	st	Z, r24
 608:	08 95       	ret

0000060a <IO_init>:

/* NOTE: Function implementations */
void IO_init(void)
{
    // set port B.7 as an output
    DDRB  = 0x80;
 60a:	80 e8       	ldi	r24, 0x80	; 128
 60c:	84 b9       	out	0x04, r24	; 4
    PORTB = 0x00;
 60e:	15 b8       	out	0x05, r1	; 5

    // set port A.0 as an input
    DDRA  = 0x00;
 610:	11 b8       	out	0x01, r1	; 1
    PORTA = 0x01;
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	82 b9       	out	0x02, r24	; 2

    // set port F.0 as an input
    DDRF  = 0x00;
 616:	10 ba       	out	0x10, r1	; 16
    PORTF = 0x00;
 618:	11 ba       	out	0x11, r1	; 17
 61a:	08 95       	ret

0000061c <main>:

/* NOTE: Application implementation */
// the main loop of the function, provided to us
int main(void)
{
    IO_init();
 61c:	f6 df       	rcall	.-20     	; 0x60a <IO_init>
    PWM_init();
 61e:	c4 df       	rcall	.-120    	; 0x5a8 <PWM_init>
    DLY_init();
 620:	4e df       	rcall	.-356    	; 0x4be <DLY_init>
    ADC_init();
 622:	80 dd       	rcall	.-1280   	; 0x124 <ADC_init>

    initDebug();
 624:	09 de       	rcall	.-1006   	; 0x238 <initDebug>
 626:	00 9b       	sbis	0x00, 0	; 0

    while(1)
    {
        if(PINA & 0x01)
 628:	06 c0       	rjmp	.+12     	; 0x636 <main+0x1a>
        {
            PWM_enable();
 62a:	df df       	rcall	.-66     	; 0x5ea <PWM_enable>

            // set pwm to pot adc
            PWM_dutyCycle(ADC_getTenBitValue(0x00));
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	82 dd       	rcall	.-1276   	; 0x136 <ADC_getTenBitValue>
 632:	d0 df       	rcall	.-96     	; 0x5d4 <PWM_dutyCycle>
 634:	f8 cf       	rjmp	.-16     	; 0x626 <main+0xa>
 636:	df df       	rcall	.-66     	; 0x5f6 <PWM_disable>
        }
        else
        {
            PWM_disable();
 638:	60 e0       	ldi	r22, 0x00	; 0
 63a:	70 e0       	ldi	r23, 0x00	; 0

            // toggle led every 500 ms
            DLY_ms(500);
 63c:	8a ef       	ldi	r24, 0xFA	; 250
 63e:	93 e4       	ldi	r25, 0x43	; 67
 640:	43 df       	rcall	.-378    	; 0x4c8 <DLY_ms>
 642:	85 b1       	in	r24, 0x05	; 5
 644:	80 95       	com	r24
 646:	80 78       	andi	r24, 0x80	; 128
            PORTB = ~PORTB & 0x80;
 648:	85 b9       	out	0x05, r24	; 5
 64a:	ed cf       	rjmp	.-38     	; 0x626 <main+0xa>

0000064c <__cmpsf2>:
 64c:	d4 d0       	rcall	.+424    	; 0x7f6 <__fp_cmp>
 64e:	08 f4       	brcc	.+2      	; 0x652 <__cmpsf2+0x6>
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	08 95       	ret

00000654 <__divsf3>:
 654:	0c d0       	rcall	.+24     	; 0x66e <__divsf3x>
 656:	0a c1       	rjmp	.+532    	; 0x86c <__fp_round>
 658:	02 d1       	rcall	.+516    	; 0x85e <__fp_pscB>
 65a:	40 f0       	brcs	.+16     	; 0x66c <__divsf3+0x18>
 65c:	f9 d0       	rcall	.+498    	; 0x850 <__fp_pscA>
 65e:	30 f0       	brcs	.+12     	; 0x66c <__divsf3+0x18>
 660:	21 f4       	brne	.+8      	; 0x66a <__divsf3+0x16>
 662:	5f 3f       	cpi	r21, 0xFF	; 255
 664:	19 f0       	breq	.+6      	; 0x66c <__divsf3+0x18>
 666:	eb c0       	rjmp	.+470    	; 0x83e <__fp_inf>
 668:	51 11       	cpse	r21, r1
 66a:	34 c1       	rjmp	.+616    	; 0x8d4 <__fp_szero>
 66c:	ee c0       	rjmp	.+476    	; 0x84a <__fp_nan>

0000066e <__divsf3x>:
 66e:	0f d1       	rcall	.+542    	; 0x88e <__fp_split3>
 670:	98 f3       	brcs	.-26     	; 0x658 <__divsf3+0x4>

00000672 <__divsf3_pse>:
 672:	99 23       	and	r25, r25
 674:	c9 f3       	breq	.-14     	; 0x668 <__divsf3+0x14>
 676:	55 23       	and	r21, r21
 678:	b1 f3       	breq	.-20     	; 0x666 <__divsf3+0x12>
 67a:	95 1b       	sub	r25, r21
 67c:	55 0b       	sbc	r21, r21
 67e:	bb 27       	eor	r27, r27
 680:	aa 27       	eor	r26, r26
 682:	62 17       	cp	r22, r18
 684:	73 07       	cpc	r23, r19
 686:	84 07       	cpc	r24, r20
 688:	38 f0       	brcs	.+14     	; 0x698 <__divsf3_pse+0x26>
 68a:	9f 5f       	subi	r25, 0xFF	; 255
 68c:	5f 4f       	sbci	r21, 0xFF	; 255
 68e:	22 0f       	add	r18, r18
 690:	33 1f       	adc	r19, r19
 692:	44 1f       	adc	r20, r20
 694:	aa 1f       	adc	r26, r26
 696:	a9 f3       	breq	.-22     	; 0x682 <__divsf3_pse+0x10>
 698:	33 d0       	rcall	.+102    	; 0x700 <__divsf3_pse+0x8e>
 69a:	0e 2e       	mov	r0, r30
 69c:	3a f0       	brmi	.+14     	; 0x6ac <__divsf3_pse+0x3a>
 69e:	e0 e8       	ldi	r30, 0x80	; 128
 6a0:	30 d0       	rcall	.+96     	; 0x702 <__divsf3_pse+0x90>
 6a2:	91 50       	subi	r25, 0x01	; 1
 6a4:	50 40       	sbci	r21, 0x00	; 0
 6a6:	e6 95       	lsr	r30
 6a8:	00 1c       	adc	r0, r0
 6aa:	ca f7       	brpl	.-14     	; 0x69e <__divsf3_pse+0x2c>
 6ac:	29 d0       	rcall	.+82     	; 0x700 <__divsf3_pse+0x8e>
 6ae:	fe 2f       	mov	r31, r30
 6b0:	27 d0       	rcall	.+78     	; 0x700 <__divsf3_pse+0x8e>
 6b2:	66 0f       	add	r22, r22
 6b4:	77 1f       	adc	r23, r23
 6b6:	88 1f       	adc	r24, r24
 6b8:	bb 1f       	adc	r27, r27
 6ba:	26 17       	cp	r18, r22
 6bc:	37 07       	cpc	r19, r23
 6be:	48 07       	cpc	r20, r24
 6c0:	ab 07       	cpc	r26, r27
 6c2:	b0 e8       	ldi	r27, 0x80	; 128
 6c4:	09 f0       	breq	.+2      	; 0x6c8 <__divsf3_pse+0x56>
 6c6:	bb 0b       	sbc	r27, r27
 6c8:	80 2d       	mov	r24, r0
 6ca:	bf 01       	movw	r22, r30
 6cc:	ff 27       	eor	r31, r31
 6ce:	93 58       	subi	r25, 0x83	; 131
 6d0:	5f 4f       	sbci	r21, 0xFF	; 255
 6d2:	2a f0       	brmi	.+10     	; 0x6de <__divsf3_pse+0x6c>
 6d4:	9e 3f       	cpi	r25, 0xFE	; 254
 6d6:	51 05       	cpc	r21, r1
 6d8:	68 f0       	brcs	.+26     	; 0x6f4 <__divsf3_pse+0x82>
 6da:	b1 c0       	rjmp	.+354    	; 0x83e <__fp_inf>
 6dc:	fb c0       	rjmp	.+502    	; 0x8d4 <__fp_szero>
 6de:	5f 3f       	cpi	r21, 0xFF	; 255
 6e0:	ec f3       	brlt	.-6      	; 0x6dc <__divsf3_pse+0x6a>
 6e2:	98 3e       	cpi	r25, 0xE8	; 232
 6e4:	dc f3       	brlt	.-10     	; 0x6dc <__divsf3_pse+0x6a>
 6e6:	86 95       	lsr	r24
 6e8:	77 95       	ror	r23
 6ea:	67 95       	ror	r22
 6ec:	b7 95       	ror	r27
 6ee:	f7 95       	ror	r31
 6f0:	9f 5f       	subi	r25, 0xFF	; 255
 6f2:	c9 f7       	brne	.-14     	; 0x6e6 <__divsf3_pse+0x74>
 6f4:	88 0f       	add	r24, r24
 6f6:	91 1d       	adc	r25, r1
 6f8:	96 95       	lsr	r25
 6fa:	87 95       	ror	r24
 6fc:	97 f9       	bld	r25, 7
 6fe:	08 95       	ret
 700:	e1 e0       	ldi	r30, 0x01	; 1
 702:	66 0f       	add	r22, r22
 704:	77 1f       	adc	r23, r23
 706:	88 1f       	adc	r24, r24
 708:	bb 1f       	adc	r27, r27
 70a:	62 17       	cp	r22, r18
 70c:	73 07       	cpc	r23, r19
 70e:	84 07       	cpc	r24, r20
 710:	ba 07       	cpc	r27, r26
 712:	20 f0       	brcs	.+8      	; 0x71c <__divsf3_pse+0xaa>
 714:	62 1b       	sub	r22, r18
 716:	73 0b       	sbc	r23, r19
 718:	84 0b       	sbc	r24, r20
 71a:	ba 0b       	sbc	r27, r26
 71c:	ee 1f       	adc	r30, r30
 71e:	88 f7       	brcc	.-30     	; 0x702 <__divsf3_pse+0x90>
 720:	e0 95       	com	r30
 722:	08 95       	ret

00000724 <__fixunssfsi>:
 724:	bc d0       	rcall	.+376    	; 0x89e <__fp_splitA>
 726:	88 f0       	brcs	.+34     	; 0x74a <__fixunssfsi+0x26>
 728:	9f 57       	subi	r25, 0x7F	; 127
 72a:	90 f0       	brcs	.+36     	; 0x750 <__fixunssfsi+0x2c>
 72c:	b9 2f       	mov	r27, r25
 72e:	99 27       	eor	r25, r25
 730:	b7 51       	subi	r27, 0x17	; 23
 732:	a0 f0       	brcs	.+40     	; 0x75c <__fixunssfsi+0x38>
 734:	d1 f0       	breq	.+52     	; 0x76a <__fixunssfsi+0x46>
 736:	66 0f       	add	r22, r22
 738:	77 1f       	adc	r23, r23
 73a:	88 1f       	adc	r24, r24
 73c:	99 1f       	adc	r25, r25
 73e:	1a f0       	brmi	.+6      	; 0x746 <__fixunssfsi+0x22>
 740:	ba 95       	dec	r27
 742:	c9 f7       	brne	.-14     	; 0x736 <__fixunssfsi+0x12>
 744:	12 c0       	rjmp	.+36     	; 0x76a <__fixunssfsi+0x46>
 746:	b1 30       	cpi	r27, 0x01	; 1
 748:	81 f0       	breq	.+32     	; 0x76a <__fixunssfsi+0x46>
 74a:	c3 d0       	rcall	.+390    	; 0x8d2 <__fp_zero>
 74c:	b1 e0       	ldi	r27, 0x01	; 1
 74e:	08 95       	ret
 750:	c0 c0       	rjmp	.+384    	; 0x8d2 <__fp_zero>
 752:	67 2f       	mov	r22, r23
 754:	78 2f       	mov	r23, r24
 756:	88 27       	eor	r24, r24
 758:	b8 5f       	subi	r27, 0xF8	; 248
 75a:	39 f0       	breq	.+14     	; 0x76a <__fixunssfsi+0x46>
 75c:	b9 3f       	cpi	r27, 0xF9	; 249
 75e:	cc f3       	brlt	.-14     	; 0x752 <__fixunssfsi+0x2e>
 760:	86 95       	lsr	r24
 762:	77 95       	ror	r23
 764:	67 95       	ror	r22
 766:	b3 95       	inc	r27
 768:	d9 f7       	brne	.-10     	; 0x760 <__fixunssfsi+0x3c>
 76a:	3e f4       	brtc	.+14     	; 0x77a <__fixunssfsi+0x56>
 76c:	90 95       	com	r25
 76e:	80 95       	com	r24
 770:	70 95       	com	r23
 772:	61 95       	neg	r22
 774:	7f 4f       	sbci	r23, 0xFF	; 255
 776:	8f 4f       	sbci	r24, 0xFF	; 255
 778:	9f 4f       	sbci	r25, 0xFF	; 255
 77a:	08 95       	ret

0000077c <__floatunsisf>:
 77c:	e8 94       	clt
 77e:	09 c0       	rjmp	.+18     	; 0x792 <__floatsisf+0x12>

00000780 <__floatsisf>:
 780:	97 fb       	bst	r25, 7
 782:	3e f4       	brtc	.+14     	; 0x792 <__floatsisf+0x12>
 784:	90 95       	com	r25
 786:	80 95       	com	r24
 788:	70 95       	com	r23
 78a:	61 95       	neg	r22
 78c:	7f 4f       	sbci	r23, 0xFF	; 255
 78e:	8f 4f       	sbci	r24, 0xFF	; 255
 790:	9f 4f       	sbci	r25, 0xFF	; 255
 792:	99 23       	and	r25, r25
 794:	a9 f0       	breq	.+42     	; 0x7c0 <__floatsisf+0x40>
 796:	f9 2f       	mov	r31, r25
 798:	96 e9       	ldi	r25, 0x96	; 150
 79a:	bb 27       	eor	r27, r27
 79c:	93 95       	inc	r25
 79e:	f6 95       	lsr	r31
 7a0:	87 95       	ror	r24
 7a2:	77 95       	ror	r23
 7a4:	67 95       	ror	r22
 7a6:	b7 95       	ror	r27
 7a8:	f1 11       	cpse	r31, r1
 7aa:	f8 cf       	rjmp	.-16     	; 0x79c <__floatsisf+0x1c>
 7ac:	fa f4       	brpl	.+62     	; 0x7ec <__floatsisf+0x6c>
 7ae:	bb 0f       	add	r27, r27
 7b0:	11 f4       	brne	.+4      	; 0x7b6 <__floatsisf+0x36>
 7b2:	60 ff       	sbrs	r22, 0
 7b4:	1b c0       	rjmp	.+54     	; 0x7ec <__floatsisf+0x6c>
 7b6:	6f 5f       	subi	r22, 0xFF	; 255
 7b8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ba:	8f 4f       	sbci	r24, 0xFF	; 255
 7bc:	9f 4f       	sbci	r25, 0xFF	; 255
 7be:	16 c0       	rjmp	.+44     	; 0x7ec <__floatsisf+0x6c>
 7c0:	88 23       	and	r24, r24
 7c2:	11 f0       	breq	.+4      	; 0x7c8 <__floatsisf+0x48>
 7c4:	96 e9       	ldi	r25, 0x96	; 150
 7c6:	11 c0       	rjmp	.+34     	; 0x7ea <__floatsisf+0x6a>
 7c8:	77 23       	and	r23, r23
 7ca:	21 f0       	breq	.+8      	; 0x7d4 <__floatsisf+0x54>
 7cc:	9e e8       	ldi	r25, 0x8E	; 142
 7ce:	87 2f       	mov	r24, r23
 7d0:	76 2f       	mov	r23, r22
 7d2:	05 c0       	rjmp	.+10     	; 0x7de <__floatsisf+0x5e>
 7d4:	66 23       	and	r22, r22
 7d6:	71 f0       	breq	.+28     	; 0x7f4 <__floatsisf+0x74>
 7d8:	96 e8       	ldi	r25, 0x86	; 134
 7da:	86 2f       	mov	r24, r22
 7dc:	70 e0       	ldi	r23, 0x00	; 0
 7de:	60 e0       	ldi	r22, 0x00	; 0
 7e0:	2a f0       	brmi	.+10     	; 0x7ec <__floatsisf+0x6c>
 7e2:	9a 95       	dec	r25
 7e4:	66 0f       	add	r22, r22
 7e6:	77 1f       	adc	r23, r23
 7e8:	88 1f       	adc	r24, r24
 7ea:	da f7       	brpl	.-10     	; 0x7e2 <__floatsisf+0x62>
 7ec:	88 0f       	add	r24, r24
 7ee:	96 95       	lsr	r25
 7f0:	87 95       	ror	r24
 7f2:	97 f9       	bld	r25, 7
 7f4:	08 95       	ret

000007f6 <__fp_cmp>:
 7f6:	99 0f       	add	r25, r25
 7f8:	00 08       	sbc	r0, r0
 7fa:	55 0f       	add	r21, r21
 7fc:	aa 0b       	sbc	r26, r26
 7fe:	e0 e8       	ldi	r30, 0x80	; 128
 800:	fe ef       	ldi	r31, 0xFE	; 254
 802:	16 16       	cp	r1, r22
 804:	17 06       	cpc	r1, r23
 806:	e8 07       	cpc	r30, r24
 808:	f9 07       	cpc	r31, r25
 80a:	c0 f0       	brcs	.+48     	; 0x83c <__fp_cmp+0x46>
 80c:	12 16       	cp	r1, r18
 80e:	13 06       	cpc	r1, r19
 810:	e4 07       	cpc	r30, r20
 812:	f5 07       	cpc	r31, r21
 814:	98 f0       	brcs	.+38     	; 0x83c <__fp_cmp+0x46>
 816:	62 1b       	sub	r22, r18
 818:	73 0b       	sbc	r23, r19
 81a:	84 0b       	sbc	r24, r20
 81c:	95 0b       	sbc	r25, r21
 81e:	39 f4       	brne	.+14     	; 0x82e <__fp_cmp+0x38>
 820:	0a 26       	eor	r0, r26
 822:	61 f0       	breq	.+24     	; 0x83c <__fp_cmp+0x46>
 824:	23 2b       	or	r18, r19
 826:	24 2b       	or	r18, r20
 828:	25 2b       	or	r18, r21
 82a:	21 f4       	brne	.+8      	; 0x834 <__fp_cmp+0x3e>
 82c:	08 95       	ret
 82e:	0a 26       	eor	r0, r26
 830:	09 f4       	brne	.+2      	; 0x834 <__fp_cmp+0x3e>
 832:	a1 40       	sbci	r26, 0x01	; 1
 834:	a6 95       	lsr	r26
 836:	8f ef       	ldi	r24, 0xFF	; 255
 838:	81 1d       	adc	r24, r1
 83a:	81 1d       	adc	r24, r1
 83c:	08 95       	ret

0000083e <__fp_inf>:
 83e:	97 f9       	bld	r25, 7
 840:	9f 67       	ori	r25, 0x7F	; 127
 842:	80 e8       	ldi	r24, 0x80	; 128
 844:	70 e0       	ldi	r23, 0x00	; 0
 846:	60 e0       	ldi	r22, 0x00	; 0
 848:	08 95       	ret

0000084a <__fp_nan>:
 84a:	9f ef       	ldi	r25, 0xFF	; 255
 84c:	80 ec       	ldi	r24, 0xC0	; 192
 84e:	08 95       	ret

00000850 <__fp_pscA>:
 850:	00 24       	eor	r0, r0
 852:	0a 94       	dec	r0
 854:	16 16       	cp	r1, r22
 856:	17 06       	cpc	r1, r23
 858:	18 06       	cpc	r1, r24
 85a:	09 06       	cpc	r0, r25
 85c:	08 95       	ret

0000085e <__fp_pscB>:
 85e:	00 24       	eor	r0, r0
 860:	0a 94       	dec	r0
 862:	12 16       	cp	r1, r18
 864:	13 06       	cpc	r1, r19
 866:	14 06       	cpc	r1, r20
 868:	05 06       	cpc	r0, r21
 86a:	08 95       	ret

0000086c <__fp_round>:
 86c:	09 2e       	mov	r0, r25
 86e:	03 94       	inc	r0
 870:	00 0c       	add	r0, r0
 872:	11 f4       	brne	.+4      	; 0x878 <__fp_round+0xc>
 874:	88 23       	and	r24, r24
 876:	52 f0       	brmi	.+20     	; 0x88c <__fp_round+0x20>
 878:	bb 0f       	add	r27, r27
 87a:	40 f4       	brcc	.+16     	; 0x88c <__fp_round+0x20>
 87c:	bf 2b       	or	r27, r31
 87e:	11 f4       	brne	.+4      	; 0x884 <__fp_round+0x18>
 880:	60 ff       	sbrs	r22, 0
 882:	04 c0       	rjmp	.+8      	; 0x88c <__fp_round+0x20>
 884:	6f 5f       	subi	r22, 0xFF	; 255
 886:	7f 4f       	sbci	r23, 0xFF	; 255
 888:	8f 4f       	sbci	r24, 0xFF	; 255
 88a:	9f 4f       	sbci	r25, 0xFF	; 255
 88c:	08 95       	ret

0000088e <__fp_split3>:
 88e:	57 fd       	sbrc	r21, 7
 890:	90 58       	subi	r25, 0x80	; 128
 892:	44 0f       	add	r20, r20
 894:	55 1f       	adc	r21, r21
 896:	59 f0       	breq	.+22     	; 0x8ae <__fp_splitA+0x10>
 898:	5f 3f       	cpi	r21, 0xFF	; 255
 89a:	71 f0       	breq	.+28     	; 0x8b8 <__fp_splitA+0x1a>
 89c:	47 95       	ror	r20

0000089e <__fp_splitA>:
 89e:	88 0f       	add	r24, r24
 8a0:	97 fb       	bst	r25, 7
 8a2:	99 1f       	adc	r25, r25
 8a4:	61 f0       	breq	.+24     	; 0x8be <__fp_splitA+0x20>
 8a6:	9f 3f       	cpi	r25, 0xFF	; 255
 8a8:	79 f0       	breq	.+30     	; 0x8c8 <__fp_splitA+0x2a>
 8aa:	87 95       	ror	r24
 8ac:	08 95       	ret
 8ae:	12 16       	cp	r1, r18
 8b0:	13 06       	cpc	r1, r19
 8b2:	14 06       	cpc	r1, r20
 8b4:	55 1f       	adc	r21, r21
 8b6:	f2 cf       	rjmp	.-28     	; 0x89c <__fp_split3+0xe>
 8b8:	46 95       	lsr	r20
 8ba:	f1 df       	rcall	.-30     	; 0x89e <__fp_splitA>
 8bc:	08 c0       	rjmp	.+16     	; 0x8ce <__fp_splitA+0x30>
 8be:	16 16       	cp	r1, r22
 8c0:	17 06       	cpc	r1, r23
 8c2:	18 06       	cpc	r1, r24
 8c4:	99 1f       	adc	r25, r25
 8c6:	f1 cf       	rjmp	.-30     	; 0x8aa <__fp_splitA+0xc>
 8c8:	86 95       	lsr	r24
 8ca:	71 05       	cpc	r23, r1
 8cc:	61 05       	cpc	r22, r1
 8ce:	08 94       	sec
 8d0:	08 95       	ret

000008d2 <__fp_zero>:
 8d2:	e8 94       	clt

000008d4 <__fp_szero>:
 8d4:	bb 27       	eor	r27, r27
 8d6:	66 27       	eor	r22, r22
 8d8:	77 27       	eor	r23, r23
 8da:	cb 01       	movw	r24, r22
 8dc:	97 f9       	bld	r25, 7
 8de:	08 95       	ret

000008e0 <__gesf2>:
 8e0:	8a df       	rcall	.-236    	; 0x7f6 <__fp_cmp>
 8e2:	08 f4       	brcc	.+2      	; 0x8e6 <__gesf2+0x6>
 8e4:	8f ef       	ldi	r24, 0xFF	; 255
 8e6:	08 95       	ret

000008e8 <__mulsf3>:
 8e8:	0b d0       	rcall	.+22     	; 0x900 <__mulsf3x>
 8ea:	c0 cf       	rjmp	.-128    	; 0x86c <__fp_round>
 8ec:	b1 df       	rcall	.-158    	; 0x850 <__fp_pscA>
 8ee:	28 f0       	brcs	.+10     	; 0x8fa <__mulsf3+0x12>
 8f0:	b6 df       	rcall	.-148    	; 0x85e <__fp_pscB>
 8f2:	18 f0       	brcs	.+6      	; 0x8fa <__mulsf3+0x12>
 8f4:	95 23       	and	r25, r21
 8f6:	09 f0       	breq	.+2      	; 0x8fa <__mulsf3+0x12>
 8f8:	a2 cf       	rjmp	.-188    	; 0x83e <__fp_inf>
 8fa:	a7 cf       	rjmp	.-178    	; 0x84a <__fp_nan>
 8fc:	11 24       	eor	r1, r1
 8fe:	ea cf       	rjmp	.-44     	; 0x8d4 <__fp_szero>

00000900 <__mulsf3x>:
 900:	c6 df       	rcall	.-116    	; 0x88e <__fp_split3>
 902:	a0 f3       	brcs	.-24     	; 0x8ec <__mulsf3+0x4>

00000904 <__mulsf3_pse>:
 904:	95 9f       	mul	r25, r21
 906:	d1 f3       	breq	.-12     	; 0x8fc <__mulsf3+0x14>
 908:	95 0f       	add	r25, r21
 90a:	50 e0       	ldi	r21, 0x00	; 0
 90c:	55 1f       	adc	r21, r21
 90e:	62 9f       	mul	r22, r18
 910:	f0 01       	movw	r30, r0
 912:	72 9f       	mul	r23, r18
 914:	bb 27       	eor	r27, r27
 916:	f0 0d       	add	r31, r0
 918:	b1 1d       	adc	r27, r1
 91a:	63 9f       	mul	r22, r19
 91c:	aa 27       	eor	r26, r26
 91e:	f0 0d       	add	r31, r0
 920:	b1 1d       	adc	r27, r1
 922:	aa 1f       	adc	r26, r26
 924:	64 9f       	mul	r22, r20
 926:	66 27       	eor	r22, r22
 928:	b0 0d       	add	r27, r0
 92a:	a1 1d       	adc	r26, r1
 92c:	66 1f       	adc	r22, r22
 92e:	82 9f       	mul	r24, r18
 930:	22 27       	eor	r18, r18
 932:	b0 0d       	add	r27, r0
 934:	a1 1d       	adc	r26, r1
 936:	62 1f       	adc	r22, r18
 938:	73 9f       	mul	r23, r19
 93a:	b0 0d       	add	r27, r0
 93c:	a1 1d       	adc	r26, r1
 93e:	62 1f       	adc	r22, r18
 940:	83 9f       	mul	r24, r19
 942:	a0 0d       	add	r26, r0
 944:	61 1d       	adc	r22, r1
 946:	22 1f       	adc	r18, r18
 948:	74 9f       	mul	r23, r20
 94a:	33 27       	eor	r19, r19
 94c:	a0 0d       	add	r26, r0
 94e:	61 1d       	adc	r22, r1
 950:	23 1f       	adc	r18, r19
 952:	84 9f       	mul	r24, r20
 954:	60 0d       	add	r22, r0
 956:	21 1d       	adc	r18, r1
 958:	82 2f       	mov	r24, r18
 95a:	76 2f       	mov	r23, r22
 95c:	6a 2f       	mov	r22, r26
 95e:	11 24       	eor	r1, r1
 960:	9f 57       	subi	r25, 0x7F	; 127
 962:	50 40       	sbci	r21, 0x00	; 0
 964:	8a f0       	brmi	.+34     	; 0x988 <__mulsf3_pse+0x84>
 966:	e1 f0       	breq	.+56     	; 0x9a0 <__mulsf3_pse+0x9c>
 968:	88 23       	and	r24, r24
 96a:	4a f0       	brmi	.+18     	; 0x97e <__mulsf3_pse+0x7a>
 96c:	ee 0f       	add	r30, r30
 96e:	ff 1f       	adc	r31, r31
 970:	bb 1f       	adc	r27, r27
 972:	66 1f       	adc	r22, r22
 974:	77 1f       	adc	r23, r23
 976:	88 1f       	adc	r24, r24
 978:	91 50       	subi	r25, 0x01	; 1
 97a:	50 40       	sbci	r21, 0x00	; 0
 97c:	a9 f7       	brne	.-22     	; 0x968 <__mulsf3_pse+0x64>
 97e:	9e 3f       	cpi	r25, 0xFE	; 254
 980:	51 05       	cpc	r21, r1
 982:	70 f0       	brcs	.+28     	; 0x9a0 <__mulsf3_pse+0x9c>
 984:	5c cf       	rjmp	.-328    	; 0x83e <__fp_inf>
 986:	a6 cf       	rjmp	.-180    	; 0x8d4 <__fp_szero>
 988:	5f 3f       	cpi	r21, 0xFF	; 255
 98a:	ec f3       	brlt	.-6      	; 0x986 <__mulsf3_pse+0x82>
 98c:	98 3e       	cpi	r25, 0xE8	; 232
 98e:	dc f3       	brlt	.-10     	; 0x986 <__mulsf3_pse+0x82>
 990:	86 95       	lsr	r24
 992:	77 95       	ror	r23
 994:	67 95       	ror	r22
 996:	b7 95       	ror	r27
 998:	f7 95       	ror	r31
 99a:	e7 95       	ror	r30
 99c:	9f 5f       	subi	r25, 0xFF	; 255
 99e:	c1 f7       	brne	.-16     	; 0x990 <__mulsf3_pse+0x8c>
 9a0:	fe 2b       	or	r31, r30
 9a2:	88 0f       	add	r24, r24
 9a4:	91 1d       	adc	r25, r1
 9a6:	96 95       	lsr	r25
 9a8:	87 95       	ror	r24
 9aa:	97 f9       	bld	r25, 7
 9ac:	08 95       	ret

000009ae <_exit>:
 9ae:	f8 94       	cli

000009b0 <__stop_program>:
 9b0:	ff cf       	rjmp	.-2      	; 0x9b0 <__stop_program>
