
Procedure Two.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800200  00000b06  00000b9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080023a  0080023a  00000bd4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d9f  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010aa  00000000  00000000  00002b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb8  00000000  00000000  00003bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  00004778  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000986  00000000  00000000  00004b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000105a  00000000  00000000  000054c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00006520  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	0c c2       	rjmp	.+1048   	; 0x47e <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	23 c2       	rjmp	.+1094   	; 0x4d8 <__vector_36>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	32 c2       	rjmp	.+1124   	; 0x532 <__vector_51>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	59 c2       	rjmp	.+1202   	; 0x58c <__vector_54>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e0       	ldi	r30, 0x06	; 6
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 33       	cpi	r26, 0x3A	; 58
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa e3       	ldi	r26, 0x3A	; 58
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 35       	cpi	r26, 0x5C	; 92
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	81 d2       	rcall	.+1282   	; 0x622 <main>
 120:	f0 c4       	rjmp	.+2528   	; 0xb02 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <read>:
void    write(uint8_t data, uint16_t address);

/* NOTE: Function implementations */
void EEPROM_writeChar(char in, uint16_t addr)
{
    write(in, addr);
 124:	f9 99       	sbic	0x1f, 1	; 31
 126:	fe cf       	rjmp	.-4      	; 0x124 <read>
 128:	92 bd       	out	0x22, r25	; 34
 12a:	81 bd       	out	0x21, r24	; 33
 12c:	8f b3       	in	r24, 0x1f	; 31
 12e:	81 60       	ori	r24, 0x01	; 1
 130:	8f bb       	out	0x1f, r24	; 31
 132:	80 b5       	in	r24, 0x20	; 32
 134:	08 95       	ret

00000136 <EEPROM_readString>:
 136:	af 92       	push	r10
 138:	bf 92       	push	r11
 13a:	cf 92       	push	r12
 13c:	df 92       	push	r13
 13e:	ef 92       	push	r14
 140:	ff 92       	push	r15
 142:	0f 93       	push	r16
 144:	1f 93       	push	r17
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	5c 01       	movw	r10, r24
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	ce d2       	rcall	.+1436   	; 0x6ee <malloc>
 152:	6c 01       	movw	r12, r24
 154:	c0 e0       	ldi	r28, 0x00	; 0
 156:	d0 e0       	ldi	r29, 0x00	; 0
 158:	08 c0       	rjmp	.+16     	; 0x16a <EEPROM_readString+0x34>
 15a:	76 01       	movw	r14, r12
 15c:	ec 0e       	add	r14, r28
 15e:	fd 1e       	adc	r15, r29
 160:	c8 01       	movw	r24, r16
 162:	e0 df       	rcall	.-64     	; 0x124 <read>
 164:	f7 01       	movw	r30, r14
 166:	80 83       	st	Z, r24
 168:	21 96       	adiw	r28, 0x01	; 1
 16a:	8e 01       	movw	r16, r28
 16c:	0a 0d       	add	r16, r10
 16e:	1b 1d       	adc	r17, r11
 170:	c8 01       	movw	r24, r16
 172:	d8 df       	rcall	.-80     	; 0x124 <read>
 174:	81 11       	cpse	r24, r1
 176:	f1 cf       	rjmp	.-30     	; 0x15a <EEPROM_readString+0x24>
 178:	f6 01       	movw	r30, r12
 17a:	ec 0f       	add	r30, r28
 17c:	fd 1f       	adc	r31, r29
 17e:	10 82       	st	Z, r1
 180:	be 01       	movw	r22, r28
 182:	6f 5f       	subi	r22, 0xFF	; 255
 184:	7f 4f       	sbci	r23, 0xFF	; 255
 186:	c6 01       	movw	r24, r12
 188:	d3 d3       	rcall	.+1958   	; 0x930 <realloc>
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	1f 91       	pop	r17
 190:	0f 91       	pop	r16
 192:	ff 90       	pop	r15
 194:	ef 90       	pop	r14
 196:	df 90       	pop	r13
 198:	cf 90       	pop	r12
 19a:	bf 90       	pop	r11
 19c:	af 90       	pop	r10
 19e:	08 95       	ret

000001a0 <write>:
 1a0:	f9 99       	sbic	0x1f, 1	; 31
 1a2:	fe cf       	rjmp	.-4      	; 0x1a0 <write>
 1a4:	72 bd       	out	0x22, r23	; 34
 1a6:	61 bd       	out	0x21, r22	; 33
 1a8:	80 bd       	out	0x20, r24	; 32
 1aa:	8f b3       	in	r24, 0x1f	; 31
 1ac:	84 60       	ori	r24, 0x04	; 4
 1ae:	8f bb       	out	0x1f, r24	; 31
 1b0:	8f b3       	in	r24, 0x1f	; 31
 1b2:	82 60       	ori	r24, 0x02	; 2
 1b4:	8f bb       	out	0x1f, r24	; 31
 1b6:	08 95       	ret

000001b8 <EEPROM_writeString>:
{
    return (char)read(addr);
}

void EEPROM_writeString(char const * const in, uint16_t addr)
{
 1b8:	ef 92       	push	r14
 1ba:	ff 92       	push	r15
 1bc:	0f 93       	push	r16
 1be:	1f 93       	push	r17
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	7c 01       	movw	r14, r24
 1c6:	8b 01       	movw	r16, r22
    uint16_t i = 0;
 1c8:	c0 e0       	ldi	r28, 0x00	; 0
 1ca:	d0 e0       	ldi	r29, 0x00	; 0

    while(in[i] != '\0')
 1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <EEPROM_writeString+0x20>
    {
        write(in[i], addr + i);
 1ce:	be 01       	movw	r22, r28
 1d0:	60 0f       	add	r22, r16
 1d2:	71 1f       	adc	r23, r17
 1d4:	e5 df       	rcall	.-54     	; 0x1a0 <write>

        i++;
 1d6:	21 96       	adiw	r28, 0x01	; 1

void EEPROM_writeString(char const * const in, uint16_t addr)
{
    uint16_t i = 0;

    while(in[i] != '\0')
 1d8:	f7 01       	movw	r30, r14
 1da:	ec 0f       	add	r30, r28
 1dc:	fd 1f       	adc	r31, r29
 1de:	80 81       	ld	r24, Z
 1e0:	81 11       	cpse	r24, r1
 1e2:	f5 cf       	rjmp	.-22     	; 0x1ce <EEPROM_writeString+0x16>

        i++;
    }

    // add in a null terminator
    write('\0', addr + i);
 1e4:	be 01       	movw	r22, r28
 1e6:	60 0f       	add	r22, r16
 1e8:	71 1f       	adc	r23, r17
 1ea:	da df       	rcall	.-76     	; 0x1a0 <write>
}
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	1f 91       	pop	r17
 1f2:	0f 91       	pop	r16
 1f4:	ff 90       	pop	r15
 1f6:	ef 90       	pop	r14
 1f8:	08 95       	ret

000001fa <LCD_sendInstruction>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <sContolPort>
 1fe:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <sContolPort+0x1>
 202:	90 81       	ld	r25, Z
 204:	98 7f       	andi	r25, 0xF8	; 248
 206:	94 60       	ori	r25, 0x04	; 4
 208:	90 83       	st	Z, r25
 20a:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <__data_end>
 20e:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <__data_end+0x1>
 212:	80 83       	st	Z, r24
 214:	87 ec       	ldi	r24, 0xC7	; 199
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <LCD_sendInstruction+0x1e>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <LCD_sendInstruction+0x24>
 21e:	00 00       	nop
 220:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <sContolPort>
 224:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <sContolPort+0x1>
 228:	80 81       	ld	r24, Z
 22a:	89 7f       	andi	r24, 0xF9	; 249
 22c:	80 83       	st	Z, r24
 22e:	8f e1       	ldi	r24, 0x1F	; 31
 230:	9e e4       	ldi	r25, 0x4E	; 78
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <LCD_sendInstruction+0x38>
 236:	00 c0       	rjmp	.+0      	; 0x238 <LCD_sendInstruction+0x3e>
 238:	00 00       	nop
 23a:	08 95       	ret

0000023c <LCD_init>:
 23c:	fc 01       	movw	r30, r24
 23e:	da 01       	movw	r26, r20
 240:	8c 91       	ld	r24, X
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	8c 93       	st	X, r24
 246:	d9 01       	movw	r26, r18
 248:	1c 92       	st	X, r1
 24a:	90 81       	ld	r25, Z
 24c:	97 60       	ori	r25, 0x07	; 7
 24e:	90 83       	st	Z, r25
 250:	fb 01       	movw	r30, r22
 252:	80 81       	ld	r24, Z
 254:	88 7f       	andi	r24, 0xF8	; 248
 256:	80 83       	st	Z, r24
 258:	70 93 3d 02 	sts	0x023D, r23	; 0x80023d <sContolPort+0x1>
 25c:	60 93 3c 02 	sts	0x023C, r22	; 0x80023c <sContolPort>
 260:	30 93 3b 02 	sts	0x023B, r19	; 0x80023b <__data_end+0x1>
 264:	20 93 3a 02 	sts	0x023A, r18	; 0x80023a <__data_end>
 268:	ff e7       	ldi	r31, 0x7F	; 127
 26a:	25 eb       	ldi	r18, 0xB5	; 181
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	f1 50       	subi	r31, 0x01	; 1
 270:	20 40       	sbci	r18, 0x00	; 0
 272:	80 40       	sbci	r24, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <LCD_init+0x32>
 276:	00 c0       	rjmp	.+0      	; 0x278 <LCD_init+0x3c>
 278:	00 00       	nop
 27a:	88 e3       	ldi	r24, 0x38	; 56
 27c:	be df       	rcall	.-132    	; 0x1fa <LCD_sendInstruction>
 27e:	a7 ec       	ldi	r26, 0xC7	; 199
 280:	b0 e0       	ldi	r27, 0x00	; 0
 282:	11 97       	sbiw	r26, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <LCD_init+0x46>
 286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_init+0x4c>
 288:	00 00       	nop
 28a:	8c e0       	ldi	r24, 0x0C	; 12
 28c:	b6 df       	rcall	.-148    	; 0x1fa <LCD_sendInstruction>
 28e:	e7 ec       	ldi	r30, 0xC7	; 199
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	31 97       	sbiw	r30, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCD_init+0x56>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_init+0x5c>
 298:	00 00       	nop
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	ae df       	rcall	.-164    	; 0x1fa <LCD_sendInstruction>
 29e:	8f e3       	ldi	r24, 0x3F	; 63
 2a0:	9f e1       	ldi	r25, 0x1F	; 31
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCD_init+0x66>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <LCD_init+0x6c>
 2a8:	00 00       	nop
 2aa:	86 e0       	ldi	r24, 0x06	; 6
 2ac:	a6 cf       	rjmp	.-180    	; 0x1fa <LCD_sendInstruction>
 2ae:	08 95       	ret

000002b0 <LCD_sendString>:
void LCD_sendString(char const * const pData)
{
    char * localPointer = (char * const)pData;

    // set controls to RS = 1 E = 0, R/!W=0
    *sContolPort = (*sContolPort & 0xf8) | 0x01;
 2b0:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <sContolPort>
 2b4:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <sContolPort+0x1>
 2b8:	20 81       	ld	r18, Z
 2ba:	28 7f       	andi	r18, 0xF8	; 248
 2bc:	21 60       	ori	r18, 0x01	; 1
 2be:	20 83       	st	Z, r18
    _delay_ms(5);
}

void LCD_sendString(char const * const pData)
{
    char * localPointer = (char * const)pData;
 2c0:	fc 01       	movw	r30, r24

    // set controls to RS = 1 E = 0, R/!W=0
    *sContolPort = (*sContolPort & 0xf8) | 0x01;

    while(*localPointer != '\0')
 2c2:	25 c0       	rjmp	.+74     	; 0x30e <LCD_sendString+0x5e>
    {
        // take E high
        *sContolPort = *sContolPort | 0x04;
 2c4:	a0 91 3c 02 	lds	r26, 0x023C	; 0x80023c <sContolPort>
 2c8:	b0 91 3d 02 	lds	r27, 0x023D	; 0x80023d <sContolPort+0x1>
 2cc:	8c 91       	ld	r24, X
 2ce:	84 60       	ori	r24, 0x04	; 4
 2d0:	8c 93       	st	X, r24

        // send data then delay for at least 50us
        *sDataPort = *localPointer++;
 2d2:	a0 91 3a 02 	lds	r26, 0x023A	; 0x80023a <__data_end>
 2d6:	b0 91 3b 02 	lds	r27, 0x023B	; 0x80023b <__data_end+0x1>
 2da:	9f 01       	movw	r18, r30
 2dc:	2f 5f       	subi	r18, 0xFF	; 255
 2de:	3f 4f       	sbci	r19, 0xFF	; 255
 2e0:	80 81       	ld	r24, Z
 2e2:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e4:	87 ec       	ldi	r24, 0xC7	; 199
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <LCD_sendString+0x38>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <LCD_sendString+0x3e>
 2ee:	00 00       	nop
        _delay_us(50);

        // take E low
        *sContolPort = (*sContolPort & 0xf8) | 0x01;
 2f0:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <sContolPort>
 2f4:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <sContolPort+0x1>
 2f8:	80 81       	ld	r24, Z
 2fa:	88 7f       	andi	r24, 0xF8	; 248
 2fc:	81 60       	ori	r24, 0x01	; 1
 2fe:	80 83       	st	Z, r24
 300:	87 ec       	ldi	r24, 0xC7	; 199
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <LCD_sendString+0x54>
 308:	00 c0       	rjmp	.+0      	; 0x30a <LCD_sendString+0x5a>
 30a:	00 00       	nop
    {
        // take E high
        *sContolPort = *sContolPort | 0x04;

        // send data then delay for at least 50us
        *sDataPort = *localPointer++;
 30c:	f9 01       	movw	r30, r18
    char * localPointer = (char * const)pData;

    // set controls to RS = 1 E = 0, R/!W=0
    *sContolPort = (*sContolPort & 0xf8) | 0x01;

    while(*localPointer != '\0')
 30e:	80 81       	ld	r24, Z
 310:	81 11       	cpse	r24, r1
 312:	d8 cf       	rjmp	.-80     	; 0x2c4 <LCD_sendString+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 314:	8f e1       	ldi	r24, 0x1F	; 31
 316:	9e e4       	ldi	r25, 0x4E	; 78
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <LCD_sendString+0x68>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <LCD_sendString+0x6e>
 31e:	00 00       	nop
 320:	08 95       	ret

00000322 <SERIAL_uartInit>:
    for(uint16_t i = 0; i < length; i++)
    {
        // wait for uart tx to be ready then send out uart
        sendCharHelper(port, pTransmitString + i);
    }
}
 322:	cf 93       	push	r28
 324:	c8 2f       	mov	r28, r24
 326:	9a 01       	movw	r18, r20
 328:	ab 01       	movw	r20, r22
 32a:	60 e4       	ldi	r22, 0x40	; 64
 32c:	72 e4       	ldi	r23, 0x42	; 66
 32e:	8f e0       	ldi	r24, 0x0F	; 15
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	bb d1       	rcall	.+886    	; 0x6aa <__udivmodsi4>
 334:	21 50       	subi	r18, 0x01	; 1
 336:	31 09       	sbc	r19, r1
 338:	c2 30       	cpi	r28, 0x02	; 2
 33a:	11 f1       	breq	.+68     	; 0x380 <SERIAL_uartInit+0x5e>
 33c:	c3 30       	cpi	r28, 0x03	; 3
 33e:	79 f1       	breq	.+94     	; 0x39e <SERIAL_uartInit+0x7c>
 340:	c1 30       	cpi	r28, 0x01	; 1
 342:	79 f0       	breq	.+30     	; 0x362 <SERIAL_uartInit+0x40>
 344:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 348:	88 e1       	ldi	r24, 0x18	; 24
 34a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 34e:	86 e0       	ldi	r24, 0x06	; 6
 350:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 354:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 358:	83 2f       	mov	r24, r19
 35a:	8f 70       	andi	r24, 0x0F	; 15
 35c:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 360:	2c c0       	rjmp	.+88     	; 0x3ba <SERIAL_uartInit+0x98>
 362:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 366:	88 e1       	ldi	r24, 0x18	; 24
 368:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
 36c:	86 e0       	ldi	r24, 0x06	; 6
 36e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
 372:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
 376:	83 2f       	mov	r24, r19
 378:	8f 70       	andi	r24, 0x0F	; 15
 37a:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
 37e:	1d c0       	rjmp	.+58     	; 0x3ba <SERIAL_uartInit+0x98>
 380:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
 384:	88 e1       	ldi	r24, 0x18	; 24
 386:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7c00d1>
 38a:	86 e0       	ldi	r24, 0x06	; 6
 38c:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7c00d2>
 390:	20 93 d4 00 	sts	0x00D4, r18	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7c00d4>
 394:	83 2f       	mov	r24, r19
 396:	8f 70       	andi	r24, 0x0F	; 15
 398:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7c00d5>
 39c:	0e c0       	rjmp	.+28     	; 0x3ba <SERIAL_uartInit+0x98>
 39e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__TEXT_REGION_LENGTH__+0x7c0130>
 3a2:	88 e1       	ldi	r24, 0x18	; 24
 3a4:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x7c0131>
 3a8:	86 e0       	ldi	r24, 0x06	; 6
 3aa:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x7c0132>
 3ae:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
 3b2:	83 2f       	mov	r24, r19
 3b4:	8f 70       	andi	r24, 0x0F	; 15
 3b6:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
 3ba:	cf 91       	pop	r28
 3bc:	08 95       	ret

000003be <SERIAL_uartInitAsync>:
 3be:	cf 93       	push	r28
 3c0:	c8 2f       	mov	r28, r24
 3c2:	af df       	rcall	.-162    	; 0x322 <SERIAL_uartInit>
 3c4:	c2 30       	cpi	r28, 0x02	; 2
 3c6:	61 f0       	breq	.+24     	; 0x3e0 <SERIAL_uartInitAsync+0x22>
 3c8:	c3 30       	cpi	r28, 0x03	; 3
 3ca:	71 f0       	breq	.+28     	; 0x3e8 <SERIAL_uartInitAsync+0x2a>
 3cc:	c1 30       	cpi	r28, 0x01	; 1
 3ce:	21 f0       	breq	.+8      	; 0x3d8 <SERIAL_uartInitAsync+0x1a>
 3d0:	88 e9       	ldi	r24, 0x98	; 152
 3d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 3d6:	0b c0       	rjmp	.+22     	; 0x3ee <SERIAL_uartInitAsync+0x30>
 3d8:	88 e9       	ldi	r24, 0x98	; 152
 3da:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
 3de:	07 c0       	rjmp	.+14     	; 0x3ee <SERIAL_uartInitAsync+0x30>
 3e0:	88 e9       	ldi	r24, 0x98	; 152
 3e2:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7c00d1>
 3e6:	03 c0       	rjmp	.+6      	; 0x3ee <SERIAL_uartInitAsync+0x30>
 3e8:	88 e9       	ldi	r24, 0x98	; 152
 3ea:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x7c0131>
 3ee:	cf 91       	pop	r28
 3f0:	08 95       	ret

000003f2 <SERIAL_uartAsyncGetHandler>:
 3f2:	e8 2f       	mov	r30, r24
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	ee 0f       	add	r30, r30
 3f8:	ff 1f       	adc	r31, r31
 3fa:	e2 5c       	subi	r30, 0xC2	; 194
 3fc:	fd 4f       	sbci	r31, 0xFD	; 253
 3fe:	71 83       	std	Z+1, r23	; 0x01
 400:	60 83       	st	Z, r22
 402:	08 95       	ret

00000404 <pollThenSetHelper>:
 404:	fc 01       	movw	r30, r24
 406:	90 81       	ld	r25, Z
 408:	96 23       	and	r25, r22
 40a:	e9 f3       	breq	.-6      	; 0x406 <pollThenSetHelper+0x2>
 40c:	f9 01       	movw	r30, r18
 40e:	80 81       	ld	r24, Z
 410:	fa 01       	movw	r30, r20
 412:	80 83       	st	Z, r24
 414:	08 95       	ret

00000416 <sendCharHelper>:
 416:	9b 01       	movw	r18, r22
 418:	82 30       	cpi	r24, 0x02	; 2
 41a:	91 f0       	breq	.+36     	; 0x440 <sendCharHelper+0x2a>
 41c:	83 30       	cpi	r24, 0x03	; 3
 41e:	b9 f0       	breq	.+46     	; 0x44e <sendCharHelper+0x38>
 420:	81 30       	cpi	r24, 0x01	; 1
 422:	39 f0       	breq	.+14     	; 0x432 <sendCharHelper+0x1c>
 424:	46 ec       	ldi	r20, 0xC6	; 198
 426:	50 e0       	ldi	r21, 0x00	; 0
 428:	60 e2       	ldi	r22, 0x20	; 32
 42a:	80 ec       	ldi	r24, 0xC0	; 192
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	ea cf       	rjmp	.-44     	; 0x404 <pollThenSetHelper>
 430:	08 95       	ret
 432:	4e ec       	ldi	r20, 0xCE	; 206
 434:	50 e0       	ldi	r21, 0x00	; 0
 436:	60 e2       	ldi	r22, 0x20	; 32
 438:	88 ec       	ldi	r24, 0xC8	; 200
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	e3 cf       	rjmp	.-58     	; 0x404 <pollThenSetHelper>
 43e:	08 95       	ret
 440:	46 ed       	ldi	r20, 0xD6	; 214
 442:	50 e0       	ldi	r21, 0x00	; 0
 444:	60 e2       	ldi	r22, 0x20	; 32
 446:	80 ed       	ldi	r24, 0xD0	; 208
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	dc cf       	rjmp	.-72     	; 0x404 <pollThenSetHelper>
 44c:	08 95       	ret
 44e:	46 e3       	ldi	r20, 0x36	; 54
 450:	51 e0       	ldi	r21, 0x01	; 1
 452:	60 e2       	ldi	r22, 0x20	; 32
 454:	80 e3       	ldi	r24, 0x30	; 48
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	d5 cf       	rjmp	.-86     	; 0x404 <pollThenSetHelper>
 45a:	08 95       	ret

0000045c <SERIAL_uartSend>:
 45c:	1f 93       	push	r17
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	18 2f       	mov	r17, r24
 464:	eb 01       	movw	r28, r22
 466:	04 c0       	rjmp	.+8      	; 0x470 <SERIAL_uartSend+0x14>
 468:	be 01       	movw	r22, r28
 46a:	81 2f       	mov	r24, r17
 46c:	d4 df       	rcall	.-88     	; 0x416 <sendCharHelper>
 46e:	21 96       	adiw	r28, 0x01	; 1
 470:	88 81       	ld	r24, Y
 472:	81 11       	cpse	r24, r1
 474:	f9 cf       	rjmp	.-14     	; 0x468 <SERIAL_uartSend+0xc>
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	1f 91       	pop	r17
 47c:	08 95       	ret

0000047e <__vector_25>:
            break;
    }
}

ISR(USART0_RX_vect)
{
 47e:	1f 92       	push	r1
 480:	0f 92       	push	r0
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	0f 92       	push	r0
 486:	11 24       	eor	r1, r1
 488:	0b b6       	in	r0, 0x3b	; 59
 48a:	0f 92       	push	r0
 48c:	2f 93       	push	r18
 48e:	3f 93       	push	r19
 490:	4f 93       	push	r20
 492:	5f 93       	push	r21
 494:	6f 93       	push	r22
 496:	7f 93       	push	r23
 498:	8f 93       	push	r24
 49a:	9f 93       	push	r25
 49c:	af 93       	push	r26
 49e:	bf 93       	push	r27
 4a0:	ef 93       	push	r30
 4a2:	ff 93       	push	r31
    interruptCallback[serialUsart0](UDR0);
 4a4:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <interruptCallback>
 4a8:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <interruptCallback+0x1>
 4ac:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 4b0:	19 95       	eicall
}
 4b2:	ff 91       	pop	r31
 4b4:	ef 91       	pop	r30
 4b6:	bf 91       	pop	r27
 4b8:	af 91       	pop	r26
 4ba:	9f 91       	pop	r25
 4bc:	8f 91       	pop	r24
 4be:	7f 91       	pop	r23
 4c0:	6f 91       	pop	r22
 4c2:	5f 91       	pop	r21
 4c4:	4f 91       	pop	r20
 4c6:	3f 91       	pop	r19
 4c8:	2f 91       	pop	r18
 4ca:	0f 90       	pop	r0
 4cc:	0b be       	out	0x3b, r0	; 59
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti

000004d8 <__vector_36>:

ISR(USART1_RX_vect)
{
 4d8:	1f 92       	push	r1
 4da:	0f 92       	push	r0
 4dc:	0f b6       	in	r0, 0x3f	; 63
 4de:	0f 92       	push	r0
 4e0:	11 24       	eor	r1, r1
 4e2:	0b b6       	in	r0, 0x3b	; 59
 4e4:	0f 92       	push	r0
 4e6:	2f 93       	push	r18
 4e8:	3f 93       	push	r19
 4ea:	4f 93       	push	r20
 4ec:	5f 93       	push	r21
 4ee:	6f 93       	push	r22
 4f0:	7f 93       	push	r23
 4f2:	8f 93       	push	r24
 4f4:	9f 93       	push	r25
 4f6:	af 93       	push	r26
 4f8:	bf 93       	push	r27
 4fa:	ef 93       	push	r30
 4fc:	ff 93       	push	r31
    interruptCallback[serialUsart1](UDR1);
 4fe:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <interruptCallback+0x2>
 502:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <interruptCallback+0x3>
 506:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 50a:	19 95       	eicall
}
 50c:	ff 91       	pop	r31
 50e:	ef 91       	pop	r30
 510:	bf 91       	pop	r27
 512:	af 91       	pop	r26
 514:	9f 91       	pop	r25
 516:	8f 91       	pop	r24
 518:	7f 91       	pop	r23
 51a:	6f 91       	pop	r22
 51c:	5f 91       	pop	r21
 51e:	4f 91       	pop	r20
 520:	3f 91       	pop	r19
 522:	2f 91       	pop	r18
 524:	0f 90       	pop	r0
 526:	0b be       	out	0x3b, r0	; 59
 528:	0f 90       	pop	r0
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	0f 90       	pop	r0
 52e:	1f 90       	pop	r1
 530:	18 95       	reti

00000532 <__vector_51>:

ISR(USART2_RX_vect)
{
 532:	1f 92       	push	r1
 534:	0f 92       	push	r0
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	0f 92       	push	r0
 53a:	11 24       	eor	r1, r1
 53c:	0b b6       	in	r0, 0x3b	; 59
 53e:	0f 92       	push	r0
 540:	2f 93       	push	r18
 542:	3f 93       	push	r19
 544:	4f 93       	push	r20
 546:	5f 93       	push	r21
 548:	6f 93       	push	r22
 54a:	7f 93       	push	r23
 54c:	8f 93       	push	r24
 54e:	9f 93       	push	r25
 550:	af 93       	push	r26
 552:	bf 93       	push	r27
 554:	ef 93       	push	r30
 556:	ff 93       	push	r31
    interruptCallback[serialUsart2](UDR2);
 558:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <interruptCallback+0x4>
 55c:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <interruptCallback+0x5>
 560:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
 564:	19 95       	eicall
}
 566:	ff 91       	pop	r31
 568:	ef 91       	pop	r30
 56a:	bf 91       	pop	r27
 56c:	af 91       	pop	r26
 56e:	9f 91       	pop	r25
 570:	8f 91       	pop	r24
 572:	7f 91       	pop	r23
 574:	6f 91       	pop	r22
 576:	5f 91       	pop	r21
 578:	4f 91       	pop	r20
 57a:	3f 91       	pop	r19
 57c:	2f 91       	pop	r18
 57e:	0f 90       	pop	r0
 580:	0b be       	out	0x3b, r0	; 59
 582:	0f 90       	pop	r0
 584:	0f be       	out	0x3f, r0	; 63
 586:	0f 90       	pop	r0
 588:	1f 90       	pop	r1
 58a:	18 95       	reti

0000058c <__vector_54>:

ISR(USART3_RX_vect)
{
 58c:	1f 92       	push	r1
 58e:	0f 92       	push	r0
 590:	0f b6       	in	r0, 0x3f	; 63
 592:	0f 92       	push	r0
 594:	11 24       	eor	r1, r1
 596:	0b b6       	in	r0, 0x3b	; 59
 598:	0f 92       	push	r0
 59a:	2f 93       	push	r18
 59c:	3f 93       	push	r19
 59e:	4f 93       	push	r20
 5a0:	5f 93       	push	r21
 5a2:	6f 93       	push	r22
 5a4:	7f 93       	push	r23
 5a6:	8f 93       	push	r24
 5a8:	9f 93       	push	r25
 5aa:	af 93       	push	r26
 5ac:	bf 93       	push	r27
 5ae:	ef 93       	push	r30
 5b0:	ff 93       	push	r31
    interruptCallback[serialUsart3](UDR3);
 5b2:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <interruptCallback+0x6>
 5b6:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <interruptCallback+0x7>
 5ba:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
 5be:	19 95       	eicall
 5c0:	ff 91       	pop	r31
 5c2:	ef 91       	pop	r30
 5c4:	bf 91       	pop	r27
 5c6:	af 91       	pop	r26
 5c8:	9f 91       	pop	r25
 5ca:	8f 91       	pop	r24
 5cc:	7f 91       	pop	r23
 5ce:	6f 91       	pop	r22
 5d0:	5f 91       	pop	r21
 5d2:	4f 91       	pop	r20
 5d4:	3f 91       	pop	r19
 5d6:	2f 91       	pop	r18
 5d8:	0f 90       	pop	r0
 5da:	0b be       	out	0x3b, r0	; 59
 5dc:	0f 90       	pop	r0
 5de:	0f be       	out	0x3f, r0	; 63
 5e0:	0f 90       	pop	r0
 5e2:	1f 90       	pop	r1
 5e4:	18 95       	reti

000005e6 <asyncGetHandler>:
}

/* NOTE: Function implementations */
void asyncGetHandler(char c)
{
    if(c != 0x0d && c != 0x0a && c != '\0')
 5e6:	8d 30       	cpi	r24, 0x0D	; 13
 5e8:	b1 f0       	breq	.+44     	; 0x616 <asyncGetHandler+0x30>
 5ea:	8a 30       	cpi	r24, 0x0A	; 10
 5ec:	a1 f0       	breq	.+40     	; 0x616 <asyncGetHandler+0x30>
 5ee:	88 23       	and	r24, r24
 5f0:	91 f0       	breq	.+36     	; 0x616 <asyncGetHandler+0x30>
    {
        if(messageIndex < 15)
 5f2:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <messageIndex>
 5f6:	9f 30       	cpi	r25, 0x0F	; 15
 5f8:	98 f4       	brcc	.+38     	; 0x620 <asyncGetHandler+0x3a>
        {
            // add to array
            message[messageIndex]     = c;
 5fa:	29 2f       	mov	r18, r25
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	f9 01       	movw	r30, r18
 600:	e8 5b       	subi	r30, 0xB8	; 184
 602:	fd 4f       	sbci	r31, 0xFD	; 253
 604:	80 83       	st	Z, r24
            message[messageIndex + 1] = '\0';
 606:	f9 01       	movw	r30, r18
 608:	e7 5b       	subi	r30, 0xB7	; 183
 60a:	fd 4f       	sbci	r31, 0xFD	; 253
 60c:	10 82       	st	Z, r1

            messageIndex++;
 60e:	9f 5f       	subi	r25, 0xFF	; 255
 610:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <messageIndex>
 614:	08 95       	ret
        }
    }
    else
    {
        // set update flag
        readFlag = 1;
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <readFlag>

        // reset message
        messageIndex = 0;
 61c:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <messageIndex>
 620:	08 95       	ret

00000622 <main>:

/* NOTE: Application implementation */
// the main loop of the function, provided to us
int main(void)
{
    LCD_init(&DDRG, &PORTG, &DDRL, &PORTL);
 622:	2b e0       	ldi	r18, 0x0B	; 11
 624:	31 e0       	ldi	r19, 0x01	; 1
 626:	4a e0       	ldi	r20, 0x0A	; 10
 628:	51 e0       	ldi	r21, 0x01	; 1
 62a:	64 e3       	ldi	r22, 0x34	; 52
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	83 e3       	ldi	r24, 0x33	; 51
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	04 de       	rcall	.-1016   	; 0x23c <LCD_init>

    SERIAL_uartInitAsync(serialUsart0, 9600);
 634:	40 e8       	ldi	r20, 0x80	; 128
 636:	55 e2       	ldi	r21, 0x25	; 37
 638:	60 e0       	ldi	r22, 0x00	; 0
 63a:	70 e0       	ldi	r23, 0x00	; 0
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	bf de       	rcall	.-642    	; 0x3be <SERIAL_uartInitAsync>
    SERIAL_uartAsyncGetHandler(serialUsart0, &asyncGetHandler);
 640:	63 ef       	ldi	r22, 0xF3	; 243
 642:	72 e0       	ldi	r23, 0x02	; 2
 644:	80 e0       	ldi	r24, 0x00	; 0

    // clear, home, and move cursor
    LCD_sendInstruction(0x01);
 646:	d5 de       	rcall	.-598    	; 0x3f2 <SERIAL_uartAsyncGetHandler>
 648:	81 e0       	ldi	r24, 0x01	; 1
    LCD_sendInstruction(0x02);
 64a:	d7 dd       	rcall	.-1106   	; 0x1fa <LCD_sendInstruction>
 64c:	82 e0       	ldi	r24, 0x02	; 2
    LCD_sendInstruction(0x80);
 64e:	d5 dd       	rcall	.-1110   	; 0x1fa <LCD_sendInstruction>
 650:	80 e8       	ldi	r24, 0x80	; 128
 652:	d3 dd       	rcall	.-1114   	; 0x1fa <LCD_sendInstruction>

    LCD_sendString("Last Saved:");
 654:	88 e0       	ldi	r24, 0x08	; 8
 656:	92 e0       	ldi	r25, 0x02	; 2
 658:	2b de       	rcall	.-938    	; 0x2b0 <LCD_sendString>

    char const * const result = EEPROM_readString(addr);
 65a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <addr>
 65e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <addr+0x1>
 662:	69 dd       	rcall	.-1326   	; 0x136 <EEPROM_readString>

    // move to last line and print previous eeprom
    LCD_sendInstruction(0xc0);
 664:	ec 01       	movw	r28, r24
 666:	80 ec       	ldi	r24, 0xC0	; 192
    LCD_sendString(result);
 668:	c8 dd       	rcall	.-1136   	; 0x1fa <LCD_sendInstruction>
 66a:	ce 01       	movw	r24, r28

    sei();
 66c:	21 de       	rcall	.-958    	; 0x2b0 <LCD_sendString>

    SERIAL_uartSend(serialUsart0, "atmega booted!\n\r");
 66e:	78 94       	sei
 670:	64 e1       	ldi	r22, 0x14	; 20
 672:	72 e0       	ldi	r23, 0x02	; 2
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	f2 de       	rcall	.-540    	; 0x45c <SERIAL_uartSend>
    SERIAL_uartSend(serialUsart0, result);
 678:	be 01       	movw	r22, r28
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	ef de       	rcall	.-546    	; 0x45c <SERIAL_uartSend>

    while(1)
    {
        if(readFlag)
 67e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <readFlag>
 682:	88 23       	and	r24, r24
        {
            EEPROM_writeString(message, addr);
 684:	e1 f3       	breq	.-8      	; 0x67e <main+0x5c>
 686:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <addr>
 68a:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <addr+0x1>
 68e:	88 e4       	ldi	r24, 0x48	; 72
 690:	92 e0       	ldi	r25, 0x02	; 2

            SERIAL_uartSend(serialUsart0, "eeprom updated to:\n\r");
 692:	92 dd       	rcall	.-1244   	; 0x1b8 <EEPROM_writeString>
 694:	65 e2       	ldi	r22, 0x25	; 37
 696:	72 e0       	ldi	r23, 0x02	; 2
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	e0 de       	rcall	.-576    	; 0x45c <SERIAL_uartSend>
            SERIAL_uartSend(serialUsart0, message);
 69c:	68 e4       	ldi	r22, 0x48	; 72
 69e:	72 e0       	ldi	r23, 0x02	; 2
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	dc de       	rcall	.-584    	; 0x45c <SERIAL_uartSend>
 6a4:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <readFlag>

            readFlag = 0;
 6a8:	ea cf       	rjmp	.-44     	; 0x67e <main+0x5c>

000006aa <__udivmodsi4>:
 6aa:	a1 e2       	ldi	r26, 0x21	; 33
 6ac:	1a 2e       	mov	r1, r26
 6ae:	aa 1b       	sub	r26, r26
 6b0:	bb 1b       	sub	r27, r27
 6b2:	fd 01       	movw	r30, r26
 6b4:	0d c0       	rjmp	.+26     	; 0x6d0 <__udivmodsi4_ep>

000006b6 <__udivmodsi4_loop>:
 6b6:	aa 1f       	adc	r26, r26
 6b8:	bb 1f       	adc	r27, r27
 6ba:	ee 1f       	adc	r30, r30
 6bc:	ff 1f       	adc	r31, r31
 6be:	a2 17       	cp	r26, r18
 6c0:	b3 07       	cpc	r27, r19
 6c2:	e4 07       	cpc	r30, r20
 6c4:	f5 07       	cpc	r31, r21
 6c6:	20 f0       	brcs	.+8      	; 0x6d0 <__udivmodsi4_ep>
 6c8:	a2 1b       	sub	r26, r18
 6ca:	b3 0b       	sbc	r27, r19
 6cc:	e4 0b       	sbc	r30, r20
 6ce:	f5 0b       	sbc	r31, r21

000006d0 <__udivmodsi4_ep>:
 6d0:	66 1f       	adc	r22, r22
 6d2:	77 1f       	adc	r23, r23
 6d4:	88 1f       	adc	r24, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	1a 94       	dec	r1
 6da:	69 f7       	brne	.-38     	; 0x6b6 <__udivmodsi4_loop>
 6dc:	60 95       	com	r22
 6de:	70 95       	com	r23
 6e0:	80 95       	com	r24
 6e2:	90 95       	com	r25
 6e4:	9b 01       	movw	r18, r22
 6e6:	ac 01       	movw	r20, r24
 6e8:	bd 01       	movw	r22, r26
 6ea:	cf 01       	movw	r24, r30
 6ec:	08 95       	ret

000006ee <malloc>:
 6ee:	0f 93       	push	r16
 6f0:	1f 93       	push	r17
 6f2:	cf 93       	push	r28
 6f4:	df 93       	push	r29
 6f6:	82 30       	cpi	r24, 0x02	; 2
 6f8:	91 05       	cpc	r25, r1
 6fa:	10 f4       	brcc	.+4      	; 0x700 <malloc+0x12>
 6fc:	82 e0       	ldi	r24, 0x02	; 2
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <__flp>
 704:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <__flp+0x1>
 708:	20 e0       	ldi	r18, 0x00	; 0
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	a0 e0       	ldi	r26, 0x00	; 0
 70e:	b0 e0       	ldi	r27, 0x00	; 0
 710:	30 97       	sbiw	r30, 0x00	; 0
 712:	19 f1       	breq	.+70     	; 0x75a <malloc+0x6c>
 714:	40 81       	ld	r20, Z
 716:	51 81       	ldd	r21, Z+1	; 0x01
 718:	02 81       	ldd	r16, Z+2	; 0x02
 71a:	13 81       	ldd	r17, Z+3	; 0x03
 71c:	48 17       	cp	r20, r24
 71e:	59 07       	cpc	r21, r25
 720:	c8 f0       	brcs	.+50     	; 0x754 <malloc+0x66>
 722:	84 17       	cp	r24, r20
 724:	95 07       	cpc	r25, r21
 726:	69 f4       	brne	.+26     	; 0x742 <malloc+0x54>
 728:	10 97       	sbiw	r26, 0x00	; 0
 72a:	31 f0       	breq	.+12     	; 0x738 <malloc+0x4a>
 72c:	12 96       	adiw	r26, 0x02	; 2
 72e:	0c 93       	st	X, r16
 730:	12 97       	sbiw	r26, 0x02	; 2
 732:	13 96       	adiw	r26, 0x03	; 3
 734:	1c 93       	st	X, r17
 736:	27 c0       	rjmp	.+78     	; 0x786 <malloc+0x98>
 738:	00 93 5a 02 	sts	0x025A, r16	; 0x80025a <__flp>
 73c:	10 93 5b 02 	sts	0x025B, r17	; 0x80025b <__flp+0x1>
 740:	22 c0       	rjmp	.+68     	; 0x786 <malloc+0x98>
 742:	21 15       	cp	r18, r1
 744:	31 05       	cpc	r19, r1
 746:	19 f0       	breq	.+6      	; 0x74e <malloc+0x60>
 748:	42 17       	cp	r20, r18
 74a:	53 07       	cpc	r21, r19
 74c:	18 f4       	brcc	.+6      	; 0x754 <malloc+0x66>
 74e:	9a 01       	movw	r18, r20
 750:	bd 01       	movw	r22, r26
 752:	ef 01       	movw	r28, r30
 754:	df 01       	movw	r26, r30
 756:	f8 01       	movw	r30, r16
 758:	db cf       	rjmp	.-74     	; 0x710 <malloc+0x22>
 75a:	21 15       	cp	r18, r1
 75c:	31 05       	cpc	r19, r1
 75e:	f9 f0       	breq	.+62     	; 0x79e <malloc+0xb0>
 760:	28 1b       	sub	r18, r24
 762:	39 0b       	sbc	r19, r25
 764:	24 30       	cpi	r18, 0x04	; 4
 766:	31 05       	cpc	r19, r1
 768:	80 f4       	brcc	.+32     	; 0x78a <malloc+0x9c>
 76a:	8a 81       	ldd	r24, Y+2	; 0x02
 76c:	9b 81       	ldd	r25, Y+3	; 0x03
 76e:	61 15       	cp	r22, r1
 770:	71 05       	cpc	r23, r1
 772:	21 f0       	breq	.+8      	; 0x77c <malloc+0x8e>
 774:	fb 01       	movw	r30, r22
 776:	93 83       	std	Z+3, r25	; 0x03
 778:	82 83       	std	Z+2, r24	; 0x02
 77a:	04 c0       	rjmp	.+8      	; 0x784 <malloc+0x96>
 77c:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <__flp+0x1>
 780:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <__flp>
 784:	fe 01       	movw	r30, r28
 786:	32 96       	adiw	r30, 0x02	; 2
 788:	44 c0       	rjmp	.+136    	; 0x812 <malloc+0x124>
 78a:	fe 01       	movw	r30, r28
 78c:	e2 0f       	add	r30, r18
 78e:	f3 1f       	adc	r31, r19
 790:	81 93       	st	Z+, r24
 792:	91 93       	st	Z+, r25
 794:	22 50       	subi	r18, 0x02	; 2
 796:	31 09       	sbc	r19, r1
 798:	39 83       	std	Y+1, r19	; 0x01
 79a:	28 83       	st	Y, r18
 79c:	3a c0       	rjmp	.+116    	; 0x812 <malloc+0x124>
 79e:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <__brkval>
 7a2:	30 91 59 02 	lds	r19, 0x0259	; 0x800259 <__brkval+0x1>
 7a6:	23 2b       	or	r18, r19
 7a8:	41 f4       	brne	.+16     	; 0x7ba <malloc+0xcc>
 7aa:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 7ae:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 7b2:	30 93 59 02 	sts	0x0259, r19	; 0x800259 <__brkval+0x1>
 7b6:	20 93 58 02 	sts	0x0258, r18	; 0x800258 <__brkval>
 7ba:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 7be:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 7c2:	21 15       	cp	r18, r1
 7c4:	31 05       	cpc	r19, r1
 7c6:	41 f4       	brne	.+16     	; 0x7d8 <malloc+0xea>
 7c8:	2d b7       	in	r18, 0x3d	; 61
 7ca:	3e b7       	in	r19, 0x3e	; 62
 7cc:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 7d0:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 7d4:	24 1b       	sub	r18, r20
 7d6:	35 0b       	sbc	r19, r21
 7d8:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <__brkval>
 7dc:	f0 91 59 02 	lds	r31, 0x0259	; 0x800259 <__brkval+0x1>
 7e0:	e2 17       	cp	r30, r18
 7e2:	f3 07       	cpc	r31, r19
 7e4:	a0 f4       	brcc	.+40     	; 0x80e <malloc+0x120>
 7e6:	2e 1b       	sub	r18, r30
 7e8:	3f 0b       	sbc	r19, r31
 7ea:	28 17       	cp	r18, r24
 7ec:	39 07       	cpc	r19, r25
 7ee:	78 f0       	brcs	.+30     	; 0x80e <malloc+0x120>
 7f0:	ac 01       	movw	r20, r24
 7f2:	4e 5f       	subi	r20, 0xFE	; 254
 7f4:	5f 4f       	sbci	r21, 0xFF	; 255
 7f6:	24 17       	cp	r18, r20
 7f8:	35 07       	cpc	r19, r21
 7fa:	48 f0       	brcs	.+18     	; 0x80e <malloc+0x120>
 7fc:	4e 0f       	add	r20, r30
 7fe:	5f 1f       	adc	r21, r31
 800:	50 93 59 02 	sts	0x0259, r21	; 0x800259 <__brkval+0x1>
 804:	40 93 58 02 	sts	0x0258, r20	; 0x800258 <__brkval>
 808:	81 93       	st	Z+, r24
 80a:	91 93       	st	Z+, r25
 80c:	02 c0       	rjmp	.+4      	; 0x812 <malloc+0x124>
 80e:	e0 e0       	ldi	r30, 0x00	; 0
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	cf 01       	movw	r24, r30
 814:	df 91       	pop	r29
 816:	cf 91       	pop	r28
 818:	1f 91       	pop	r17
 81a:	0f 91       	pop	r16
 81c:	08 95       	ret

0000081e <free>:
 81e:	cf 93       	push	r28
 820:	df 93       	push	r29
 822:	00 97       	sbiw	r24, 0x00	; 0
 824:	09 f4       	brne	.+2      	; 0x828 <free+0xa>
 826:	81 c0       	rjmp	.+258    	; 0x92a <free+0x10c>
 828:	fc 01       	movw	r30, r24
 82a:	32 97       	sbiw	r30, 0x02	; 2
 82c:	13 82       	std	Z+3, r1	; 0x03
 82e:	12 82       	std	Z+2, r1	; 0x02
 830:	a0 91 5a 02 	lds	r26, 0x025A	; 0x80025a <__flp>
 834:	b0 91 5b 02 	lds	r27, 0x025B	; 0x80025b <__flp+0x1>
 838:	10 97       	sbiw	r26, 0x00	; 0
 83a:	81 f4       	brne	.+32     	; 0x85c <free+0x3e>
 83c:	20 81       	ld	r18, Z
 83e:	31 81       	ldd	r19, Z+1	; 0x01
 840:	82 0f       	add	r24, r18
 842:	93 1f       	adc	r25, r19
 844:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <__brkval>
 848:	30 91 59 02 	lds	r19, 0x0259	; 0x800259 <__brkval+0x1>
 84c:	28 17       	cp	r18, r24
 84e:	39 07       	cpc	r19, r25
 850:	51 f5       	brne	.+84     	; 0x8a6 <free+0x88>
 852:	f0 93 59 02 	sts	0x0259, r31	; 0x800259 <__brkval+0x1>
 856:	e0 93 58 02 	sts	0x0258, r30	; 0x800258 <__brkval>
 85a:	67 c0       	rjmp	.+206    	; 0x92a <free+0x10c>
 85c:	ed 01       	movw	r28, r26
 85e:	20 e0       	ldi	r18, 0x00	; 0
 860:	30 e0       	ldi	r19, 0x00	; 0
 862:	ce 17       	cp	r28, r30
 864:	df 07       	cpc	r29, r31
 866:	40 f4       	brcc	.+16     	; 0x878 <free+0x5a>
 868:	4a 81       	ldd	r20, Y+2	; 0x02
 86a:	5b 81       	ldd	r21, Y+3	; 0x03
 86c:	9e 01       	movw	r18, r28
 86e:	41 15       	cp	r20, r1
 870:	51 05       	cpc	r21, r1
 872:	f1 f0       	breq	.+60     	; 0x8b0 <free+0x92>
 874:	ea 01       	movw	r28, r20
 876:	f5 cf       	rjmp	.-22     	; 0x862 <free+0x44>
 878:	d3 83       	std	Z+3, r29	; 0x03
 87a:	c2 83       	std	Z+2, r28	; 0x02
 87c:	40 81       	ld	r20, Z
 87e:	51 81       	ldd	r21, Z+1	; 0x01
 880:	84 0f       	add	r24, r20
 882:	95 1f       	adc	r25, r21
 884:	c8 17       	cp	r28, r24
 886:	d9 07       	cpc	r29, r25
 888:	59 f4       	brne	.+22     	; 0x8a0 <free+0x82>
 88a:	88 81       	ld	r24, Y
 88c:	99 81       	ldd	r25, Y+1	; 0x01
 88e:	84 0f       	add	r24, r20
 890:	95 1f       	adc	r25, r21
 892:	02 96       	adiw	r24, 0x02	; 2
 894:	91 83       	std	Z+1, r25	; 0x01
 896:	80 83       	st	Z, r24
 898:	8a 81       	ldd	r24, Y+2	; 0x02
 89a:	9b 81       	ldd	r25, Y+3	; 0x03
 89c:	93 83       	std	Z+3, r25	; 0x03
 89e:	82 83       	std	Z+2, r24	; 0x02
 8a0:	21 15       	cp	r18, r1
 8a2:	31 05       	cpc	r19, r1
 8a4:	29 f4       	brne	.+10     	; 0x8b0 <free+0x92>
 8a6:	f0 93 5b 02 	sts	0x025B, r31	; 0x80025b <__flp+0x1>
 8aa:	e0 93 5a 02 	sts	0x025A, r30	; 0x80025a <__flp>
 8ae:	3d c0       	rjmp	.+122    	; 0x92a <free+0x10c>
 8b0:	e9 01       	movw	r28, r18
 8b2:	fb 83       	std	Y+3, r31	; 0x03
 8b4:	ea 83       	std	Y+2, r30	; 0x02
 8b6:	49 91       	ld	r20, Y+
 8b8:	59 91       	ld	r21, Y+
 8ba:	c4 0f       	add	r28, r20
 8bc:	d5 1f       	adc	r29, r21
 8be:	ec 17       	cp	r30, r28
 8c0:	fd 07       	cpc	r31, r29
 8c2:	61 f4       	brne	.+24     	; 0x8dc <free+0xbe>
 8c4:	80 81       	ld	r24, Z
 8c6:	91 81       	ldd	r25, Z+1	; 0x01
 8c8:	84 0f       	add	r24, r20
 8ca:	95 1f       	adc	r25, r21
 8cc:	02 96       	adiw	r24, 0x02	; 2
 8ce:	e9 01       	movw	r28, r18
 8d0:	99 83       	std	Y+1, r25	; 0x01
 8d2:	88 83       	st	Y, r24
 8d4:	82 81       	ldd	r24, Z+2	; 0x02
 8d6:	93 81       	ldd	r25, Z+3	; 0x03
 8d8:	9b 83       	std	Y+3, r25	; 0x03
 8da:	8a 83       	std	Y+2, r24	; 0x02
 8dc:	e0 e0       	ldi	r30, 0x00	; 0
 8de:	f0 e0       	ldi	r31, 0x00	; 0
 8e0:	12 96       	adiw	r26, 0x02	; 2
 8e2:	8d 91       	ld	r24, X+
 8e4:	9c 91       	ld	r25, X
 8e6:	13 97       	sbiw	r26, 0x03	; 3
 8e8:	00 97       	sbiw	r24, 0x00	; 0
 8ea:	19 f0       	breq	.+6      	; 0x8f2 <free+0xd4>
 8ec:	fd 01       	movw	r30, r26
 8ee:	dc 01       	movw	r26, r24
 8f0:	f7 cf       	rjmp	.-18     	; 0x8e0 <free+0xc2>
 8f2:	8d 91       	ld	r24, X+
 8f4:	9c 91       	ld	r25, X
 8f6:	11 97       	sbiw	r26, 0x01	; 1
 8f8:	9d 01       	movw	r18, r26
 8fa:	2e 5f       	subi	r18, 0xFE	; 254
 8fc:	3f 4f       	sbci	r19, 0xFF	; 255
 8fe:	82 0f       	add	r24, r18
 900:	93 1f       	adc	r25, r19
 902:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <__brkval>
 906:	30 91 59 02 	lds	r19, 0x0259	; 0x800259 <__brkval+0x1>
 90a:	28 17       	cp	r18, r24
 90c:	39 07       	cpc	r19, r25
 90e:	69 f4       	brne	.+26     	; 0x92a <free+0x10c>
 910:	30 97       	sbiw	r30, 0x00	; 0
 912:	29 f4       	brne	.+10     	; 0x91e <free+0x100>
 914:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <__flp+0x1>
 918:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <__flp>
 91c:	02 c0       	rjmp	.+4      	; 0x922 <free+0x104>
 91e:	13 82       	std	Z+3, r1	; 0x03
 920:	12 82       	std	Z+2, r1	; 0x02
 922:	b0 93 59 02 	sts	0x0259, r27	; 0x800259 <__brkval+0x1>
 926:	a0 93 58 02 	sts	0x0258, r26	; 0x800258 <__brkval>
 92a:	df 91       	pop	r29
 92c:	cf 91       	pop	r28
 92e:	08 95       	ret

00000930 <realloc>:
 930:	6f 92       	push	r6
 932:	7f 92       	push	r7
 934:	8f 92       	push	r8
 936:	9f 92       	push	r9
 938:	af 92       	push	r10
 93a:	bf 92       	push	r11
 93c:	cf 92       	push	r12
 93e:	df 92       	push	r13
 940:	ef 92       	push	r14
 942:	ff 92       	push	r15
 944:	0f 93       	push	r16
 946:	1f 93       	push	r17
 948:	cf 93       	push	r28
 94a:	df 93       	push	r29
 94c:	00 97       	sbiw	r24, 0x00	; 0
 94e:	81 f4       	brne	.+32     	; 0x970 <realloc+0x40>
 950:	cb 01       	movw	r24, r22
 952:	df 91       	pop	r29
 954:	cf 91       	pop	r28
 956:	1f 91       	pop	r17
 958:	0f 91       	pop	r16
 95a:	ff 90       	pop	r15
 95c:	ef 90       	pop	r14
 95e:	df 90       	pop	r13
 960:	cf 90       	pop	r12
 962:	bf 90       	pop	r11
 964:	af 90       	pop	r10
 966:	9f 90       	pop	r9
 968:	8f 90       	pop	r8
 96a:	7f 90       	pop	r7
 96c:	6f 90       	pop	r6
 96e:	bf ce       	rjmp	.-642    	; 0x6ee <malloc>
 970:	fc 01       	movw	r30, r24
 972:	e6 0f       	add	r30, r22
 974:	f7 1f       	adc	r31, r23
 976:	9c 01       	movw	r18, r24
 978:	22 50       	subi	r18, 0x02	; 2
 97a:	31 09       	sbc	r19, r1
 97c:	e2 17       	cp	r30, r18
 97e:	f3 07       	cpc	r31, r19
 980:	08 f4       	brcc	.+2      	; 0x984 <realloc+0x54>
 982:	a5 c0       	rjmp	.+330    	; 0xace <realloc+0x19e>
 984:	ec 01       	movw	r28, r24
 986:	d9 01       	movw	r26, r18
 988:	0d 91       	ld	r16, X+
 98a:	1c 91       	ld	r17, X
 98c:	11 97       	sbiw	r26, 0x01	; 1
 98e:	06 17       	cp	r16, r22
 990:	17 07       	cpc	r17, r23
 992:	a8 f0       	brcs	.+42     	; 0x9be <realloc+0x8e>
 994:	05 30       	cpi	r16, 0x05	; 5
 996:	11 05       	cpc	r17, r1
 998:	08 f4       	brcc	.+2      	; 0x99c <realloc+0x6c>
 99a:	97 c0       	rjmp	.+302    	; 0xaca <realloc+0x19a>
 99c:	c8 01       	movw	r24, r16
 99e:	04 97       	sbiw	r24, 0x04	; 4
 9a0:	86 17       	cp	r24, r22
 9a2:	97 07       	cpc	r25, r23
 9a4:	08 f4       	brcc	.+2      	; 0x9a8 <realloc+0x78>
 9a6:	91 c0       	rjmp	.+290    	; 0xaca <realloc+0x19a>
 9a8:	02 50       	subi	r16, 0x02	; 2
 9aa:	11 09       	sbc	r17, r1
 9ac:	06 1b       	sub	r16, r22
 9ae:	17 0b       	sbc	r17, r23
 9b0:	01 93       	st	Z+, r16
 9b2:	11 93       	st	Z+, r17
 9b4:	6d 93       	st	X+, r22
 9b6:	7c 93       	st	X, r23
 9b8:	cf 01       	movw	r24, r30
 9ba:	31 df       	rcall	.-414    	; 0x81e <free>
 9bc:	86 c0       	rjmp	.+268    	; 0xaca <realloc+0x19a>
 9be:	5b 01       	movw	r10, r22
 9c0:	a0 1a       	sub	r10, r16
 9c2:	b1 0a       	sbc	r11, r17
 9c4:	4c 01       	movw	r8, r24
 9c6:	80 0e       	add	r8, r16
 9c8:	91 1e       	adc	r9, r17
 9ca:	a0 91 5a 02 	lds	r26, 0x025A	; 0x80025a <__flp>
 9ce:	b0 91 5b 02 	lds	r27, 0x025B	; 0x80025b <__flp+0x1>
 9d2:	61 2c       	mov	r6, r1
 9d4:	71 2c       	mov	r7, r1
 9d6:	e1 2c       	mov	r14, r1
 9d8:	f1 2c       	mov	r15, r1
 9da:	10 97       	sbiw	r26, 0x00	; 0
 9dc:	09 f4       	brne	.+2      	; 0x9e0 <realloc+0xb0>
 9de:	46 c0       	rjmp	.+140    	; 0xa6c <realloc+0x13c>
 9e0:	8d 91       	ld	r24, X+
 9e2:	9c 91       	ld	r25, X
 9e4:	11 97       	sbiw	r26, 0x01	; 1
 9e6:	a8 15       	cp	r26, r8
 9e8:	b9 05       	cpc	r27, r9
 9ea:	b1 f5       	brne	.+108    	; 0xa58 <realloc+0x128>
 9ec:	6c 01       	movw	r12, r24
 9ee:	42 e0       	ldi	r20, 0x02	; 2
 9f0:	c4 0e       	add	r12, r20
 9f2:	d1 1c       	adc	r13, r1
 9f4:	ca 14       	cp	r12, r10
 9f6:	db 04       	cpc	r13, r11
 9f8:	78 f1       	brcs	.+94     	; 0xa58 <realloc+0x128>
 9fa:	4c 01       	movw	r8, r24
 9fc:	8a 18       	sub	r8, r10
 9fe:	9b 08       	sbc	r9, r11
 a00:	64 01       	movw	r12, r8
 a02:	42 e0       	ldi	r20, 0x02	; 2
 a04:	c4 0e       	add	r12, r20
 a06:	d1 1c       	adc	r13, r1
 a08:	12 96       	adiw	r26, 0x02	; 2
 a0a:	bc 90       	ld	r11, X
 a0c:	12 97       	sbiw	r26, 0x02	; 2
 a0e:	13 96       	adiw	r26, 0x03	; 3
 a10:	ac 91       	ld	r26, X
 a12:	b5 e0       	ldi	r27, 0x05	; 5
 a14:	cb 16       	cp	r12, r27
 a16:	d1 04       	cpc	r13, r1
 a18:	40 f0       	brcs	.+16     	; 0xa2a <realloc+0xfa>
 a1a:	b2 82       	std	Z+2, r11	; 0x02
 a1c:	a3 83       	std	Z+3, r26	; 0x03
 a1e:	91 82       	std	Z+1, r9	; 0x01
 a20:	80 82       	st	Z, r8
 a22:	d9 01       	movw	r26, r18
 a24:	6d 93       	st	X+, r22
 a26:	7c 93       	st	X, r23
 a28:	09 c0       	rjmp	.+18     	; 0xa3c <realloc+0x10c>
 a2a:	0e 5f       	subi	r16, 0xFE	; 254
 a2c:	1f 4f       	sbci	r17, 0xFF	; 255
 a2e:	80 0f       	add	r24, r16
 a30:	91 1f       	adc	r25, r17
 a32:	f9 01       	movw	r30, r18
 a34:	91 83       	std	Z+1, r25	; 0x01
 a36:	80 83       	st	Z, r24
 a38:	eb 2d       	mov	r30, r11
 a3a:	fa 2f       	mov	r31, r26
 a3c:	e1 14       	cp	r14, r1
 a3e:	f1 04       	cpc	r15, r1
 a40:	31 f0       	breq	.+12     	; 0xa4e <realloc+0x11e>
 a42:	d7 01       	movw	r26, r14
 a44:	13 96       	adiw	r26, 0x03	; 3
 a46:	fc 93       	st	X, r31
 a48:	ee 93       	st	-X, r30
 a4a:	12 97       	sbiw	r26, 0x02	; 2
 a4c:	3e c0       	rjmp	.+124    	; 0xaca <realloc+0x19a>
 a4e:	f0 93 5b 02 	sts	0x025B, r31	; 0x80025b <__flp+0x1>
 a52:	e0 93 5a 02 	sts	0x025A, r30	; 0x80025a <__flp>
 a56:	39 c0       	rjmp	.+114    	; 0xaca <realloc+0x19a>
 a58:	68 16       	cp	r6, r24
 a5a:	79 06       	cpc	r7, r25
 a5c:	08 f4       	brcc	.+2      	; 0xa60 <realloc+0x130>
 a5e:	3c 01       	movw	r6, r24
 a60:	7d 01       	movw	r14, r26
 a62:	12 96       	adiw	r26, 0x02	; 2
 a64:	0d 90       	ld	r0, X+
 a66:	bc 91       	ld	r27, X
 a68:	a0 2d       	mov	r26, r0
 a6a:	b7 cf       	rjmp	.-146    	; 0x9da <realloc+0xaa>
 a6c:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <__brkval>
 a70:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <__brkval+0x1>
 a74:	88 16       	cp	r8, r24
 a76:	99 06       	cpc	r9, r25
 a78:	e1 f4       	brne	.+56     	; 0xab2 <realloc+0x182>
 a7a:	66 16       	cp	r6, r22
 a7c:	77 06       	cpc	r7, r23
 a7e:	c8 f4       	brcc	.+50     	; 0xab2 <realloc+0x182>
 a80:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 a84:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 a88:	00 97       	sbiw	r24, 0x00	; 0
 a8a:	41 f4       	brne	.+16     	; 0xa9c <realloc+0x16c>
 a8c:	8d b7       	in	r24, 0x3d	; 61
 a8e:	9e b7       	in	r25, 0x3e	; 62
 a90:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 a94:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 a98:	84 1b       	sub	r24, r20
 a9a:	95 0b       	sbc	r25, r21
 a9c:	e8 17       	cp	r30, r24
 a9e:	f9 07       	cpc	r31, r25
 aa0:	b0 f4       	brcc	.+44     	; 0xace <realloc+0x19e>
 aa2:	f0 93 59 02 	sts	0x0259, r31	; 0x800259 <__brkval+0x1>
 aa6:	e0 93 58 02 	sts	0x0258, r30	; 0x800258 <__brkval>
 aaa:	f9 01       	movw	r30, r18
 aac:	71 83       	std	Z+1, r23	; 0x01
 aae:	60 83       	st	Z, r22
 ab0:	0c c0       	rjmp	.+24     	; 0xaca <realloc+0x19a>
 ab2:	cb 01       	movw	r24, r22
 ab4:	1c de       	rcall	.-968    	; 0x6ee <malloc>
 ab6:	7c 01       	movw	r14, r24
 ab8:	00 97       	sbiw	r24, 0x00	; 0
 aba:	49 f0       	breq	.+18     	; 0xace <realloc+0x19e>
 abc:	a8 01       	movw	r20, r16
 abe:	be 01       	movw	r22, r28
 ac0:	17 d0       	rcall	.+46     	; 0xaf0 <memcpy>
 ac2:	ce 01       	movw	r24, r28
 ac4:	ac de       	rcall	.-680    	; 0x81e <free>
 ac6:	c7 01       	movw	r24, r14
 ac8:	04 c0       	rjmp	.+8      	; 0xad2 <realloc+0x1a2>
 aca:	ce 01       	movw	r24, r28
 acc:	02 c0       	rjmp	.+4      	; 0xad2 <realloc+0x1a2>
 ace:	80 e0       	ldi	r24, 0x00	; 0
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	df 91       	pop	r29
 ad4:	cf 91       	pop	r28
 ad6:	1f 91       	pop	r17
 ad8:	0f 91       	pop	r16
 ada:	ff 90       	pop	r15
 adc:	ef 90       	pop	r14
 ade:	df 90       	pop	r13
 ae0:	cf 90       	pop	r12
 ae2:	bf 90       	pop	r11
 ae4:	af 90       	pop	r10
 ae6:	9f 90       	pop	r9
 ae8:	8f 90       	pop	r8
 aea:	7f 90       	pop	r7
 aec:	6f 90       	pop	r6
 aee:	08 95       	ret

00000af0 <memcpy>:
 af0:	fb 01       	movw	r30, r22
 af2:	dc 01       	movw	r26, r24
 af4:	02 c0       	rjmp	.+4      	; 0xafa <memcpy+0xa>
 af6:	01 90       	ld	r0, Z+
 af8:	0d 92       	st	X+, r0
 afa:	41 50       	subi	r20, 0x01	; 1
 afc:	50 40       	sbci	r21, 0x00	; 0
 afe:	d8 f7       	brcc	.-10     	; 0xaf6 <memcpy+0x6>
 b00:	08 95       	ret

00000b02 <_exit>:
 b02:	f8 94       	cli

00000b04 <__stop_program>:
 b04:	ff cf       	rjmp	.-2      	; 0xb04 <__stop_program>
